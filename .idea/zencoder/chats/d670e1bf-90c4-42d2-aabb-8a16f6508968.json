{
    "checksum": "83bd93e6bc4500f9ee4119536789561e303dbcd319435cad2bb70b730d4efb6a",
    "data": {
    "id": "d670e1bf-90c4-42d2-aabb-8a16f6508968",
    "createdAt": 1753559993493,
    "updatedAt": 1753560483371,
    "title": "Schema Comparison Bug Fix",
    "messages": [
        {
            "id": "5a622e57-9319-4524-82ce-de5b3a96f2b6",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "\"Continue working on schema comparison performance optimization. Read development-guidelines.md and ai-behavior-enforcement.md first."
                },
                {
                    "type": "text",
                    "text": "URGENT BUG TO FIX: There's a critical error in Admin.pm line 1804: 'Can't use string as HASH ref while strict refs in use'. This suggests that $config is being returned as a JSON string instead of a parsed hash reference from the get_all_database_configs method."
                },
                {
                    "type": "text",
                    "text": "CURRENT CONTEXT: The schema_compare method has been updated to load all databases from JSON config, and the missing support methods have been added, but there's a data type issue causing the error. The get_all_database_configs method is likely returning a string instead of a hash reference."
                },
                {
                    "type": "text",
                    "text": "FILES BEING WORKED ON:"
                },
                {
                    "type": "text",
                    "text": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm (needs line 1804 bug fix)"
                },
                {
                    "type": "text",
                    "text": "/home/shanta/PycharmProjects/comserv2/Comserv/root/admin/schema_compare.tt (needs template updates)"
                },
                {
                    "type": "text",
                    "text": "NEXT STEPS NEEDED:"
                },
                {
                    "type": "text",
                    "text": "CRITICAL: Debug and fix the hash reference error on line 1804 in Admin.pm"
                },
                {
                    "type": "text",
                    "text": "Check the get_all_database_configs method return value - ensure it returns a hash ref, not a string"
                },
                {
                    "type": "text",
                    "text": "Test the schema_compare method after the fix"
                },
                {
                    "type": "text",
                    "text": "Update schema_compare.tt template to display all databases as collapsible containers"
                },
                {
                    "type": "text",
                    "text": "Add AJAX functionality to load comparison data when containers are opened"
                },
                {
                    "type": "text",
                    "text": "Test the complete performance improvement"
                },
                {
                    "type": "text",
                    "text": "TECHNICAL DETAILS:"
                },
                {
                    "type": "text",
                    "text": "The error occurs when trying to access $config as a hash reference"
                },
                {
                    "type": "text",
                    "text": "This suggests get_all_database_configs is returning a JSON string instead of parsed data"
                },
                {
                    "type": "text",
                    "text": "Line 1804 is likely in the foreach loop processing database configurations"
                },
                {
                    "type": "text",
                    "text": "The user wants ALL databases from db_config.json to display as closed collapsible containers\""
                },
                {
                    "type": "text",
                    "text": "📚 REQUIRED READING FOR NEXT AI:"
                },
                {
                    "type": "text",
                    "text": ".zencoder/rules/development-guidelines.md"
                },
                {
                    "type": "text",
                    "text": ".zencoder/rules/ai-behavior-enforcement.md"
                },
                {
                    "type": "text",
                    "text": ".zencoder/rules/template-standards.md"
                },
                {
                    "type": "text",
                    "text": ".zencoder/rules/database-standards.md"
                },
                {
                    "type": "text",
                    "text": ".zencoder/rules/debugging-protocols.md"
                },
                {
                    "type": "text",
                    "text": "✅ DOCUMENTATION UPDATED: Schema comparison backend methods added but critical hash reference bug needs immediate fixing before functionality can be tested."
                },
                {
                    "type": "text",
                    "text": "remember it all used to work in the last commit. this is a result of changes being made without respect for existing function."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                    "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "\npackage Comserv::Controller::Admin;\n\n\nuse Moose;\nuse namespace::autoclean;\nuse Comserv::Util::Logging;\nuse Data::Dumper;\nuse JSON qw(decode_json);\nuse Try::Tiny;\nuse DBI;\nuse MIME::Base64;\nuse File::Slurp qw(read_file write_file);\nuse File::Basename qw(dirname);\nuse File::Path qw(make_path);\nuse File::Copy;\nuse File::Spec;\nuse Digest::SHA qw(sha256_hex);\nuse File::Find;\nuse Module::Load;\nuse Cwd;\n\nBEGIN { extends 'Catalyst::Controller'; }\n\n# Returns an instance of the logging utility\nsub logging {\n    my ($self) = @_;\n    return Comserv::Util::Logging->instance();\n}\n\n# Begin method to check if the user has admin role\nsub begin : Private {\n    my ($self, $c) = @_;\n\n     $c->stash->{is_admin} = 1;\n    # Add detailed logging\n    my $username = ($c->user_exists && $c->user) ? $c->user->username : ($c->session->{username} || 'Guest');\n    $username = 'Shanta';\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'begin',\n        \"Admin controller begin method called by user: $username\");\n    \n    # Initialize debug_msg array if it doesn't exist and debug mode is enabled\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        \n        # Add the debug message to the array\n        push @{$c->stash->{debug_msg}}, \"Admin controller loaded successfully\";\n    }\n    \n    return 1; # Allow the request to proceed\n}\n\n# Base method for chained actions\nsub base :Chained('/') :PathPart('admin') :CaptureArgs(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Starting Admin base action\");\n    \n    # Common setup for all admin pages\n    $c->stash(section => 'admin');\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access granted to user Shanta (bypass role check)\");\n        return 1;\n    }\n    \n    # Check if the user has admin role\n    my $has_admin_role = 1;\n    \n    # First check if user exists\n    if ($c->user_exists) {\n        # Get roles from session\n        my $roles = $c->session->{roles};\n\n        # Log the roles for debugging\n        my $roles_debug = 'none';\n        if (defined $roles) {\n            if (ref($roles) eq 'ARRAY') {\n                $roles_debug = join(', ', @$roles);\n                \n                # Check if 'admin' is in the roles array\n                foreach my $role (@$roles) {\n                    if (lc($role) eq 'admin') {\n                        $has_admin_role = 1;\n                        last;\n                    }\n                }\n            } elsif (!ref($roles)) {\n                $roles_debug = $roles;\n                # Check if roles string contains 'admin'\n                if ($roles =~ /\\badmin\\b/i) {\n                    $has_admin_role = 1;\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access check - User: \" . $c->session->{username} . \", Roles: $roles_debug, Has admin: \" . ($has_admin_role ? 'Yes' : 'No'));\n    }\n    $has_admin_role = 1;\n    unless ($has_admin_role) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'base', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return 0;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Completed Admin base action\");\n     $has_admin_role = 1;\n\n    return 1;\n}\n\n# Admin dashboard\nsub index :Path :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Starting Admin index action\");\n    \n    # Debug session information\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Session debug - Username: \" . ($c->session->{username} || 'none') . \n        \", User ID: \" . ($c->session->{user_id} || 'none') . \n        \", Roles: \" . (ref($c->session->{roles}) eq 'ARRAY' ? join(',', @{$c->session->{roles}}) : ($c->session->{roles} || 'none')));\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"user_exists: \" . ($c->user_exists ? 'true' : 'false') . \n        \", check_user_roles('admin'): \" . ($c->check_user_roles('admin') ? 'true' : 'false'));\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'index', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system stats\n    my $stats = $self->get_system_stats($c);\n    \n    # Get recent user activity\n    my $recent_activity = $self->get_recent_activity($c);\n    \n    # Get system notifications\n    my $notifications = $self->get_system_notifications($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller index view - Template: admin/index.tt\";\n    }\n    \n    # Check if user has CSC backup access\n    my $has_csc_access = $self->check_csc_access($c);\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/index.tt',\n        stats => $stats,\n        recent_activity => $recent_activity,\n        notifications => $notifications,\n        is_admin => 1,  # User has already passed admin check to get here\n        has_csc_access => $has_csc_access\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Completed Admin index action\");\n}\n\n# Get system statistics for the admin dashboard\nsub get_system_stats {\n    my ($self, $c) = @_;\n    \n    my $stats = {\n        user_count => 0,\n        content_count => 0,\n        comment_count => 0,\n        disk_usage => '0 MB',\n        db_size => '0 MB',\n        uptime => '0 days',\n    };\n    \n    # Try to get user count\n    eval {\n        $stats->{user_count} = $c->model('DBEncy::User')->count();\n    };\n    \n    # Try to get content count (pages, posts, etc.)\n    eval {\n        $stats->{content_count} = $c->model('DBEncy::Content')->count();\n    };\n    \n    # Try to get comment count\n    eval {\n        $stats->{comment_count} = $c->model('DBEncy::Comment')->count();\n    };\n    \n    # Get disk usage (this is a simplified example)\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/) {\n            $stats->{disk_usage} = \"$1%\";\n        }\n    };\n    \n    # Get database size (this would need to be customized for your DB)\n    eval {\n        # This is just a placeholder - you'd need to implement actual DB size checking\n        $stats->{db_size} = \"Unknown\";\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        if ($uptime_output =~ /up\\s+(.*?),\\s+\\d+\\s+users/) {\n            $stats->{uptime} = $1;\n        }\n    };\n    \n    return $stats;\n}\n\n# Get recent user activity for the admin dashboard\nsub get_recent_activity {\n    my ($self, $c) = @_;\n    \n    my @activity = ();\n    \n    # Try to get recent logins\n    eval {\n        my @logins = $c->model('DBEncy::UserLogin')->search(\n            {},\n            {\n                order_by => { -desc => 'login_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $login (@logins) {\n            push @activity, {\n                type => 'login',\n                user => $login->user->username,\n                time => $login->login_time,\n                details => $login->ip_address\n            };\n        }\n    };\n    \n    # Try to get recent content changes\n    eval {\n        my @changes = $c->model('DBEncy::ContentHistory')->search(\n            {},\n            {\n                order_by => { -desc => 'change_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $change (@changes) {\n            push @activity, {\n                type => 'content',\n                user => $change->user->username,\n                time => $change->change_time,\n                details => \"Updated \" . $change->content->title\n            };\n        }\n    };\n    \n    # Sort all activity by time (most recent first)\n    @activity = sort { $b->{time} cmp $a->{time} } @activity;\n    \n    # Limit to 10 items\n    if (scalar(@activity) > 10) {\n        @activity = @activity[0..9];\n    }\n    \n    return \\@activity;\n}\n\n# Get system notifications for the admin dashboard\nsub get_system_notifications {\n    my ($self, $c) = @_;\n    \n    my @notifications = ();\n    \n    # Check for pending user registrations\n    eval {\n        my $pending_count = $c->model('DBEncy::User')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'warning',\n                message => \"$pending_count pending user registration(s) require approval\",\n                link => $c->uri_for('/admin/users', { filter => 'pending' })\n            };\n        }\n    };\n    \n    # Check for low disk space\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/ && $1 > 90) {\n            push @notifications, {\n                type => 'danger',\n                message => \"Disk space is critically low ($1% used)\",\n                link => undef\n            };\n        }\n        elsif ($df_output =~ /(\\d+)%/ && $1 > 80) {\n            push @notifications, {\n                type => 'warning',\n                message => \"Disk space is running low ($1% used)\",\n                link => undef\n            };\n        }\n    };\n    \n    # Check for pending comments\n    eval {\n        my $pending_count = $c->model('DBEncy::Comment')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'info',\n                message => \"$pending_count pending comment(s) require moderation\",\n                link => $c->uri_for('/admin/comments', { filter => 'pending' })\n            };\n        }\n    };\n    \n    return \\@notifications;\n}\n\n# Admin users management\nsub users :Path('/admin/users') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Starting users action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'users', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $users_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'active') {\n        $search_conditions->{status} = 'active';\n    }\n    elsif ($filter eq 'pending') {\n        $search_conditions->{status} = 'pending';\n    }\n    elsif ($filter eq 'disabled') {\n        $search_conditions->{status} = 'disabled';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { username => { 'like', \"%$search%\" } },\n            { email => { 'like', \"%$search%\" } },\n            { first_name => { 'like', \"%$search%\" } },\n            { last_name => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get users from database\n    my $users_rs = $c->model('DBEncy::User')->search(\n        $search_conditions,\n        {\n            order_by => { -asc => 'username' },\n            page => $page,\n            rows => $users_per_page\n        }\n    );\n    \n    # Get user roles\n    my %user_roles = ();\n    eval {\n        my @user_role_records = $c->model('DBEncy::UserRole')->search({});\n        foreach my $record (@user_role_records) {\n            push @{$user_roles{$record->user_id}}, $record->role->role;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller users view - Template: admin/users.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"User count: \" . $users_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/users.tt',\n        users => [ $users_rs->all ],\n        user_roles => \\%user_roles,\n        filter => $filter,\n        search => $search,\n        pager => $users_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Completed users action\");\n}\n\n# Admin content management\nsub content :Path('/admin/content') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Starting content action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'content', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $items_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'published') {\n        $search_conditions->{status} = 'published';\n    }\n    elsif ($filter eq 'draft') {\n        $search_conditions->{status} = 'draft';\n    }\n    elsif ($filter eq 'archived') {\n        $search_conditions->{status} = 'archived';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { title => { 'like', \"%$search%\" } },\n            { content => { 'like', \"%$search%\" } },\n            { 'author.username' => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get content from database\n    my $content_rs = $c->model('DBEncy::Content')->search(\n        $search_conditions,\n        {\n            join => 'author',\n            order_by => { -desc => 'created_at' },\n            page => $page,\n            rows => $items_per_page\n        }\n    );\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller content view - Template: admin/content.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"Content count: \" . $content_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/content.tt',\n        content_items => [ $content_rs->all ],\n        filter => $filter,\n        search => $search,\n        pager => $content_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Completed content action\");\n}\n\n# Admin settings\nsub settings :Path('/admin/settings') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Starting settings action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Handle form submission\n    if ($c->req->method eq 'POST') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n            \"Processing settings form submission\");\n        \n        # Get form parameters\n        my $site_name = $c->req->param('site_name');\n        my $site_description = $c->req->param('site_description');\n        my $admin_email = $c->req->param('admin_email');\n        my $items_per_page = $c->req->param('items_per_page');\n        my $allow_comments = $c->req->param('allow_comments') ? 1 : 0;\n        my $moderate_comments = $c->req->param('moderate_comments') ? 1 : 0;\n        my $theme = $c->req->param('theme');\n        \n        # Validate inputs\n        my $errors = {};\n        \n        unless ($site_name) {\n            $errors->{site_name} = \"Site name is required\";\n        }\n        \n        unless ($admin_email && $admin_email =~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) {\n            $errors->{admin_email} = \"Valid admin email is required\";\n        }\n        \n        unless ($items_per_page && $items_per_page =~ /^\\d+$/ && $items_per_page > 0) {\n            $errors->{items_per_page} = \"Items per page must be a positive number\";\n        }\n        \n        # If there are validation errors, re-display the form\n        if (%$errors) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n                \"Validation errors in settings form\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                errors => $errors,\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n        \n        # Save settings to database\n        eval {\n            # Update site_name setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_name',\n                    value => $site_name\n                }\n            );\n            \n            # Update site_description setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_description',\n                    value => $site_description\n                }\n            );\n            \n            # Update admin_email setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'admin_email',\n                    value => $admin_email\n                }\n            );\n            \n            # Update items_per_page setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'items_per_page',\n                    value => $items_per_page\n                }\n            );\n            \n            # Update allow_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'allow_comments',\n                    value => $allow_comments\n                }\n            );\n            \n            # Update moderate_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'moderate_comments',\n                    value => $moderate_comments\n                }\n            );\n            \n            # Update theme setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'theme',\n                    value => $theme\n                }\n            );\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n                \"Settings updated successfully\");\n            \n            # Set success message and redirect\n            $c->flash->{success_msg} = \"Settings updated successfully\";\n            $c->response->redirect($c->uri_for('/admin/settings'));\n            return;\n        };\n        \n        # Handle database errors\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'settings', \n                \"Error updating settings: $@\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                error_msg => \"Error updating settings: $@\",\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n    }\n    \n    # Get current settings from database\n    my %settings = ();\n    eval {\n        my @setting_records = $c->model('DBEncy::Setting')->search({});\n        foreach my $record (@setting_records) {\n            $settings{$record->name} = $record->value;\n        }\n    };\n    \n    # Get available themes\n    my @themes = ('default', 'dark', 'light', 'custom');\n    eval {\n        my $themes_dir = $c->path_to('root', 'static', 'themes');\n        if (-d $themes_dir) {\n            opendir(my $dh, $themes_dir) or die \"Cannot open themes directory: $!\";\n            @themes = grep { -d \"$themes_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller settings view - Template: admin/settings.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available themes: \" . join(', ', @themes);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/settings.tt',\n        settings => \\%settings,\n        themes => \\@themes\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Completed settings action\");\n}\n\n# Admin system information\nsub system_info :Path('/admin/system_info') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Starting system_info action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'system_info', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system information\n    my $system_info = $self->get_detailed_system_info($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller system_info view - Template: admin/system_info.tt\";\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/system_info.tt',\n        system_info => $system_info\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Completed system_info action\");\n}\n\n# Get detailed system information\nsub get_detailed_system_info {\n    my ($self, $c) = @_;\n    \n    my $info = {\n        perl_version => $],\n        catalyst_version => $Catalyst::VERSION,\n        server_software => $ENV{SERVER_SOFTWARE} || 'Unknown',\n        server_name => $ENV{SERVER_NAME} || 'Unknown',\n        server_protocol => $ENV{SERVER_PROTOCOL} || 'Unknown',\n        server_admin => $ENV{SERVER_ADMIN} || 'Unknown',\n        server_port => $ENV{SERVER_PORT} || 'Unknown',\n        document_root => $ENV{DOCUMENT_ROOT} || 'Unknown',\n        script_name => $ENV{SCRIPT_NAME} || 'Unknown',\n        request_uri => $ENV{REQUEST_URI} || 'Unknown',\n        request_method => $ENV{REQUEST_METHOD} || 'Unknown',\n        query_string => $ENV{QUERY_STRING} || 'Unknown',\n        remote_addr => $ENV{REMOTE_ADDR} || 'Unknown',\n        remote_port => $ENV{REMOTE_PORT} || 'Unknown',\n        remote_user => $ENV{REMOTE_USER} || 'Unknown',\n        http_user_agent => $ENV{HTTP_USER_AGENT} || 'Unknown',\n        http_referer => $ENV{HTTP_REFERER} || 'Unknown',\n        http_accept => $ENV{HTTP_ACCEPT} || 'Unknown',\n        http_accept_language => $ENV{HTTP_ACCEPT_LANGUAGE} || 'Unknown',\n        http_accept_encoding => $ENV{HTTP_ACCEPT_ENCODING} || 'Unknown',\n        http_connection => $ENV{HTTP_CONNECTION} || 'Unknown',\n        http_host => $ENV{HTTP_HOST} || 'Unknown',\n        https => $ENV{HTTPS} || 'Off',\n        gateway_interface => $ENV{GATEWAY_INTERFACE} || 'Unknown',\n        server_signature => $ENV{SERVER_SIGNATURE} || 'Unknown',\n        server_addr => $ENV{SERVER_ADDR} || 'Unknown',\n        path => $ENV{PATH} || 'Unknown',\n        system_uptime => 'Unknown',\n        system_load => 'Unknown',\n        memory_usage => 'Unknown',\n        disk_usage => 'Unknown',\n        database_info => 'Unknown',\n        installed_modules => []\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        chomp($uptime_output);\n        $info->{system_uptime} = $uptime_output;\n        \n        if ($uptime_output =~ /load average: ([\\d.]+), ([\\d.]+), ([\\d.]+)/) {\n            $info->{system_load} = \"$1 (1 min), $2 (5 min), $3 (15 min)\";\n        }\n    };\n    \n    # Get memory usage\n    eval {\n        my $free_output = `free -h`;\n        my @lines = split(/\\n/, $free_output);\n        if ($lines[1] =~ /Mem:\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{memory_usage} = \"Total: $1, Used: $2, Free: $3\";\n        }\n    };\n    \n    # Get disk usage\n    eval {\n        my $df_output = `df -h .`;\n        my @lines = split(/\\n/, $df_output);\n        if ($lines[1] =~ /(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{disk_usage} = \"Filesystem: $1, Size: $2, Used: $3, Avail: $4, Use%: $5, Mounted on: $6\";\n        }\n    };\n    \n    # Get database information\n    eval {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $db_info = $dbh->get_info(17); # SQL_DBMS_NAME\n        my $db_version = $dbh->get_info(18); # SQL_DBMS_VER\n        $info->{database_info} = \"$db_info version $db_version\";\n    };\n    \n    # Get installed Perl modules\n    eval {\n        my @modules = ();\n        foreach my $module (sort keys %INC) {\n            next unless $module =~ /\\.pm$/;\n            $module =~ s/\\//::/g;\n            $module =~ s/\\.pm$//;\n            \n            my $version = eval \"\\$${module}::VERSION\" || 'Unknown';\n            push @modules, { name => $module, version => $version };\n        }\n        $info->{installed_modules} = \\@modules;\n    };\n    \n    return $info;\n}\n\n# Admin logs viewer\nsub logs :Path('/admin/logs') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs', \n        \"Starting logs action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'logs', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get log file parameter\n    my $log_file = $c->req->param('file') || 'catalyst.log';\n    \n    # Get available log files\n    my @log_files = ();\n    eval {\n        my $logs_dir = $c->path_to('logs');\n        if (-d $logs_dir) {\n            opendir(my $dh, $logs_dir) or die \"Cannot open logs directory: $!\";\n            @log_files = grep { -f \"$logs_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Get log content\n    my $log_content = '';\n    eval {\n        my $log_path = $c->path_to('logs', $log_file);\n        if (-f $log_path) {\n            # Get the last 1000 lines of the log file\n            my $tail_output = `tail -n 1000 $log_path`;\n            $log_content = $tail_output;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller logs view - Template: admin/logs.tt\";\n        push @{$c->stash->{debug_msg}}, \"Log file: $log_file\";\n        push @{$c->stash->{debug_msg}}, \"Available log files: \" . join(', ', @log_files);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/logs.tt',\n        log_file => $log_file,\n        log_files => \\@log_files,\n        log_content => $log_content\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs',\n        \"Completed logs action\");\n}\n\n# Add missing field from table to result file\nsub add_field_to_result :Path('/admin/add_field_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_result', \n        \"Starting add_field_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the table\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{table}) {\n            die \"Field '$field_name' not found in table '$table_name'\";\n        }\n        \n        my $field_def = $field_data->{table};\n        \n        # Add field to result file\n        my $success = $self->add_field_to_result_file($c, $comparison->{result_file_path}, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to result file successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to result file\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Add missing field from result file to table\nsub add_field_to_table :Path('/admin/add_field_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table', \n        \"Starting add_field_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        # Debug: Check if our specific table is in the mapping\n        my $table_key = lc($table_name);\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Looking for table '$table_key' in mapping with \" . scalar(keys %$result_table_mapping) . \" entries\");\n        \n        if (exists $result_table_mapping->{$table_key}) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n                \"Found mapping for '$table_key': \" . $result_table_mapping->{$table_key}->{result_name});\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table',\n                \"No mapping found for '$table_key'. Available keys: \" . join(', ', sort keys %$result_table_mapping));\n        }\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Debug: Log the comparison result\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Comparison result: has_result_file=\" . ($comparison->{has_result_file} ? 'YES' : 'NO') . \n            \", result_file_path=\" . ($comparison->{result_file_path} || 'NONE'));\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the result file\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{result}) {\n            die \"Field '$field_name' not found in result file\";\n        }\n        \n        my $field_def = $field_data->{result};\n        \n        # Validate field definition has required attributes\n        my $validation_errors = $self->validate_field_definition($field_def, $field_name);\n        if (@$validation_errors) {\n            die \"Field validation errors: \" . join(', ', @$validation_errors);\n        }\n        \n        # Add field to database table\n        my $success = $self->add_field_to_database_table($c, $table_name, $database, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to table '$table_name' successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to database table\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Admin backup and restore\nsub backup :Path('/admin/backup') :Args(0) {\n    my ($self, $c) = @_;\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Starting backup action\");\n\n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n            \"Access denied: User does not have CSC backup access\");\n\n        $c->flash->{error_msg} = \"You need CSC administrator privileges to access backup functionality.\";\n        $c->response->redirect($c->uri_for('/admin'));\n        return;\n    }\n\n    # Backup creation is now handled by the separate 'create' action method\n\n    # Handle backup restoration\n    if ($c->req->method eq 'POST' && $c->req->param('action') eq 'restore_backup') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Restoring backup\");\n\n        my $backup_file = $c->req->param('backup_file');\n\n        unless ($backup_file) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"No backup file selected for restoration\");\n\n            $c->flash->{error_msg} = \"No backup file selected for restoration\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Validate backup file\n        my $backup_path = $c->path_to('backups', $backup_file);\n        unless (-f $backup_path) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"Backup file not found: $backup_file\");\n\n            $c->flash->{error_msg} = \"Backup file not found: $backup_file\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Create temporary directory for restoration\n        my $temp_dir = $c->path_to('tmp', 'restore_' . time());\n        eval { make_path($temp_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error creating temporary directory: $@\");\n\n            $c->flash->{error_msg} = \"Error creating temporary directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Extract backup to temporary directory\n        my $extract_command = \"tar -xzf $backup_path -C $temp_dir\";\n        my $extract_result = system($extract_command);\n\n        if ($extract_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error extracting backup: $!\");\n\n            $c->flash->{error_msg} = \"Error extracting backup: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Restore database if database dump exists\n        if (-f \"$temp_dir/db_dump.sql\") {\n            # This is a simplified example - you'd need to customize for your database\n            my $db_restore_command = \"mysql -u username -p'password' database_name < $temp_dir/db_dump.sql\";\n            my $db_restore_result = system($db_restore_command);\n\n            if ($db_restore_result != 0) {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                    \"Error restoring database: $!\");\n\n                $c->flash->{error_msg} = \"Error restoring database: $!\";\n                $c->response->redirect($c->uri_for('/admin/backup'));\n                return;\n            }\n        }\n\n        # Restore files\n        # This is a simplified example - you'd need to customize for your application\n        my $files_restore_command = \"cp -R $temp_dir/* .\";\n        my $files_restore_result = system($files_restore_command);\n\n        if ($files_restore_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error restoring files: $!\");\n\n            $c->flash->{error_msg} = \"Error restoring files: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Clean up temporary directory\n        my $cleanup_command = \"rm -rf $temp_dir\";\n        system($cleanup_command);\n\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Backup restored successfully: $backup_file\");\n\n        $c->flash->{success_msg} = \"Backup restored successfully: $backup_file\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n\n    # Clean up any orphaned backup files first\n    $self->cleanup_orphaned_backups($c);\n    \n    # Get available backups with detailed information\n    my $backups = $self->get_backup_list($c);\n\n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller backup view - Template: admin/backup.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available backups: \" . scalar(@$backups);\n    }\n\n    # Pass data to the template\n    $c->stash(\n        template => 'admin/backup.tt',\n        backups => $backups\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Completed backup action\");\n}\n\n# Handle backup creation (separate action for cleaner URL handling)\nsub create :Path('/admin/backup/create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Starting backup creation\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'create',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to create backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Only handle POST requests\n    unless ($c->req->method eq 'POST') {\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    my $backup_type = $c->req->param('type') || 'full';\n    my $description = $c->req->param('description') || '';\n    \n    # Generate backup name with timestamp and type\n    my $timestamp = time();\n    my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n    my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n    my $backup_name = \"backup_${date_str}_${backup_type}\";\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Creating $backup_type backup: $backup_name\");\n    \n    # Create backup directory if it doesn't exist\n    my $backup_dir = $c->path_to('backups');\n    unless (-d $backup_dir) {\n        eval { make_path($backup_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup directory: $@\");\n            \n            $c->flash->{error_msg} = \"Error creating backup directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Create backup\n    my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n    my $backup_command = '';\n    my $backup_success = 0;\n    \n    if ($backup_type eq 'full') {\n        # Full backup (files + database)\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' --exclude='logs/*.log' .\";\n        \n    } elsif ($backup_type eq 'config') {\n        # Configuration files only\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' config/ lib/Comserv.pm *.conf *.yml *.yaml 2>/dev/null || true\";\n        \n    } elsif ($backup_type eq 'database') {\n        # Database only backup\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            # Get the application root directory for relative path calculation\n            my $app_root = $c->path_to('.');\n            # Use relative path from app root for tar command\n            my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n            $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n            \n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Database backup dump file: $db_backup_result->{dump_file}\");\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Relative dump file path: $relative_dump_file\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Failed to create database backup: \" . $db_backup_result->{error});\n            \n            $c->flash->{error_msg} = \"Failed to create database backup: \" . $db_backup_result->{error};\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Execute backup command\n    if ($backup_command) {\n        # Get the application root directory for proper tar execution\n        my $app_root = $c->path_to('.');\n        \n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Executing backup command from directory: $app_root\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Backup command: $backup_command\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Target backup file: $backup_file\");\n        \n        # Change to application root directory and execute command\n        my $original_dir = Cwd::getcwd();\n        chdir($app_root) or do {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Cannot change to application directory: $app_root - $!\");\n            $c->flash->{error_msg} = \"Cannot change to application directory: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        };\n        \n        my $result = system($backup_command);\n        \n        # Change back to original directory\n        chdir($original_dir);\n        \n        if ($result == 0) {\n            # Add a small delay to ensure file is fully written\n            sleep(1);\n            \n            # Verify backup file was created and has content\n            if (-f $backup_file && -s $backup_file) {\n                $backup_success = 1;\n                \n                my $file_size = -s $backup_file;\n                my $formatted_size = $self->format_file_size($file_size);\n                \n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n                    \"Backup created successfully: $backup_file ($formatted_size)\");\n                \n                # Force a debug message to appear in the UI\n                if ($c->session->{debug_mode}) {\n                    $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                    push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file created at: $backup_file (Size: $formatted_size)\";\n                }\n                \n                my $success_msg = \"Backup created successfully: $backup_name.tar.gz ($formatted_size)\";\n                $success_msg .= \" - $description\" if $description;\n                \n                $c->flash->{success_msg} = $success_msg;\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                    \"Backup file was not created or is empty: $backup_file\");\n                \n                # Additional debugging\n                if (-f $backup_file) {\n                    my $size = -s $backup_file;\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file exists but has size: $size bytes\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file exists but empty: $backup_file ($size bytes)\";\n                    }\n                } else {\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file does not exist at: $backup_file\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file does not exist: $backup_file\";\n                    }\n                }\n                \n                $c->flash->{error_msg} = \"Backup file was not created or is empty\";\n            }\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup (exit code: $result): $!\");\n            \n            # Force debug message to UI\n            if ($c->session->{debug_mode}) {\n                $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                push @{$c->stash->{debug_msg}}, \"DEBUG: Backup command failed with exit code: $result\";\n            }\n            \n            $c->flash->{error_msg} = \"Error creating backup (exit code: $result)\";\n        }\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Cleanup orphaned backup files (like .meta files without corresponding .tar.gz)\nsub cleanup_orphaned_backups {\n    my ($self, $c) = @_;\n    \n    my $backup_dir = $c->path_to('backups');\n    return unless -d $backup_dir;\n    \n    eval {\n        opendir(my $dh, $backup_dir) or die \"Cannot open backup directory: $!\";\n        my @all_files = readdir($dh);\n        closedir($dh);\n        \n        # Find .meta files\n        my @meta_files = grep { $_ =~ /\\.tar\\.gz\\.meta$/ } @all_files;\n        \n        foreach my $meta_file (@meta_files) {\n            my $backup_file = $meta_file;\n            $backup_file =~ s/\\.meta$//; # Remove .meta extension\n            \n            # If the corresponding .tar.gz file doesn't exist, remove the .meta file\n            unless (-f \"$backup_dir/$backup_file\") {\n                my $meta_path = \"$backup_dir/$meta_file\";\n                if (unlink($meta_path)) {\n                    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n                        \"Removed orphaned meta file: $meta_file\");\n                }\n            }\n        }\n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n            \"Error during cleanup: $@\");\n    }\n}\n\n# Debug endpoint to check backup directory contents\nsub debug_backups :Path('/admin/backup/debug') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $backup_dir = $c->path_to('backups');\n    my $debug_info = {\n        backup_dir => \"$backup_dir\",\n        dir_exists => (-d $backup_dir) ? 1 : 0,\n        files => [],\n        error => ''\n    };\n    \n    if (-d $backup_dir) {\n        eval {\n            opendir(my $dh, $backup_dir) or die \"Cannot open directory: $!\";\n            my @all_files = readdir($dh);\n            closedir($dh);\n            \n            foreach my $file (@all_files) {\n                next if $file eq '.' || $file eq '..';\n                my $filepath = \"$backup_dir/$file\";\n                my @stat = stat($filepath);\n                \n                push @{$debug_info->{files}}, {\n                    name => $file,\n                    is_file => (-f $filepath) ? 1 : 0,\n                    size => $stat[7] || 0,\n                    mtime => $stat[9] || 0,\n                    matches_pattern => ($file =~ /\\.tar\\.gz$/) ? 1 : 0\n                };\n            }\n        };\n        $debug_info->{error} = $@ if $@;\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($debug_info));\n}\n\n# Test backup creation manually\nsub test_create :Path('/admin/backup/test_create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $result = {\n        steps => [],\n        success => 0,\n        error => ''\n    };\n    \n    eval {\n        push @{$result->{steps}}, \"Starting manual backup test...\";\n        \n        my $backup_dir = $c->path_to('backups');\n        my $app_root = $c->path_to('.');\n        my $timestamp = time();\n        my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n        my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n        my $backup_name = \"test_backup_${date_str}_database\";\n        my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n        \n        push @{$result->{steps}}, \"Backup directory: $backup_dir\";\n        push @{$result->{steps}}, \"App root: $app_root\";\n        push @{$result->{steps}}, \"Backup name: $backup_name\";\n        push @{$result->{steps}}, \"Backup file: $backup_file\";\n        \n        # Test database backup creation\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            push @{$result->{steps}}, \"✅ Database dump created: \" . $db_backup_result->{dump_file};\n            \n            # Check if dump file exists\n            if (-f $db_backup_result->{dump_file}) {\n                my $dump_size = -s $db_backup_result->{dump_file};\n                push @{$result->{steps}}, \"✅ Dump file exists with size: $dump_size bytes\";\n                \n                # Create tar command\n                my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n                my $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n                \n                push @{$result->{steps}}, \"Relative dump file: $relative_dump_file\";\n                push @{$result->{steps}}, \"Backup command: $backup_command\";\n                \n                # Change to app root and execute\n                my $original_dir = Cwd::getcwd();\n                chdir($app_root);\n                push @{$result->{steps}}, \"Changed to directory: \" . Cwd::getcwd();\n                \n                my $cmd_result = system($backup_command);\n                chdir($original_dir);\n                \n                push @{$result->{steps}}, \"Command exit code: $cmd_result\";\n                \n                if ($cmd_result == 0) {\n                    if (-f $backup_file && -s $backup_file) {\n                        my $backup_size = -s $backup_file;\n                        push @{$result->{steps}}, \"✅ Backup created successfully: $backup_size bytes\";\n                        $result->{success} = 1;\n                        \n                        # Clean up test file\n                        unlink($backup_file);\n                        push @{$result->{steps}}, \"Test backup file cleaned up\";\n                    } else {\n                        push @{$result->{steps}}, \"❌ Backup file not created or empty\";\n                    }\n                } else {\n                    push @{$result->{steps}}, \"❌ Backup command failed\";\n                }\n            } else {\n                push @{$result->{steps}}, \"❌ Dump file does not exist\";\n            }\n        } else {\n            push @{$result->{steps}}, \"❌ Database backup failed: \" . $db_backup_result->{error};\n        }\n    };\n    \n    if ($@) {\n        $result->{error} = $@;\n        push @{$result->{steps}}, \"❌ Exception: $@\";\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($result));\n}\n\n# Handle backup download\nsub download :Path('/admin/backup/download') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Starting backup download: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to download backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Serve the file for download\n    $c->response->content_type('application/gzip');\n    $c->response->header('Content-Disposition' => \"attachment; filename=\\\"$filename\\\"\");\n    $c->response->header('Content-Length' => -s $backup_file);\n    \n    # Stream the file\n    $c->serve_static_file($backup_file);\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Backup download completed: $filename\");\n}\n\n# Handle backup deletion\nsub delete :Path('/admin/backup/delete') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n        \"Starting backup deletion: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to delete backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Delete the backup file\n    if (unlink($backup_file)) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n            \"Backup deleted successfully: $backup_file\");\n        \n        $c->flash->{success_msg} = \"Backup deleted successfully: $filename\";\n    } else {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'delete',\n            \"Error deleting backup: $!\");\n        \n        $c->flash->{error_msg} = \"Error deleting backup: $!\";\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Test database connection (AJAX endpoint)\nsub test_db :Path('/admin/backup/test_db') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        my $result = {\n            success => 0,\n            message => \"Access denied: CSC administrator privileges required\"\n        };\n        $c->response->content_type('application/json');\n        $c->response->body(JSON::encode_json($result));\n        return;\n    }\n    \n    # This method already exists further down in the file, so we'll just redirect to it\n    # or we can implement it here if needed\n    $self->test_database_connection($c);\n}\n\n# Keeping it here for backward compatibility\nsub network_devices_forward :Path('/admin/network_devices_old') :Args(0) {\n    my ($self, $c) = @_;\n\n    # Redirect to the new network devices page\n    $c->response->redirect($c->uri_for('/admin/network_devices'));\n}\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub network_devices :Path('/admin/network_devices') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub add_network_device :Path('/admin/add_network_device') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub edit_network_device :Path('/admin/edit_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub delete_network_device :Path('/admin/delete_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Database Schema Comparison functionality (with alias)\nsub compare_schema :Path('/admin/compare_schema') :Args(0) {\n    my ($self, $c) = @_;\n    # Redirect to the main schema_compare action\n    $c->response->redirect($c->uri_for('/admin/schema_compare'));\n    return;\n}\n\n# Database Schema Comparison functionality\nsub schema_compare :Path('/admin/schema_compare') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Starting schema_compare action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'schema_compare', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get all database configurations from JSON config\n    my $database_configs = $self->get_all_database_configs($c);\n    \n    # Get the currently active database backend\n    my $hybrid_db = $c->model('HybridDB');\n    my $status = $hybrid_db->get_status();\n    my $current_backend = $status->{current_backend};\n    \n    # Create database comparison structure with all databases as closed containers\n    my $database_comparison = {\n        current_backend => $current_backend,\n        databases => {},\n        summary => {\n            total_databases => scalar(keys %$database_configs),\n            connected_databases => 0,\n            total_backends => scalar(keys %$database_configs),\n            available_backends => 0,\n            total_tables => 0,\n            tables_with_results => 0\n        }\n    };\n    \n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Test connection to determine availability\n        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n        \n        $database_comparison->{databases}->{$db_key} = {\n            name => $db_key,\n            display_name => $config->{description} || $db_key,\n            type => $config->{db_type} || 'unknown',\n            priority => $config->{priority} || 999,\n            available => $connection_test->{connected},\n            error => $connection_test->{error},\n            host => $config->{host} || 'localhost',\n            database => $config->{database} || '',\n            is_current => ($db_key eq $current_backend),\n            table_count => 0,\n            table_comparisons => [], # Will be loaded on demand via AJAX\n            loaded => 0 # Flag to indicate if comparison data has been loaded\n        };\n        \n        # Update summary counts\n        if ($connection_test->{connected}) {\n            $database_comparison->{summary}->{connected_databases}++;\n            $database_comparison->{summary}->{available_backends}++;\n        }\n    }\n    \n    # Add access control schema status\n    my $access_control_status = $self->check_access_control_schema($c);\n    \n    # Debug: Log the structure of database_comparison\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Database comparison structure: \" . Data::Dumper::Dumper($database_comparison));\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller schema_compare view - Template: admin/schema_compare.tt\";\n        push @{$c->stash->{debug_msg}}, \"Total databases: \" . $database_comparison->{summary}->{total_databases};\n        push @{$c->stash->{debug_msg}}, \"Connected databases: \" . $database_comparison->{summary}->{connected_databases};\n        push @{$c->stash->{debug_msg}}, \"Current backend: \" . ($current_backend || 'none');\n    }\n    \n    # Set the template and data\n    $c->stash(\n        template => 'admin/schema_compare.tt',\n        database_comparison => $database_comparison,\n        access_control_status => $access_control_status\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Completed schema_compare action\");\n}\n\n# Get all database configurations from db_config.json\nsub get_all_database_configs {\n    my ($self, $c) = @_;\n    \n    my $config_file = '/home/shanta/PycharmProjects/comserv2/Comserv/db_config.json';\n    \n    unless (-f $config_file) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Database config file not found: $config_file\");\n        return {};\n    }\n    \n    my $json_content;\n    eval {\n        $json_content = read_file($config_file);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to read config file: $@\");\n        return {};\n    }\n    \n    my $configs;\n    eval {\n        $configs = decode_json($json_content);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to parse JSON config: $@\");\n        return {};\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_all_database_configs',\n        \"Loaded \" . scalar(keys %$configs) . \" database configurations\");\n    \n    return $configs;\n}\n\n# Test database connection for a specific configuration\nsub test_database_connection {\n    my ($self, $c, $db_key, $config) = @_;\n    \n    my $result = {\n        connected => 0,\n        error => '',\n        db_key => $db_key\n    };\n    \n    # Skip SQLite connections for now (they don't need network testing)\n    if ($config->{db_type} && $config->{db_type} eq 'sqlite') {\n        if ($config->{database_path} && -f $config->{database_path}) {\n            $result->{connected} = 1;\n        } else {\n            $result->{error} = \"SQLite database file not found: \" . ($config->{database_path} || 'not specified');\n        }\n        return $result;\n    }\n    \n    # For MySQL connections, test the connection\n    if ($config->{db_type} && $config->{db_type} eq 'mysql') {\n        eval {\n            my $dsn = sprintf(\"DBI:mysql:database=%s;host=%s;port=%s\",\n                $config->{database} || '',\n                $config->{host} || 'localhost',\n                $config->{port} || 3306\n            );\n            \n            my $dbh = DBI->connect(\n                $dsn,\n                $config->{username} || '',\n                $config->{password} || '',\n                {\n                    RaiseError => 1,\n                    PrintError => 0,\n                    mysql_connect_timeout => 5,\n                    mysql_read_timeout => 5,\n                    mysql_write_timeout => 5\n                }\n            );\n            \n            if ($dbh) {\n                # Test with a simple query\n                my $sth = $dbh->prepare(\"SELECT 1\");\n                $sth->execute();\n                $sth->finish();\n                $dbh->disconnect();\n                \n                $result->{connected} = 1;\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'test_database_connection',\n                    \"Successfully connected to database: $db_key\");\n            }\n        };\n        if ($@) {\n            $result->{error} = \"Connection failed: $@\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'test_database_connection',\n                \"Failed to connect to database $db_key: $@\");\n        }\n    } else {\n        $result->{error} = \"Unsupported database type: \" . ($config->{db_type} || 'unknown');\n    }\n    \n    return $result;\n}\n\n# Check access control schema status\nsub check_access_control_schema {\n    my ($self, $c) = @_;\n    \n    my $status = {\n        overall_status => 'unknown',\n        users_table => {},\n        user_site_roles_table => {},\n        migration_needed => 0,\n        errors => [],\n        recommendations => []\n    };\n    \n    # Check User table columns\n    $status->{users_table} = $self->check_users_table_schema($c);\n    \n    # Check UserSiteRole table\n    $status->{user_site_roles_table} = $self->check_user_site_roles_table_schema($c);\n    \n    # Determine overall status\n    my $has_errors = 0;\n    my $needs_migration = 0;\n    \n    if ($status->{users_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{users_table}->{errors}};\n    }\n    \n    if ($status->{user_site_roles_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{user_site_roles_table}->{errors}};\n    }\n    \n    if ($status->{users_table}->{needs_migration} || $status->{user_site_roles_table}->{needs_migration}) {\n        $needs_migration = 1;\n    }\n    \n    # Set overall status\n    if ($has_errors) {\n        $status->{overall_status} = 'error';\n        push @{$status->{recommendations}}, 'Database schema errors detected. System is using fallback compatibility mode.';\n    } elsif ($needs_migration) {\n        $status->{overall_status} = 'migration_available';\n        $status->{migration_needed} = 1;\n        push @{$status->{recommendations}}, 'Enhanced access control features are available. Migration is optional.';\n    } else {\n        $status->{overall_status} = 'ok';\n        push @{$status->{recommendations}}, 'Access control schema is up to date.';\n    }\n    \n    return $status;\n}\n\n# Check users table schema for access control enhancements\nsub check_users_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the users table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE users\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n        # Check for required columns\n        my @required_columns = qw(id username password email roles);\n        foreach my $col (@required_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{errors}}, \"Missing required column: $col\";\n                $table_status->{has_errors} = 1;\n            }\n        }\n        \n        # Check for optional enhancement columns\n        my @optional_columns = qw(status created_at last_login);\n        foreach my $col (@optional_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{missing_columns}}, $col;\n                $table_status->{needs_migration} = 1;\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        push @{$table_status->{errors}}, \"Error checking users table: $error\";\n        $table_status->{has_errors} = 1;\n        \n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'check_users_table_schema',\n            \"Error checking users table schema: $error\");\n    };\n    \n    return $table_status;\n}\n\n# Check user_site_roles table schema\nsub check_user_site_roles_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the user_site_roles table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE user_site_roles\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n    } catch {\n        my $error = $_;\n        if ($error =~ /doesn't exist/i) {\n            # Table doesn't exist - this is expected for basic installations\n            $table_status->{needs_migration} = 1;\n            push @{$table_status->{missing_columns}}, 'entire_table';\n        } else {\n            push @{$table_status->{errors}}, \"Error checking user_site_roles table: $error\";\n            $table_status->{has_errors} = 1;\n        }\n    };\n    \n    return $table_status;\n}\n\n# Access control help page\nsub access_control_help :Path('/admin/access_control_help') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'access_control_help',\n        \"Displaying access control help page\");\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller access_control_help view - Template: admin/access_control_help.tt\";\n    }\n    \n    $c->stash(\n        template => 'admin/access_control_help.tt',\n        title => 'Multi-Site Access Control Help'\n    );\n}\n\n# AJAX endpoint to get table schema details\nsub get_table_schema :Path('/admin/get_table_schema') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_table_schema', \n        \"Starting get_table_schema action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        my $schema_info;\n        \n        if ($database eq 'ency') {\n            $schema_info = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $schema_info = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        $c->stash(json => { \n            success => 1, \n            schema => $schema_info,\n            table_name => $table_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting table schema: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_table_schema', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field comparison between table and Result file\nsub get_field_comparison :Path('/admin/get_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n        \"Starting get_field_comparison action\");\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison', \n            \"Admin access granted to user Shanta (bypass role check)\");\n    }\n    else {\n        # Check if the user has admin role\n        unless ($c->user_exists && $c->check_user_roles('admin')) {\n            $c->response->status(403);\n            $c->stash(json => {\n                success => 0,\n                error => \"Access denied: Admin role required\"\n            });\n            $c->forward('View::JSON');\n            return;\n        }\n    }\n    \n    my $table_name = $c->request->param('table_name');\n    my $database = $c->request->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => 'Missing table_name or database parameter'\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Add debugging information\n        my $table_key = lc($table_name);\n        my $result_info = $result_table_mapping->{$table_key};\n        my $result_file_path = $result_info ? $result_info->{result_path} : undef;\n        my $result_name = $result_info ? $result_info->{result_name} : 'NOT FOUND';\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Table: $table_name, Database: $database, Result name: $result_name, Result file: \" . ($result_file_path || 'NOT FOUND'));\n        \n        # Add detailed debugging\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Comparison has_result_file: \" . ($comparison->{has_result_file} ? 'YES' : 'NO'));\n        \n        if ($comparison->{fields}) {\n            my $field_count = scalar(keys %{$comparison->{fields}});\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                \"Fields found: $field_count\");\n            \n            # Log first few fields for debugging\n            my $count = 0;\n            foreach my $field_name (keys %{$comparison->{fields}}) {\n                last if $count >= 3;\n                my $field_data = $comparison->{fields}->{$field_name};\n                my $has_table = $field_data->{table} ? 'YES' : 'NO';\n                my $has_result = $field_data->{result} ? 'YES' : 'NO';\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                    \"Field '$field_name': Table=$has_table, Result=$has_result\");\n                $count++;\n            }\n        }\n        \n        $c->stash(json => {\n            success => 1,\n            comparison => $comparison,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0,\n            debug => {\n                table_name => $table_name,\n                database => $database,\n                result_name => $result_name,\n                result_file_path => $result_file_path,\n                has_result_file => $comparison->{has_result_file},\n                total_result_files => scalar(keys %$result_table_mapping)\n            }\n        });\n        \n    } catch {\n        my $error = \"Error getting field comparison for $table_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_field_comparison', $error);\n        \n        # Don't return 500 status - return success with error info instead\n        # This prevents JavaScript parsing errors\n        $c->stash(json => {\n            success => 0,\n            error => $error,\n            table_name => $table_name,\n            database => $database,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to get result file fields\nsub get_result_file_fields :Path('/admin/get_result_file_fields') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Starting get_result_file_fields action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => {\n            success => 0,\n            error => \"Access denied: Admin role required\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $result_name = $c->req->param('result_name');\n    my $database = $c->req->param('database');\n    \n    unless ($result_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => \"Missing required parameters: result_name and database\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Getting fields for result: $result_name in database: $database\");\n    \n    try {\n        # Get the result file fields\n        my $fields = $self->get_result_file_field_definitions($c, $result_name, $database);\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n            \"Successfully retrieved \" . scalar(keys %$fields) . \" fields for result: $result_name\");\n        \n        $c->stash(json => {\n            success => 1,\n            fields => $fields,\n            result_name => $result_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting result file fields for $result_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_fields', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => {\n            success => 0,\n            error => $error\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field definitions from a result file\nsub get_result_file_field_definitions {\n    my ($self, $c, $result_name, $database) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Getting field definitions for result: $result_name in database: $database\");\n    \n    # Build the result file path\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    my $result_file_path;\n    \n    if (lc($database) eq 'ency') {\n        $result_file_path = \"$base_path/Ency/Result/$result_name.pm\";\n        # Also check subdirectories\n        unless (-f $result_file_path) {\n            if (-f \"$base_path/Ency/Result/System/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/System/$result_name.pm\";\n            } elsif (-f \"$base_path/Ency/Result/User/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/User/$result_name.pm\";\n            }\n        }\n    } elsif (lc($database) eq 'forager') {\n        $result_file_path = \"$base_path/Forager/Result/$result_name.pm\";\n    } else {\n        die \"Unsupported database: $database\";\n    }\n    \n    unless (-f $result_file_path) {\n        die \"Result file not found: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Found result file: $result_file_path\");\n    \n    # Parse the result file schema\n    my $schema_info = $self->get_result_file_schema($c, $result_name, $result_file_path);\n    \n    unless ($schema_info && $schema_info->{columns}) {\n        die \"Could not parse result file schema: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Successfully parsed \" . scalar(keys %{$schema_info->{columns}}) . \" fields from result file\");\n    \n    return $schema_info->{columns};\n}\n\n# Get database comparison between each database and its result files\nsub get_database_comparison {\n    my ($self, $c) = @_;\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Add backend-specific schema comparison\n    foreach my $backend_name (sort keys %$available_backends) {\n        my $backend_info = $available_backends->{$backend_name};\n        \n        $comparison->{backends}->{$backend_name} = {\n            name => $backend_name,\n            display_name => $backend_info->{config}->{description} || $backend_name,\n            type => $backend_info->{type},\n            available => $backend_info->{available},\n            priority => $backend_info->{config}->{priority} || 999,\n            connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n            tables => [],\n            table_count => 0,\n            table_comparisons => [],\n            error => undef\n        };\n        \n        # If backend is available, get its schema information\n        if ($backend_info->{available}) {\n            try {\n                my $backend_tables = $self->get_backend_database_tables($c, $backend_name, $backend_info);\n                $comparison->{backends}->{$backend_name}->{tables} = $backend_tables;\n                $comparison->{backends}->{$backend_name}->{table_count} = scalar(@$backend_tables);\n                \n                # Build result file mapping for this backend\n                my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                \n                # Compare each table with its result file\n                foreach my $table_name (@$backend_tables) {\n                    my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $backend_name, $backend_info, $result_table_mapping);\n                    push @{$comparison->{backends}->{$backend_name}->{table_comparisons}}, $table_comparison;\n                    \n                    if ($table_comparison->{has_result_file}) {\n                        $comparison->{summary}->{tables_with_results}++;\n                    } else {\n                        $comparison->{summary}->{tables_without_results}++;\n                    }\n                }\n                \n                $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                \n            } catch {\n                my $error = $_;\n                $comparison->{backends}->{$backend_name}->{error} = $error;\n                $comparison->{backends}->{$backend_name}->{connection_status} = 'error';\n                \n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', \n                    \"Error getting schema for backend '$backend_name': $error\");\n            };\n        }\n    }\n    \n    # Get Ency database tables and compare with result files\n    try {\n        my $ency_tables = $self->get_ency_database_tables($c);\n        $comparison->{ency}->{tables} = $ency_tables;\n        $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n        $comparison->{ency}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$ency_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to ency database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{ency}->{connection_status} = 'error';\n        $comparison->{ency}->{error} = $error;\n    };\n    \n    # Get Forager database tables and compare with result files\n    try {\n        my $forager_tables = $self->get_forager_database_tables($c);\n        $comparison->{forager}->{tables} = $forager_tables;\n        $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n        $comparison->{forager}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$forager_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Forager Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to forager database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{forager}->{connection_status} = 'error';\n        $comparison->{forager}->{error} = $error;\n    };\n    \n    return $comparison;\n}\n\n# Get database comparison data for a specific database only (performance optimized)\nsub get_database_comparison_selective {\n    my ($self, $c, $selected_db) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Starting selective comparison for database: $selected_db\");\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        selected_database => $selected_db,\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Only process the selected database\n    if ($selected_db eq 'ency') {\n        # Get Ency database tables and compare with result files\n        try {\n            my $ency_tables = $self->get_ency_database_tables($c);\n            $comparison->{ency}->{tables} = $ency_tables;\n            $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n            $comparison->{ency}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$ency_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to ency database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{ency}->{connection_status} = 'error';\n            $comparison->{ency}->{error} = $error;\n        };\n    }\n    elsif ($selected_db eq 'forager') {\n        # Get Forager database tables and compare with result files\n        try {\n            my $forager_tables = $self->get_forager_database_tables($c);\n            $comparison->{forager}->{tables} = $forager_tables;\n            $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n            $comparison->{forager}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$forager_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to forager database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{forager}->{connection_status} = 'error';\n            $comparison->{forager}->{error} = $error;\n        };\n    }\n    else {\n        # Handle backend-specific database selection\n        if (exists $available_backends->{$selected_db}) {\n            my $backend_info = $available_backends->{$selected_db};\n            \n            $comparison->{backends}->{$selected_db} = {\n                name => $selected_db,\n                display_name => $backend_info->{config}->{description} || $selected_db,\n                type => $backend_info->{type},\n                available => $backend_info->{available},\n                priority => $backend_info->{config}->{priority} || 999,\n                connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n                tables => [],\n                table_count => 0,\n                table_comparisons => [],\n                error => undef\n            };\n            \n            # If backend is available, get its schema information\n            if ($backend_info->{available}) {\n                try {\n                    my $backend_tables = $self->get_backend_database_tables($c, $selected_db, $backend_info);\n                    $comparison->{backends}->{$selected_db}->{tables} = $backend_tables;\n                    $comparison->{backends}->{$selected_db}->{table_count} = scalar(@$backend_tables);\n                    \n                    # Build result file mapping for this backend\n                    my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                    \n                    # Compare each table with its result file\n                    foreach my $table_name (@$backend_tables) {\n                        my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $selected_db, $backend_info, $result_table_mapping);\n                        push @{$comparison->{backends}->{$selected_db}->{table_comparisons}}, $table_comparison;\n                        \n                        if ($table_comparison->{has_result_file}) {\n                            $comparison->{summary}->{tables_with_results}++;\n                        } else {\n                            $comparison->{summary}->{tables_without_results}++;\n                        }\n                    }\n                    \n                    $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                    $comparison->{summary}->{connected_databases}++;\n                    \n                } catch {\n                    my $error = $_;\n                    $comparison->{backends}->{$selected_db}->{error} = $error;\n                    $comparison->{backends}->{$selected_db}->{connection_status} = 'error';\n                    \n                    $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', \n                        \"Error getting schema for backend '$selected_db': $error\");\n                };\n            }\n        }\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Completed selective comparison for database: $selected_db\");\n    \n    return $comparison;\n}\n\n# Compare a database table with its Result file\nsub compare_table_with_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Look for Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    if ($result_file_path && -f $result_file_path) {\n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_file_path;\n        $comparison->{last_modified} = (stat($result_file_path))[9];\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_file_path);\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find Result file for a table\nsub find_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Convert table name to proper case for Result file names\n    my $result_name = $self->table_name_to_result_name($table_name);\n    \n    # Database-specific Result file locations to check\n    my @search_paths;\n    \n    # Get the application root directory\n    my $app_root = $c->config->{home} || '/home/shanta/PycharmProjects/comserv2';\n    \n    if (lc($database) eq 'ency') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/System/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/User/$result_name.pm\"\n        );\n    } elsif (lc($database) eq 'forager') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Forager/Result/$result_name.pm\"\n        );\n    } else {\n        # Fallback for unknown databases\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Schema/Result/$result_name.pm\"\n        );\n    }\n    \n    foreach my $path (@search_paths) {\n        if (-f $path) {\n            return $path;\n        }\n    }\n    \n    return undef;\n}\n\n# Convert table name to Result class name\nsub table_name_to_result_name {\n    my ($self, $table_name) = @_;\n    \n    # Convert snake_case or lowercase to PascalCase\n    # e.g., \"user_group\" -> \"UserGroup\", \"ency_herb_tb\" -> \"Herb\"\n    \n    # Handle database-specific table name patterns\n    my $clean_name = $table_name;\n    \n    # Remove common prefixes\n    $clean_name =~ s/^ency_//i;\n    $clean_name =~ s/^forager_//i;\n    \n    # Remove common suffixes\n    $clean_name =~ s/_tb$//i;\n    $clean_name =~ s/_table$//i;\n    \n    # Handle special plurals and known mappings\n    my %table_to_result = (\n        'categories' => 'Category',\n        'event' => 'Event',\n        'files' => 'File',\n        'groups' => 'Group',\n        'internal_links_tb' => 'InternalLinksTb',\n        'learned_data' => 'Learned_data',\n        'log' => 'Log',\n        'mail_domains' => 'MailDomain',\n        'network_devices' => 'NetworkDevice',\n        'pages_content' => 'Pages_content',\n        'page_tb' => 'PageTb',\n        'pallets' => 'Pallet',\n        'participant' => 'Participant',\n        'projects' => 'Project',\n        'project_sites' => 'ProjectSite',\n        'queens' => 'Queen',\n        'reference' => 'Reference',\n        'site_config' => 'SiteConfig',\n        'sitedomain' => 'SiteDomain',\n        'sites' => 'Site',\n        'site_themes' => 'SiteTheme',\n        'site_workshop' => 'SiteWorkshop',\n        'themes' => 'Theme',\n        'theme_variables' => 'ThemeVariable',\n        'todo' => 'Todo',\n        'user_groups' => 'UserGroup',\n        'users' => 'User',\n        'user_sites' => 'UserSite',\n        'workshop' => 'WorkShop',\n        'yards' => 'Yard',\n        'ency_herb_tb' => 'Herb',\n        'page' => 'Page'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $table_to_result{lc($table_name)}) {\n        return $table_to_result{lc($table_name)};\n    }\n    \n    # Convert underscores to PascalCase\n    my $result_name = join('', map { ucfirst(lc($_)) } split(/_/, $clean_name));\n    \n    return $result_name;\n}\n\n# Find Result files that don't have corresponding database tables\nsub find_orphaned_result_files {\n    my ($self, $c, $database, $existing_tables) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file by reading the __PACKAGE__->table() declaration\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        # Skip if we couldn't extract table name\n        next unless $table_name;\n        \n        # Check if corresponding table exists\n        unless (exists $table_lookup{lc($table_name)}) {\n            push @orphaned_results, {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Extract table name from Result file by reading __PACKAGE__->table() declaration\nsub extract_table_name_from_result_file {\n    my ($self, $file_path) = @_;\n    \n    return undef unless -f $file_path;\n    \n    # Read the Result file\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return undef;\n    }\n    \n    # Extract table name from __PACKAGE__->table('table_name') declaration\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        return $1;\n    }\n    \n    return undef;\n}\n\n# Build comprehensive mapping of result files to their actual table names\nsub build_result_table_mapping {\n    my ($self, $c, $database) = @_;\n    \n    my %mapping = ();  # table_name => { result_name => ..., result_path => ... }\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    # Debug: Log the number of result files found\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Found \" . scalar(@result_files) . \" result files for database '$database'\");\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        if ($table_name) {\n            $mapping{lc($table_name)} = {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    # Debug: Log the final mapping keys\n    my @mapping_keys = sort keys %mapping;\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Final mapping contains \" . scalar(@mapping_keys) . \" entries: \" . join(', ', @mapping_keys));\n    \n    return \\%mapping;\n}\n\n# Compare table with result file using the comprehensive mapping\nsub compare_table_with_result_file_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Check if this table has a corresponding result file\n    my $table_key = lc($table_name);\n    if (exists $result_table_mapping->{$table_key}) {\n        my $result_info = $result_table_mapping->{$table_key};\n        \n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_info->{result_path};\n        $comparison->{last_modified} = $result_info->{last_modified};\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_info->{result_path});\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find result files without corresponding tables using the comprehensive mapping\nsub find_orphaned_result_files_v2 {\n    my ($self, $c, $database, $existing_tables, $result_table_mapping) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Check each result file to see if its table exists\n    foreach my $table_name (keys %$result_table_mapping) {\n        unless (exists $table_lookup{$table_name}) {\n            my $result_info = $result_table_mapping->{$table_name};\n            push @orphaned_results, {\n                result_name => $result_info->{result_name},\n                result_path => $result_info->{result_path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_info->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Get all Result files for a database\nsub get_all_result_files {\n    my ($self, $database) = @_;\n    \n    my @result_files = ();\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    \n    if (lc($database) eq 'ency') {\n        my $result_dir = \"$base_path/Ency/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n        \n        # Also scan subdirectories\n        if (-d \"$result_dir/System\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/System\", 'System/');\n        }\n        if (-d \"$result_dir/User\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/User\", 'User/');\n        }\n    } elsif (lc($database) eq 'forager') {\n        my $result_dir = \"$base_path/Forager/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n    }\n    \n    return @result_files;\n}\n\n# Scan a directory for Result files\nsub scan_result_directory {\n    my ($self, $dir_path, $prefix) = @_;\n    \n    my @files = ();\n    \n    if (opendir(my $dh, $dir_path)) {\n        while (my $file = readdir($dh)) {\n            next if $file =~ /^\\.\\.?$/;  # Skip . and ..\n            next unless $file =~ /\\.pm$/;  # Only .pm files\n            \n            my $full_path = \"$dir_path/$file\";\n            next unless -f $full_path;  # Only regular files\n            \n            my $name = $file;\n            $name =~ s/\\.pm$//;  # Remove .pm extension\n            \n            push @files, {\n                name => $prefix . $name,\n                path => $full_path,\n                last_modified => (stat($full_path))[9]\n            };\n        }\n        closedir($dh);\n    }\n    \n    return @files;\n}\n\n# Convert Result class name back to table name\nsub result_name_to_table_name {\n    my ($self, $result_name) = @_;\n    \n    # Remove any path prefix (e.g., \"System/Site\" -> \"Site\")\n    $result_name =~ s/.*\\///;\n    \n    # Handle special cases - map Result names to actual table names\n    my %result_to_table = (\n        'Category' => 'categories',\n        'File' => 'files',\n        'Group' => 'groups',\n        'User' => 'users',\n        'Event' => 'events',\n        'Site' => 'sites',\n        'Todo' => 'todos',\n        'Project' => 'projects',\n        'WorkShop' => 'workshops',\n        'Theme' => 'themes',\n        'Reference' => 'references',\n        'Participant' => 'participants',\n        'Herb' => 'ency_herb_tb',\n        'Page' => 'page',\n        'Pages_content' => 'pages_content',\n        'InternalLinksTb' => 'internal_links_tb',\n        'Learned_data' => 'learned_data',\n        'Log' => 'log',\n        'MailDomain' => 'mail_domains',\n        'NetworkDevice' => 'network_devices',\n        'PageTb' => 'page_tb',\n        'Pallet' => 'pallets',\n        'ProjectSite' => 'project_sites',\n        'Queen' => 'queens',\n        'SiteConfig' => 'site_config',\n        'SiteDomain' => 'sitedomain',\n        'SiteTheme' => 'site_themes',\n        'SiteWorkshop' => 'site_workshop',\n        'ThemeVariable' => 'theme_variables',\n        'UserGroup' => 'user_groups',\n        'UserSite' => 'user_sites',\n        'Yard' => 'yards'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $result_to_table{$result_name}) {\n        return $result_to_table{$result_name};\n    }\n    \n    # Convert PascalCase to snake_case\n    my $table_name = $result_name;\n    $table_name =~ s/([a-z])([A-Z])/$1_$2/g;  # Insert underscore before capitals\n    $table_name = lc($table_name);\n    \n    # For unknown mappings, try common patterns\n    # This is a fallback - ideally all mappings should be explicit above\n    return $table_name;\n}\n\n# Get detailed field comparison between table and Result file\nsub get_table_result_comparison {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Get table schema\n    my $table_schema;\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Find and parse Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    my $result_schema = { columns => {} };\n    \n    if ($result_file_path && -f $result_file_path) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_file_path);\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_file_path: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_file_path && -f $result_file_path) ? 1 : 0,\n        result_file_path => $result_file_path,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Get detailed field comparison between table and Result file using comprehensive mapping\nsub get_table_result_comparison_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    # Get table schema\n    my $table_schema = { columns => {} };\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        # Ensure we have a valid schema structure\n        $table_schema = { columns => {} } unless $table_schema && ref($table_schema) eq 'HASH';\n        $table_schema->{columns} = {} unless $table_schema->{columns} && ref($table_schema->{columns}) eq 'HASH';\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Check if this table has a corresponding result file using the mapping\n    my $table_key = lc($table_name);\n    my $result_info = $result_table_mapping->{$table_key};\n    my $result_schema = { columns => {} };\n    \n    if ($result_info && -f $result_info->{result_path}) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_info->{result_path});\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_info->{result_path}: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_info && -f $result_info->{result_path}) ? 1 : 0,\n        result_file_path => $result_info ? $result_info->{result_path} : undef,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Compare field attributes between table and Result file\nsub compare_field_attributes {\n    my ($self, $table_field, $result_field, $c, $field_name) = @_;\n    \n    my @differences = ();\n    my @attributes = qw(data_type size is_nullable is_auto_increment default_value);\n    \n    foreach my $attr (@attributes) {\n        my $table_value = $table_field ? $table_field->{$attr} : undef;\n        my $result_value = $result_field ? $result_field->{$attr} : undef;\n        \n        # Store original values for debugging\n        my $original_table_value = $table_value;\n        my $original_result_value = $result_value;\n        \n        # Normalize values for comparison\n        $table_value = $self->normalize_field_value($attr, $table_value);\n        $result_value = $self->normalize_field_value($attr, $result_value);\n        \n        # Add debug information for data_type comparisons when debug_mode is enabled\n        if ($c && $c->session->{debug_mode} && $attr eq 'data_type' && defined $original_table_value && defined $original_result_value) {\n            push @{$c->stash->{debug_msg}}, sprintf(\n                \"Field '%s' data_type normalization: Table Type: %s -> %s, Result Type: %s -> %s, Match: %s\",\n                $field_name || 'unknown',\n                $original_table_value || 'undef',\n                $table_value || 'undef',\n                $original_result_value || 'undef', \n                $result_value || 'undef',\n                (defined $table_value && defined $result_value && $table_value eq $result_value) ? 'YES' : 'NO'\n            );\n        }\n        \n        if (defined $table_value && defined $result_value) {\n            if ($table_value ne $result_value) {\n                push @differences, {\n                    attribute => $attr,\n                    table_value => $table_value,\n                    result_value => $result_value,\n                    original_table_value => $original_table_value,\n                    original_result_value => $original_result_value,\n                    type => 'different'\n                };\n            }\n        } elsif (defined $table_value && !defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => $table_value,\n                result_value => undef,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_result'\n            };\n        } elsif (!defined $table_value && defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => undef,\n                result_value => $result_value,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_table'\n            };\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Normalize field values for comparison\nsub normalize_field_value {\n    my ($self, $attribute, $value) = @_;\n    \n    return undef unless defined $value;\n    \n    # Handle data type normalization\n    if ($attribute eq 'data_type') {\n        return $self->normalize_data_type($value);\n    }\n    \n    # Handle boolean attributes\n    if ($attribute eq 'is_nullable' || $attribute eq 'is_auto_increment') {\n        return $value ? 1 : 0;\n    }\n    \n    # Handle numeric attributes\n    if ($attribute eq 'size') {\n        return $value + 0 if $value =~ /^\\d+$/;\n    }\n    \n    # Handle string attributes\n    return \"$value\";\n}\n\n# Parse Result file schema\nsub parse_result_file_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Try to load the Result class directly first\n    my $result_class_schema = $self->parse_result_class_schema($c, $file_path);\n    if ($result_class_schema && keys %{$result_class_schema->{columns}}) {\n        return $result_class_schema;\n    }\n    \n    # Fallback to file parsing if direct class loading fails\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return $schema;\n    }\n    \n    # Extract table name\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        $schema->{table_name} = $1;\n    }\n    \n    # Extract columns\n    if ($content =~ /__PACKAGE__->add_columns\\(\\s*(.*?)\\s*\\);/s) {\n        my $columns_block = $1;\n        \n        # Parse individual column definitions (format: column_name => { attributes })\n        while ($columns_block =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n            my ($col_name, $col_def) = ($1, $2);\n            \n            my $column = {\n                data_type => undef,\n                is_nullable => 1,\n                size => undef,\n                is_auto_increment => 0,\n                default_value => undef\n            };\n            \n            # Parse column attributes\n            if ($col_def =~ /data_type\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{data_type} = $1;\n            }\n            if ($col_def =~ /is_nullable\\s*=>\\s*(\\d+)/) {\n                $column->{is_nullable} = $1;\n            }\n            if ($col_def =~ /size\\s*=>\\s*(\\d+)/) {\n                $column->{size} = $1;\n            }\n            if ($col_def =~ /is_auto_increment\\s*=>\\s*(\\d+)/) {\n                $column->{is_auto_increment} = $1;\n            }\n            if ($col_def =~ /default_value\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{default_value} = $1;\n            }\n            \n            $schema->{columns}->{$col_name} = $column;\n        }\n    }\n    \n    # Extract primary keys\n    if ($content =~ /__PACKAGE__->set_primary_key\\(([^)]+)\\);/) {\n        my $pk_def = $1;\n        while ($pk_def =~ /['\"]([^'\"]+)['\"]/g) {\n            push @{$schema->{primary_keys}}, $1;\n        }\n    }\n    \n    # Extract relationships\n    while ($content =~ /__PACKAGE__->(belongs_to|has_many|might_have|has_one)\\(\\s*['\"]([^'\"]+)['\"],\\s*['\"]([^'\"]+)['\"],\\s*\\{([^}]+)\\}/gs) {\n        my ($rel_type, $accessor, $related_class, $rel_def) = ($1, $2, $3, $4);\n        \n        my $relationship = {\n            type => $rel_type,\n            accessor => $accessor,\n            related_class => $related_class,\n            foreign_key => undef\n        };\n        \n        if ($rel_def =~ /['\"]foreign\\.([^'\"]+)['\"]/) {\n            $relationship->{foreign_key} = $1;\n        }\n        \n        push @{$schema->{relationships}}, $relationship;\n    }\n    \n    return $schema;\n}\n\n# Parse Result class schema by loading the class directly\nsub parse_result_class_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Extract the Result class name from the file path\n    my $result_class;\n    if ($file_path =~ m{/Result/(.+)\\.pm$}) {\n        my $class_path = $1;\n        $class_path =~ s{/}{::}g;  # Convert path separators to Perl package separators\n        $result_class = \"Comserv::Model::Schema::Ency::Result::$class_path\";\n    } else {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Could not extract Result class name from path: $file_path\");\n        return $schema;\n    }\n    \n    # Try to load the Result class\n    eval {\n        eval \"require $result_class\";\n        die $@ if $@;\n        \n        # Get the table name\n        $schema->{table_name} = $result_class->table if $result_class->can('table');\n        \n        # Get column information\n        if ($result_class->can('columns_info')) {\n            my $columns_info = $result_class->columns_info;\n            foreach my $col_name (keys %$columns_info) {\n                my $col_info = $columns_info->{$col_name};\n                $schema->{columns}->{$col_name} = {\n                    data_type => $col_info->{data_type} || 'unknown',\n                    is_nullable => $col_info->{is_nullable} // 1,\n                    size => $col_info->{size},\n                    is_auto_increment => $col_info->{is_auto_increment} || 0,\n                    default_value => $col_info->{default_value},\n                    extra => $col_info->{extra}\n                };\n            }\n        }\n        \n        # Get primary key information\n        if ($result_class->can('primary_columns')) {\n            my @primary_keys = $result_class->primary_columns;\n            $schema->{primary_keys} = \\@primary_keys;\n        }\n        \n        # Get relationship information\n        if ($result_class->can('relationships')) {\n            my @relationships = $result_class->relationships;\n            foreach my $rel_name (@relationships) {\n                if ($result_class->can('relationship_info')) {\n                    my $rel_info = $result_class->relationship_info($rel_name);\n                    push @{$schema->{relationships}}, {\n                        type => $rel_info->{attrs}->{accessor} || 'unknown',\n                        accessor => $rel_name,\n                        related_class => $rel_info->{class},\n                        foreign_key => $rel_info->{cond} || {}\n                    };\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Successfully loaded Result class $result_class with \" . scalar(keys %{$schema->{columns}}) . \" columns\");\n            \n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Failed to load Result class $result_class: $@\");\n        return undef;  # Return undef to indicate failure, so fallback parsing can be used\n    }\n    \n    return $schema;\n}\n\n# Find differences between database and Result file schemas\nsub find_schema_differences {\n    my ($self, $db_schema, $result_schema) = @_;\n    \n    my @differences = ();\n    \n    # Compare columns\n    my %db_columns = %{$db_schema->{columns} || {}};\n    my %result_columns = %{$result_schema->{columns} || {}};\n    \n    # Find columns in database but not in Result file\n    foreach my $col_name (keys %db_columns) {\n        unless (exists $result_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_result',\n                column => $col_name,\n                description => \"Column '$col_name' exists in database but not in Result file\"\n            };\n        }\n    }\n    \n    # Find columns in Result file but not in database\n    foreach my $col_name (keys %result_columns) {\n        unless (exists $db_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_database',\n                column => $col_name,\n                description => \"Column '$col_name' exists in Result file but not in database\"\n            };\n        }\n    }\n    \n    # Compare column attributes for common columns\n    foreach my $col_name (keys %db_columns) {\n        if (exists $result_columns{$col_name}) {\n            my $db_col = $db_columns{$col_name};\n            my $result_col = $result_columns{$col_name};\n            \n            # Compare data types\n            if (($db_col->{data_type} || '') ne ($result_col->{data_type} || '')) {\n                push @differences, {\n                    type => 'column_type_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{data_type},\n                    result_value => $result_col->{data_type},\n                    description => \"Data type mismatch for column '$col_name'\"\n                };\n            }\n            \n            # Compare nullable status\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    type => 'column_nullable_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{is_nullable} ? 'YES' : 'NO',\n                    result_value => $result_col->{is_nullable} ? 'YES' : 'NO',\n                    description => \"Nullable status mismatch for column '$col_name'\"\n                };\n            }\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Get the database name\nsub get_database_name {\n    my ($self, $c) = @_;\n    \n    my $database_name = 'Unknown Database';\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SELECT DATABASE()\");\n        $sth->execute();\n        \n        if (my ($db_name) = $sth->fetchrow_array()) {\n            $database_name = $db_name;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_name', \n            \"Error getting database name: $_\");\n    };\n    \n    return $database_name;\n}\n\n# Get list of database tables with their schema information\nsub get_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_tables', \n            \"Error getting database tables: $_\");\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Ency database\nsub get_ency_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Log database connection info\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Connected to database: \" . $dbh->{Name});\n        \n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n        # Log the number of tables found\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Found \" . scalar(@tables) . \" tables: \" . join(', ', @tables));\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_database_tables', \n            \"Error getting ency database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Forager database\nsub get_forager_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_database_tables', \n            \"Error getting forager database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get table schema from the Ency database\nsub get_ency_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_table_schema', \n            \"Error getting ency table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get table schema from the Forager database\nsub get_forager_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_table_schema', \n            \"Error getting forager table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get database table schema information\nsub get_database_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE `$table_name`\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            # Parse MySQL column type\n            my ($data_type, $size) = $self->parse_mysql_column_type($row->{Type});\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $data_type,\n                size => $size,\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                extra => $row->{Extra}\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n        # Get unique constraints\n        $sth = $dbh->prepare(\"\n            SELECT \n                CONSTRAINT_NAME,\n                GROUP_CONCAT(COLUMN_NAME ORDER BY ORDINAL_POSITION) as COLUMNS\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND CONSTRAINT_NAME != 'PRIMARY'\n            GROUP BY CONSTRAINT_NAME\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{unique_constraints}}, {\n                name => $row->{CONSTRAINT_NAME},\n                columns => [split(',', $row->{COLUMNS})]\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_table_schema', \n            \"Error getting schema for table $table_name: $_\");\n    };\n    \n    return $schema_info;\n}\n\n# Parse MySQL column type to extract data type and size\nsub parse_mysql_column_type {\n    my ($self, $type_string) = @_;\n    \n    # Handle common MySQL types\n    if ($type_string =~ /^(\\w+)\\((\\d+)\\)/) {\n        return ($1, $2);\n    } elsif ($type_string =~ /^(\\w+)\\((\\d+),(\\d+)\\)/) {\n        return ($1, \"$2,$3\");  # For decimal types\n    } elsif ($type_string =~ /^(\\w+)/) {\n        return ($1, undef);\n    }\n    \n    return ($type_string, undef);\n}\n\n# Get Result files and their schema information\nsub get_result_files {\n    my ($self, $c) = @_;\n    \n    my $result_files = {};\n    \n    try {\n        my $result_dir = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result');\n        \n        if (-d $result_dir) {\n            find(sub {\n                return unless -f $_ && /\\.pm$/;\n                return if $_ eq 'User.pm' && -d $File::Find::dir . '/User'; # Skip if there's a User directory\n                \n                my $file_path = $File::Find::name;\n                my $relative_path = $file_path;\n                $relative_path =~ s/^\\Q$result_dir\\E\\/?//;\n                \n                # Skip files in subdirectories for now (like User/User.pm)\n                return if $relative_path =~ /\\//;\n                \n                my $table_name = $_;\n                $table_name =~ s/\\.pm$//;\n                \n                my $schema_info = $self->get_result_file_schema($c, $table_name, $file_path);\n                if ($schema_info) {\n                    $result_files->{$schema_info->{table_name} || lc($table_name)} = $schema_info;\n                }\n            }, $result_dir);\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_files', \n            \"Error getting Result files: $_\");\n    };\n    \n    return $result_files;\n}\n\n# Get schema information from a Result file\nsub get_result_file_schema {\n    my ($self, $c, $class_name, $file_path) = @_;\n    \n    my $schema_info = {\n        file_path => $file_path,\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    try {\n        # Read the file content\n        my $content = read_file($file_path);\n        \n        # Extract table name\n        if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\)/) {\n            $schema_info->{table_name} = $1;\n        }\n        \n        # Extract columns\n        if ($content =~ /__PACKAGE__->add_columns\\((.*?)\\);/s) {\n            my $columns_text = $1;\n            $schema_info->{columns} = $self->parse_result_file_columns($columns_text);\n        }\n        \n        # Extract primary key\n        if ($content =~ /__PACKAGE__->set_primary_key\\((.*?)\\)/) {\n            my $pk_text = $1;\n            $pk_text =~ s/['\"\\s]//g;\n            @{$schema_info->{primary_keys}} = split(/,/, $pk_text);\n        }\n        \n        # Extract unique constraints\n        while ($content =~ /__PACKAGE__->add_unique_constraint\\(['\"]([^'\"]+)['\"] => \\[(.*?)\\]\\)/g) {\n            my $constraint_name = $1;\n            my $columns_text = $2;\n            $columns_text =~ s/['\"\\s]//g;\n            push @{$schema_info->{unique_constraints}}, {\n                name => $constraint_name,\n                columns => [split(/,/, $columns_text)]\n            };\n        }\n        \n        # Extract relationships\n        while ($content =~ /__PACKAGE__->(belongs_to|has_many|has_one|might_have)\\(([^)]+)\\)/g) {\n            my $relationship_type = $1;\n            my $relationship_text = $2;\n            \n            # Parse relationship parameters\n            my @params = split(/,/, $relationship_text);\n            if (@params >= 3) {\n                my $accessor = $params[0];\n                my $related_class = $params[1];\n                my $foreign_key = $params[2];\n                \n                # Clean up the parameters\n                $accessor =~ s/['\"\\s]//g;\n                $related_class =~ s/['\"\\s]//g;\n                $foreign_key =~ s/['\"\\s]//g;\n                \n                push @{$schema_info->{relationships}}, {\n                    type => $relationship_type,\n                    accessor => $accessor,\n                    related_class => $related_class,\n                    foreign_key => $foreign_key\n                };\n            }\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_schema', \n            \"Error parsing Result file $file_path: $_\");\n        return undef;\n    };\n    \n    return $schema_info;\n}\n\n# Parse column definitions from Result file\nsub parse_result_file_columns {\n    my ($self, $columns_text) = @_;\n    \n    my $columns = {};\n    \n    # Split by column definitions (looking for column_name => { ... })\n    while ($columns_text =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n        my $column_name = $1;\n        my $column_def = $2;\n        \n        my $column_info = {};\n        \n        # Parse column attributes\n        while ($column_def =~ /(\\w+)\\s*=>\\s*['\"]?([^'\",\\s]+)['\"]?/g) {\n            my $attr = $1;\n            my $value = $2;\n            \n            if ($attr eq 'size' && $value =~ /^\\d+$/) {\n                $column_info->{$attr} = int($value);\n            } elsif ($attr eq 'is_nullable' || $attr eq 'is_auto_increment') {\n                $column_info->{$attr} = ($value eq '1' || $value eq 'true') ? 1 : 0;\n            } else {\n                $column_info->{$attr} = $value;\n            }\n        }\n        \n        $columns->{$column_name} = $column_info;\n    }\n    \n    return $columns;\n}\n\n# Compare schema between database table and Result file\nsub compare_table_schema {\n    my ($self, $c, $table_name, $db_tables, $result_files) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database_table_exists => 0,\n        result_file_exists => 0,\n        has_differences => 0,\n        column_differences => [],\n        primary_key_differences => [],\n        relationship_differences => [],\n        unique_constraint_differences => [],\n        database_schema => undef,\n        result_file_schema => undef\n    };\n    \n    # Check if database table exists\n    $comparison->{database_table_exists} = grep { $_ eq $table_name } @$db_tables;\n    \n    # Check if Result file exists\n    $comparison->{result_file_exists} = exists $result_files->{$table_name};\n    \n    # Get schemas if both exist\n    if ($comparison->{database_table_exists}) {\n        $comparison->{database_schema} = $self->get_database_table_schema($c, $table_name);\n    }\n    \n    if ($comparison->{result_file_exists}) {\n        $comparison->{result_file_schema} = $result_files->{$table_name};\n    }\n    \n    # Compare if both exist\n    if ($comparison->{database_table_exists} && $comparison->{result_file_exists}) {\n        $self->compare_columns($comparison);\n        $self->compare_primary_keys($comparison);\n        $self->compare_unique_constraints($comparison);\n        $self->compare_relationships($comparison);\n        \n        # Set has_differences flag\n        $comparison->{has_differences} = (\n            @{$comparison->{column_differences}} > 0 ||\n            @{$comparison->{primary_key_differences}} > 0 ||\n            @{$comparison->{relationship_differences}} > 0 ||\n            @{$comparison->{unique_constraint_differences}} > 0\n        );\n    } elsif (!$comparison->{database_table_exists} || !$comparison->{result_file_exists}) {\n        $comparison->{has_differences} = 1;\n    }\n    \n    return $comparison;\n}\n\n# Compare columns between database and Result file\nsub compare_columns {\n    my ($self, $comparison) = @_;\n    \n    my $db_columns = $comparison->{database_schema}->{columns};\n    my $result_columns = $comparison->{result_file_schema}->{columns};\n    \n    # Get all column names\n    my %all_columns = ();\n    foreach my $col (keys %$db_columns) { $all_columns{$col} = 1; }\n    foreach my $col (keys %$result_columns) { $all_columns{$col} = 1; }\n    \n    foreach my $column_name (sort keys %all_columns) {\n        my $db_col = $db_columns->{$column_name};\n        my $result_col = $result_columns->{$column_name};\n        \n        if (!$db_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_database',\n                result_file_definition => $result_col\n            };\n        } elsif (!$result_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_result_file',\n                database_definition => $db_col\n            };\n        } else {\n            # Compare column attributes\n            my @differences = ();\n            \n            # Compare data type\n            if (lc($db_col->{data_type}) ne lc($result_col->{data_type})) {\n                push @differences, {\n                    attribute => 'data_type',\n                    database_value => $db_col->{data_type},\n                    result_file_value => $result_col->{data_type}\n                };\n            }\n            \n            # Compare size\n            if (defined($db_col->{size}) != defined($result_col->{size}) ||\n                (defined($db_col->{size}) && defined($result_col->{size}) && \n                 $db_col->{size} ne $result_col->{size})) {\n                push @differences, {\n                    attribute => 'size',\n                    database_value => $db_col->{size},\n                    result_file_value => $result_col->{size}\n                };\n            }\n            \n            # Compare nullable\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    attribute => 'is_nullable',\n                    database_value => $db_col->{is_nullable},\n                    result_file_value => $result_col->{is_nullable}\n                };\n            }\n            \n            # Compare auto increment\n            if (($db_col->{is_auto_increment} || 0) != ($result_col->{is_auto_increment} || 0)) {\n                push @differences, {\n                    attribute => 'is_auto_increment',\n                    database_value => $db_col->{is_auto_increment},\n                    result_file_value => $result_col->{is_auto_increment}\n                };\n            }\n            \n            if (@differences) {\n                push @{$comparison->{column_differences}}, {\n                    column => $column_name,\n                    type => 'attribute_differences',\n                    differences => \\@differences,\n                    database_definition => $db_col,\n                    result_file_definition => $result_col\n                };\n            }\n        }\n    }\n}\n\n# Compare primary keys\nsub compare_primary_keys {\n    my ($self, $comparison) = @_;\n    \n    my $db_pks = $comparison->{database_schema}->{primary_keys};\n    my $result_pks = $comparison->{result_file_schema}->{primary_keys};\n    \n    # Sort for comparison\n    my @db_pks_sorted = sort @$db_pks;\n    my @result_pks_sorted = sort @$result_pks;\n    \n    if (join(',', @db_pks_sorted) ne join(',', @result_pks_sorted)) {\n        push @{$comparison->{primary_key_differences}}, {\n            database_primary_keys => \\@db_pks_sorted,\n            result_file_primary_keys => \\@result_pks_sorted\n        };\n    }\n}\n\n# Compare unique constraints\nsub compare_unique_constraints {\n    my ($self, $comparison) = @_;\n    \n    my $db_constraints = $comparison->{database_schema}->{unique_constraints};\n    my $result_constraints = $comparison->{result_file_schema}->{unique_constraints};\n    \n    # This is a simplified comparison - you might want to make it more sophisticated\n    if (@$db_constraints != @$result_constraints) {\n        push @{$comparison->{unique_constraint_differences}}, {\n            database_constraints => $db_constraints,\n            result_file_constraints => $result_constraints\n        };\n    }\n}\n\n# Compare relationships (this is Result file specific)\nsub compare_relationships {\n    my ($self, $comparison) = @_;\n    \n    # For now, we'll just note if relationships exist in the Result file\n    # but aren't reflected in the database foreign keys\n    my $result_relationships = $comparison->{result_file_schema}->{relationships};\n    my $db_foreign_keys = $comparison->{database_schema}->{foreign_keys};\n    \n    if (@$result_relationships > @$db_foreign_keys) {\n        push @{$comparison->{relationship_differences}}, {\n            type => 'missing_foreign_keys_in_database',\n            result_file_relationships => $result_relationships,\n            database_foreign_keys => $db_foreign_keys\n        };\n    }\n}\n\n# Apply selected schema changes\nsub apply_schema_changes {\n    my ($self, $c) = @_;\n    \n    my $changes = $c->req->param('changes');\n    my $direction = $c->req->param('direction'); # 'db_to_result' or 'result_to_db'\n    \n    if (!$changes) {\n        $c->flash->{error_msg} = \"No changes selected to apply.\";\n        return;\n    }\n    \n    try {\n        my $changes_data = decode_json($changes);\n        my $applied_changes = 0;\n        \n        foreach my $change (@$changes_data) {\n            if ($direction eq 'db_to_result') {\n                $self->apply_database_to_result_change($c, $change);\n            } elsif ($direction eq 'result_to_db') {\n                $self->apply_result_to_database_change($c, $change);\n            }\n            $applied_changes++;\n        }\n        \n        $c->flash->{success_msg} = \"Successfully applied $applied_changes changes.\";\n        \n    } catch {\n        my $error = \"Error applying changes: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'apply_schema_changes', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Apply change from database to Result file\nsub apply_database_to_result_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the Result file based on database schema\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_database_to_result_change', \n        \"Applying database to Result file change: \" . encode_json($change));\n}\n\n# Apply change from Result file to database\nsub apply_result_to_database_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the database schema based on Result file\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_result_to_database_change', \n        \"Applying Result file to database change: \" . encode_json($change));\n}\n\n# Generate Result file from database table\nsub generate_result_file {\n    my ($self, $c) = @_;\n    \n    my $table_name = $c->req->param('table_name');\n    \n    if (!$table_name) {\n        $c->flash->{error_msg} = \"No table name specified for Result file generation.\";\n        return;\n    }\n    \n    try {\n        my $db_schema = $self->get_database_table_schema($c, $table_name);\n        my $result_file_content = $self->generate_result_file_content($table_name, $db_schema);\n        \n        # Save the Result file\n        my $result_file_path = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result', ucfirst($table_name) . '.pm');\n        write_file($result_file_path, $result_file_content);\n        \n        $c->flash->{success_msg} = \"Result file generated successfully for table '$table_name'.\";\n        \n    } catch {\n        my $error = \"Error generating Result file: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'generate_result_file', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Generate Result file content from database schema\nsub generate_result_file_content {\n    my ($self, $table_name, $db_schema) = @_;\n    \n    my $class_name = ucfirst($table_name);\n    my $content = \"package Comserv::Model::Schema::Ency::Result::$class_name;\\n\";\n    $content .= \"use base 'DBIx::Class::Core';\\n\\n\";\n    $content .= \"__PACKAGE__->table('$table_name');\\n\";\n    $content .= \"__PACKAGE__->add_columns(\\n\";\n    \n    # Add columns\n    foreach my $column_name (sort keys %{$db_schema->{columns}}) {\n        my $col = $db_schema->{columns}->{$column_name};\n        $content .= \"    $column_name => {\\n\";\n        $content .= \"        data_type => '$col->{data_type}',\\n\";\n        \n        if (defined $col->{size}) {\n            $content .= \"        size => $col->{size},\\n\";\n        }\n        \n        if ($col->{is_nullable}) {\n            $content .= \"        is_nullable => 1,\\n\";\n        }\n        \n        if ($col->{is_auto_increment}) {\n            $content .= \"        is_auto_increment => 1,\\n\";\n        }\n        \n        if (defined $col->{default_value}) {\n            $content .= \"        default_value => '$col->{default_value}',\\n\";\n        }\n        \n        $content .= \"    },\\n\";\n    }\n    \n    $content .= \");\\n\";\n    \n    # Add primary key\n    if (@{$db_schema->{primary_keys}}) {\n        my $pk_list = join(', ', map { \"'$_'\" } @{$db_schema->{primary_keys}});\n        $content .= \"__PACKAGE__->set_primary_key($pk_list);\\n\";\n    }\n    \n    # Add unique constraints\n    foreach my $constraint (@{$db_schema->{unique_constraints}}) {\n        my $col_list = join(', ', map { \"'$_'\" } @{$constraint->{columns}});\n        $content .= \"__PACKAGE__->add_unique_constraint('$constraint->{name}' => [$col_list]);\\n\";\n    }\n    \n    $content .= \"\\n1;\\n\";\n    \n    return $content;\n}\n\n# Git pull functionality\nsub git_pull :Path('/admin/git_pull') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Starting git_pull action\");\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_pull', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request (user confirmed the git pull)\n    if ($c->req->method eq 'POST' && $c->req->param('confirm')) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n            \"Git pull confirmed, executing\");\n        \n        # Execute the git pull operation\n        my ($success, $output, $warning) = $self->execute_git_pull($c);\n        \n        # Store the results in stash for the template\n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Git pull completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Git pull failed. See output for details.\",\n            warning_msg => $warning\n        );\n    }\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller git_pull view - Template: admin/git_pull.tt\";\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_pull.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Completed git_pull action\");\n}\n\n# Execute the git pull operation with divergent branch handling\nsub execute_git_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 0;\n    \n    # Path to the theme_mappings.json file\n    my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n    my $backup_path = \"$theme_mappings_path.bak\";\n    \n    # Check if theme_mappings.json exists\n    my $theme_mappings_exists = -e $theme_mappings_path;\n    \n    try {\n        # Backup theme_mappings.json if it exists\n        if ($theme_mappings_exists) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Backing up theme_mappings.json\");\n            copy($theme_mappings_path, $backup_path) or die \"Failed to backup theme_mappings.json: $!\";\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Check Git status and handle divergent branches\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Checking Git status for divergent branches\");\n        \n        # First, fetch the latest changes from remote\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\";\n        \n        # Check for divergent branches\n        my $status_output = `git -C ${\\$c->path_to()} status --porcelain=v1 2>&1`;\n        my $branch_status = `git -C ${\\$c->path_to()} status -b --porcelain=v1 2>&1`;\n        \n        $output .= \"Git status output:\\n$status_output\\n\";\n        $output .= \"Branch status:\\n$branch_status\\n\";\n        \n        # Check if there are local changes that need to be stashed\n        my $has_local_changes = 0;\n        if ($theme_mappings_exists) {\n            my $git_status = `git -C ${\\$c->path_to()} status --porcelain root/static/config/theme_mappings.json`;\n            $has_local_changes = $git_status =~ /^\\s*[AM]\\s+root\\/static\\/config\\/theme_mappings\\.json/m;\n            \n            if ($has_local_changes) {\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Local changes detected in theme_mappings.json\");\n                $output .= \"Local changes detected in theme_mappings.json\\n\";\n                \n                # Stash the changes\n                my $stash_output = `git -C ${\\$c->path_to()} stash push -m \"Auto-stash before git pull\" -- root/static/config/theme_mappings.json 2>&1`;\n                $output .= \"Stashed changes: $stash_output\\n\";\n            }\n        }\n        \n        # Check if we have divergent branches by comparing local and remote\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit: $local_commit\\n\";\n        $output .= \"Remote commit: $remote_commit\\n\";\n        \n        # Check if branches have diverged\n        my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n        chomp($merge_base);\n        \n        my $diverged = 0;\n        if ($local_commit ne $remote_commit && $merge_base ne $local_commit && $merge_base ne $remote_commit) {\n            $diverged = 1;\n            $output .= \"Divergent branches detected - local and remote have different commits\\n\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                \"Divergent branches detected\");\n        }\n        \n        # Execute git pull with appropriate strategy\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Executing git pull with merge strategy\");\n        \n        # Use merge strategy to handle divergent branches safely\n        my $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n        $output .= \"Git pull output:\\n$pull_output\\n\";\n        \n        # Check if pull was successful or if we need to handle divergent branches\n        if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n            $success = 1;\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull completed successfully\");\n        } elsif ($pull_output =~ /divergent branches|Need to specify how to reconcile/) {\n            # Handle divergent branches with explicit merge strategy\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Handling divergent branches with merge strategy\");\n            \n            # Configure git to use merge strategy for divergent branches\n            my $config_output = `git -C ${\\$c->path_to()} config pull.rebase false 2>&1`;\n            $output .= \"Git config output: $config_output\\n\";\n            \n            # Try pull again with explicit merge strategy\n            $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n            $output .= \"Git pull (retry) output:\\n$pull_output\\n\";\n            \n            if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n                $success = 1;\n                $warning = \"Divergent branches were successfully merged. Local changes have been preserved.\";\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Divergent branches resolved successfully\");\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Git pull failed after handling divergent branches: $pull_output\");\n                return (0, $output, \"Git pull failed after attempting to resolve divergent branches. Manual intervention may be required.\");\n            }\n        } elsif ($pull_output =~ /CONFLICT/) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull resulted in conflicts: $pull_output\");\n            return (0, $output, \"Git pull resulted in merge conflicts. Manual resolution required.\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull failed: $pull_output\");\n            return (0, $output, \"Git pull failed. See output for details.\");\n        }\n        \n        # Apply stashed changes if needed\n        if ($has_local_changes) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Applying stashed changes\");\n            my $stash_apply_output = `git -C ${\\$c->path_to()} stash pop 2>&1`;\n            $output .= \"Applied stashed changes:\\n$stash_apply_output\\n\";\n            \n            # Check for conflicts\n            if ($stash_apply_output =~ /CONFLICT|error:/) {\n                $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Conflicts detected when applying stashed changes\");\n                $warning = \"Conflicts detected when applying stashed changes. You may need to manually resolve them.\";\n                \n                # Restore from backup\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Restoring theme_mappings.json from backup\");\n                copy($backup_path, $theme_mappings_path) or die \"Failed to restore from backup: $!\";\n                $output .= \"Restored theme_mappings.json from backup due to conflicts\\n\";\n            }\n        }\n        \n        # Final status check\n        my $final_status = `git -C ${\\$c->path_to()} status --porcelain 2>&1`;\n        if ($final_status) {\n            $output .= \"Final git status:\\n$final_status\\n\";\n            if ($final_status =~ /^UU|^AA|^DD/) {\n                $warning = \"There may be unresolved merge conflicts. Please check the repository status.\";\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Git pull operation completed\");\n            \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n            \"Error during git pull: $error\");\n        $output .= \"Error: $error\\n\";\n        return (0, $output, undef);\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Emergency Git operations for production servers\nsub git_emergency :Path('/admin/git_emergency') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Starting git_emergency action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_emergency', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request with specific action\n    if ($c->req->method eq 'POST') {\n        my $action = $c->req->param('action') || '';\n        my ($success, $output, $warning) = (0, '', undef);\n        \n        if ($action eq 'reset_hard') {\n            ($success, $output, $warning) = $self->execute_git_reset_hard($c);\n        } elsif ($action eq 'force_pull') {\n            ($success, $output, $warning) = $self->execute_git_force_pull($c);\n        } elsif ($action eq 'status_check') {\n            ($success, $output, $warning) = $self->execute_git_status_check($c);\n        }\n        \n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Operation completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Operation failed. See output for details.\",\n            warning_msg => $warning,\n            action_performed => $action\n        );\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_emergency.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Completed git_emergency action\");\n}\n\n# Execute Git status check for diagnostics\nsub execute_git_status_check {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 1;\n    \n    try {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Performing comprehensive Git status check\");\n        \n        # Get current branch\n        my $current_branch = `git -C ${\\$c->path_to()} branch --show-current 2>&1`;\n        chomp($current_branch);\n        $output .= \"Current branch: $current_branch\\n\\n\";\n        \n        # Get Git status\n        my $status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Git status:\\n$status\\n\\n\";\n        \n        # Get local and remote commit info\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit (HEAD): $local_commit\\n\";\n        $output .= \"Remote commit (origin/master): $remote_commit\\n\\n\";\n        \n        # Check if branches have diverged\n        if ($local_commit ne $remote_commit) {\n            my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n            chomp($merge_base);\n            \n            if ($merge_base ne $local_commit && $merge_base ne $remote_commit) {\n                $output .= \"⚠️  DIVERGENT BRANCHES DETECTED\\n\";\n                $output .= \"Merge base: $merge_base\\n\";\n                $warning = \"Branches have diverged. Local and remote have different commits.\";\n            } elsif ($merge_base eq $local_commit) {\n                $output .= \"✅ Local branch is behind remote (safe to pull)\\n\";\n            } else {\n                $output .= \"✅ Local branch is ahead of remote\\n\";\n            }\n        } else {\n            $output .= \"✅ Local and remote are in sync\\n\";\n        }\n        \n        # Get recent commits\n        my $recent_commits = `git -C ${\\$c->path_to()} log --oneline -5 2>&1`;\n        $output .= \"\\nRecent commits:\\n$recent_commits\\n\";\n        \n        # Check for uncommitted changes\n        my $uncommitted = `git -C ${\\$c->path_to()} diff --name-only 2>&1`;\n        if ($uncommitted) {\n            $output .= \"\\nUncommitted changes:\\n$uncommitted\\n\";\n        }\n        \n        # Check for untracked files\n        my $untracked = `git -C ${\\$c->path_to()} ls-files --others --exclude-standard 2>&1`;\n        if ($untracked) {\n            $output .= \"\\nUntracked files (first 10):\\n\";\n            my @untracked_lines = split(/\\n/, $untracked);\n            for my $i (0..9) {\n                last unless $untracked_lines[$i];\n                $output .= \"$untracked_lines[$i]\\n\";\n            }\n            if (@untracked_lines > 10) {\n                $output .= \"... and \" . (@untracked_lines - 10) . \" more files\\n\";\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Error during Git status check: $error\");\n        $output .= \"Error: $error\\n\";\n        $success = 0;\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git force pull (dangerous - use with caution)\nsub execute_git_force_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  FORCE PULL PERFORMED - Local changes may be lost!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Performing FORCE PULL - this may lose local changes\");\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Reset to remote state (DANGEROUS)\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard output:\\n$reset_output\\n\\n\";\n        \n        # Clean untracked files\n        my $clean_output = `git -C ${\\$c->path_to()} clean -fd 2>&1`;\n        $output .= \"Git clean output:\\n$clean_output\\n\\n\";\n        \n        # Verify final state\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Force pull completed - local changes were discarded\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Error during force pull: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git reset hard (very dangerous - use only in emergencies)\nsub execute_git_reset_hard {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  HARD RESET PERFORMED - All local changes have been discarded!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Performing HARD RESET - this will discard ALL local changes\");\n        \n        # Get current commit for reference\n        my $current_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($current_commit);\n        $output .= \"Current commit before reset: $current_commit\\n\\n\";\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes first\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Hard reset to remote master\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard origin/master output:\\n$reset_output\\n\\n\";\n        \n        # Get new commit for reference\n        my $new_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($new_commit);\n        $output .= \"New commit after reset: $new_commit\\n\\n\";\n        \n        # Final status\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Hard reset completed - repository is now at origin/master\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Error during hard reset: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# AJAX endpoint to sync table field to result file\nsub sync_table_to_result :Path('/admin/sync_table_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_table_to_result',\n        \"Starting sync_table_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    \n    unless ($table_name && $field_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, field_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Get table field info\n        my $table_field_info = $self->get_table_field_info($c, $table_name, $field_name, $database);\n        \n        # Update result file with table values\n        my $result = $self->update_result_field_from_table($c, $table_name, $field_name, $database, $table_field_info);\n        \n        $c->stash(json => {\n            success => 1,\n            message => \"Successfully synced table field '$field_name' to result file\",\n            field_info => $table_field_info\n        });\n        \n    } catch {\n        my $error = \"Error syncing table to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_table_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to sync result field to table\nsub sync_result_to_table :Path('/admin/sync_result_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_result_to_table',\n        \"Starting sync_result_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    my $sync_all = $json_data->{sync_all};\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # If field_name is not provided but sync_all is not true, return error\n    unless ($field_name || $sync_all) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Either field_name or sync_all must be provided' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        if ($sync_all) {\n            # Sync all fields from Result to table\n            my $result = $self->sync_all_fields_result_to_table($c, $table_name, $database);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced all fields from Result file to table '$table_name'\",\n                synced_fields => $result->{synced_fields} || [],\n                warnings => $result->{warnings} || []\n            });\n        } else {\n            # Sync single field\n            my $result_field_info = $self->get_result_field_info($c, $table_name, $field_name, $database);\n            my $result = $self->update_table_field_from_result($c, $table_name, $field_name, $database, $result_field_info);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced result field '$field_name' to table\",\n                field_info => $result_field_info\n            });\n        }\n        \n    } catch {\n        my $error = \"Error syncing result to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_result_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Debug endpoint to test field comparison\nsub debug_field_comparison :Path('/admin/debug_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name') || 'users';\n    my $database = $c->req->param('database') || 'ency';\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        $c->stash(json => {\n            success => 1,\n            table_name => $table_name,\n            database => $database,\n            comparison => $comparison,\n            mapping_keys => [keys %$result_table_mapping],\n            debug_info => {\n                has_result_file => $comparison->{has_result_file},\n                result_file_path => $comparison->{result_file_path},\n                fields_count => $comparison->{fields} ? scalar(keys %{$comparison->{fields}}) : 0\n            }\n        });\n        \n    } catch {\n        my $error = \"Debug field comparison error: $_\";\n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Helper method to get table field information\nsub get_table_field_info {\n    my ($self, $c, $table_name, $field_name, $database) = @_;\n    \n    my $model_name = $database eq 'ency' ? 'DBEncy' : 'DBForager';\n    my $schema = $c->model($model_name)->schema;\n    \n    # Get table information from database\n    my $dbh = $schema->storage->dbh;\n    my $sth = $dbh->column_info(undef, undef, $table_name, $field_name);\n    my $column_info = $sth->fetchrow_hashref;\n    \n    if (!$column_info) {\n        die \"Field '$field_name' not found in table '$table_name'\";\n    }\n    \n    return {\n        data_type => $column_info->{TYPE_NAME} || $column_info->{DATA_TYPE},\n        size => $column_info->{COLUMN_SIZE},\n        is_nullable => $column_info->{NULLABLE} ? 1 : 0,\n        is_auto_increment => $column_info->{IS_AUTOINCREMENT} ? 1 : 0,\n        default_value => $column_info->{COLUMN_DEF}\n    };\n}\n\n# Enhanced helper method to normalize data types for comparison\nsub normalize_data_type {\n    my ($self, $data_type) = @_;\n    \n    return '' unless defined $data_type;\n    \n    # Store original for debugging\n    my $original_type = $data_type;\n    \n    # Convert to lowercase for consistent comparison\n    $data_type = lc($data_type);\n    \n    # Remove size specifications and constraints\n    # Examples: varchar(255) -> varchar, int(11) -> int, decimal(10,2) -> decimal\n    $data_type =~ s/\\([^)]*\\)//g;\n    \n    # Remove extra whitespace\n    $data_type =~ s/^\\s+|\\s+$//g;\n    \n    # Handle unsigned/signed modifiers\n    $data_type =~ s/\\s+unsigned$//;\n    $data_type =~ s/\\s+signed$//;\n    \n    # Remove other common modifiers\n    $data_type =~ s/\\s+zerofill$//;\n    $data_type =~ s/\\s+binary$//;\n    \n    # Comprehensive type mapping for database-specific variations\n    my %type_mapping = (\n        # Integer types\n        'int'           => 'integer',\n        'int4'          => 'integer',\n        'int8'          => 'bigint',\n        'integer'       => 'integer',\n        'bigint'        => 'bigint',\n        'smallint'      => 'smallint',\n        'tinyint'       => 'tinyint',\n        'mediumint'     => 'integer',\n        \n        # String types\n        'varchar'       => 'varchar',\n        'char'          => 'char',\n        'character'     => 'char',\n        'text'          => 'text',\n        'longtext'    ",
                    "language": "perl5"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1753559993502,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "\"Continue working on schema comparison performance optimization. Read development-guidelines.md and ai-behavior-enforcement.md first."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "URGENT BUG TO FIX: There's a critical error in Admin.pm line 1804: 'Can't use string as HASH ref while strict refs in use'. This suggests that $config is being returned as a JSON string instead of a parsed hash reference from the get_all_database_configs method."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "CURRENT CONTEXT: The schema_compare method has been updated to load all databases from JSON config, and the missing support methods have been added, but there's a data type issue causing the error. The get_all_database_configs method is likely returning a string instead of a hash reference."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "FILES BEING WORKED ON:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm (needs line 1804 bug fix)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "/home/shanta/PycharmProjects/comserv2/Comserv/root/admin/schema_compare.tt (needs template updates)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "NEXT STEPS NEEDED:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "CRITICAL: Debug and fix the hash reference error on line 1804 in Admin.pm"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Check the get_all_database_configs method return value - ensure it returns a hash ref, not a string"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Test the schema_compare method after the fix"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Update schema_compare.tt template to display all databases as collapsible containers"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Add AJAX functionality to load comparison data when containers are opened"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Test the complete performance improvement"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "TECHNICAL DETAILS:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "The error occurs when trying to access $config as a hash reference"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "This suggests get_all_database_configs is returning a JSON string instead of parsed data"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Line 1804 is likely in the foreach loop processing database configurations"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "The user wants ALL databases from db_config.json to display as closed collapsible containers\""
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "📚 REQUIRED READING FOR NEXT AI:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ".zencoder/rules/development-guidelines.md"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ".zencoder/rules/ai-behavior-enforcement.md"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ".zencoder/rules/template-standards.md"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ".zencoder/rules/database-standards.md"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": ".zencoder/rules/debugging-protocols.md"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "✅ DOCUMENTATION UPDATED: Schema comparison backend methods added but critical hash reference bug needs immediate fixing before functionality can be tested."
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "remember it all used to work in the last commit. this is a result of changes being made without respect for existing function. "
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "User AI Instruction",
                    "description": "User AI Instruction",
                    "uri": "zen-rules://user/custom",
                    "content": "read AI_DEVELOPMENT_GUIDELINES\nall code must be varifed by user"
                },
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "content": "\n\n# Comserv Project Information\n\n## Summary\nComserv is a comprehensive web-based system for managing business operations, projects, and documentation. It's built using the Catalyst Perl web framework and provides features for project management, theme customization, and user authentication.\n\n## Structure\n- `Comserv/`: Main application directory containing the core application code\n  - `lib/`: Application code and models\n  - `docs/`: Documentation files\n  - `root/`: Static assets and templates\n  - `script/`: Utility scripts for server management and database operations\n  - `t/`: Test files\n- `app/`: Additional application components\n- `data/`: Data files including pricing information\n- `proxmox/`: Proxmox VE integration components\n\n## Language & Runtime\n**Language**: Perl\n**Version**: 5.x (compatible with Perl 5.40.0)\n**Framework**: Catalyst 5.90130\n**Build System**: Module::Install\n**Package Manager**: CPAN\n\n## Dependencies\n**Main Dependencies**:\n- Catalyst::Runtime (5.90130)\n- Moose\n- DBIx::Class\n- Template (Template Toolkit)\n- JSON/JSON::MaybeXS\n- Log::Log4perl\n- DateTime\n- File::Slurp\n\n**Development Dependencies**:\n- Test::More (0.88+)\n- Test::Pod\n- Test::Pod::Coverage\n- Test::WWW::Mechanize::Catalyst\n- Catalyst::Devel\n\n## Build & Installation\n```bash\ncd Comserv\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n## Database\n**Type**: MySQL\n**Setup**: \n```bash\nmysql -u root -p < database_initialization_script.sql\n```\n**Schema Management**: DBIx::Class::Schema::Loader\n\n## Testing\n**Framework**: Test::More\n**Test Location**: Comserv/t/\n**Run Command**:\n```bash\ncd Comserv\nprove -l t/\n```\n\n## Server Execution\n**Development Server**:\n```bash\ncd Comserv\nscript/comserv_server.pl\n```\n**Production Deployment**:\n```bash\ncd Comserv\nscript/comserv_fastcgi.pl\n# or\nstarman --port 5000 --workers 5 comserv.psgi\n```\n\n## Authentication & Authorization\n- Session-based authentication\n- Role-based access control\n- Multiple authentication realms\n- Support for user groups and site-specific permissions\n\n## Features\n- Project management system\n- Theme customization system\n- Email integration\n- PDF generation\n- Proxmox VE integration\n- Multi-site support"
                },
                {
                    "name": "Database Development Standards and Best Practices",
                    "description": "Database Development Standards and Best Practices",
                    "uri": "zen-rules://repo/database-standards",
                    "content": "\n\n# Database Development Standards\n\n## Query Standards\n- **Table Aliases:** Use table aliases in all queries to avoid ambiguity (e.g., 'me.column_name')\n- **Error Handling:** Implement proper error handling with eval blocks and try/catch\n- **Parameterized Queries:** Use parameterized queries to prevent SQL injection\n\n## Schema Management\n- **Naming Conventions:** Follow naming conventions for tables, columns, and relationships\n- **Documentation:** Document schema changes and rationale for future reference\n- **Performance:** Regularly optimize database performance and indexes\n- **Version Control:** Use Git to track schema changes with proper tagging\n- **Backup Protocol:** Always backup database before making schema changes\n\n## Model Standards (DBIx::Class)\n- **Result Classes:** Located in `/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema/Ency/Result/`\n- **Relationships:** Define proper relationships between tables\n- **Validation:** Implement data validation in model classes\n\n## Configuration Priority\n- **Primary:** ZeroTier production server (172.30.161.222) - works from any network\n- **Secondary:** Local network production server (192.168.1.198) - home/office only\n- **Tertiary:** localhost MySQL (development)\n- **Fallback:** SQLite (offline mode)\n\n## Security Protocols\n- **Input Validation:** Validate all user inputs before database operations\n- **Access Controls:** Implement proper access controls based on user roles\n- **Regular Reviews:** Regularly review and update security protocols"
                },
                {
                    "name": "AI Behavior Enforcement Rules for Zencoder",
                    "description": "AI Behavior Enforcement Rules for Zencoder",
                    "uri": "zen-rules://repo/ai-behavior-enforcement",
                    "content": "\n\n# AI Behavior Enforcement Rules\n\n## MANDATORY PROMPT TRACKING\n**CURRENT PROMPT:** This is prompt #[X] of 5 maximum allowed prompts.\n\n### Prompt Counter Protocol\n- **Start Each Response:** Begin every response with current prompt count\n- **Track Internally:** Keep running count throughout conversation\n- **Warn at Prompt 4:** Alert user that next prompt will trigger handoff\n- **Stop at Prompt 5:** Refuse to continue, provide handoff documentation\n\n## MANDATORY APPROVAL WORKFLOW\n\n### Before ANY Code Changes\n1. **STOP:** Do not modify any files without explicit user approval\n2. **PRESENT:** Show exactly what will be changed using the standard format\n3. **WAIT:** Wait for explicit approval (\"yes\", \"approved\", \"apply changes\")\n4. **CONFIRM:** Acknowledge approval before proceeding\n5. **EXECUTE:** Apply changes only after confirmation\n\n### Standard Change Presentation\n```\n🔄 PROPOSED CHANGE TO: [filename]\n📝 CHANGE TYPE: [Addition/Modification/Deletion]\n📋 DESCRIPTION: [what this accomplishes]\n\n❌ CURRENT CODE:\n[existing code or \"N/A\"]\n\n✅ NEW CODE:\n[proposed code or \"DELETED\"]\n\n💡 REASON: [why needed]\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed\n```\n\n## VIOLATION CONSEQUENCES\n- **Prompt Limit Exceeded:** Immediate session termination with handoff\n- **Unapproved Changes:** Acknowledge violation and request approval retroactively\n- **Missing Counter:** Add prompt counter to current response\n\n## HANDOFF TEMPLATE (Use on 5th Prompt)\n```\n🚨 PROMPT LIMIT REACHED - HANDOFF REQUIRED\n\n📊 SESSION SUMMARY:\n- Prompts Used: 5/5\n- Files Modified: [list]\n- Tasks Completed: [list]\n- Tasks Remaining: [list]\n\n🔄 HANDOFF PROMPT FOR NEXT AI:\n\"Continue working on [project/task]. Read development-guidelines.md and ai-behavior-enforcement.md first. \nCurrent context: [brief context]\nFiles being worked on: [list]\nNext steps needed: [specific actions]\"\n\n📚 REQUIRED READING FOR NEXT AI:\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- [any other relevant docs]\n\n✅ DOCUMENTATION UPDATED: [what was recorded]\n```\n\n## EMERGENCY PROTOCOLS\n- **User Says \"Stop\":** Immediately cease all activities\n- **User Says \"Revert\":** Provide instructions for undoing changes\n- **User Says \"Handoff\":** Immediately provide handoff documentation"
                },
                {
                    "name": "Template Toolkit Standards and Requirements",
                    "description": "Template Toolkit Standards and Requirements",
                    "uri": "zen-rules://repo/template-standards",
                    "content": "\n\n# Template Toolkit (.tt) Standards\n\n## Required PageVersion Header Format\nAll .tt files must include this exact format:\n```\n[% META title = 'Page Title Here' %]\n[% PageVersion = 'relative/path/filename.tt,v 0.01 YYYY/MM/DD author Exp author ' %]\n[% IF c.session.debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n```\n\n## Template Standards\n- **Theme Compliance:** Use theme system variables for styling - NO page-specific CSS\n- **Debug Mode:** Include debug mode blocks for development visibility\n- **Responsive Design:** Implement mobile-first responsive design patterns\n- **HTML Structure:** Use proper semantic HTML structure\n- **Template Toolkit:** Follow Template Toolkit best practices\n\n## Navigation Integration\nWhen working with navigation templates:\n- **Main Navigation:** Include via `/Navigation/navigation.tt`\n- **Admin Menu:** Use `/Navigation/admintopmenu.tt` for admin-only sections\n- **Dropdown Menus:** Reference existing dropdown templates in `/Navigation/` directory\n\n## Documentation File Rules - CRITICAL\n- **File Format:** ONLY `.tt` files for application documentation - NO `.md` files\n- **EXISTING FILES FIRST:** ALWAYS search for and use existing files before creating new ones\n- **Naming Consistency:** Use same file names across AI sessions to prevent content loss\n- **Content Priority:** Always improve existing files rather than creating new ones\n- **Role-Based Access:** Respect existing Documentation/index.tt role-based structure\n- **Directory Consolidation:** Use established directory structure - don't create new directories\n\n## File Creation Protocol\n1. **Search First:** Use file search tools to find existing similar files\n2. **Check Directory:** Look at existing directory structure in target location\n3. **Ask User:** If multiple similar files exist, ask which should be updated\n4. **Update Existing:** Improve existing files rather than creating duplicates"
                },
                {
                    "name": "Debugging and Troubleshooting Protocols",
                    "description": "Debugging and Troubleshooting Protocols",
                    "uri": "zen-rules://repo/debugging-protocols",
                    "content": "\n\n# Debugging Protocols\n\n## Log Analysis Priority\n1. **Application Logs:** Check `/home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log` first\n2. **Error Logs:** Look for recent errors and stack traces\n3. **Debug Mode:** Enable debug mode in session for detailed output\n\n## Common Debugging Steps\n1. **Reproduce Issue:** Ensure issue is reproducible\n2. **Check Recent Changes:** Review recent code modifications\n3. **Verify Dependencies:** Ensure all required modules are installed\n4. **Database Connectivity:** Test database connections\n5. **Permission Issues:** Check file and directory permissions\n\n## Testing Protocol\n- **Unit Tests:** Run relevant unit tests first\n- **Integration Tests:** Test full workflow\n- **Browser Testing:** Always test in actual browser environment\n- **Log Monitoring:** Monitor logs during testing\n\n## Performance Issues\n- **Database Queries:** Check for slow queries\n- **Memory Usage:** Monitor memory consumption\n- **Template Rendering:** Check template compilation times\n- **Network Latency:** Consider network-related delays"
                }
            ]
        },
        {
            "id": "645cdb40-5ba1-41f7-a1ff-0f3903598a51",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "**CURRENT PROMPT:** This is prompt #1 of 5 maximum allowed prompts.\n\nI understand the critical situation. There's a hash reference error on line 1804 in Admin.pm where `$config` is being treated as a string instead of a hash reference. This suggests the `get_all_database_configs` method is returning JSON string data instead of parsed hash data.\n\nLet me first examine the current state of the Admin.pm file around line 1804 to identify the exact issue:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01V6PYAk7srAupHirzZqoqvk",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me check the `get_all_database_configs` method to see what it's returning:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_016B1GpABkoRLv4o4m1mn3T4",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me examine the `get_all_database_configs` method:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01WvgQzEcRyoCqTrhJZ3mDxZ",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me check how this method is being used in the schema_compare method around line 1768:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01CwqVPHUnHuhXNYENq7F8JV",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "I can see the issue! The `get_all_database_configs` method looks correct and should return a hash reference. However, let me check if there's an issue with the `test_database_connection` method that might be causing problems. Let me also check the exact error by looking at the logs or examining the `test_database_connection` method:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01L5Xr2NDnuDm6LrYTz5uTa9",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me examine the `test_database_connection` method:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ExQy3wmRTJxabK1vx8XdYc",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The methods look correct. Let me check if there's a JSON parsing issue by examining the actual db_config.json file:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JPiL7TNFCFKKB8sEuK5dV9",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/db_config.json",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/db_config.json"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The JSON file looks valid. Let me check if there's an issue with the JSON module import or if there's a conflict. Let me look at the imports at the top of the file:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01By3CSok89HWg8AekYn7Na6",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The JSON import looks correct. Let me run a quick test to see if there are any syntax errors or issues by checking the application logs:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_019GndHUCt8onBoE7ToEXBAC",
                    "statusText": "Viewed folder",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/logs",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/logs"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check if there are any recent error logs:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01M7dVsiYSmsiQf9W1vXu3SC",
                    "status": "IN_PROGRESS",
                    "isHidden": true,
                    "localResult": "{\"status\":\"SUCCESS\",\"exitCode\":0,\"output\":\"-rw-rw-r-- 1 shanta shanta 120 Jun 22 03:33 /home/shanta/PycharmProjects/comserv2/Comserv/script/logs/app.log\\r\\n-rw-r--r-- 1 shanta shanta 85209 Jul 26 12:56 /home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log\\r\\n-rw-rw-r-- 1 shanta shanta 76067 Jul 26 12:27 /home/shanta/PycharmProjects/comserv2/Comserv/logs/errors.log\\r\\n-rw-r--r-- 1 shanta shanta 69646 Jul 26 03:02 /home/shanta/PycharmProjects/comserv2/logs/application.log\\r\\n-rw-rw-r-- 1 shanta shanta 16 Jun 13 08:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4b975cd3-1135-495b-8501-8c770d2a6184.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-26fc6b3d-1fa6-453c-83f3-b30fe4b66a31.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2208e96f-e798-4066-94d1-ec19927d15bb.log\\r\\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 07:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1fae6a60-aa81-49da-9a76-f85bae51e4d3.log\\r\\n-rw-r--r-- 1 shanta shanta 940 Jul 14 02:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5666015d-d7c7-444f-81f6-92f1f4d03357.log\\r\\n-rw-rw-r-- 1 shanta shanta 346 Jun 22 06:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e521f97c-0602-44ea-87b3-2052ec5e63bb.log\\r\\n-rw-rw-r-- 1 shanta shanta 264 Jun 13 05:38 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e58b63d3-563c-4ba2-b724-e7e424253cdf.log\\r\\n-rw-rw-r-- 1 shanta shanta 163 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b634db24-97e4-447d-aa4c-d54861b397a8.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-277a4d9a-0a6a-43bb-b249-2c6bf7d7ef3a.log\\r\\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a0f3f0-04dd-49a5-97aa-5da3ef9e2ee2.log\\r\\n-rw-r--r-- 1 shanta shanta 402 Jul 14 04:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e0bd0147-19eb-4309-a225-7e5d6c1f04cf.log\\r\\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a66c4a5-71c2-47db-88ef-01c277faac9f.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-340db89f-144c-4853-8ca7-681bcbd7c777.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3e73b93f-84fa-4f65-b8db-74f0af4c2af6.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e72527fb-b726-49d4-8fea-494f1f2584b6.log\\r\\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c1f520d-af14-4fa8-b6b9-3e9ba52e5347.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a3df967-0961-4c90-b121-492eb75d6c60.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-30476b5b-1a77-4ebe-bd7d-b729a2f80ce4.log\\r\\n-rw-rw-r-- 1 shanta shanta 108 Jun 22 06:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f55f6ef6-613b-4f30-9e6f-e986674c2a3d.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-64408a1f-c605-4222-abd1-7425442e1f05.log\\r\\n-rw-r--r-- 1 shanta shanta 1781 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e44af998-ba2f-4007-97c2-0538fb9a4848.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba222ba4-a449-4ffa-8888-a6977d6c4d20.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-96522cfe-3799-4698-b449-f788f75954fb.log\\r\\n-rw-rw-r-- 1 shanta shanta 6868 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eee4f329-1aca-4c06-a8b3-05f1360a459b.log\\r\\n-rw-rw-r-- 1 shanta shanta 48 Jun 22 02:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9ca1df78-0a10-4968-bd36-3aa53877fad6.log\\r\\n-rw-rw-r-- 1 shanta shanta 1773 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-98ab8c54-3846-4d41-bb1c-c97cc61bd441.log\\r\\n-rw-rw-r-- 1 shanta shanta 13899 Jul 25 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fdac49da-02d3-4cd2-a93a-38e749fcb43c.log\\r\\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b67029f-9f6a-47db-9879-b1f4d734ad1d.log\\r\\n-rw-rw-r-- 1 shanta shanta 444 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbba52ed-f2d4-43de-84e7-7f2f20485a28.log\\r\\n-rw-rw-r-- 1 shanta shanta 1329 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b197e78a-c303-48f6-a51d-11bd2887f6ee.log\\r\\n-rw-rw-r-- 1 shanta shanta 8389 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b18eef2-19ea-461b-bb90-986105bc7bb5.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3df0d710-12c8-4b7c-ad62-7e21296bd46f.log\\r\\n-rw-rw-r-- 1 shanta shanta 53 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e1476bd-22fe-4dab-bea1-36a84d8f17aa.log\\r\\n-rw-r--r-- 1 shanta shanta 497 Jul 14 05:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-985e1f21-fe05-4918-b2dd-897e9b8ed69a.log\\r\\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-22463636-937d-4b56-aafd-34d62bb16966.log\\r\\n-rw-rw-r-- 1 shanta shanta 487 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5d26d669-2418-49a8-8831-a315b1bbe73a.log\\r\\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-458bcd01-8e40-4774-a995-6b4e19c9d15d.log\\r\\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:17 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-95c761cf-a8cc-42ee-b097-d41d5c47d9ef.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-403824e5-363a-4bad-9261-4f84f12e4c51.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b64ca18-9e16-4444-9e32-e83037a19e97.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3c093cd3-edd3-4faa-a815-2f8b9ce516de.log\\r\\n-rw-rw-r-- 1 shanta shanta 75 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-02f1134d-dd8b-4b71-bc32-040199ebcb2b.log\\r\\n-rw-rw-r-- 1 shanta shanta 610 Jun 13 05:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba277740-b1b2-47c2-b173-5072bc4de076.log\\r\\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-21e63c72-4014-405f-a665-2a9daa227208.log\\r\\n-rw-rw-r-- 1 shanta shanta 1487 Jul 26 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bdf69c35-eb01-438b-aa9f-ca05cd9665d6.log\\r\\n-rw-rw-r-- 1 shanta shanta 2526 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c6106274-f777-4103-9574-ded0f0e1022a.log\\r\\n-rw-rw-r-- 1 shanta shanta 21 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a06106da-34cb-4764-ba38-bc6872595cbf.log\\r\\n-rw-rw-r-- 1 shanta shanta 328 Jul 25 06:51 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed0ded70-2e13-4b5c-9242-a13b197d9c5f.log\\r\\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-442fc247-b53c-4be1-92ef-d17785ff95ef.log\\r\\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6bb14e23-3d4a-40af-bfd5-e2b2afec3ebc.log\\r\\n-rw-rw-r-- 1 shanta shanta 1233 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4c0e0106-047c-4f27-89d6-fc66f887e384.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7fcab0fd-c561-4309-94d8-8bd354630d99.log\\r\\n-rw-rw-r-- 1 shanta shanta 40 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-08db8f68-17b7-4150-826c-4980d414a646.log\\r\\n-rw-rw-r-- \\n<response clipped><NOTE>To save on context the middle of the response was cut out and only the beginning and end of the output were shown to you.</NOTE>\\n-cc5289ada25e.log\\r\\n-rw-rw-r-- 1 shanta shanta 155 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3bbb3f7f-ca66-4ec8-8f1c-556ece96c03c.log\\r\\n-rw-rw-r-- 1 shanta shanta 8 Jun 22 03:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b61c9ee7-c002-490e-9b7c-1a1b73e18dd1.log\\r\\n-rw-rw-r-- 1 shanta shanta 14062 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-16b340e4-3fb2-4720-8482-75e9df26fbac.log\\r\\n-rw-rw-r-- 1 shanta shanta 331 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca1f4084-d957-4a69-840f-44f5a885db40.log\\r\\n-rw-rw-r-- 1 shanta shanta 560 Jun 13 05:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9cdb042f-e3c4-48d6-a969-257b93866ea6.log\\r\\n-rw-rw-r-- 1 shanta shanta 281 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e05b6873-de90-4662-9b1b-b2392c132580.log\\r\\n-rw-rw-r-- 1 shanta shanta 1295 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed5015f8-80f6-4f5d-8e8e-617e944bfd60.log\\r\\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-606f7056-8332-4025-82c2-9d58714c42a9.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76a52042-ebbd-4885-aa51-64be08133027.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c1f9d817-6b49-47cf-ae91-66a93a8d7a15.log\\r\\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9768f880-0d95-479f-b564-3e10ceca9858.log\\r\\n-rw-rw-r-- 1 shanta shanta 180 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c630919-93b5-4773-ac1a-1620cc029020.log\\r\\n-rw-rw-r-- 1 shanta shanta 71 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e93ab2d-d38a-4585-b540-4e630c2adb52.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f5ebd847-1194-44a8-805d-5f50c78f5fc7.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fa84f4c-c93b-4f7b-9049-9db9c59f282d.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:25 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b969c34-19e1-4d3a-9a04-6242540d2535.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a08ef684-2a43-4387-a2d6-fd5c9f73683c.log\\r\\n-rw-rw-r-- 1 shanta shanta 306 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-479ff6eb-90d4-4b40-9320-354ce5f130d1.log\\r\\n-rw-rw-r-- 1 shanta shanta 2659 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-83cafae8-ef8e-4c0a-9bbf-c8a65e3b98e9.log\\r\\n-rw-rw-r-- 1 shanta shanta 103 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e2066049-d589-4d3f-8935-6316c3459955.log\\r\\n-rw-rw-r-- 1 shanta shanta 93 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29db9cae-2993-4509-9948-97da190025b6.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f7676a4f-326e-4951-9003-879aa8db6301.log\\r\\n-rw-rw-r-- 1 shanta shanta 56 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cb8ecf7-ef68-4a60-820f-c800d939d511.log\\r\\n-rw-rw-r-- 1 shanta shanta 1276 Jun 13 05:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fd0927c0-1508-47bd-82fe-05b5e7adda2b.log\\r\\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cec7c31c-8950-445f-a453-9ca06153cbfd.log\\r\\n-rw-r--r-- 1 shanta shanta 612 Jul 14 08:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-09fc7b27-40bb-422b-8735-39dfa3ba4a79.log\\r\\n-rw-rw-r-- 1 shanta shanta 63 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cefbf9e9-fc1c-4434-b642-7975e35fe666.log\\r\\n-rw-rw-r-- 1 shanta shanta 60 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b936d10-b7bf-4d50-be19-578e7ec98ed9.log\\r\\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f8a39c78-1096-4838-8d99-41def2f0022b.log\\r\\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f3e1084-4880-422b-ac4a-34d125f27504.log\\r\\n-rw-r--r-- 1 shanta shanta 5545 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e955d915-2ca5-46eb-9b81-f40a24c5808f.log\\r\\n-rw-rw-r-- 1 shanta shanta 88 Jun 13 05:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d42b8767-2682-48f2-ad8b-86abdbc1b329.log\\r\\n-rw-rw-r-- 1 shanta shanta 18375 Jul 25 09:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5508cacf-3eb2-4279-84b6-0df8ec8734e5.log\\r\\n-rw-rw-r-- 1 shanta shanta 480 Jun 22 04:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cf0e78a2-8796-4d64-acb1-d9c97ec07242.log\\r\\n-rw-r--r-- 1 shanta shanta 3574 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b8e6d43-9d8b-4a81-89fa-af1382612fab.log\\r\\n-rw-rw-r-- 1 shanta shanta 768 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-de3f3e1d-b932-4f15-bc31-5942c7b136eb.log\\r\\n-rw-r--r-- 1 shanta shanta 96 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6e396ccc-391f-4a49-991b-928c8e42843b.log\\r\\n-rw-rw-r-- 1 shanta shanta 48 Jul 25 07:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fdf7310-1b5c-462c-b3ad-293aae4bd327.log\\r\\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e555d859-96fc-4a5f-a73f-b7340d55faef.log\\r\\n-rw-rw-r-- 1 shanta shanta 1763 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a93de3-4fa8-4471-9e4c-ca63f3bec8b8.log\\r\\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-03615208-c1a7-4041-8bad-d8538db03151.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-216cf0d2-6d6d-44b9-9353-3da777990039.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a2411730-a028-45bb-adb3-57f8a6005c4c.log\\r\\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-363aaecb-ae55-4773-b2da-bc92b16e9e73.log\\r\\n-rw-rw-r-- 1 shanta shanta 797 Jul 25 10:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6259076c-cfeb-46a4-91df-0548f295d69f.log\\r\\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d82501a-34c3-4f2a-8db0-d3589ffaa59b.log\\r\\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 08:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-174b8f52-e897-4354-a08c-a16d29da54d1.log\\r\\n-rw-r--r-- 1 shanta shanta 877 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cda1cfb-dfc4-4a68-b97e-f04261350907.log\\r\\n-rw-rw-r-- 1 shanta shanta 69 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c973e8dc-0aab-499f-bf99-5780d9d39c63.log\\r\\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bd71dc5-9207-41c3-b40a-1c0b182207b4.log\\r\\n-rw-r--r-- 1 shanta shanta 204 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0664db91-d21c-490a-98c9-424823cd83ba.log\\r\\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29e2faf5-4688-43ad-ba76-c1476ba755d3.log\\r\\n-rw-rw-r-- 1 shanta shanta 2730 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cbdcdc8c-eb0c-44aa-a1e7-2e2c20b9cccf.log\\r\\n-rw-rw-r-- 1 shanta shanta 2969 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-89f65e53-a726-40b7-aede-a72a3b6d6b5e.log\\r\\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-049387c4-7b6e-4c57-9c26-fc65c4732d79.log\\r\\n-rw-rw-r-- 1 shanta shanta 54 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f8a8bde-a8db-4de9-b952-0cc234af3ed6.log\\r\\n\"}"
                },
                {
                    "type": "shellCommand",
                    "command": "find /home/shanta/PycharmProjects/comserv2 -name \"*.log\" -type f -exec ls -la {} \\;",
                    "id": "935b1dde-413d-4663-9ea2-ae1ca5196aff",
                    "status": "SUCCESS",
                    "toolCallId": "toolu_01M7dVsiYSmsiQf9W1vXu3SC",
                    "commandsRequiringConfirmation": [],
                    "exitCode": 0,
                    "output": "-rw-rw-r-- 1 shanta shanta 120 Jun 22 03:33 /home/shanta/PycharmProjects/comserv2/Comserv/script/logs/app.log\r\n-rw-r--r-- 1 shanta shanta 85209 Jul 26 12:56 /home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log\r\n-rw-rw-r-- 1 shanta shanta 76067 Jul 26 12:27 /home/shanta/PycharmProjects/comserv2/Comserv/logs/errors.log\r\n-rw-r--r-- 1 shanta shanta 69646 Jul 26 03:02 /home/shanta/PycharmProjects/comserv2/logs/application.log\r\n-rw-rw-r-- 1 shanta shanta 16 Jun 13 08:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4b975cd3-1135-495b-8501-8c770d2a6184.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-26fc6b3d-1fa6-453c-83f3-b30fe4b66a31.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2208e96f-e798-4066-94d1-ec19927d15bb.log\r\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 07:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1fae6a60-aa81-49da-9a76-f85bae51e4d3.log\r\n-rw-r--r-- 1 shanta shanta 940 Jul 14 02:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5666015d-d7c7-444f-81f6-92f1f4d03357.log\r\n-rw-rw-r-- 1 shanta shanta 346 Jun 22 06:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e521f97c-0602-44ea-87b3-2052ec5e63bb.log\r\n-rw-rw-r-- 1 shanta shanta 264 Jun 13 05:38 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e58b63d3-563c-4ba2-b724-e7e424253cdf.log\r\n-rw-rw-r-- 1 shanta shanta 163 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b634db24-97e4-447d-aa4c-d54861b397a8.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-277a4d9a-0a6a-43bb-b249-2c6bf7d7ef3a.log\r\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a0f3f0-04dd-49a5-97aa-5da3ef9e2ee2.log\r\n-rw-r--r-- 1 shanta shanta 402 Jul 14 04:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e0bd0147-19eb-4309-a225-7e5d6c1f04cf.log\r\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a66c4a5-71c2-47db-88ef-01c277faac9f.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-340db89f-144c-4853-8ca7-681bcbd7c777.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3e73b93f-84fa-4f65-b8db-74f0af4c2af6.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e72527fb-b726-49d4-8fea-494f1f2584b6.log\r\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c1f520d-af14-4fa8-b6b9-3e9ba52e5347.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a3df967-0961-4c90-b121-492eb75d6c60.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-30476b5b-1a77-4ebe-bd7d-b729a2f80ce4.log\r\n-rw-rw-r-- 1 shanta shanta 108 Jun 22 06:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f55f6ef6-613b-4f30-9e6f-e986674c2a3d.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-64408a1f-c605-4222-abd1-7425442e1f05.log\r\n-rw-r--r-- 1 shanta shanta 1781 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e44af998-ba2f-4007-97c2-0538fb9a4848.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba222ba4-a449-4ffa-8888-a6977d6c4d20.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-96522cfe-3799-4698-b449-f788f75954fb.log\r\n-rw-rw-r-- 1 shanta shanta 6868 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eee4f329-1aca-4c06-a8b3-05f1360a459b.log\r\n-rw-rw-r-- 1 shanta shanta 48 Jun 22 02:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9ca1df78-0a10-4968-bd36-3aa53877fad6.log\r\n-rw-rw-r-- 1 shanta shanta 1773 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-98ab8c54-3846-4d41-bb1c-c97cc61bd441.log\r\n-rw-rw-r-- 1 shanta shanta 13899 Jul 25 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fdac49da-02d3-4cd2-a93a-38e749fcb43c.log\r\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b67029f-9f6a-47db-9879-b1f4d734ad1d.log\r\n-rw-rw-r-- 1 shanta shanta 444 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbba52ed-f2d4-43de-84e7-7f2f20485a28.log\r\n-rw-rw-r-- 1 shanta shanta 1329 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b197e78a-c303-48f6-a51d-11bd2887f6ee.log\r\n-rw-rw-r-- 1 shanta shanta 8389 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b18eef2-19ea-461b-bb90-986105bc7bb5.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3df0d710-12c8-4b7c-ad62-7e21296bd46f.log\r\n-rw-rw-r-- 1 shanta shanta 53 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e1476bd-22fe-4dab-bea1-36a84d8f17aa.log\r\n-rw-r--r-- 1 shanta shanta 497 Jul 14 05:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-985e1f21-fe05-4918-b2dd-897e9b8ed69a.log\r\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-22463636-937d-4b56-aafd-34d62bb16966.log\r\n-rw-rw-r-- 1 shanta shanta 487 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5d26d669-2418-49a8-8831-a315b1bbe73a.log\r\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-458bcd01-8e40-4774-a995-6b4e19c9d15d.log\r\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:17 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-95c761cf-a8cc-42ee-b097-d41d5c47d9ef.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-403824e5-363a-4bad-9261-4f84f12e4c51.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b64ca18-9e16-4444-9e32-e83037a19e97.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3c093cd3-edd3-4faa-a815-2f8b9ce516de.log\r\n-rw-rw-r-- 1 shanta shanta 75 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-02f1134d-dd8b-4b71-bc32-040199ebcb2b.log\r\n-rw-rw-r-- 1 shanta shanta 610 Jun 13 05:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba277740-b1b2-47c2-b173-5072bc4de076.log\r\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-21e63c72-4014-405f-a665-2a9daa227208.log\r\n-rw-rw-r-- 1 shanta shanta 1487 Jul 26 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bdf69c35-eb01-438b-aa9f-ca05cd9665d6.log\r\n-rw-rw-r-- 1 shanta shanta 2526 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c6106274-f777-4103-9574-ded0f0e1022a.log\r\n-rw-rw-r-- 1 shanta shanta 21 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a06106da-34cb-4764-ba38-bc6872595cbf.log\r\n-rw-rw-r-- 1 shanta shanta 328 Jul 25 06:51 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed0ded70-2e13-4b5c-9242-a13b197d9c5f.log\r\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-442fc247-b53c-4be1-92ef-d17785ff95ef.log\r\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6bb14e23-3d4a-40af-bfd5-e2b2afec3ebc.log\r\n-rw-rw-r-- 1 shanta shanta 1233 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4c0e0106-047c-4f27-89d6-fc66f887e384.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7fcab0fd-c561-4309-94d8-8bd354630d99.log\r\n-rw-rw-r-- 1 shanta shanta 40 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-08db8f68-17b7-4150-826c-4980d414a646.log\r\n-rw-rw-r-- \n<response clipped><NOTE>To save on context the middle of the response was cut out and only the beginning and end of the output were shown to you.</NOTE>\n-cc5289ada25e.log\r\n-rw-rw-r-- 1 shanta shanta 155 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3bbb3f7f-ca66-4ec8-8f1c-556ece96c03c.log\r\n-rw-rw-r-- 1 shanta shanta 8 Jun 22 03:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b61c9ee7-c002-490e-9b7c-1a1b73e18dd1.log\r\n-rw-rw-r-- 1 shanta shanta 14062 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-16b340e4-3fb2-4720-8482-75e9df26fbac.log\r\n-rw-rw-r-- 1 shanta shanta 331 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca1f4084-d957-4a69-840f-44f5a885db40.log\r\n-rw-rw-r-- 1 shanta shanta 560 Jun 13 05:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9cdb042f-e3c4-48d6-a969-257b93866ea6.log\r\n-rw-rw-r-- 1 shanta shanta 281 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e05b6873-de90-4662-9b1b-b2392c132580.log\r\n-rw-rw-r-- 1 shanta shanta 1295 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed5015f8-80f6-4f5d-8e8e-617e944bfd60.log\r\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-606f7056-8332-4025-82c2-9d58714c42a9.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76a52042-ebbd-4885-aa51-64be08133027.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c1f9d817-6b49-47cf-ae91-66a93a8d7a15.log\r\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9768f880-0d95-479f-b564-3e10ceca9858.log\r\n-rw-rw-r-- 1 shanta shanta 180 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c630919-93b5-4773-ac1a-1620cc029020.log\r\n-rw-rw-r-- 1 shanta shanta 71 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e93ab2d-d38a-4585-b540-4e630c2adb52.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f5ebd847-1194-44a8-805d-5f50c78f5fc7.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fa84f4c-c93b-4f7b-9049-9db9c59f282d.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:25 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b969c34-19e1-4d3a-9a04-6242540d2535.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a08ef684-2a43-4387-a2d6-fd5c9f73683c.log\r\n-rw-rw-r-- 1 shanta shanta 306 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-479ff6eb-90d4-4b40-9320-354ce5f130d1.log\r\n-rw-rw-r-- 1 shanta shanta 2659 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-83cafae8-ef8e-4c0a-9bbf-c8a65e3b98e9.log\r\n-rw-rw-r-- 1 shanta shanta 103 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e2066049-d589-4d3f-8935-6316c3459955.log\r\n-rw-rw-r-- 1 shanta shanta 93 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29db9cae-2993-4509-9948-97da190025b6.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f7676a4f-326e-4951-9003-879aa8db6301.log\r\n-rw-rw-r-- 1 shanta shanta 56 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cb8ecf7-ef68-4a60-820f-c800d939d511.log\r\n-rw-rw-r-- 1 shanta shanta 1276 Jun 13 05:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fd0927c0-1508-47bd-82fe-05b5e7adda2b.log\r\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cec7c31c-8950-445f-a453-9ca06153cbfd.log\r\n-rw-r--r-- 1 shanta shanta 612 Jul 14 08:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-09fc7b27-40bb-422b-8735-39dfa3ba4a79.log\r\n-rw-rw-r-- 1 shanta shanta 63 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cefbf9e9-fc1c-4434-b642-7975e35fe666.log\r\n-rw-rw-r-- 1 shanta shanta 60 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b936d10-b7bf-4d50-be19-578e7ec98ed9.log\r\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f8a39c78-1096-4838-8d99-41def2f0022b.log\r\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f3e1084-4880-422b-ac4a-34d125f27504.log\r\n-rw-r--r-- 1 shanta shanta 5545 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e955d915-2ca5-46eb-9b81-f40a24c5808f.log\r\n-rw-rw-r-- 1 shanta shanta 88 Jun 13 05:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d42b8767-2682-48f2-ad8b-86abdbc1b329.log\r\n-rw-rw-r-- 1 shanta shanta 18375 Jul 25 09:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5508cacf-3eb2-4279-84b6-0df8ec8734e5.log\r\n-rw-rw-r-- 1 shanta shanta 480 Jun 22 04:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cf0e78a2-8796-4d64-acb1-d9c97ec07242.log\r\n-rw-r--r-- 1 shanta shanta 3574 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b8e6d43-9d8b-4a81-89fa-af1382612fab.log\r\n-rw-rw-r-- 1 shanta shanta 768 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-de3f3e1d-b932-4f15-bc31-5942c7b136eb.log\r\n-rw-r--r-- 1 shanta shanta 96 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6e396ccc-391f-4a49-991b-928c8e42843b.log\r\n-rw-rw-r-- 1 shanta shanta 48 Jul 25 07:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fdf7310-1b5c-462c-b3ad-293aae4bd327.log\r\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e555d859-96fc-4a5f-a73f-b7340d55faef.log\r\n-rw-rw-r-- 1 shanta shanta 1763 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a93de3-4fa8-4471-9e4c-ca63f3bec8b8.log\r\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-03615208-c1a7-4041-8bad-d8538db03151.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-216cf0d2-6d6d-44b9-9353-3da777990039.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a2411730-a028-45bb-adb3-57f8a6005c4c.log\r\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-363aaecb-ae55-4773-b2da-bc92b16e9e73.log\r\n-rw-rw-r-- 1 shanta shanta 797 Jul 25 10:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6259076c-cfeb-46a4-91df-0548f295d69f.log\r\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d82501a-34c3-4f2a-8db0-d3589ffaa59b.log\r\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 08:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-174b8f52-e897-4354-a08c-a16d29da54d1.log\r\n-rw-r--r-- 1 shanta shanta 877 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cda1cfb-dfc4-4a68-b97e-f04261350907.log\r\n-rw-rw-r-- 1 shanta shanta 69 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c973e8dc-0aab-499f-bf99-5780d9d39c63.log\r\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bd71dc5-9207-41c3-b40a-1c0b182207b4.log\r\n-rw-r--r-- 1 shanta shanta 204 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0664db91-d21c-490a-98c9-424823cd83ba.log\r\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29e2faf5-4688-43ad-ba76-c1476ba755d3.log\r\n-rw-rw-r-- 1 shanta shanta 2730 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cbdcdc8c-eb0c-44aa-a1e7-2e2c20b9cccf.log\r\n-rw-rw-r-- 1 shanta shanta 2969 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-89f65e53-a726-40b7-aede-a72a3b6d6b5e.log\r\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-049387c4-7b6e-4c57-9c26-fc65c4732d79.log\r\n-rw-rw-r-- 1 shanta shanta 54 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f8a8bde-a8db-4de9-b952-0cc234af3ed6.log\r\n"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "558a7c9f-c482-420e-b07c-12ae28aa88db"
            },
            "createdAt": 1753559995175,
            "isInternal": false
        },
        {
            "id": "0ebb6635-6dc1-4921-a0f4-dce9c5cbb419",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "you  stalled again"
                }
            ],
            "context": {
                "currentFile": {
                    "path": ".zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log",
                    "fsPath": "/home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "-rw-rw-r-- 1 shanta shanta 120 Jun 22 03:33 /home/shanta/PycharmProjects/comserv2/Comserv/script/logs/app.log\n-rw-r--r-- 1 shanta shanta 85209 Jul 26 12:56 /home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log\n-rw-rw-r-- 1 shanta shanta 76067 Jul 26 12:27 /home/shanta/PycharmProjects/comserv2/Comserv/logs/errors.log\n-rw-r--r-- 1 shanta shanta 69646 Jul 26 03:02 /home/shanta/PycharmProjects/comserv2/logs/application.log\n-rw-rw-r-- 1 shanta shanta 16 Jun 13 08:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4b975cd3-1135-495b-8501-8c770d2a6184.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-26fc6b3d-1fa6-453c-83f3-b30fe4b66a31.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2208e96f-e798-4066-94d1-ec19927d15bb.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 07:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1fae6a60-aa81-49da-9a76-f85bae51e4d3.log\n-rw-r--r-- 1 shanta shanta 940 Jul 14 02:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5666015d-d7c7-444f-81f6-92f1f4d03357.log\n-rw-rw-r-- 1 shanta shanta 346 Jun 22 06:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e521f97c-0602-44ea-87b3-2052ec5e63bb.log\n-rw-rw-r-- 1 shanta shanta 264 Jun 13 05:38 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e58b63d3-563c-4ba2-b724-e7e424253cdf.log\n-rw-rw-r-- 1 shanta shanta 163 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b634db24-97e4-447d-aa4c-d54861b397a8.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-277a4d9a-0a6a-43bb-b249-2c6bf7d7ef3a.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a0f3f0-04dd-49a5-97aa-5da3ef9e2ee2.log\n-rw-r--r-- 1 shanta shanta 402 Jul 14 04:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e0bd0147-19eb-4309-a225-7e5d6c1f04cf.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a66c4a5-71c2-47db-88ef-01c277faac9f.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-340db89f-144c-4853-8ca7-681bcbd7c777.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3e73b93f-84fa-4f65-b8db-74f0af4c2af6.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e72527fb-b726-49d4-8fea-494f1f2584b6.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c1f520d-af14-4fa8-b6b9-3e9ba52e5347.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a3df967-0961-4c90-b121-492eb75d6c60.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-30476b5b-1a77-4ebe-bd7d-b729a2f80ce4.log\n-rw-rw-r-- 1 shanta shanta 108 Jun 22 06:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f55f6ef6-613b-4f30-9e6f-e986674c2a3d.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-64408a1f-c605-4222-abd1-7425442e1f05.log\n-rw-r--r-- 1 shanta shanta 1781 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e44af998-ba2f-4007-97c2-0538fb9a4848.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba222ba4-a449-4ffa-8888-a6977d6c4d20.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-96522cfe-3799-4698-b449-f788f75954fb.log\n-rw-rw-r-- 1 shanta shanta 6868 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eee4f329-1aca-4c06-a8b3-05f1360a459b.log\n-rw-rw-r-- 1 shanta shanta 48 Jun 22 02:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9ca1df78-0a10-4968-bd36-3aa53877fad6.log\n-rw-rw-r-- 1 shanta shanta 1773 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-98ab8c54-3846-4d41-bb1c-c97cc61bd441.log\n-rw-rw-r-- 1 shanta shanta 13899 Jul 25 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fdac49da-02d3-4cd2-a93a-38e749fcb43c.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b67029f-9f6a-47db-9879-b1f4d734ad1d.log\n-rw-rw-r-- 1 shanta shanta 444 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbba52ed-f2d4-43de-84e7-7f2f20485a28.log\n-rw-rw-r-- 1 shanta shanta 1329 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b197e78a-c303-48f6-a51d-11bd2887f6ee.log\n-rw-rw-r-- 1 shanta shanta 8389 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b18eef2-19ea-461b-bb90-986105bc7bb5.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3df0d710-12c8-4b7c-ad62-7e21296bd46f.log\n-rw-rw-r-- 1 shanta shanta 53 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e1476bd-22fe-4dab-bea1-36a84d8f17aa.log\n-rw-r--r-- 1 shanta shanta 497 Jul 14 05:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-985e1f21-fe05-4918-b2dd-897e9b8ed69a.log\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-22463636-937d-4b56-aafd-34d62bb16966.log\n-rw-rw-r-- 1 shanta shanta 487 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5d26d669-2418-49a8-8831-a315b1bbe73a.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-458bcd01-8e40-4774-a995-6b4e19c9d15d.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:17 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-95c761cf-a8cc-42ee-b097-d41d5c47d9ef.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-403824e5-363a-4bad-9261-4f84f12e4c51.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b64ca18-9e16-4444-9e32-e83037a19e97.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3c093cd3-edd3-4faa-a815-2f8b9ce516de.log\n-rw-rw-r-- 1 shanta shanta 75 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-02f1134d-dd8b-4b71-bc32-040199ebcb2b.log\n-rw-rw-r-- 1 shanta shanta 610 Jun 13 05:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba277740-b1b2-47c2-b173-5072bc4de076.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-21e63c72-4014-405f-a665-2a9daa227208.log\n-rw-rw-r-- 1 shanta shanta 1487 Jul 26 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bdf69c35-eb01-438b-aa9f-ca05cd9665d6.log\n-rw-rw-r-- 1 shanta shanta 2526 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c6106274-f777-4103-9574-ded0f0e1022a.log\n-rw-rw-r-- 1 shanta shanta 21 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a06106da-34cb-4764-ba38-bc6872595cbf.log\n-rw-rw-r-- 1 shanta shanta 328 Jul 25 06:51 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed0ded70-2e13-4b5c-9242-a13b197d9c5f.log\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-442fc247-b53c-4be1-92ef-d17785ff95ef.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6bb14e23-3d4a-40af-bfd5-e2b2afec3ebc.log\n-rw-rw-r-- 1 shanta shanta 1233 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4c0e0106-047c-4f27-89d6-fc66f887e384.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7fcab0fd-c561-4309-94d8-8bd354630d99.log\n-rw-rw-r-- 1 shanta shanta 40 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-08db8f68-17b7-4150-826c-4980d414a646.log\n-rw-rw-r-- 1 shanta shanta 800 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-48efa4b8-b071-4ed5-9335-d2d0d7e9bae9.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-878c2868-59cf-4fac-bfe0-2280195e78ba.log\n-rw-rw-r-- 1 shanta shanta 124 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-63fd8df8-713b-42d2-8c61-983b8048a5ec.log\n-rw-rw-r-- 1 shanta shanta 288 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c9c71a1b-562a-4763-a51d-3732a157ea04.log\n-rw-rw-r-- 1 shanta shanta 3162 Jul 19 10:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1e484188-4e3a-4b79-82a8-a554e481abdc.log\n-rw-rw-r-- 1 shanta shanta 800 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3f3031a9-c147-4aeb-ade1-03ec3de450d8.log\n-rw-rw-r-- 1 shanta shanta 144 Jul 26 07:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8c906e2f-4d12-48e0-8c9d-0ca4c6267bab.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 26 03:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-86982256-a8b3-470a-b1df-b31c556174df.log\n-rw-r--r-- 1 shanta shanta 11678 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8e196730-643e-4dd8-ad7b-ef52b795a786.log\n-rw-rw-r-- 1 shanta shanta 1704 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4e6e4867-fad8-4855-9ade-ce0998b20b21.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ff891ccb-dfd8-49b4-addb-a62a1237e4cf.log\n-rw-rw-r-- 1 shanta shanta 1453 Jul 26 09:49 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a81ec28d-45af-4db5-bd71-ad99141f7ef0.log\n-rw-rw-r-- 1 shanta shanta 3856 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bbeb45cc-125b-4b1b-ac21-c3074f7b3d04.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-161c8966-3192-41e8-91ee-e943b1796c7a.log\n-rw-rw-r-- 1 shanta shanta 2036 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4ac52968-76e9-447c-953a-732757a2ffc3.log\n-rw-rw-r-- 1 shanta shanta 1782 Jun 13 05:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-19a07c64-daa7-4a6d-9124-655308a4a112.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-78571ea8-545b-4230-aaa0-1149753507d9.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:39 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-86bc039b-69e2-49c4-a7f5-8918b28350d4.log\n-rw-rw-r-- 1 shanta shanta 2364 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-91574277-54fb-4f0c-aa9d-8b106beedf48.log\n-rw-rw-r-- 1 shanta shanta 1528 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68a7201f-0612-4821-9731-6dc8ed115a73.log\n-rw-rw-r-- 1 shanta shanta 202 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d2be231c-0a83-4d5b-b78e-d3f92adb1216.log\n-rw-rw-r-- 1 shanta shanta 730 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fe9db79f-f289-4227-9920-cec6b2ff8914.log\n-rw-rw-r-- 1 shanta shanta 29932 Jul 25 07:03 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d24f278d-2e26-404e-8f48-478042ee4aed.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29652caa-4efb-442a-8d6e-8d2fbc8fa18e.log\n-rw-rw-r-- 1 shanta shanta 3620 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-072244d6-dade-4e8d-921f-f3354930967c.log\n-rw-rw-r-- 1 shanta shanta 88 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6ded6c1a-d296-4604-abd5-f6b3997e7020.log\n-rw-rw-r-- 1 shanta shanta 184 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fe2e03b6-2550-4ae4-9735-4588c397809d.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c30c39d-7c27-403f-aad8-7c8d3eb311c7.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 03:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5dbbe3ea-fba2-4804-b544-f5c700ae7954.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5ded5606-6cb3-46a9-80de-6d2675e5e156.log\n-rw-rw-r-- 1 shanta shanta 58 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-468124a7-dec1-4ef1-b084-03eaf26adbce.log\n-rw-rw-r-- 1 shanta shanta 640 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bea5967-4ba5-4b77-9043-f676ab706b37.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e1dfd0db-74d3-49de-9bb1-4a890ec6e878.log\n-rw-rw-r-- 1 shanta shanta 190 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-67f51ebd-d0c7-4ca0-8cf5-54a9920c962b.log\n-rw-rw-r-- 1 shanta shanta 758 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba046e4b-778c-4471-a543-27d468b4d776.log\n-rw-r--r-- 1 shanta shanta 230 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-50eb18ac-1142-4de2-be13-940a869caf02.log\n-rw-rw-r-- 1 shanta shanta 852 Jul 26 10:59 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-aab5cd19-9649-41ff-ba19-04c93eb2b6b9.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3487e4ef-2ffe-45c0-9ec8-015c1a665988.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c50b8ffe-7783-446b-941b-38346937be86.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-890e2afc-97f3-4c01-aa90-ba0745addf15.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8710a3e4-a92d-4f42-a8eb-b3fc0beb2434.log\n-rw-rw-r-- 1 shanta shanta 4802 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed9d2548-9719-4d33-9404-0d0e2ca72df5.log\n-rw-rw-r-- 1 shanta shanta 229 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dc2144c7-c090-42fc-a770-c1377be3cf4e.log\n-rw-rw-r-- 1 shanta shanta 127 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ad2c0a87-4452-4228-b2bc-013693e3aaa2.log\n-rw-rw-r-- 1 shanta shanta 24 Jun 22 04:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e183de76-5f99-4802-91e6-41aa69da3fcf.log\n-rw-rw-r-- 1 shanta shanta 92 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0943166a-5687-4c45-9b40-6f36a8dd7602.log\n-rw-rw-r-- 1 shanta shanta 231 Jun 22 03:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bf8eb230-d994-4105-a19a-ffe24a9e640b.log\n-rw-rw-r-- 1 shanta shanta 860 Jun 13 04:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b11fe419-c138-4e44-8492-1879191cb6ca.log\n-rw-rw-r-- 1 shanta shanta 3503 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-aafcc80b-f8c5-4d1d-a465-043d72089ce2.log\n-rw-rw-r-- 1 shanta shanta 1416 Jul 25 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-79306013-90fe-4a7f-885f-b43339d21fc4.log\n-rw-rw-r-- 1 shanta shanta 8480 Jul 25 06:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68c4f268-4ff8-45df-aa9e-8fe01ed1f235.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a493efab-ddde-44e2-a5da-c72d20ca8f15.log\n-rw-rw-r-- 1 shanta shanta 328 Jun 13 06:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-513c3a0b-c67c-42b8-8f1e-ec72329ae0b5.log\n-rw-rw-r-- 1 shanta shanta 1146 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d3fc0b60-1219-4090-887b-e044c6e092f6.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-514726d9-c7e6-452c-8476-e3302d004fee.log\n-rw-r--r-- 1 shanta shanta 128 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d8c2c5e1-c288-45dd-82f0-e52fed805de3.log\n-rw-rw-r-- 1 shanta shanta 2978 Jul 25 10:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b850c6b0-1a8f-472c-ab9b-5f46c7c699ce.log\n-rw-rw-r-- 1 shanta shanta 525 Jun 22 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9d7cb640-afe0-42a2-8c18-6adff8bfd660.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-303e9ede-c427-4d33-9f1f-54103b107508.log\n-rw-rw-r-- 1 shanta shanta 4392 Jul 25 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3d5d37ad-bfdb-4adc-9154-fafab4a04904.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2af92bf2-c972-480a-85e3-935a4b293da3.log\n-rw-r--r-- 1 shanta shanta 334 Jul 14 09:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a9d4cf79-cda0-47a5-bd56-9d61b6438332.log\n-rw-rw-r-- 1 shanta shanta 121 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c7dfe4a2-c721-49fa-8ab3-d9c08652aa66.log\n-rw-rw-r-- 1 shanta shanta 1233 Jul 26 06:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7b14d794-7ae4-4a83-9f15-57ec4a797d3e.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-59f11086-e1ce-46d2-aedb-a96725831030.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-850b2f99-9b09-47fe-9f02-3c975fbfc7c3.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 06:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca62355a-97be-479b-8319-2d4d0cd80f35.log\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-969de8bf-90e9-45ce-a100-0c02a60a2d26.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 03:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f86da3fe-f1cf-4b92-8759-cfb4b2edb101.log\n-rw-r--r-- 1 shanta shanta 2181 Jul 14 02:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-43360709-a928-4588-ac0d-47a2a2c5fd2a.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-530cab1a-1053-48c8-a47e-f01428fc91f2.log\n-rw-rw-r-- 1 shanta shanta 254 Jul 26 06:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e6138b49-70b7-4a34-ae14-3a0b9bb19ca7.log\n-rw-rw-r-- 1 shanta shanta 204 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e9185b7c-f6d7-46f5-b067-fe3adfbe0561.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 25 08:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b4b16d3f-c925-480b-bf23-ea16bd82fd00.log\n-rw-rw-r-- 1 shanta shanta 3998 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-73221f32-a4be-4cba-aa40-ab59db3c9d31.log\n-rw-r--r-- 1 shanta shanta 1124 Jul 14 05:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76712fab-d926-4fc6-b59a-f45a9d0401bf.log\n-rw-rw-r-- 1 shanta shanta 24 Jun 22 04:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9bc82e46-7f86-483f-a82b-99609c0afcd0.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b149ef5-c7be-4c33-be1b-4bab5c19a1a6.log\n-rw-rw-r-- 1 shanta shanta 57246 Jun 22 05:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-63758db0-a130-4e53-89d3-6c960673afaa.log\n-rw-rw-r-- 1 shanta shanta 347 Jul 17 12:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c936fc46-1bd3-499e-987b-537c38b7bf49.log\n-rw-rw-r-- 1 shanta shanta 157 Jun 13 05:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7ad82b19-9525-4286-adf4-d5e5f098fafe.log\n-rw-r--r-- 1 shanta shanta 123 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-93c621c8-089b-4850-8f5d-6f513bc196b8.log\n-rw-r--r-- 1 shanta shanta 247 Jul 14 04:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2d247cb2-2b86-45ca-b547-680c8fb8e7bf.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 10:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ee2cdd7d-b897-447c-aacb-a440d5f20b5c.log\n-rw-rw-r-- 1 shanta shanta 165 Jul 26 12:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5be30b3c-cca1-4e10-a25c-42d17c53b9a6.log\n-rw-rw-r-- 1 shanta shanta 713 Jun 22 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a71ca671-e9ac-4549-9312-29373c8e2e2a.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c129709-2110-4384-acf6-1c9400dd1ca5.log\n-rw-rw-r-- 1 shanta shanta 907 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ec691340-8285-444a-99a5-13ac70b8768b.log\n-rw-rw-r-- 1 shanta shanta 5085 Jul 17 12:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32554856-6b69-4ab1-8e36-f38546958f68.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-463f5ccb-fd42-41d4-bfdb-8951d8859ae8.log\n-rw-rw-r-- 1 shanta shanta 122 Jul 17 08:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-20d6068e-f897-43b5-8426-c334ecaf44e8.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7422143f-6f16-44bb-a4c8-f34223be70a3.log\n-rw-rw-r-- 1 shanta shanta 329 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32ebdae3-c0cd-4bb5-9f65-0dedb54755dc.log\n-rw-rw-r-- 1 shanta shanta 2116 Jun 13 05:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c3e2c13f-946a-417e-bfd6-3fade0a99471.log\n-rw-rw-r-- 1 shanta shanta 769 Jun 22 02:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-801cadfe-2ab5-49ab-97be-4ef5e0087980.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d41cf5e-91da-4440-b8a7-8f343543c37d.log\n-rw-rw-r-- 1 shanta shanta 686 Jun 22 05:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dd5f97a3-a896-46cd-8f54-5bd84185d7b6.log\n-rw-rw-r-- 1 shanta shanta 130 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3884b236-956e-46e5-9255-78f0fdc56440.log\n-rw-rw-r-- 1 shanta shanta 3069 Jul 25 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ceb85104-b2e2-4dfd-80d6-c840aee8f975.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-10b4e489-446f-4f72-832e-e8d16c7b7022.log\n-rw-rw-r-- 1 shanta shanta 1839 Jul 25 10:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dac903b4-4c54-4612-acd4-72e3377c10f4.log\n-rw-rw-r-- 1 shanta shanta 927 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-41e664ef-ab9b-4a3e-9817-56881d0a485e.log\n-rw-rw-r-- 1 shanta shanta 51 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-034815b5-cdb3-471e-9141-59921f20c00b.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a5dccec9-5834-45e0-ab06-0643bfb258c4.log\n-rw-rw-r-- 1 shanta shanta 50747 Jul 25 09:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-af6e27be-6801-46b0-8b0d-57dacb131b6a.log\n-rw-rw-r-- 1 shanta shanta 1273 Jul 26 07:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3ae7e553-4ea4-4130-b1f8-6157e2e06ece.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5de826ae-f74b-43ad-9020-72f69102e0c1.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b78bcca5-17a9-447e-9230-9eed97096e9c.log\n-rw-rw-r-- 1 shanta shanta 6524 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ab1822ae-a9bb-4903-a3e8-c3685662ee30.log\n-rw-rw-r-- 1 shanta shanta 66 Jul 19 09:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32b9b6ad-9f6f-4e1f-8c6b-2a06fe37a4d4.log\n-rw-r--r-- 1 shanta shanta 368 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ac784e5b-2ae3-424f-8369-5a096117556a.log\n-rw-rw-r-- 1 shanta shanta 24018 Jul 26 05:24 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f50c143b-2640-4ebc-bc7b-fd0f2c7a7d12.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e1d1d2fd-136c-4c7b-aa4f-24272e842441.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 26 09:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2dcad5d1-3e36-4138-a8ff-24e443eefb63.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cef80b2d-0525-48be-9da4-b5a94c1132d9.log\n-rw-r--r-- 1 shanta shanta 453 Jul 14 08:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e4aab6ea-0bb9-40a1-8209-7dfaf2b270cc.log\n-rw-rw-r-- 1 shanta shanta 640 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b01dbfc6-42f5-4757-95b7-81986189313f.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:37 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fad0924e-cbd3-466c-b5e3-a26bcba2b034.log\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 02:49 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d0ec8ad2-1b40-414f-9fcc-0330fddeb5eb.log\n-rw-rw-r-- 1 shanta shanta 20049 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-44c32f48-6d62-4141-a32c-61652cecc5de.log\n-rw-r--r-- 1 shanta shanta 396 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3ecbec3a-04d2-48f9-8e63-60fc2d3dc601.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7f40ce28-74af-4148-bca2-8e20f9ef8286.log\n-rw-rw-r-- 1 shanta shanta 33 Jun 22 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e4d19b16-8cb8-429d-85c5-129f877e91f5.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9e2ea488-3356-4f75-b126-dfc5ec722c18.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-34861508-2333-41e6-be00-0c155302802d.log\n-rw-rw-r-- 1 shanta shanta 4859 Jul 17 12:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c3c80f25-6a76-4ace-a351-a9f642971c7a.log\n-rw-rw-r-- 1 shanta shanta 63 Jun 22 05:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-52c616cf-4060-4980-a42e-d48712c2d393.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 02:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c662af4-7d5e-48a8-ab24-f81fa5e1ebc2.log\n-rw-rw-r-- 1 shanta shanta 852 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-331e5d62-b76e-4040-9ea4-76e41f850c3a.log\n-rw-r--r-- 1 shanta shanta 360 Jul 14 07:03 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-173e1a6d-bb4c-47a7-8bd7-958234c5889e.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9a1cffaf-e048-4f0a-8a86-fe343c7315fe.log\n-rw-rw-r-- 1 shanta shanta 12962 Jul 26 05:24 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7274dbc6-7eb8-48c8-a46d-1667b5fe9dee.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b31777f-cc84-433f-b8df-e72f28b06055.log\n-rw-rw-r-- 1 shanta shanta 121 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29588dd4-87e9-401b-887f-80a554ed1c89.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7991c2bc-9176-4193-80fd-af9874b0319f.log\n-rw-rw-r-- 1 shanta shanta 25160 Jul 25 10:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f4a189de-b6dd-4d5e-95ad-9d8539947b83.log\n-rw-rw-r-- 1 shanta shanta 17979 Jul 25 07:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eb6bb958-c256-476f-8c6c-12bee68c2f72.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2bef4e80-0276-465d-a607-2c9d1c97e77a.log\n-rw-rw-r-- 1 shanta shanta 26 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a956fa3c-528d-4f06-9513-cb02e7677eb1.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-65b2232b-91fc-4bb4-bf25-bbab15ee7f32.log\n-rw-rw-r-- 1 shanta shanta 146 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0b10eab2-9612-4f3e-ba1d-6325c71fffe1.log\n-rw-rw-r-- 1 shanta shanta 331 Jun 22 04:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a6a53ffc-0945-4a57-a744-b0a94c26c69c.log\n-rw-rw-r-- 1 shanta shanta 28265 Jul 26 13:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log\n-rw-rw-r-- 1 shanta shanta 1777 Jun 13 05:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-da6a3526-816c-4bad-91ec-711878b25802.log\n-rw-r--r-- 1 shanta shanta 518 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bd4570f4-fd09-4f90-ad8b-5eda22a9a2b0.log\n-rw-rw-r-- 1 shanta shanta 248 Jul 26 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fb7c9a96-47f5-4858-bf1f-6fbbbde7cb36.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 22 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-506470c8-c667-4085-bc50-9a9a930f7c51.log\n-rw-r--r-- 1 shanta shanta 76 Jul 14 03:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5656d772-8a1f-4273-867f-a90aa8c2cac9.log\n-rw-rw-r-- 1 shanta shanta 56 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3548041f-63cb-414d-bfaf-f32f245de74b.log\n-rw-r--r-- 1 shanta shanta 1668 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eef3c2c1-3119-4830-a84d-d8b53afd9610.log\n-rw-rw-r-- 1 shanta shanta 330 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2940010e-430a-4984-ad20-df1720c498dc.log\n-rw-rw-r-- 1 shanta shanta 758 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d89cad95-6158-4f29-9a88-5fba27e93039.log\n-rw-rw-r-- 1 shanta shanta 102 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a818786-5de2-4bfd-8836-74cf5c62e518.log\n-rw-rw-r-- 1 shanta shanta 1295 Jul 25 09:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1aba3c02-abfb-4670-9b02-1079a4567327.log\n-rw-rw-r-- 1 shanta shanta 45 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68563ad0-0d38-4037-acbd-5d0996ed28b2.log\n-rw-rw-r-- 1 shanta shanta 47 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbb38d10-cdfd-45ba-8ce8-647a18e1dc19.log\n-rw-rw-r-- 1 shanta shanta 402 Jun 13 04:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-57d7068a-26f8-4e90-816e-6b6fde95c88a.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d9477edc-09fb-4279-801d-aef4525d256c.log\n-rw-rw-r-- 1 shanta shanta 493 Jul 26 03:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c232e20f-deca-4fad-b509-1d47abcb57a3.log\n-rw-rw-r-- 1 shanta shanta 3 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-183c4dfe-85c0-4898-b586-cc5289ada25e.log\n-rw-rw-r-- 1 shanta shanta 155 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3bbb3f7f-ca66-4ec8-8f1c-556ece96c03c.log\n-rw-rw-r-- 1 shanta shanta 8 Jun 22 03:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b61c9ee7-c002-490e-9b7c-1a1b73e18dd1.log\n-rw-rw-r-- 1 shanta shanta 14062 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-16b340e4-3fb2-4720-8482-75e9df26fbac.log\n-rw-rw-r-- 1 shanta shanta 331 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca1f4084-d957-4a69-840f-44f5a885db40.log\n-rw-rw-r-- 1 shanta shanta 560 Jun 13 05:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9cdb042f-e3c4-48d6-a969-257b93866ea6.log\n-rw-rw-r-- 1 shanta shanta 281 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e05b6873-de90-4662-9b1b-b2392c132580.log\n-rw-rw-r-- 1 shanta shanta 1295 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed5015f8-80f6-4f5d-8e8e-617e944bfd60.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-606f7056-8332-4025-82c2-9d58714c42a9.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76a52042-ebbd-4885-aa51-64be08133027.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c1f9d817-6b49-47cf-ae91-66a93a8d7a15.log\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9768f880-0d95-479f-b564-3e10ceca9858.log\n-rw-rw-r-- 1 shanta shanta 180 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c630919-93b5-4773-ac1a-1620cc029020.log\n-rw-rw-r-- 1 shanta shanta 71 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e93ab2d-d38a-4585-b540-4e630c2adb52.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f5ebd847-1194-44a8-805d-5f50c78f5fc7.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fa84f4c-c93b-4f7b-9049-9db9c59f282d.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:25 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b969c34-19e1-4d3a-9a04-6242540d2535.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a08ef684-2a43-4387-a2d6-fd5c9f73683c.log\n-rw-rw-r-- 1 shanta shanta 306 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-479ff6eb-90d4-4b40-9320-354ce5f130d1.log\n-rw-rw-r-- 1 shanta shanta 2659 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-83cafae8-ef8e-4c0a-9bbf-c8a65e3b98e9.log\n-rw-rw-r-- 1 shanta shanta 103 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e2066049-d589-4d3f-8935-6316c3459955.log\n-rw-rw-r-- 1 shanta shanta 93 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29db9cae-2993-4509-9948-97da190025b6.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f7676a4f-326e-4951-9003-879aa8db6301.log\n-rw-rw-r-- 1 shanta shanta 56 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cb8ecf7-ef68-4a60-820f-c800d939d511.log\n-rw-rw-r-- 1 shanta shanta 1276 Jun 13 05:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fd0927c0-1508-47bd-82fe-05b5e7adda2b.log\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cec7c31c-8950-445f-a453-9ca06153cbfd.log\n-rw-r--r-- 1 shanta shanta 612 Jul 14 08:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-09fc7b27-40bb-422b-8735-39dfa3ba4a79.log\n-rw-rw-r-- 1 shanta shanta 63 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cefbf9e9-fc1c-4434-b642-7975e35fe666.log\n-rw-rw-r-- 1 shanta shanta 60 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b936d10-b7bf-4d50-be19-578e7ec98ed9.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f8a39c78-1096-4838-8d99-41def2f0022b.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f3e1084-4880-422b-ac4a-34d125f27504.log\n-rw-r--r-- 1 shanta shanta 5545 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e955d915-2ca5-46eb-9b81-f40a24c5808f.log\n-rw-rw-r-- 1 shanta shanta 88 Jun 13 05:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d42b8767-2682-48f2-ad8b-86abdbc1b329.log\n-rw-rw-r-- 1 shanta shanta 18375 Jul 25 09:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5508cacf-3eb2-4279-84b6-0df8ec8734e5.log\n-rw-rw-r-- 1 shanta shanta 480 Jun 22 04:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cf0e78a2-8796-4d64-acb1-d9c97ec07242.log\n-rw-r--r-- 1 shanta shanta 3574 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b8e6d43-9d8b-4a81-89fa-af1382612fab.log\n-rw-rw-r-- 1 shanta shanta 768 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-de3f3e1d-b932-4f15-bc31-5942c7b136eb.log\n-rw-r--r-- 1 shanta shanta 96 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6e396ccc-391f-4a49-991b-928c8e42843b.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 25 07:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fdf7310-1b5c-462c-b3ad-293aae4bd327.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e555d859-96fc-4a5f-a73f-b7340d55faef.log\n-rw-rw-r-- 1 shanta shanta 1763 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a93de3-4fa8-4471-9e4c-ca63f3bec8b8.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-03615208-c1a7-4041-8bad-d8538db03151.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-216cf0d2-6d6d-44b9-9353-3da777990039.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a2411730-a028-45bb-adb3-57f8a6005c4c.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-363aaecb-ae55-4773-b2da-bc92b16e9e73.log\n-rw-rw-r-- 1 shanta shanta 797 Jul 25 10:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6259076c-cfeb-46a4-91df-0548f295d69f.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d82501a-34c3-4f2a-8db0-d3589ffaa59b.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 08:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-174b8f52-e897-4354-a08c-a16d29da54d1.log\n-rw-r--r-- 1 shanta shanta 877 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cda1cfb-dfc4-4a68-b97e-f04261350907.log\n-rw-rw-r-- 1 shanta shanta 69 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c973e8dc-0aab-499f-bf99-5780d9d39c63.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bd71dc5-9207-41c3-b40a-1c0b182207b4.log\n-rw-r--r-- 1 shanta shanta 204 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0664db91-d21c-490a-98c9-424823cd83ba.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29e2faf5-4688-43ad-ba76-c1476ba755d3.log\n-rw-rw-r-- 1 shanta shanta 2730 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cbdcdc8c-eb0c-44aa-a1e7-2e2c20b9cccf.log\n-rw-rw-r-- 1 shanta shanta 2969 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-89f65e53-a726-40b7-aede-a72a3b6d6b5e.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-049387c4-7b6e-4c57-9c26-fc65c4732d79.log\n-rw-rw-r-- 1 shanta shanta 54 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f8a8bde-a8db-4de9-b952-0cc234af3ed6.log\n",
                    "language": "textmate"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1753560122945,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "you  stalled again"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "User AI Instruction",
                    "description": "User AI Instruction",
                    "uri": "zen-rules://user/custom",
                    "content": "read AI_DEVELOPMENT_GUIDELINES\nall code must be varifed by user"
                },
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "content": "\n\n# Comserv Project Information\n\n## Summary\nComserv is a comprehensive web-based system for managing business operations, projects, and documentation. It's built using the Catalyst Perl web framework and provides features for project management, theme customization, and user authentication.\n\n## Structure\n- `Comserv/`: Main application directory containing the core application code\n  - `lib/`: Application code and models\n  - `docs/`: Documentation files\n  - `root/`: Static assets and templates\n  - `script/`: Utility scripts for server management and database operations\n  - `t/`: Test files\n- `app/`: Additional application components\n- `data/`: Data files including pricing information\n- `proxmox/`: Proxmox VE integration components\n\n## Language & Runtime\n**Language**: Perl\n**Version**: 5.x (compatible with Perl 5.40.0)\n**Framework**: Catalyst 5.90130\n**Build System**: Module::Install\n**Package Manager**: CPAN\n\n## Dependencies\n**Main Dependencies**:\n- Catalyst::Runtime (5.90130)\n- Moose\n- DBIx::Class\n- Template (Template Toolkit)\n- JSON/JSON::MaybeXS\n- Log::Log4perl\n- DateTime\n- File::Slurp\n\n**Development Dependencies**:\n- Test::More (0.88+)\n- Test::Pod\n- Test::Pod::Coverage\n- Test::WWW::Mechanize::Catalyst\n- Catalyst::Devel\n\n## Build & Installation\n```bash\ncd Comserv\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n## Database\n**Type**: MySQL\n**Setup**: \n```bash\nmysql -u root -p < database_initialization_script.sql\n```\n**Schema Management**: DBIx::Class::Schema::Loader\n\n## Testing\n**Framework**: Test::More\n**Test Location**: Comserv/t/\n**Run Command**:\n```bash\ncd Comserv\nprove -l t/\n```\n\n## Server Execution\n**Development Server**:\n```bash\ncd Comserv\nscript/comserv_server.pl\n```\n**Production Deployment**:\n```bash\ncd Comserv\nscript/comserv_fastcgi.pl\n# or\nstarman --port 5000 --workers 5 comserv.psgi\n```\n\n## Authentication & Authorization\n- Session-based authentication\n- Role-based access control\n- Multiple authentication realms\n- Support for user groups and site-specific permissions\n\n## Features\n- Project management system\n- Theme customization system\n- Email integration\n- PDF generation\n- Proxmox VE integration\n- Multi-site support"
                },
                {
                    "name": "Database Development Standards and Best Practices",
                    "description": "Database Development Standards and Best Practices",
                    "uri": "zen-rules://repo/database-standards",
                    "content": "\n\n# Database Development Standards\n\n## Query Standards\n- **Table Aliases:** Use table aliases in all queries to avoid ambiguity (e.g., 'me.column_name')\n- **Error Handling:** Implement proper error handling with eval blocks and try/catch\n- **Parameterized Queries:** Use parameterized queries to prevent SQL injection\n\n## Schema Management\n- **Naming Conventions:** Follow naming conventions for tables, columns, and relationships\n- **Documentation:** Document schema changes and rationale for future reference\n- **Performance:** Regularly optimize database performance and indexes\n- **Version Control:** Use Git to track schema changes with proper tagging\n- **Backup Protocol:** Always backup database before making schema changes\n\n## Model Standards (DBIx::Class)\n- **Result Classes:** Located in `/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema/Ency/Result/`\n- **Relationships:** Define proper relationships between tables\n- **Validation:** Implement data validation in model classes\n\n## Configuration Priority\n- **Primary:** ZeroTier production server (172.30.161.222) - works from any network\n- **Secondary:** Local network production server (192.168.1.198) - home/office only\n- **Tertiary:** localhost MySQL (development)\n- **Fallback:** SQLite (offline mode)\n\n## Security Protocols\n- **Input Validation:** Validate all user inputs before database operations\n- **Access Controls:** Implement proper access controls based on user roles\n- **Regular Reviews:** Regularly review and update security protocols"
                },
                {
                    "name": "AI Behavior Enforcement Rules for Zencoder",
                    "description": "AI Behavior Enforcement Rules for Zencoder",
                    "uri": "zen-rules://repo/ai-behavior-enforcement",
                    "content": "\n\n# AI Behavior Enforcement Rules\n\n## MANDATORY PROMPT TRACKING\n**CURRENT PROMPT:** This is prompt #[X] of 5 maximum allowed prompts.\n\n### Prompt Counter Protocol\n- **Start Each Response:** Begin every response with current prompt count\n- **Track Internally:** Keep running count throughout conversation\n- **Warn at Prompt 4:** Alert user that next prompt will trigger handoff\n- **Stop at Prompt 5:** Refuse to continue, provide handoff documentation\n\n## MANDATORY APPROVAL WORKFLOW\n\n### Before ANY Code Changes\n1. **STOP:** Do not modify any files without explicit user approval\n2. **PRESENT:** Show exactly what will be changed using the standard format\n3. **WAIT:** Wait for explicit approval (\"yes\", \"approved\", \"apply changes\")\n4. **CONFIRM:** Acknowledge approval before proceeding\n5. **EXECUTE:** Apply changes only after confirmation\n\n### Standard Change Presentation\n```\n🔄 PROPOSED CHANGE TO: [filename]\n📝 CHANGE TYPE: [Addition/Modification/Deletion]\n📋 DESCRIPTION: [what this accomplishes]\n\n❌ CURRENT CODE:\n[existing code or \"N/A\"]\n\n✅ NEW CODE:\n[proposed code or \"DELETED\"]\n\n💡 REASON: [why needed]\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed\n```\n\n## VIOLATION CONSEQUENCES\n- **Prompt Limit Exceeded:** Immediate session termination with handoff\n- **Unapproved Changes:** Acknowledge violation and request approval retroactively\n- **Missing Counter:** Add prompt counter to current response\n\n## HANDOFF TEMPLATE (Use on 5th Prompt)\n```\n🚨 PROMPT LIMIT REACHED - HANDOFF REQUIRED\n\n📊 SESSION SUMMARY:\n- Prompts Used: 5/5\n- Files Modified: [list]\n- Tasks Completed: [list]\n- Tasks Remaining: [list]\n\n🔄 HANDOFF PROMPT FOR NEXT AI:\n\"Continue working on [project/task]. Read development-guidelines.md and ai-behavior-enforcement.md first. \nCurrent context: [brief context]\nFiles being worked on: [list]\nNext steps needed: [specific actions]\"\n\n📚 REQUIRED READING FOR NEXT AI:\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- [any other relevant docs]\n\n✅ DOCUMENTATION UPDATED: [what was recorded]\n```\n\n## EMERGENCY PROTOCOLS\n- **User Says \"Stop\":** Immediately cease all activities\n- **User Says \"Revert\":** Provide instructions for undoing changes\n- **User Says \"Handoff\":** Immediately provide handoff documentation"
                },
                {
                    "name": "Template Toolkit Standards and Requirements",
                    "description": "Template Toolkit Standards and Requirements",
                    "uri": "zen-rules://repo/template-standards",
                    "content": "\n\n# Template Toolkit (.tt) Standards\n\n## Required PageVersion Header Format\nAll .tt files must include this exact format:\n```\n[% META title = 'Page Title Here' %]\n[% PageVersion = 'relative/path/filename.tt,v 0.01 YYYY/MM/DD author Exp author ' %]\n[% IF c.session.debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n```\n\n## Template Standards\n- **Theme Compliance:** Use theme system variables for styling - NO page-specific CSS\n- **Debug Mode:** Include debug mode blocks for development visibility\n- **Responsive Design:** Implement mobile-first responsive design patterns\n- **HTML Structure:** Use proper semantic HTML structure\n- **Template Toolkit:** Follow Template Toolkit best practices\n\n## Navigation Integration\nWhen working with navigation templates:\n- **Main Navigation:** Include via `/Navigation/navigation.tt`\n- **Admin Menu:** Use `/Navigation/admintopmenu.tt` for admin-only sections\n- **Dropdown Menus:** Reference existing dropdown templates in `/Navigation/` directory\n\n## Documentation File Rules - CRITICAL\n- **File Format:** ONLY `.tt` files for application documentation - NO `.md` files\n- **EXISTING FILES FIRST:** ALWAYS search for and use existing files before creating new ones\n- **Naming Consistency:** Use same file names across AI sessions to prevent content loss\n- **Content Priority:** Always improve existing files rather than creating new ones\n- **Role-Based Access:** Respect existing Documentation/index.tt role-based structure\n- **Directory Consolidation:** Use established directory structure - don't create new directories\n\n## File Creation Protocol\n1. **Search First:** Use file search tools to find existing similar files\n2. **Check Directory:** Look at existing directory structure in target location\n3. **Ask User:** If multiple similar files exist, ask which should be updated\n4. **Update Existing:** Improve existing files rather than creating duplicates"
                }
            ]
        },
        {
            "id": "82c99e79-222a-41f0-81d4-22b6d67d1ae5",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "**CURRENT PROMPT:** This is prompt #2 of 5 maximum allowed prompts.\n\nYou're absolutely right - I got stuck trying to access the error logs. Let me focus on the critical issue: the hash reference error on line 1804. \n\nBased on my analysis, the problem is likely that the `get_all_database_configs` method is working correctly, but there might be an issue with how the data is being processed in the loop. Let me check if there's a potential issue with the data structure or if we need to add some debugging.\n\n🔄 PROPOSED CHANGE TO: /home/shanta/PycharmProjects/comserv2//Admin.pm\n📝 CHANGE TYPE: Modification\n📋 DESCRIPTION: Add debugging and error handling to identify the hash reference issue\n\n❌ CURRENT CODE:\n```perl\n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Test connection to determine availability\n        my $connection, $db_key, $config);\n        \n        $_test = $self->test_database_connection($cdatabase_comparison->{databases}->{$db_key} = {\n            name => $db_key,\n            display_name => $config->{description} || $db_key,\n            type => $config->{db_type} || 'unknown',\n            priority => $config->{priority} || 999,\n            available => $connection_test->{connected},\n            error => $connection_test->{error},\n            host => $config->{host} || 'localhost',\n            database => $config->{database} || '',\n            is_current => ($db_key eq $current_backend),\n            table_count => 0,\n            table_comparisons => [], # Will be loaded on demand via AJAX\n            loaded => 0 # Flag to indicate if comparison data has been loaded\n        };\n```\n\n✅ NEW CODE:\n```perl\n    # Debug: Check what we got from get_all_database_configs\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n        \"Database configs type: \" . ref($database_configs) . \", content: \" . (ref($database_configs) eq 'HASH' ? scalar(keys %$database_configs) . \" keys\" : \"not a hash\"));\n    \n    # Ensure we have a hash reference\n    unless (ref($database_configs) eq 'HASH') {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n            \"Expected hash reference but got: \" . ref($database_configs));\n        $c->stash(\n            template => 'admin/schema_compare.tt',\n            error => \"Failed to load database configurations: Invalid data format\"\n        );\n        return;\n    }\n    \n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Debug: Check individual config\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n            \"Processing config for $db_key, type: \" . ref($config));\n        \n        # Ensure config is a hash reference\n        unless (ref($config) eq 'HASH') {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n                \"Config for $db_key is not a hash reference: \" . ref($config));\n            next;\n        }\n        \n        # Test connection to determine availability\n        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n        \n        $database_comparison->{databases}->{$db_key} = {\n            name => $db_key,\n            display_name => $config->{description} || $db_key,\n            type => $config->{db_type} || 'unknown',\n            priority => $config->{priority} || 999,\n            available => $connection_test->{connected},\n            error => $connection_test->{error},\n            host => $config->{host} || 'localhost',\n            database => $config->{database} || '',\n            is_current => ($db_key eq $current_backend),\n            table_count => 0,\n            table_comparisons => [], # Will be loaded on demand via AJAX\n            loaded => 0 # Flag to indicate if comparison data has been loaded\n        };\n```\n\n💡 REASON: This adds debugging to identify exactly what type of data we're getting from get_all_database_configs and ensures we have proper error handling before trying to access hash references. This will help us identify if the issue is in the JSON parsing or somewhere else.\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "91459a57-7ba4-4567-99c8-880bce0f1f4f"
            },
            "createdAt": 1753560124325,
            "isInternal": false
        },
        {
            "id": "8e5f2710-a3f8-4c6a-b095-329e9eee52ac",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Please add that code comparison should be in +- format so I can read line by line your proposed changes "
                },
                {
                    "type": "text",
                    "text": "yes make the changes"
                }
            ],
            "context": {
                "currentFile": {
                    "path": ".zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log",
                    "fsPath": "/home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "-rw-rw-r-- 1 shanta shanta 120 Jun 22 03:33 /home/shanta/PycharmProjects/comserv2/Comserv/script/logs/app.log\n-rw-r--r-- 1 shanta shanta 85209 Jul 26 12:56 /home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log\n-rw-rw-r-- 1 shanta shanta 76067 Jul 26 12:27 /home/shanta/PycharmProjects/comserv2/Comserv/logs/errors.log\n-rw-r--r-- 1 shanta shanta 69646 Jul 26 03:02 /home/shanta/PycharmProjects/comserv2/logs/application.log\n-rw-rw-r-- 1 shanta shanta 16 Jun 13 08:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4b975cd3-1135-495b-8501-8c770d2a6184.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-26fc6b3d-1fa6-453c-83f3-b30fe4b66a31.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2208e96f-e798-4066-94d1-ec19927d15bb.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 07:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1fae6a60-aa81-49da-9a76-f85bae51e4d3.log\n-rw-r--r-- 1 shanta shanta 940 Jul 14 02:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5666015d-d7c7-444f-81f6-92f1f4d03357.log\n-rw-rw-r-- 1 shanta shanta 346 Jun 22 06:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e521f97c-0602-44ea-87b3-2052ec5e63bb.log\n-rw-rw-r-- 1 shanta shanta 264 Jun 13 05:38 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e58b63d3-563c-4ba2-b724-e7e424253cdf.log\n-rw-rw-r-- 1 shanta shanta 163 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b634db24-97e4-447d-aa4c-d54861b397a8.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-277a4d9a-0a6a-43bb-b249-2c6bf7d7ef3a.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a0f3f0-04dd-49a5-97aa-5da3ef9e2ee2.log\n-rw-r--r-- 1 shanta shanta 402 Jul 14 04:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e0bd0147-19eb-4309-a225-7e5d6c1f04cf.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a66c4a5-71c2-47db-88ef-01c277faac9f.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-340db89f-144c-4853-8ca7-681bcbd7c777.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3e73b93f-84fa-4f65-b8db-74f0af4c2af6.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e72527fb-b726-49d4-8fea-494f1f2584b6.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c1f520d-af14-4fa8-b6b9-3e9ba52e5347.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a3df967-0961-4c90-b121-492eb75d6c60.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-30476b5b-1a77-4ebe-bd7d-b729a2f80ce4.log\n-rw-rw-r-- 1 shanta shanta 108 Jun 22 06:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f55f6ef6-613b-4f30-9e6f-e986674c2a3d.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-64408a1f-c605-4222-abd1-7425442e1f05.log\n-rw-r--r-- 1 shanta shanta 1781 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e44af998-ba2f-4007-97c2-0538fb9a4848.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba222ba4-a449-4ffa-8888-a6977d6c4d20.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-96522cfe-3799-4698-b449-f788f75954fb.log\n-rw-rw-r-- 1 shanta shanta 6868 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eee4f329-1aca-4c06-a8b3-05f1360a459b.log\n-rw-rw-r-- 1 shanta shanta 48 Jun 22 02:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9ca1df78-0a10-4968-bd36-3aa53877fad6.log\n-rw-rw-r-- 1 shanta shanta 1773 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-98ab8c54-3846-4d41-bb1c-c97cc61bd441.log\n-rw-rw-r-- 1 shanta shanta 13899 Jul 25 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fdac49da-02d3-4cd2-a93a-38e749fcb43c.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b67029f-9f6a-47db-9879-b1f4d734ad1d.log\n-rw-rw-r-- 1 shanta shanta 444 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbba52ed-f2d4-43de-84e7-7f2f20485a28.log\n-rw-rw-r-- 1 shanta shanta 1329 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b197e78a-c303-48f6-a51d-11bd2887f6ee.log\n-rw-rw-r-- 1 shanta shanta 8389 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b18eef2-19ea-461b-bb90-986105bc7bb5.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3df0d710-12c8-4b7c-ad62-7e21296bd46f.log\n-rw-rw-r-- 1 shanta shanta 53 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e1476bd-22fe-4dab-bea1-36a84d8f17aa.log\n-rw-r--r-- 1 shanta shanta 497 Jul 14 05:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-985e1f21-fe05-4918-b2dd-897e9b8ed69a.log\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-22463636-937d-4b56-aafd-34d62bb16966.log\n-rw-rw-r-- 1 shanta shanta 487 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5d26d669-2418-49a8-8831-a315b1bbe73a.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:19 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-458bcd01-8e40-4774-a995-6b4e19c9d15d.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:17 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-95c761cf-a8cc-42ee-b097-d41d5c47d9ef.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-403824e5-363a-4bad-9261-4f84f12e4c51.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8b64ca18-9e16-4444-9e32-e83037a19e97.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3c093cd3-edd3-4faa-a815-2f8b9ce516de.log\n-rw-rw-r-- 1 shanta shanta 75 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-02f1134d-dd8b-4b71-bc32-040199ebcb2b.log\n-rw-rw-r-- 1 shanta shanta 610 Jun 13 05:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba277740-b1b2-47c2-b173-5072bc4de076.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-21e63c72-4014-405f-a665-2a9daa227208.log\n-rw-rw-r-- 1 shanta shanta 1487 Jul 26 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bdf69c35-eb01-438b-aa9f-ca05cd9665d6.log\n-rw-rw-r-- 1 shanta shanta 2526 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c6106274-f777-4103-9574-ded0f0e1022a.log\n-rw-rw-r-- 1 shanta shanta 21 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a06106da-34cb-4764-ba38-bc6872595cbf.log\n-rw-rw-r-- 1 shanta shanta 328 Jul 25 06:51 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed0ded70-2e13-4b5c-9242-a13b197d9c5f.log\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-442fc247-b53c-4be1-92ef-d17785ff95ef.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6bb14e23-3d4a-40af-bfd5-e2b2afec3ebc.log\n-rw-rw-r-- 1 shanta shanta 1233 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4c0e0106-047c-4f27-89d6-fc66f887e384.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7fcab0fd-c561-4309-94d8-8bd354630d99.log\n-rw-rw-r-- 1 shanta shanta 40 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-08db8f68-17b7-4150-826c-4980d414a646.log\n-rw-rw-r-- 1 shanta shanta 800 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-48efa4b8-b071-4ed5-9335-d2d0d7e9bae9.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 26 07:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-878c2868-59cf-4fac-bfe0-2280195e78ba.log\n-rw-rw-r-- 1 shanta shanta 124 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-63fd8df8-713b-42d2-8c61-983b8048a5ec.log\n-rw-rw-r-- 1 shanta shanta 288 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c9c71a1b-562a-4763-a51d-3732a157ea04.log\n-rw-rw-r-- 1 shanta shanta 3162 Jul 19 10:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1e484188-4e3a-4b79-82a8-a554e481abdc.log\n-rw-rw-r-- 1 shanta shanta 800 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3f3031a9-c147-4aeb-ade1-03ec3de450d8.log\n-rw-rw-r-- 1 shanta shanta 144 Jul 26 07:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8c906e2f-4d12-48e0-8c9d-0ca4c6267bab.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 26 03:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-86982256-a8b3-470a-b1df-b31c556174df.log\n-rw-r--r-- 1 shanta shanta 11678 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8e196730-643e-4dd8-ad7b-ef52b795a786.log\n-rw-rw-r-- 1 shanta shanta 1704 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4e6e4867-fad8-4855-9ade-ce0998b20b21.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ff891ccb-dfd8-49b4-addb-a62a1237e4cf.log\n-rw-rw-r-- 1 shanta shanta 1453 Jul 26 09:49 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a81ec28d-45af-4db5-bd71-ad99141f7ef0.log\n-rw-rw-r-- 1 shanta shanta 3856 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bbeb45cc-125b-4b1b-ac21-c3074f7b3d04.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-161c8966-3192-41e8-91ee-e943b1796c7a.log\n-rw-rw-r-- 1 shanta shanta 2036 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4ac52968-76e9-447c-953a-732757a2ffc3.log\n-rw-rw-r-- 1 shanta shanta 1782 Jun 13 05:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-19a07c64-daa7-4a6d-9124-655308a4a112.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-78571ea8-545b-4230-aaa0-1149753507d9.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:39 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-86bc039b-69e2-49c4-a7f5-8918b28350d4.log\n-rw-rw-r-- 1 shanta shanta 2364 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-91574277-54fb-4f0c-aa9d-8b106beedf48.log\n-rw-rw-r-- 1 shanta shanta 1528 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68a7201f-0612-4821-9731-6dc8ed115a73.log\n-rw-rw-r-- 1 shanta shanta 202 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d2be231c-0a83-4d5b-b78e-d3f92adb1216.log\n-rw-rw-r-- 1 shanta shanta 730 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fe9db79f-f289-4227-9920-cec6b2ff8914.log\n-rw-rw-r-- 1 shanta shanta 29932 Jul 25 07:03 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d24f278d-2e26-404e-8f48-478042ee4aed.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29652caa-4efb-442a-8d6e-8d2fbc8fa18e.log\n-rw-rw-r-- 1 shanta shanta 3620 Jul 26 07:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-072244d6-dade-4e8d-921f-f3354930967c.log\n-rw-rw-r-- 1 shanta shanta 88 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6ded6c1a-d296-4604-abd5-f6b3997e7020.log\n-rw-rw-r-- 1 shanta shanta 184 Jul 19 10:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fe2e03b6-2550-4ae4-9735-4588c397809d.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c30c39d-7c27-403f-aad8-7c8d3eb311c7.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 03:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5dbbe3ea-fba2-4804-b544-f5c700ae7954.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5ded5606-6cb3-46a9-80de-6d2675e5e156.log\n-rw-rw-r-- 1 shanta shanta 58 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-468124a7-dec1-4ef1-b084-03eaf26adbce.log\n-rw-rw-r-- 1 shanta shanta 640 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bea5967-4ba5-4b77-9043-f676ab706b37.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e1dfd0db-74d3-49de-9bb1-4a890ec6e878.log\n-rw-rw-r-- 1 shanta shanta 190 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-67f51ebd-d0c7-4ca0-8cf5-54a9920c962b.log\n-rw-rw-r-- 1 shanta shanta 758 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ba046e4b-778c-4471-a543-27d468b4d776.log\n-rw-r--r-- 1 shanta shanta 230 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-50eb18ac-1142-4de2-be13-940a869caf02.log\n-rw-rw-r-- 1 shanta shanta 852 Jul 26 10:59 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-aab5cd19-9649-41ff-ba19-04c93eb2b6b9.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3487e4ef-2ffe-45c0-9ec8-015c1a665988.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c50b8ffe-7783-446b-941b-38346937be86.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-890e2afc-97f3-4c01-aa90-ba0745addf15.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-8710a3e4-a92d-4f42-a8eb-b3fc0beb2434.log\n-rw-rw-r-- 1 shanta shanta 4802 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed9d2548-9719-4d33-9404-0d0e2ca72df5.log\n-rw-rw-r-- 1 shanta shanta 229 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dc2144c7-c090-42fc-a770-c1377be3cf4e.log\n-rw-rw-r-- 1 shanta shanta 127 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ad2c0a87-4452-4228-b2bc-013693e3aaa2.log\n-rw-rw-r-- 1 shanta shanta 24 Jun 22 04:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e183de76-5f99-4802-91e6-41aa69da3fcf.log\n-rw-rw-r-- 1 shanta shanta 92 Jun 22 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0943166a-5687-4c45-9b40-6f36a8dd7602.log\n-rw-rw-r-- 1 shanta shanta 231 Jun 22 03:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bf8eb230-d994-4105-a19a-ffe24a9e640b.log\n-rw-rw-r-- 1 shanta shanta 860 Jun 13 04:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b11fe419-c138-4e44-8492-1879191cb6ca.log\n-rw-rw-r-- 1 shanta shanta 3503 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-aafcc80b-f8c5-4d1d-a465-043d72089ce2.log\n-rw-rw-r-- 1 shanta shanta 1416 Jul 25 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-79306013-90fe-4a7f-885f-b43339d21fc4.log\n-rw-rw-r-- 1 shanta shanta 8480 Jul 25 06:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68c4f268-4ff8-45df-aa9e-8fe01ed1f235.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a493efab-ddde-44e2-a5da-c72d20ca8f15.log\n-rw-rw-r-- 1 shanta shanta 328 Jun 13 06:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-513c3a0b-c67c-42b8-8f1e-ec72329ae0b5.log\n-rw-rw-r-- 1 shanta shanta 1146 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d3fc0b60-1219-4090-887b-e044c6e092f6.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-514726d9-c7e6-452c-8476-e3302d004fee.log\n-rw-r--r-- 1 shanta shanta 128 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d8c2c5e1-c288-45dd-82f0-e52fed805de3.log\n-rw-rw-r-- 1 shanta shanta 2978 Jul 25 10:02 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b850c6b0-1a8f-472c-ab9b-5f46c7c699ce.log\n-rw-rw-r-- 1 shanta shanta 525 Jun 22 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9d7cb640-afe0-42a2-8c18-6adff8bfd660.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-303e9ede-c427-4d33-9f1f-54103b107508.log\n-rw-rw-r-- 1 shanta shanta 4392 Jul 25 06:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3d5d37ad-bfdb-4adc-9154-fafab4a04904.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2af92bf2-c972-480a-85e3-935a4b293da3.log\n-rw-r--r-- 1 shanta shanta 334 Jul 14 09:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a9d4cf79-cda0-47a5-bd56-9d61b6438332.log\n-rw-rw-r-- 1 shanta shanta 121 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c7dfe4a2-c721-49fa-8ab3-d9c08652aa66.log\n-rw-rw-r-- 1 shanta shanta 1233 Jul 26 06:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7b14d794-7ae4-4a83-9f15-57ec4a797d3e.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-59f11086-e1ce-46d2-aedb-a96725831030.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-850b2f99-9b09-47fe-9f02-3c975fbfc7c3.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 06:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca62355a-97be-479b-8319-2d4d0cd80f35.log\n-rw-rw-r-- 1 shanta shanta 238 Jul 17 08:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-969de8bf-90e9-45ce-a100-0c02a60a2d26.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 03:35 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f86da3fe-f1cf-4b92-8759-cfb4b2edb101.log\n-rw-r--r-- 1 shanta shanta 2181 Jul 14 02:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-43360709-a928-4588-ac0d-47a2a2c5fd2a.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-530cab1a-1053-48c8-a47e-f01428fc91f2.log\n-rw-rw-r-- 1 shanta shanta 254 Jul 26 06:56 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e6138b49-70b7-4a34-ae14-3a0b9bb19ca7.log\n-rw-rw-r-- 1 shanta shanta 204 Jun 22 06:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e9185b7c-f6d7-46f5-b067-fe3adfbe0561.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 25 08:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b4b16d3f-c925-480b-bf23-ea16bd82fd00.log\n-rw-rw-r-- 1 shanta shanta 3998 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-73221f32-a4be-4cba-aa40-ab59db3c9d31.log\n-rw-r--r-- 1 shanta shanta 1124 Jul 14 05:32 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76712fab-d926-4fc6-b59a-f45a9d0401bf.log\n-rw-rw-r-- 1 shanta shanta 24 Jun 22 04:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9bc82e46-7f86-483f-a82b-99609c0afcd0.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b149ef5-c7be-4c33-be1b-4bab5c19a1a6.log\n-rw-rw-r-- 1 shanta shanta 57246 Jun 22 05:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-63758db0-a130-4e53-89d3-6c960673afaa.log\n-rw-rw-r-- 1 shanta shanta 347 Jul 17 12:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c936fc46-1bd3-499e-987b-537c38b7bf49.log\n-rw-rw-r-- 1 shanta shanta 157 Jun 13 05:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7ad82b19-9525-4286-adf4-d5e5f098fafe.log\n-rw-r--r-- 1 shanta shanta 123 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-93c621c8-089b-4850-8f5d-6f513bc196b8.log\n-rw-r--r-- 1 shanta shanta 247 Jul 14 04:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2d247cb2-2b86-45ca-b547-680c8fb8e7bf.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 10:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ee2cdd7d-b897-447c-aacb-a440d5f20b5c.log\n-rw-rw-r-- 1 shanta shanta 165 Jul 26 12:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5be30b3c-cca1-4e10-a25c-42d17c53b9a6.log\n-rw-rw-r-- 1 shanta shanta 713 Jun 22 07:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a71ca671-e9ac-4549-9312-29373c8e2e2a.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 10:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1c129709-2110-4384-acf6-1c9400dd1ca5.log\n-rw-rw-r-- 1 shanta shanta 907 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ec691340-8285-444a-99a5-13ac70b8768b.log\n-rw-rw-r-- 1 shanta shanta 5085 Jul 17 12:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32554856-6b69-4ab1-8e36-f38546958f68.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 26 07:01 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-463f5ccb-fd42-41d4-bfdb-8951d8859ae8.log\n-rw-rw-r-- 1 shanta shanta 122 Jul 17 08:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-20d6068e-f897-43b5-8426-c334ecaf44e8.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:55 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7422143f-6f16-44bb-a4c8-f34223be70a3.log\n-rw-rw-r-- 1 shanta shanta 329 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32ebdae3-c0cd-4bb5-9f65-0dedb54755dc.log\n-rw-rw-r-- 1 shanta shanta 2116 Jun 13 05:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c3e2c13f-946a-417e-bfd6-3fade0a99471.log\n-rw-rw-r-- 1 shanta shanta 769 Jun 22 02:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-801cadfe-2ab5-49ab-97be-4ef5e0087980.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d41cf5e-91da-4440-b8a7-8f343543c37d.log\n-rw-rw-r-- 1 shanta shanta 686 Jun 22 05:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dd5f97a3-a896-46cd-8f54-5bd84185d7b6.log\n-rw-rw-r-- 1 shanta shanta 130 Jul 26 09:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3884b236-956e-46e5-9255-78f0fdc56440.log\n-rw-rw-r-- 1 shanta shanta 3069 Jul 25 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ceb85104-b2e2-4dfd-80d6-c840aee8f975.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-10b4e489-446f-4f72-832e-e8d16c7b7022.log\n-rw-rw-r-- 1 shanta shanta 1839 Jul 25 10:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-dac903b4-4c54-4612-acd4-72e3377c10f4.log\n-rw-rw-r-- 1 shanta shanta 927 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-41e664ef-ab9b-4a3e-9817-56881d0a485e.log\n-rw-rw-r-- 1 shanta shanta 51 Jul 17 12:05 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-034815b5-cdb3-471e-9141-59921f20c00b.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a5dccec9-5834-45e0-ab06-0643bfb258c4.log\n-rw-rw-r-- 1 shanta shanta 50747 Jul 25 09:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-af6e27be-6801-46b0-8b0d-57dacb131b6a.log\n-rw-rw-r-- 1 shanta shanta 1273 Jul 26 07:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3ae7e553-4ea4-4130-b1f8-6157e2e06ece.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 03:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5de826ae-f74b-43ad-9020-72f69102e0c1.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b78bcca5-17a9-447e-9230-9eed97096e9c.log\n-rw-rw-r-- 1 shanta shanta 6524 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ab1822ae-a9bb-4903-a3e8-c3685662ee30.log\n-rw-rw-r-- 1 shanta shanta 66 Jul 19 09:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-32b9b6ad-9f6f-4e1f-8c6b-2a06fe37a4d4.log\n-rw-r--r-- 1 shanta shanta 368 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ac784e5b-2ae3-424f-8369-5a096117556a.log\n-rw-rw-r-- 1 shanta shanta 24018 Jul 26 05:24 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f50c143b-2640-4ebc-bc7b-fd0f2c7a7d12.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e1d1d2fd-136c-4c7b-aa4f-24272e842441.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 26 09:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2dcad5d1-3e36-4138-a8ff-24e443eefb63.log\n-rw-rw-r-- 1 shanta shanta 694 Jun 22 06:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cef80b2d-0525-48be-9da4-b5a94c1132d9.log\n-rw-r--r-- 1 shanta shanta 453 Jul 14 08:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e4aab6ea-0bb9-40a1-8209-7dfaf2b270cc.log\n-rw-rw-r-- 1 shanta shanta 640 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b01dbfc6-42f5-4757-95b7-81986189313f.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:37 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fad0924e-cbd3-466c-b5e3-a26bcba2b034.log\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 02:49 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d0ec8ad2-1b40-414f-9fcc-0330fddeb5eb.log\n-rw-rw-r-- 1 shanta shanta 20049 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-44c32f48-6d62-4141-a32c-61652cecc5de.log\n-rw-r--r-- 1 shanta shanta 396 Jul 14 03:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3ecbec3a-04d2-48f9-8e63-60fc2d3dc601.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7f40ce28-74af-4148-bca2-8e20f9ef8286.log\n-rw-rw-r-- 1 shanta shanta 33 Jun 22 06:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e4d19b16-8cb8-429d-85c5-129f877e91f5.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9e2ea488-3356-4f75-b126-dfc5ec722c18.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-34861508-2333-41e6-be00-0c155302802d.log\n-rw-rw-r-- 1 shanta shanta 4859 Jul 17 12:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c3c80f25-6a76-4ace-a351-a9f642971c7a.log\n-rw-rw-r-- 1 shanta shanta 63 Jun 22 05:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-52c616cf-4060-4980-a42e-d48712c2d393.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 02:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c662af4-7d5e-48a8-ab24-f81fa5e1ebc2.log\n-rw-rw-r-- 1 shanta shanta 852 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-331e5d62-b76e-4040-9ea4-76e41f850c3a.log\n-rw-r--r-- 1 shanta shanta 360 Jul 14 07:03 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-173e1a6d-bb4c-47a7-8bd7-958234c5889e.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9a1cffaf-e048-4f0a-8a86-fe343c7315fe.log\n-rw-rw-r-- 1 shanta shanta 12962 Jul 26 05:24 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7274dbc6-7eb8-48c8-a46d-1667b5fe9dee.log\n-rw-rw-r-- 1 shanta shanta 503 Jul 25 10:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b31777f-cc84-433f-b8df-e72f28b06055.log\n-rw-rw-r-- 1 shanta shanta 121 Jun 22 07:08 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29588dd4-87e9-401b-887f-80a554ed1c89.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7991c2bc-9176-4193-80fd-af9874b0319f.log\n-rw-rw-r-- 1 shanta shanta 25160 Jul 25 10:22 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f4a189de-b6dd-4d5e-95ad-9d8539947b83.log\n-rw-rw-r-- 1 shanta shanta 17979 Jul 25 07:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eb6bb958-c256-476f-8c6c-12bee68c2f72.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 04:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2bef4e80-0276-465d-a607-2c9d1c97e77a.log\n-rw-rw-r-- 1 shanta shanta 26 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a956fa3c-528d-4f06-9513-cb02e7677eb1.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 26 06:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-65b2232b-91fc-4bb4-bf25-bbab15ee7f32.log\n-rw-rw-r-- 1 shanta shanta 146 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0b10eab2-9612-4f3e-ba1d-6325c71fffe1.log\n-rw-rw-r-- 1 shanta shanta 331 Jun 22 04:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a6a53ffc-0945-4a57-a744-b0a94c26c69c.log\n-rw-rw-r-- 1 shanta shanta 28265 Jul 26 13:00 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6014f31a-bbb7-4f72-bffd-cebace545981.log\n-rw-rw-r-- 1 shanta shanta 1777 Jun 13 05:20 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-da6a3526-816c-4bad-91ec-711878b25802.log\n-rw-r--r-- 1 shanta shanta 518 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-bd4570f4-fd09-4f90-ad8b-5eda22a9a2b0.log\n-rw-rw-r-- 1 shanta shanta 248 Jul 26 07:07 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fb7c9a96-47f5-4858-bf1f-6fbbbde7cb36.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 22 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-506470c8-c667-4085-bc50-9a9a930f7c51.log\n-rw-r--r-- 1 shanta shanta 76 Jul 14 03:34 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5656d772-8a1f-4273-867f-a90aa8c2cac9.log\n-rw-rw-r-- 1 shanta shanta 56 Jul 17 10:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3548041f-63cb-414d-bfaf-f32f245de74b.log\n-rw-r--r-- 1 shanta shanta 1668 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-eef3c2c1-3119-4830-a84d-d8b53afd9610.log\n-rw-rw-r-- 1 shanta shanta 330 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-2940010e-430a-4984-ad20-df1720c498dc.log\n-rw-rw-r-- 1 shanta shanta 758 Jul 17 08:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d89cad95-6158-4f29-9a88-5fba27e93039.log\n-rw-rw-r-- 1 shanta shanta 102 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3a818786-5de2-4bfd-8836-74cf5c62e518.log\n-rw-rw-r-- 1 shanta shanta 1295 Jul 25 09:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1aba3c02-abfb-4670-9b02-1079a4567327.log\n-rw-rw-r-- 1 shanta shanta 45 Jul 26 03:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-68563ad0-0d38-4037-acbd-5d0996ed28b2.log\n-rw-rw-r-- 1 shanta shanta 47 Jun 22 04:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fbb38d10-cdfd-45ba-8ce8-647a18e1dc19.log\n-rw-rw-r-- 1 shanta shanta 402 Jun 13 04:48 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-57d7068a-26f8-4e90-816e-6b6fde95c88a.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:27 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d9477edc-09fb-4279-801d-aef4525d256c.log\n-rw-rw-r-- 1 shanta shanta 493 Jul 26 03:11 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c232e20f-deca-4fad-b509-1d47abcb57a3.log\n-rw-rw-r-- 1 shanta shanta 3 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-183c4dfe-85c0-4898-b586-cc5289ada25e.log\n-rw-rw-r-- 1 shanta shanta 155 Jul 25 07:15 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3bbb3f7f-ca66-4ec8-8f1c-556ece96c03c.log\n-rw-rw-r-- 1 shanta shanta 8 Jun 22 03:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-b61c9ee7-c002-490e-9b7c-1a1b73e18dd1.log\n-rw-rw-r-- 1 shanta shanta 14062 Jul 26 12:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-16b340e4-3fb2-4720-8482-75e9df26fbac.log\n-rw-rw-r-- 1 shanta shanta 331 Jul 25 10:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ca1f4084-d957-4a69-840f-44f5a885db40.log\n-rw-rw-r-- 1 shanta shanta 560 Jun 13 05:45 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9cdb042f-e3c4-48d6-a969-257b93866ea6.log\n-rw-rw-r-- 1 shanta shanta 281 Jun 22 04:10 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e05b6873-de90-4662-9b1b-b2392c132580.log\n-rw-rw-r-- 1 shanta shanta 1295 Jul 26 03:13 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-ed5015f8-80f6-4f5d-8e8e-617e944bfd60.log\n-rw-rw-r-- 1 shanta shanta 1180 Jul 25 09:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-606f7056-8332-4025-82c2-9d58714c42a9.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:23 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-76a52042-ebbd-4885-aa51-64be08133027.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:28 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c1f9d817-6b49-47cf-ae91-66a93a8d7a15.log\n-rw-rw-r-- 1 shanta shanta 35 Jun 22 06:47 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-9768f880-0d95-479f-b564-3e10ceca9858.log\n-rw-rw-r-- 1 shanta shanta 180 Jun 13 05:43 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0c630919-93b5-4773-ac1a-1620cc029020.log\n-rw-rw-r-- 1 shanta shanta 71 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0e93ab2d-d38a-4585-b540-4e630c2adb52.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f5ebd847-1194-44a8-805d-5f50c78f5fc7.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 17 12:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fa84f4c-c93b-4f7b-9049-9db9c59f282d.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:25 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b969c34-19e1-4d3a-9a04-6242540d2535.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a08ef684-2a43-4387-a2d6-fd5c9f73683c.log\n-rw-rw-r-- 1 shanta shanta 306 Jun 22 03:54 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-479ff6eb-90d4-4b40-9320-354ce5f130d1.log\n-rw-rw-r-- 1 shanta shanta 2659 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-83cafae8-ef8e-4c0a-9bbf-c8a65e3b98e9.log\n-rw-rw-r-- 1 shanta shanta 103 Jul 17 08:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e2066049-d589-4d3f-8935-6316c3459955.log\n-rw-rw-r-- 1 shanta shanta 93 Jul 25 06:50 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29db9cae-2993-4509-9948-97da190025b6.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 09:46 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f7676a4f-326e-4951-9003-879aa8db6301.log\n-rw-rw-r-- 1 shanta shanta 56 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cb8ecf7-ef68-4a60-820f-c800d939d511.log\n-rw-rw-r-- 1 shanta shanta 1276 Jun 13 05:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-fd0927c0-1508-47bd-82fe-05b5e7adda2b.log\n-rw-rw-r-- 1 shanta shanta 465 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cec7c31c-8950-445f-a453-9ca06153cbfd.log\n-rw-r--r-- 1 shanta shanta 612 Jul 14 08:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-09fc7b27-40bb-422b-8735-39dfa3ba4a79.log\n-rw-rw-r-- 1 shanta shanta 63 Jul 17 08:30 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cefbf9e9-fc1c-4434-b642-7975e35fe666.log\n-rw-rw-r-- 1 shanta shanta 60 Jun 22 05:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5b936d10-b7bf-4d50-be19-578e7ec98ed9.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-f8a39c78-1096-4838-8d99-41def2f0022b.log\n-rw-rw-r-- 1 shanta shanta 82 Jun 13 05:21 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f3e1084-4880-422b-ac4a-34d125f27504.log\n-rw-r--r-- 1 shanta shanta 5545 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e955d915-2ca5-46eb-9b81-f40a24c5808f.log\n-rw-rw-r-- 1 shanta shanta 88 Jun 13 05:12 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-d42b8767-2682-48f2-ad8b-86abdbc1b329.log\n-rw-rw-r-- 1 shanta shanta 18375 Jul 25 09:33 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5508cacf-3eb2-4279-84b6-0df8ec8734e5.log\n-rw-rw-r-- 1 shanta shanta 480 Jun 22 04:09 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cf0e78a2-8796-4d64-acb1-d9c97ec07242.log\n-rw-r--r-- 1 shanta shanta 3574 Jul 14 05:31 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-3b8e6d43-9d8b-4a81-89fa-af1382612fab.log\n-rw-rw-r-- 1 shanta shanta 768 Jul 17 07:58 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-de3f3e1d-b932-4f15-bc31-5942c7b136eb.log\n-rw-r--r-- 1 shanta shanta 96 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6e396ccc-391f-4a49-991b-928c8e42843b.log\n-rw-rw-r-- 1 shanta shanta 48 Jul 25 07:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6fdf7310-1b5c-462c-b3ad-293aae4bd327.log\n-rw-rw-r-- 1 shanta shanta 74 Jun 22 04:06 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-e555d859-96fc-4a5f-a73f-b7340d55faef.log\n-rw-rw-r-- 1 shanta shanta 1763 Jun 22 06:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a0a93de3-4fa8-4471-9e4c-ca63f3bec8b8.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 02:52 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-03615208-c1a7-4041-8bad-d8538db03151.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 22 05:57 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-216cf0d2-6d6d-44b9-9353-3da777990039.log\n-rw-rw-r-- 1 shanta shanta 0 Jun 13 05:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-a2411730-a028-45bb-adb3-57f8a6005c4c.log\n-rw-rw-r-- 1 shanta shanta 0 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-363aaecb-ae55-4773-b2da-bc92b16e9e73.log\n-rw-rw-r-- 1 shanta shanta 797 Jul 25 10:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-6259076c-cfeb-46a4-91df-0548f295d69f.log\n-rw-rw-r-- 1 shanta shanta 499 Jun 13 06:42 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-4d82501a-34c3-4f2a-8db0-d3589ffaa59b.log\n-rw-rw-r-- 1 shanta shanta 1668 Jul 17 08:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-174b8f52-e897-4354-a08c-a16d29da54d1.log\n-rw-r--r-- 1 shanta shanta 877 Jul 14 04:40 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-7cda1cfb-dfc4-4a68-b97e-f04261350907.log\n-rw-rw-r-- 1 shanta shanta 69 Jul 26 03:14 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-c973e8dc-0aab-499f-bf99-5780d9d39c63.log\n-rw-rw-r-- 1 shanta shanta 1120 Jul 17 09:53 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-1bd71dc5-9207-41c3-b40a-1c0b182207b4.log\n-rw-r--r-- 1 shanta shanta 204 Jul 14 01:29 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-0664db91-d21c-490a-98c9-424823cd83ba.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:44 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-29e2faf5-4688-43ad-ba76-c1476ba755d3.log\n-rw-rw-r-- 1 shanta shanta 2730 Jul 25 10:04 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-cbdcdc8c-eb0c-44aa-a1e7-2e2c20b9cccf.log\n-rw-rw-r-- 1 shanta shanta 2969 Jul 25 10:26 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-89f65e53-a726-40b7-aede-a72a3b6d6b5e.log\n-rw-r--r-- 1 shanta shanta 0 Jul 14 04:41 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-049387c4-7b6e-4c57-9c26-fc65c4732d79.log\n-rw-rw-r-- 1 shanta shanta 54 Jul 25 10:18 /home/shanta/PycharmProjects/comserv2/.zencoder/Zencoder-5f8a8bde-a8db-4de9-b952-0cc234af3ed6.log\n",
                    "language": "textmate"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1753560217409,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "Please add that code comparison should be in +- format so I can read line by line your proposed changes "
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "yes make the changes"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "User AI Instruction",
                    "description": "User AI Instruction",
                    "uri": "zen-rules://user/custom",
                    "content": "read AI_DEVELOPMENT_GUIDELINES\nall code must be varifed by user"
                },
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "content": "\n\n# Comserv Project Information\n\n## Summary\nComserv is a comprehensive web-based system for managing business operations, projects, and documentation. It's built using the Catalyst Perl web framework and provides features for project management, theme customization, and user authentication.\n\n## Structure\n- `Comserv/`: Main application directory containing the core application code\n  - `lib/`: Application code and models\n  - `docs/`: Documentation files\n  - `root/`: Static assets and templates\n  - `script/`: Utility scripts for server management and database operations\n  - `t/`: Test files\n- `app/`: Additional application components\n- `data/`: Data files including pricing information\n- `proxmox/`: Proxmox VE integration components\n\n## Language & Runtime\n**Language**: Perl\n**Version**: 5.x (compatible with Perl 5.40.0)\n**Framework**: Catalyst 5.90130\n**Build System**: Module::Install\n**Package Manager**: CPAN\n\n## Dependencies\n**Main Dependencies**:\n- Catalyst::Runtime (5.90130)\n- Moose\n- DBIx::Class\n- Template (Template Toolkit)\n- JSON/JSON::MaybeXS\n- Log::Log4perl\n- DateTime\n- File::Slurp\n\n**Development Dependencies**:\n- Test::More (0.88+)\n- Test::Pod\n- Test::Pod::Coverage\n- Test::WWW::Mechanize::Catalyst\n- Catalyst::Devel\n\n## Build & Installation\n```bash\ncd Comserv\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n## Database\n**Type**: MySQL\n**Setup**: \n```bash\nmysql -u root -p < database_initialization_script.sql\n```\n**Schema Management**: DBIx::Class::Schema::Loader\n\n## Testing\n**Framework**: Test::More\n**Test Location**: Comserv/t/\n**Run Command**:\n```bash\ncd Comserv\nprove -l t/\n```\n\n## Server Execution\n**Development Server**:\n```bash\ncd Comserv\nscript/comserv_server.pl\n```\n**Production Deployment**:\n```bash\ncd Comserv\nscript/comserv_fastcgi.pl\n# or\nstarman --port 5000 --workers 5 comserv.psgi\n```\n\n## Authentication & Authorization\n- Session-based authentication\n- Role-based access control\n- Multiple authentication realms\n- Support for user groups and site-specific permissions\n\n## Features\n- Project management system\n- Theme customization system\n- Email integration\n- PDF generation\n- Proxmox VE integration\n- Multi-site support"
                },
                {
                    "name": "Database Development Standards and Best Practices",
                    "description": "Database Development Standards and Best Practices",
                    "uri": "zen-rules://repo/database-standards",
                    "content": "\n\n# Database Development Standards\n\n## Query Standards\n- **Table Aliases:** Use table aliases in all queries to avoid ambiguity (e.g., 'me.column_name')\n- **Error Handling:** Implement proper error handling with eval blocks and try/catch\n- **Parameterized Queries:** Use parameterized queries to prevent SQL injection\n\n## Schema Management\n- **Naming Conventions:** Follow naming conventions for tables, columns, and relationships\n- **Documentation:** Document schema changes and rationale for future reference\n- **Performance:** Regularly optimize database performance and indexes\n- **Version Control:** Use Git to track schema changes with proper tagging\n- **Backup Protocol:** Always backup database before making schema changes\n\n## Model Standards (DBIx::Class)\n- **Result Classes:** Located in `/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema/Ency/Result/`\n- **Relationships:** Define proper relationships between tables\n- **Validation:** Implement data validation in model classes\n\n## Configuration Priority\n- **Primary:** ZeroTier production server (172.30.161.222) - works from any network\n- **Secondary:** Local network production server (192.168.1.198) - home/office only\n- **Tertiary:** localhost MySQL (development)\n- **Fallback:** SQLite (offline mode)\n\n## Security Protocols\n- **Input Validation:** Validate all user inputs before database operations\n- **Access Controls:** Implement proper access controls based on user roles\n- **Regular Reviews:** Regularly review and update security protocols"
                },
                {
                    "name": "AI Behavior Enforcement Rules for Zencoder",
                    "description": "AI Behavior Enforcement Rules for Zencoder",
                    "uri": "zen-rules://repo/ai-behavior-enforcement",
                    "content": "\n\n# AI Behavior Enforcement Rules\n\n## MANDATORY PROMPT TRACKING\n**CURRENT PROMPT:** This is prompt #[X] of 5 maximum allowed prompts.\n\n### Prompt Counter Protocol\n- **Start Each Response:** Begin every response with current prompt count\n- **Track Internally:** Keep running count throughout conversation\n- **Warn at Prompt 4:** Alert user that next prompt will trigger handoff\n- **Stop at Prompt 5:** Refuse to continue, provide handoff documentation\n\n## MANDATORY APPROVAL WORKFLOW\n\n### Before ANY Code Changes\n1. **STOP:** Do not modify any files without explicit user approval\n2. **PRESENT:** Show exactly what will be changed using the standard format\n3. **WAIT:** Wait for explicit approval (\"yes\", \"approved\", \"apply changes\")\n4. **CONFIRM:** Acknowledge approval before proceeding\n5. **EXECUTE:** Apply changes only after confirmation\n\n### Standard Change Presentation\n```\n🔄 PROPOSED CHANGE TO: [filename]\n📝 CHANGE TYPE: [Addition/Modification/Deletion]\n📋 DESCRIPTION: [what this accomplishes]\n\n❌ CURRENT CODE:\n[existing code or \"N/A\"]\n\n✅ NEW CODE:\n[proposed code or \"DELETED\"]\n\n💡 REASON: [why needed]\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed\n```\n\n## VIOLATION CONSEQUENCES\n- **Prompt Limit Exceeded:** Immediate session termination with handoff\n- **Unapproved Changes:** Acknowledge violation and request approval retroactively\n- **Missing Counter:** Add prompt counter to current response\n\n## HANDOFF TEMPLATE (Use on 5th Prompt)\n```\n🚨 PROMPT LIMIT REACHED - HANDOFF REQUIRED\n\n📊 SESSION SUMMARY:\n- Prompts Used: 5/5\n- Files Modified: [list]\n- Tasks Completed: [list]\n- Tasks Remaining: [list]\n\n🔄 HANDOFF PROMPT FOR NEXT AI:\n\"Continue working on [project/task]. Read development-guidelines.md and ai-behavior-enforcement.md first. \nCurrent context: [brief context]\nFiles being worked on: [list]\nNext steps needed: [specific actions]\"\n\n📚 REQUIRED READING FOR NEXT AI:\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- [any other relevant docs]\n\n✅ DOCUMENTATION UPDATED: [what was recorded]\n```\n\n## EMERGENCY PROTOCOLS\n- **User Says \"Stop\":** Immediately cease all activities\n- **User Says \"Revert\":** Provide instructions for undoing changes\n- **User Says \"Handoff\":** Immediately provide handoff documentation"
                },
                {
                    "name": "Template Toolkit Standards and Requirements",
                    "description": "Template Toolkit Standards and Requirements",
                    "uri": "zen-rules://repo/template-standards",
                    "content": "\n\n# Template Toolkit (.tt) Standards\n\n## Required PageVersion Header Format\nAll .tt files must include this exact format:\n```\n[% META title = 'Page Title Here' %]\n[% PageVersion = 'relative/path/filename.tt,v 0.01 YYYY/MM/DD author Exp author ' %]\n[% IF c.session.debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n```\n\n## Template Standards\n- **Theme Compliance:** Use theme system variables for styling - NO page-specific CSS\n- **Debug Mode:** Include debug mode blocks for development visibility\n- **Responsive Design:** Implement mobile-first responsive design patterns\n- **HTML Structure:** Use proper semantic HTML structure\n- **Template Toolkit:** Follow Template Toolkit best practices\n\n## Navigation Integration\nWhen working with navigation templates:\n- **Main Navigation:** Include via `/Navigation/navigation.tt`\n- **Admin Menu:** Use `/Navigation/admintopmenu.tt` for admin-only sections\n- **Dropdown Menus:** Reference existing dropdown templates in `/Navigation/` directory\n\n## Documentation File Rules - CRITICAL\n- **File Format:** ONLY `.tt` files for application documentation - NO `.md` files\n- **EXISTING FILES FIRST:** ALWAYS search for and use existing files before creating new ones\n- **Naming Consistency:** Use same file names across AI sessions to prevent content loss\n- **Content Priority:** Always improve existing files rather than creating new ones\n- **Role-Based Access:** Respect existing Documentation/index.tt role-based structure\n- **Directory Consolidation:** Use established directory structure - don't create new directories\n\n## File Creation Protocol\n1. **Search First:** Use file search tools to find existing similar files\n2. **Check Directory:** Look at existing directory structure in target location\n3. **Ask User:** If multiple similar files exist, ask which should be updated\n4. **Update Existing:** Improve existing files rather than creating duplicates"
                }
            ]
        },
        {
            "id": "5d996e59-47b0-49ca-9810-37427b561612",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "**CURRENT PROMPT:** This is prompt #3 of 5 maximum allowed prompts.\n\n✅ **APPROVAL CONFIRMED** - Applying changes with line-by-line diff format as requested."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BeX9RcwFFo493P4HFRAsxq",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- /home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm\n+++ /home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm\n@@ -1786,9 +1786,35 @@\n         }\n     };\n     \n+    # Debug: Check what we got from get_all_database_configs\n+    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n+        \"Database configs type: \" . ref($database_configs) . \", content: \" . (ref($database_configs) eq 'HASH' ? scalar(keys %$database_configs) . \" keys\" : \"not a hash\"));\n+    \n+    # Ensure we have a hash reference\n+    unless (ref($database_configs) eq 'HASH') {\n+        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+            \"Expected hash reference but got: \" . ref($database_configs));\n+        $c->stash(\n+            template => 'admin/schema_compare.tt',\n+            error => \"Failed to load database configurations: Invalid data format\"\n+        );\n+        return;\n+    }\n+    \n     # Process each database configuration\n     foreach my $db_key (sort keys %$database_configs) {\n         my $config = $database_configs->{$db_key};\n+        \n+        # Debug: Check individual config\n+        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n+            \"Processing config for $db_key, type: \" . ref($config));\n+        \n+        # Ensure config is a hash reference\n+        unless (ref($config) eq 'HASH') {\n+            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+                \"Config for $db_key is not a hash reference: \" . ref($config));\n+            next;\n+        }\n         \n         # Test connection to determine availability\n         my $connection_test = $self->test_database_connection($c, $db_key, $config);",
                    "refToolCallId": "toolu_01BeX9RcwFFo493P4HFRAsxq"
                },
                {
                    "type": "text",
                    "text": "**CHANGES APPLIED SUCCESSFULLY!** \n\nHere's the line-by-line diff of what was changed:\n\n```diff\n    # Process each database configuration\n+   # Debug: Check what we got from get_all_database_configs\n+   $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, ref($database_configs) . \", content: \" . (ref($database_configs) eq 'HASH' ? scalar(keys %$database_configs) . \" keys\" : \"not a hash\"));\n+   \n+   # Ensure we have a hash reference\n+   unless (ref($database_configs) eq 'HASH') {\n+       $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+           \"Expected hash reference but got: \" . ref($database_configs));\n+       $c->stash(\n+           template => 'admin/schema_compare.tt',\n+           error => \"Failed to load database configurations: Invalid data format\"\n+       );\n+       return;\n+   }\n+   \n+   # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n+       # Debug: Check individual config\n+       $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n+           \"Processing config for $db_key, type: \" . ref($config));\n+       \n+       # Ensure config is a hash reference\n+       unless (ref($config) eq 'HASH') {\n+           $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+               \"Config for $db_key is not a hash reference: \" . ref($config));\n+           next;\n+       }\n+       \n        # Test connection to determine availability\n        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n```\n\nThe debugging code has been added successfully. Now when you run the schema comparison, it will:\n\n1. **Log the type and content** of what `get_all_database_configs` returns\n2. **Check if it's a hash reference** before trying to process it\n3. **Log each individual config** as it processes them\n4. **Skip invalid configs** instead of crashing\n5. **Return early with an error** if the main data structure is invalid\n\nThis should help us identify exactly where the \"Can't use string as HASH ref\" error is coming from. Try running the schema comparison now and check the logs to see what the debugging output shows us."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                            "patch": "@@ -66086,150 +66086,1431 @@\n   # \n-Process each database configuration%0A    foreach my $db_key (sort keys %25$database_configs) %7B%0A        my $config = $database_configs-%3E%7B$db_key%7D;\n+Debug: Check what we got from get_all_database_configs%0A    $self-%3Elogging-%3Elog_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',%0A        %22Database configs type: %22 . ref($database_configs) . %22, content: %22 . (ref($database_configs) eq 'HASH' ? scalar(keys %25$database_configs) . %22 keys%22 : %22not a hash%22));%0A    %0A    # Ensure we have a hash reference%0A    unless (ref($database_configs) eq 'HASH') %7B%0A        $self-%3Elogging-%3Elog_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',%0A            %22Expected hash reference but got: %22 . ref($database_configs));%0A        $c-%3Estash(%0A            template =%3E 'admin/schema_compare.tt',%0A            error =%3E %22Failed to load database configurations: Invalid data format%22%0A        );%0A        return;%0A    %7D%0A    %0A    # Process each database configuration%0A    foreach my $db_key (sort keys %25$database_configs) %7B%0A        my $config = $database_configs-%3E%7B$db_key%7D;%0A        %0A        # Debug: Check individual config%0A        $self-%3Elogging-%3Elog_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',%0A            %22Processing config for $db_key, type: %22 . ref($config));%0A        %0A        # Ensure config is a hash reference%0A        unless (ref($config) eq 'HASH') %7B%0A            $self-%3Elogging-%3Elog_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',%0A                %22Config for $db_key is not a hash reference: %22 . ref($config));%0A            next;%0A        %7D\n %0A   \n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "34852e79-c4ad-493b-ac77-0e216b115608"
            },
            "createdAt": 1753560219791,
            "isInternal": false
        },
        {
            "id": "c1f7fef6-294b-4a79-bca0-b17aea575ea4",
            "role": "user",
            "content": [
                {
                    "type": "codeSnippet",
                    "text": "Caught exception in Comserv::Controller::Admin->schema_compare \"Can't use string (\"{\"success\":1,\"message\":\"Successf\"...) as a HASH ref while \"strict refs\" in use at /home/shanta/PycharmProjects/comserv2/Comserv/script/../lib/Comserv/Controller/Admin.pm line 1830.\"\nPlease catch the erros grasfully "
                }
            ],
            "context": {
                "currentFile": {
                    "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                    "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "\npackage Comserv::Controller::Admin;\n\n\nuse Moose;\nuse namespace::autoclean;\nuse Comserv::Util::Logging;\nuse Data::Dumper;\nuse JSON qw(decode_json);\nuse Try::Tiny;\nuse DBI;\nuse MIME::Base64;\nuse File::Slurp qw(read_file write_file);\nuse File::Basename qw(dirname);\nuse File::Path qw(make_path);\nuse File::Copy;\nuse File::Spec;\nuse Digest::SHA qw(sha256_hex);\nuse File::Find;\nuse Module::Load;\nuse Cwd;\n\nBEGIN { extends 'Catalyst::Controller'; }\n\n# Returns an instance of the logging utility\nsub logging {\n    my ($self) = @_;\n    return Comserv::Util::Logging->instance();\n}\n\n# Begin method to check if the user has admin role\nsub begin : Private {\n    my ($self, $c) = @_;\n\n     $c->stash->{is_admin} = 1;\n    # Add detailed logging\n    my $username = ($c->user_exists && $c->user) ? $c->user->username : ($c->session->{username} || 'Guest');\n    $username = 'Shanta';\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'begin',\n        \"Admin controller begin method called by user: $username\");\n    \n    # Initialize debug_msg array if it doesn't exist and debug mode is enabled\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        \n        # Add the debug message to the array\n        push @{$c->stash->{debug_msg}}, \"Admin controller loaded successfully\";\n    }\n    \n    return 1; # Allow the request to proceed\n}\n\n# Base method for chained actions\nsub base :Chained('/') :PathPart('admin') :CaptureArgs(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Starting Admin base action\");\n    \n    # Common setup for all admin pages\n    $c->stash(section => 'admin');\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access granted to user Shanta (bypass role check)\");\n        return 1;\n    }\n    \n    # Check if the user has admin role\n    my $has_admin_role = 1;\n    \n    # First check if user exists\n    if ($c->user_exists) {\n        # Get roles from session\n        my $roles = $c->session->{roles};\n\n        # Log the roles for debugging\n        my $roles_debug = 'none';\n        if (defined $roles) {\n            if (ref($roles) eq 'ARRAY') {\n                $roles_debug = join(', ', @$roles);\n                \n                # Check if 'admin' is in the roles array\n                foreach my $role (@$roles) {\n                    if (lc($role) eq 'admin') {\n                        $has_admin_role = 1;\n                        last;\n                    }\n                }\n            } elsif (!ref($roles)) {\n                $roles_debug = $roles;\n                # Check if roles string contains 'admin'\n                if ($roles =~ /\\badmin\\b/i) {\n                    $has_admin_role = 1;\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access check - User: \" . $c->session->{username} . \", Roles: $roles_debug, Has admin: \" . ($has_admin_role ? 'Yes' : 'No'));\n    }\n    $has_admin_role = 1;\n    unless ($has_admin_role) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'base', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return 0;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Completed Admin base action\");\n     $has_admin_role = 1;\n\n    return 1;\n}\n\n# Admin dashboard\nsub index :Path :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Starting Admin index action\");\n    \n    # Debug session information\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Session debug - Username: \" . ($c->session->{username} || 'none') . \n        \", User ID: \" . ($c->session->{user_id} || 'none') . \n        \", Roles: \" . (ref($c->session->{roles}) eq 'ARRAY' ? join(',', @{$c->session->{roles}}) : ($c->session->{roles} || 'none')));\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"user_exists: \" . ($c->user_exists ? 'true' : 'false') . \n        \", check_user_roles('admin'): \" . ($c->check_user_roles('admin') ? 'true' : 'false'));\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'index', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system stats\n    my $stats = $self->get_system_stats($c);\n    \n    # Get recent user activity\n    my $recent_activity = $self->get_recent_activity($c);\n    \n    # Get system notifications\n    my $notifications = $self->get_system_notifications($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller index view - Template: admin/index.tt\";\n    }\n    \n    # Check if user has CSC backup access\n    my $has_csc_access = $self->check_csc_access($c);\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/index.tt',\n        stats => $stats,\n        recent_activity => $recent_activity,\n        notifications => $notifications,\n        is_admin => 1,  # User has already passed admin check to get here\n        has_csc_access => $has_csc_access\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Completed Admin index action\");\n}\n\n# Get system statistics for the admin dashboard\nsub get_system_stats {\n    my ($self, $c) = @_;\n    \n    my $stats = {\n        user_count => 0,\n        content_count => 0,\n        comment_count => 0,\n        disk_usage => '0 MB',\n        db_size => '0 MB',\n        uptime => '0 days',\n    };\n    \n    # Try to get user count\n    eval {\n        $stats->{user_count} = $c->model('DBEncy::User')->count();\n    };\n    \n    # Try to get content count (pages, posts, etc.)\n    eval {\n        $stats->{content_count} = $c->model('DBEncy::Content')->count();\n    };\n    \n    # Try to get comment count\n    eval {\n        $stats->{comment_count} = $c->model('DBEncy::Comment')->count();\n    };\n    \n    # Get disk usage (this is a simplified example)\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/) {\n            $stats->{disk_usage} = \"$1%\";\n        }\n    };\n    \n    # Get database size (this would need to be customized for your DB)\n    eval {\n        # This is just a placeholder - you'd need to implement actual DB size checking\n        $stats->{db_size} = \"Unknown\";\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        if ($uptime_output =~ /up\\s+(.*?),\\s+\\d+\\s+users/) {\n            $stats->{uptime} = $1;\n        }\n    };\n    \n    return $stats;\n}\n\n# Get recent user activity for the admin dashboard\nsub get_recent_activity {\n    my ($self, $c) = @_;\n    \n    my @activity = ();\n    \n    # Try to get recent logins\n    eval {\n        my @logins = $c->model('DBEncy::UserLogin')->search(\n            {},\n            {\n                order_by => { -desc => 'login_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $login (@logins) {\n            push @activity, {\n                type => 'login',\n                user => $login->user->username,\n                time => $login->login_time,\n                details => $login->ip_address\n            };\n        }\n    };\n    \n    # Try to get recent content changes\n    eval {\n        my @changes = $c->model('DBEncy::ContentHistory')->search(\n            {},\n            {\n                order_by => { -desc => 'change_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $change (@changes) {\n            push @activity, {\n                type => 'content',\n                user => $change->user->username,\n                time => $change->change_time,\n                details => \"Updated \" . $change->content->title\n            };\n        }\n    };\n    \n    # Sort all activity by time (most recent first)\n    @activity = sort { $b->{time} cmp $a->{time} } @activity;\n    \n    # Limit to 10 items\n    if (scalar(@activity) > 10) {\n        @activity = @activity[0..9];\n    }\n    \n    return \\@activity;\n}\n\n# Get system notifications for the admin dashboard\nsub get_system_notifications {\n    my ($self, $c) = @_;\n    \n    my @notifications = ();\n    \n    # Check for pending user registrations\n    eval {\n        my $pending_count = $c->model('DBEncy::User')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'warning',\n                message => \"$pending_count pending user registration(s) require approval\",\n                link => $c->uri_for('/admin/users', { filter => 'pending' })\n            };\n        }\n    };\n    \n    # Check for low disk space\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/ && $1 > 90) {\n            push @notifications, {\n                type => 'danger',\n                message => \"Disk space is critically low ($1% used)\",\n                link => undef\n            };\n        }\n        elsif ($df_output =~ /(\\d+)%/ && $1 > 80) {\n            push @notifications, {\n                type => 'warning',\n                message => \"Disk space is running low ($1% used)\",\n                link => undef\n            };\n        }\n    };\n    \n    # Check for pending comments\n    eval {\n        my $pending_count = $c->model('DBEncy::Comment')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'info',\n                message => \"$pending_count pending comment(s) require moderation\",\n                link => $c->uri_for('/admin/comments', { filter => 'pending' })\n            };\n        }\n    };\n    \n    return \\@notifications;\n}\n\n# Admin users management\nsub users :Path('/admin/users') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Starting users action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'users', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $users_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'active') {\n        $search_conditions->{status} = 'active';\n    }\n    elsif ($filter eq 'pending') {\n        $search_conditions->{status} = 'pending';\n    }\n    elsif ($filter eq 'disabled') {\n        $search_conditions->{status} = 'disabled';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { username => { 'like', \"%$search%\" } },\n            { email => { 'like', \"%$search%\" } },\n            { first_name => { 'like', \"%$search%\" } },\n            { last_name => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get users from database\n    my $users_rs = $c->model('DBEncy::User')->search(\n        $search_conditions,\n        {\n            order_by => { -asc => 'username' },\n            page => $page,\n            rows => $users_per_page\n        }\n    );\n    \n    # Get user roles\n    my %user_roles = ();\n    eval {\n        my @user_role_records = $c->model('DBEncy::UserRole')->search({});\n        foreach my $record (@user_role_records) {\n            push @{$user_roles{$record->user_id}}, $record->role->role;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller users view - Template: admin/users.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"User count: \" . $users_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/users.tt',\n        users => [ $users_rs->all ],\n        user_roles => \\%user_roles,\n        filter => $filter,\n        search => $search,\n        pager => $users_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Completed users action\");\n}\n\n# Admin content management\nsub content :Path('/admin/content') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Starting content action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'content', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $items_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'published') {\n        $search_conditions->{status} = 'published';\n    }\n    elsif ($filter eq 'draft') {\n        $search_conditions->{status} = 'draft';\n    }\n    elsif ($filter eq 'archived') {\n        $search_conditions->{status} = 'archived';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { title => { 'like', \"%$search%\" } },\n            { content => { 'like', \"%$search%\" } },\n            { 'author.username' => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get content from database\n    my $content_rs = $c->model('DBEncy::Content')->search(\n        $search_conditions,\n        {\n            join => 'author',\n            order_by => { -desc => 'created_at' },\n            page => $page,\n            rows => $items_per_page\n        }\n    );\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller content view - Template: admin/content.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"Content count: \" . $content_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/content.tt',\n        content_items => [ $content_rs->all ],\n        filter => $filter,\n        search => $search,\n        pager => $content_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Completed content action\");\n}\n\n# Admin settings\nsub settings :Path('/admin/settings') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Starting settings action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Handle form submission\n    if ($c->req->method eq 'POST') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n            \"Processing settings form submission\");\n        \n        # Get form parameters\n        my $site_name = $c->req->param('site_name');\n        my $site_description = $c->req->param('site_description');\n        my $admin_email = $c->req->param('admin_email');\n        my $items_per_page = $c->req->param('items_per_page');\n        my $allow_comments = $c->req->param('allow_comments') ? 1 : 0;\n        my $moderate_comments = $c->req->param('moderate_comments') ? 1 : 0;\n        my $theme = $c->req->param('theme');\n        \n        # Validate inputs\n        my $errors = {};\n        \n        unless ($site_name) {\n            $errors->{site_name} = \"Site name is required\";\n        }\n        \n        unless ($admin_email && $admin_email =~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) {\n            $errors->{admin_email} = \"Valid admin email is required\";\n        }\n        \n        unless ($items_per_page && $items_per_page =~ /^\\d+$/ && $items_per_page > 0) {\n            $errors->{items_per_page} = \"Items per page must be a positive number\";\n        }\n        \n        # If there are validation errors, re-display the form\n        if (%$errors) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n                \"Validation errors in settings form\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                errors => $errors,\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n        \n        # Save settings to database\n        eval {\n            # Update site_name setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_name',\n                    value => $site_name\n                }\n            );\n            \n            # Update site_description setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_description',\n                    value => $site_description\n                }\n            );\n            \n            # Update admin_email setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'admin_email',\n                    value => $admin_email\n                }\n            );\n            \n            # Update items_per_page setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'items_per_page',\n                    value => $items_per_page\n                }\n            );\n            \n            # Update allow_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'allow_comments',\n                    value => $allow_comments\n                }\n            );\n            \n            # Update moderate_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'moderate_comments',\n                    value => $moderate_comments\n                }\n            );\n            \n            # Update theme setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'theme',\n                    value => $theme\n                }\n            );\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n                \"Settings updated successfully\");\n            \n            # Set success message and redirect\n            $c->flash->{success_msg} = \"Settings updated successfully\";\n            $c->response->redirect($c->uri_for('/admin/settings'));\n            return;\n        };\n        \n        # Handle database errors\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'settings', \n                \"Error updating settings: $@\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                error_msg => \"Error updating settings: $@\",\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n    }\n    \n    # Get current settings from database\n    my %settings = ();\n    eval {\n        my @setting_records = $c->model('DBEncy::Setting')->search({});\n        foreach my $record (@setting_records) {\n            $settings{$record->name} = $record->value;\n        }\n    };\n    \n    # Get available themes\n    my @themes = ('default', 'dark', 'light', 'custom');\n    eval {\n        my $themes_dir = $c->path_to('root', 'static', 'themes');\n        if (-d $themes_dir) {\n            opendir(my $dh, $themes_dir) or die \"Cannot open themes directory: $!\";\n            @themes = grep { -d \"$themes_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller settings view - Template: admin/settings.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available themes: \" . join(', ', @themes);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/settings.tt',\n        settings => \\%settings,\n        themes => \\@themes\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Completed settings action\");\n}\n\n# Admin system information\nsub system_info :Path('/admin/system_info') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Starting system_info action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'system_info', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system information\n    my $system_info = $self->get_detailed_system_info($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller system_info view - Template: admin/system_info.tt\";\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/system_info.tt',\n        system_info => $system_info\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Completed system_info action\");\n}\n\n# Get detailed system information\nsub get_detailed_system_info {\n    my ($self, $c) = @_;\n    \n    my $info = {\n        perl_version => $],\n        catalyst_version => $Catalyst::VERSION,\n        server_software => $ENV{SERVER_SOFTWARE} || 'Unknown',\n        server_name => $ENV{SERVER_NAME} || 'Unknown',\n        server_protocol => $ENV{SERVER_PROTOCOL} || 'Unknown',\n        server_admin => $ENV{SERVER_ADMIN} || 'Unknown',\n        server_port => $ENV{SERVER_PORT} || 'Unknown',\n        document_root => $ENV{DOCUMENT_ROOT} || 'Unknown',\n        script_name => $ENV{SCRIPT_NAME} || 'Unknown',\n        request_uri => $ENV{REQUEST_URI} || 'Unknown',\n        request_method => $ENV{REQUEST_METHOD} || 'Unknown',\n        query_string => $ENV{QUERY_STRING} || 'Unknown',\n        remote_addr => $ENV{REMOTE_ADDR} || 'Unknown',\n        remote_port => $ENV{REMOTE_PORT} || 'Unknown',\n        remote_user => $ENV{REMOTE_USER} || 'Unknown',\n        http_user_agent => $ENV{HTTP_USER_AGENT} || 'Unknown',\n        http_referer => $ENV{HTTP_REFERER} || 'Unknown',\n        http_accept => $ENV{HTTP_ACCEPT} || 'Unknown',\n        http_accept_language => $ENV{HTTP_ACCEPT_LANGUAGE} || 'Unknown',\n        http_accept_encoding => $ENV{HTTP_ACCEPT_ENCODING} || 'Unknown',\n        http_connection => $ENV{HTTP_CONNECTION} || 'Unknown',\n        http_host => $ENV{HTTP_HOST} || 'Unknown',\n        https => $ENV{HTTPS} || 'Off',\n        gateway_interface => $ENV{GATEWAY_INTERFACE} || 'Unknown',\n        server_signature => $ENV{SERVER_SIGNATURE} || 'Unknown',\n        server_addr => $ENV{SERVER_ADDR} || 'Unknown',\n        path => $ENV{PATH} || 'Unknown',\n        system_uptime => 'Unknown',\n        system_load => 'Unknown',\n        memory_usage => 'Unknown',\n        disk_usage => 'Unknown',\n        database_info => 'Unknown',\n        installed_modules => []\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        chomp($uptime_output);\n        $info->{system_uptime} = $uptime_output;\n        \n        if ($uptime_output =~ /load average: ([\\d.]+), ([\\d.]+), ([\\d.]+)/) {\n            $info->{system_load} = \"$1 (1 min), $2 (5 min), $3 (15 min)\";\n        }\n    };\n    \n    # Get memory usage\n    eval {\n        my $free_output = `free -h`;\n        my @lines = split(/\\n/, $free_output);\n        if ($lines[1] =~ /Mem:\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{memory_usage} = \"Total: $1, Used: $2, Free: $3\";\n        }\n    };\n    \n    # Get disk usage\n    eval {\n        my $df_output = `df -h .`;\n        my @lines = split(/\\n/, $df_output);\n        if ($lines[1] =~ /(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{disk_usage} = \"Filesystem: $1, Size: $2, Used: $3, Avail: $4, Use%: $5, Mounted on: $6\";\n        }\n    };\n    \n    # Get database information\n    eval {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $db_info = $dbh->get_info(17); # SQL_DBMS_NAME\n        my $db_version = $dbh->get_info(18); # SQL_DBMS_VER\n        $info->{database_info} = \"$db_info version $db_version\";\n    };\n    \n    # Get installed Perl modules\n    eval {\n        my @modules = ();\n        foreach my $module (sort keys %INC) {\n            next unless $module =~ /\\.pm$/;\n            $module =~ s/\\//::/g;\n            $module =~ s/\\.pm$//;\n            \n            my $version = eval \"\\$${module}::VERSION\" || 'Unknown';\n            push @modules, { name => $module, version => $version };\n        }\n        $info->{installed_modules} = \\@modules;\n    };\n    \n    return $info;\n}\n\n# Admin logs viewer\nsub logs :Path('/admin/logs') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs', \n        \"Starting logs action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'logs', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get log file parameter\n    my $log_file = $c->req->param('file') || 'catalyst.log';\n    \n    # Get available log files\n    my @log_files = ();\n    eval {\n        my $logs_dir = $c->path_to('logs');\n        if (-d $logs_dir) {\n            opendir(my $dh, $logs_dir) or die \"Cannot open logs directory: $!\";\n            @log_files = grep { -f \"$logs_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Get log content\n    my $log_content = '';\n    eval {\n        my $log_path = $c->path_to('logs', $log_file);\n        if (-f $log_path) {\n            # Get the last 1000 lines of the log file\n            my $tail_output = `tail -n 1000 $log_path`;\n            $log_content = $tail_output;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller logs view - Template: admin/logs.tt\";\n        push @{$c->stash->{debug_msg}}, \"Log file: $log_file\";\n        push @{$c->stash->{debug_msg}}, \"Available log files: \" . join(', ', @log_files);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/logs.tt',\n        log_file => $log_file,\n        log_files => \\@log_files,\n        log_content => $log_content\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs',\n        \"Completed logs action\");\n}\n\n# Add missing field from table to result file\nsub add_field_to_result :Path('/admin/add_field_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_result', \n        \"Starting add_field_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the table\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{table}) {\n            die \"Field '$field_name' not found in table '$table_name'\";\n        }\n        \n        my $field_def = $field_data->{table};\n        \n        # Add field to result file\n        my $success = $self->add_field_to_result_file($c, $comparison->{result_file_path}, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to result file successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to result file\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Add missing field from result file to table\nsub add_field_to_table :Path('/admin/add_field_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table', \n        \"Starting add_field_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        # Debug: Check if our specific table is in the mapping\n        my $table_key = lc($table_name);\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Looking for table '$table_key' in mapping with \" . scalar(keys %$result_table_mapping) . \" entries\");\n        \n        if (exists $result_table_mapping->{$table_key}) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n                \"Found mapping for '$table_key': \" . $result_table_mapping->{$table_key}->{result_name});\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table',\n                \"No mapping found for '$table_key'. Available keys: \" . join(', ', sort keys %$result_table_mapping));\n        }\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Debug: Log the comparison result\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Comparison result: has_result_file=\" . ($comparison->{has_result_file} ? 'YES' : 'NO') . \n            \", result_file_path=\" . ($comparison->{result_file_path} || 'NONE'));\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the result file\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{result}) {\n            die \"Field '$field_name' not found in result file\";\n        }\n        \n        my $field_def = $field_data->{result};\n        \n        # Validate field definition has required attributes\n        my $validation_errors = $self->validate_field_definition($field_def, $field_name);\n        if (@$validation_errors) {\n            die \"Field validation errors: \" . join(', ', @$validation_errors);\n        }\n        \n        # Add field to database table\n        my $success = $self->add_field_to_database_table($c, $table_name, $database, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to table '$table_name' successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to database table\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Admin backup and restore\nsub backup :Path('/admin/backup') :Args(0) {\n    my ($self, $c) = @_;\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Starting backup action\");\n\n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n            \"Access denied: User does not have CSC backup access\");\n\n        $c->flash->{error_msg} = \"You need CSC administrator privileges to access backup functionality.\";\n        $c->response->redirect($c->uri_for('/admin'));\n        return;\n    }\n\n    # Backup creation is now handled by the separate 'create' action method\n\n    # Handle backup restoration\n    if ($c->req->method eq 'POST' && $c->req->param('action') eq 'restore_backup') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Restoring backup\");\n\n        my $backup_file = $c->req->param('backup_file');\n\n        unless ($backup_file) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"No backup file selected for restoration\");\n\n            $c->flash->{error_msg} = \"No backup file selected for restoration\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Validate backup file\n        my $backup_path = $c->path_to('backups', $backup_file);\n        unless (-f $backup_path) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"Backup file not found: $backup_file\");\n\n            $c->flash->{error_msg} = \"Backup file not found: $backup_file\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Create temporary directory for restoration\n        my $temp_dir = $c->path_to('tmp', 'restore_' . time());\n        eval { make_path($temp_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error creating temporary directory: $@\");\n\n            $c->flash->{error_msg} = \"Error creating temporary directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Extract backup to temporary directory\n        my $extract_command = \"tar -xzf $backup_path -C $temp_dir\";\n        my $extract_result = system($extract_command);\n\n        if ($extract_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error extracting backup: $!\");\n\n            $c->flash->{error_msg} = \"Error extracting backup: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Restore database if database dump exists\n        if (-f \"$temp_dir/db_dump.sql\") {\n            # This is a simplified example - you'd need to customize for your database\n            my $db_restore_command = \"mysql -u username -p'password' database_name < $temp_dir/db_dump.sql\";\n            my $db_restore_result = system($db_restore_command);\n\n            if ($db_restore_result != 0) {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                    \"Error restoring database: $!\");\n\n                $c->flash->{error_msg} = \"Error restoring database: $!\";\n                $c->response->redirect($c->uri_for('/admin/backup'));\n                return;\n            }\n        }\n\n        # Restore files\n        # This is a simplified example - you'd need to customize for your application\n        my $files_restore_command = \"cp -R $temp_dir/* .\";\n        my $files_restore_result = system($files_restore_command);\n\n        if ($files_restore_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error restoring files: $!\");\n\n            $c->flash->{error_msg} = \"Error restoring files: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Clean up temporary directory\n        my $cleanup_command = \"rm -rf $temp_dir\";\n        system($cleanup_command);\n\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Backup restored successfully: $backup_file\");\n\n        $c->flash->{success_msg} = \"Backup restored successfully: $backup_file\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n\n    # Clean up any orphaned backup files first\n    $self->cleanup_orphaned_backups($c);\n    \n    # Get available backups with detailed information\n    my $backups = $self->get_backup_list($c);\n\n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller backup view - Template: admin/backup.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available backups: \" . scalar(@$backups);\n    }\n\n    # Pass data to the template\n    $c->stash(\n        template => 'admin/backup.tt',\n        backups => $backups\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Completed backup action\");\n}\n\n# Handle backup creation (separate action for cleaner URL handling)\nsub create :Path('/admin/backup/create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Starting backup creation\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'create',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to create backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Only handle POST requests\n    unless ($c->req->method eq 'POST') {\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    my $backup_type = $c->req->param('type') || 'full';\n    my $description = $c->req->param('description') || '';\n    \n    # Generate backup name with timestamp and type\n    my $timestamp = time();\n    my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n    my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n    my $backup_name = \"backup_${date_str}_${backup_type}\";\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Creating $backup_type backup: $backup_name\");\n    \n    # Create backup directory if it doesn't exist\n    my $backup_dir = $c->path_to('backups');\n    unless (-d $backup_dir) {\n        eval { make_path($backup_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup directory: $@\");\n            \n            $c->flash->{error_msg} = \"Error creating backup directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Create backup\n    my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n    my $backup_command = '';\n    my $backup_success = 0;\n    \n    if ($backup_type eq 'full') {\n        # Full backup (files + database)\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' --exclude='logs/*.log' .\";\n        \n    } elsif ($backup_type eq 'config') {\n        # Configuration files only\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' config/ lib/Comserv.pm *.conf *.yml *.yaml 2>/dev/null || true\";\n        \n    } elsif ($backup_type eq 'database') {\n        # Database only backup\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            # Get the application root directory for relative path calculation\n            my $app_root = $c->path_to('.');\n            # Use relative path from app root for tar command\n            my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n            $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n            \n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Database backup dump file: $db_backup_result->{dump_file}\");\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Relative dump file path: $relative_dump_file\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Failed to create database backup: \" . $db_backup_result->{error});\n            \n            $c->flash->{error_msg} = \"Failed to create database backup: \" . $db_backup_result->{error};\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Execute backup command\n    if ($backup_command) {\n        # Get the application root directory for proper tar execution\n        my $app_root = $c->path_to('.');\n        \n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Executing backup command from directory: $app_root\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Backup command: $backup_command\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Target backup file: $backup_file\");\n        \n        # Change to application root directory and execute command\n        my $original_dir = Cwd::getcwd();\n        chdir($app_root) or do {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Cannot change to application directory: $app_root - $!\");\n            $c->flash->{error_msg} = \"Cannot change to application directory: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        };\n        \n        my $result = system($backup_command);\n        \n        # Change back to original directory\n        chdir($original_dir);\n        \n        if ($result == 0) {\n            # Add a small delay to ensure file is fully written\n            sleep(1);\n            \n            # Verify backup file was created and has content\n            if (-f $backup_file && -s $backup_file) {\n                $backup_success = 1;\n                \n                my $file_size = -s $backup_file;\n                my $formatted_size = $self->format_file_size($file_size);\n                \n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n                    \"Backup created successfully: $backup_file ($formatted_size)\");\n                \n                # Force a debug message to appear in the UI\n                if ($c->session->{debug_mode}) {\n                    $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                    push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file created at: $backup_file (Size: $formatted_size)\";\n                }\n                \n                my $success_msg = \"Backup created successfully: $backup_name.tar.gz ($formatted_size)\";\n                $success_msg .= \" - $description\" if $description;\n                \n                $c->flash->{success_msg} = $success_msg;\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                    \"Backup file was not created or is empty: $backup_file\");\n                \n                # Additional debugging\n                if (-f $backup_file) {\n                    my $size = -s $backup_file;\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file exists but has size: $size bytes\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file exists but empty: $backup_file ($size bytes)\";\n                    }\n                } else {\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file does not exist at: $backup_file\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file does not exist: $backup_file\";\n                    }\n                }\n                \n                $c->flash->{error_msg} = \"Backup file was not created or is empty\";\n            }\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup (exit code: $result): $!\");\n            \n            # Force debug message to UI\n            if ($c->session->{debug_mode}) {\n                $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                push @{$c->stash->{debug_msg}}, \"DEBUG: Backup command failed with exit code: $result\";\n            }\n            \n            $c->flash->{error_msg} = \"Error creating backup (exit code: $result)\";\n        }\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Cleanup orphaned backup files (like .meta files without corresponding .tar.gz)\nsub cleanup_orphaned_backups {\n    my ($self, $c) = @_;\n    \n    my $backup_dir = $c->path_to('backups');\n    return unless -d $backup_dir;\n    \n    eval {\n        opendir(my $dh, $backup_dir) or die \"Cannot open backup directory: $!\";\n        my @all_files = readdir($dh);\n        closedir($dh);\n        \n        # Find .meta files\n        my @meta_files = grep { $_ =~ /\\.tar\\.gz\\.meta$/ } @all_files;\n        \n        foreach my $meta_file (@meta_files) {\n            my $backup_file = $meta_file;\n            $backup_file =~ s/\\.meta$//; # Remove .meta extension\n            \n            # If the corresponding .tar.gz file doesn't exist, remove the .meta file\n            unless (-f \"$backup_dir/$backup_file\") {\n                my $meta_path = \"$backup_dir/$meta_file\";\n                if (unlink($meta_path)) {\n                    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n                        \"Removed orphaned meta file: $meta_file\");\n                }\n            }\n        }\n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n            \"Error during cleanup: $@\");\n    }\n}\n\n# Debug endpoint to check backup directory contents\nsub debug_backups :Path('/admin/backup/debug') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $backup_dir = $c->path_to('backups');\n    my $debug_info = {\n        backup_dir => \"$backup_dir\",\n        dir_exists => (-d $backup_dir) ? 1 : 0,\n        files => [],\n        error => ''\n    };\n    \n    if (-d $backup_dir) {\n        eval {\n            opendir(my $dh, $backup_dir) or die \"Cannot open directory: $!\";\n            my @all_files = readdir($dh);\n            closedir($dh);\n            \n            foreach my $file (@all_files) {\n                next if $file eq '.' || $file eq '..';\n                my $filepath = \"$backup_dir/$file\";\n                my @stat = stat($filepath);\n                \n                push @{$debug_info->{files}}, {\n                    name => $file,\n                    is_file => (-f $filepath) ? 1 : 0,\n                    size => $stat[7] || 0,\n                    mtime => $stat[9] || 0,\n                    matches_pattern => ($file =~ /\\.tar\\.gz$/) ? 1 : 0\n                };\n            }\n        };\n        $debug_info->{error} = $@ if $@;\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($debug_info));\n}\n\n# Test backup creation manually\nsub test_create :Path('/admin/backup/test_create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $result = {\n        steps => [],\n        success => 0,\n        error => ''\n    };\n    \n    eval {\n        push @{$result->{steps}}, \"Starting manual backup test...\";\n        \n        my $backup_dir = $c->path_to('backups');\n        my $app_root = $c->path_to('.');\n        my $timestamp = time();\n        my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n        my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n        my $backup_name = \"test_backup_${date_str}_database\";\n        my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n        \n        push @{$result->{steps}}, \"Backup directory: $backup_dir\";\n        push @{$result->{steps}}, \"App root: $app_root\";\n        push @{$result->{steps}}, \"Backup name: $backup_name\";\n        push @{$result->{steps}}, \"Backup file: $backup_file\";\n        \n        # Test database backup creation\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            push @{$result->{steps}}, \"✅ Database dump created: \" . $db_backup_result->{dump_file};\n            \n            # Check if dump file exists\n            if (-f $db_backup_result->{dump_file}) {\n                my $dump_size = -s $db_backup_result->{dump_file};\n                push @{$result->{steps}}, \"✅ Dump file exists with size: $dump_size bytes\";\n                \n                # Create tar command\n                my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n                my $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n                \n                push @{$result->{steps}}, \"Relative dump file: $relative_dump_file\";\n                push @{$result->{steps}}, \"Backup command: $backup_command\";\n                \n                # Change to app root and execute\n                my $original_dir = Cwd::getcwd();\n                chdir($app_root);\n                push @{$result->{steps}}, \"Changed to directory: \" . Cwd::getcwd();\n                \n                my $cmd_result = system($backup_command);\n                chdir($original_dir);\n                \n                push @{$result->{steps}}, \"Command exit code: $cmd_result\";\n                \n                if ($cmd_result == 0) {\n                    if (-f $backup_file && -s $backup_file) {\n                        my $backup_size = -s $backup_file;\n                        push @{$result->{steps}}, \"✅ Backup created successfully: $backup_size bytes\";\n                        $result->{success} = 1;\n                        \n                        # Clean up test file\n                        unlink($backup_file);\n                        push @{$result->{steps}}, \"Test backup file cleaned up\";\n                    } else {\n                        push @{$result->{steps}}, \"❌ Backup file not created or empty\";\n                    }\n                } else {\n                    push @{$result->{steps}}, \"❌ Backup command failed\";\n                }\n            } else {\n                push @{$result->{steps}}, \"❌ Dump file does not exist\";\n            }\n        } else {\n            push @{$result->{steps}}, \"❌ Database backup failed: \" . $db_backup_result->{error};\n        }\n    };\n    \n    if ($@) {\n        $result->{error} = $@;\n        push @{$result->{steps}}, \"❌ Exception: $@\";\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($result));\n}\n\n# Handle backup download\nsub download :Path('/admin/backup/download') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Starting backup download: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to download backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Serve the file for download\n    $c->response->content_type('application/gzip');\n    $c->response->header('Content-Disposition' => \"attachment; filename=\\\"$filename\\\"\");\n    $c->response->header('Content-Length' => -s $backup_file);\n    \n    # Stream the file\n    $c->serve_static_file($backup_file);\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Backup download completed: $filename\");\n}\n\n# Handle backup deletion\nsub delete :Path('/admin/backup/delete') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n        \"Starting backup deletion: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to delete backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Delete the backup file\n    if (unlink($backup_file)) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n            \"Backup deleted successfully: $backup_file\");\n        \n        $c->flash->{success_msg} = \"Backup deleted successfully: $filename\";\n    } else {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'delete',\n            \"Error deleting backup: $!\");\n        \n        $c->flash->{error_msg} = \"Error deleting backup: $!\";\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Test database connection (AJAX endpoint)\nsub test_db :Path('/admin/backup/test_db') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        my $result = {\n            success => 0,\n            message => \"Access denied: CSC administrator privileges required\"\n        };\n        $c->response->content_type('application/json');\n        $c->response->body(JSON::encode_json($result));\n        return;\n    }\n    \n    # This method already exists further down in the file, so we'll just redirect to it\n    # or we can implement it here if needed\n    $self->test_database_connection($c);\n}\n\n# Keeping it here for backward compatibility\nsub network_devices_forward :Path('/admin/network_devices_old') :Args(0) {\n    my ($self, $c) = @_;\n\n    # Redirect to the new network devices page\n    $c->response->redirect($c->uri_for('/admin/network_devices'));\n}\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub network_devices :Path('/admin/network_devices') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub add_network_device :Path('/admin/add_network_device') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub edit_network_device :Path('/admin/edit_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub delete_network_device :Path('/admin/delete_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Database Schema Comparison functionality (with alias)\nsub compare_schema :Path('/admin/compare_schema') :Args(0) {\n    my ($self, $c) = @_;\n    # Redirect to the main schema_compare action\n    $c->response->redirect($c->uri_for('/admin/schema_compare'));\n    return;\n}\n\n# Database Schema Comparison functionality\nsub schema_compare :Path('/admin/schema_compare') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Starting schema_compare action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'schema_compare', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get all database configurations from JSON config\n    my $database_configs = $self->get_all_database_configs($c);\n    \n    # Get the currently active database backend\n    my $hybrid_db = $c->model('HybridDB');\n    my $status = $hybrid_db->get_status();\n    my $current_backend = $status->{current_backend};\n    \n    # Create database comparison structure with all databases as closed containers\n    my $database_comparison = {\n        current_backend => $current_backend,\n        databases => {},\n        summary => {\n            total_databases => scalar(keys %$database_configs),\n            connected_databases => 0,\n            total_backends => scalar(keys %$database_configs),\n            available_backends => 0,\n            total_tables => 0,\n            tables_with_results => 0\n        }\n    };\n    \n    # Debug: Check what we got from get_all_database_configs\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n        \"Database configs type: \" . ref($database_configs) . \", content: \" . (ref($database_configs) eq 'HASH' ? scalar(keys %$database_configs) . \" keys\" : \"not a hash\"));\n    \n    # Ensure we have a hash reference\n    unless (ref($database_configs) eq 'HASH') {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n            \"Expected hash reference but got: \" . ref($database_configs));\n        $c->stash(\n            template => 'admin/schema_compare.tt',\n            error => \"Failed to load database configurations: Invalid data format\"\n        );\n        return;\n    }\n    \n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Debug: Check individual config\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n            \"Processing config for $db_key, type: \" . ref($config));\n        \n        # Ensure config is a hash reference\n        unless (ref($config) eq 'HASH') {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n                \"Config for $db_key is not a hash reference: \" . ref($config));\n            next;\n        }\n        \n        # Test connection to determine availability\n        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n        \n        $database_comparison->{databases}->{$db_key} = {\n            name => $db_key,\n            display_name => $config->{description} || $db_key,\n            type => $config->{db_type} || 'unknown',\n            priority => $config->{priority} || 999,\n            available => $connection_test->{connected},\n            error => $connection_test->{error},\n            host => $config->{host} || 'localhost',\n            database => $config->{database} || '',\n            is_current => ($db_key eq $current_backend),\n            table_count => 0,\n            table_comparisons => [], # Will be loaded on demand via AJAX\n            loaded => 0 # Flag to indicate if comparison data has been loaded\n        };\n        \n        # Update summary counts\n        if ($connection_test->{connected}) {\n            $database_comparison->{summary}->{connected_databases}++;\n            $database_comparison->{summary}->{available_backends}++;\n        }\n    }\n    \n    # Add access control schema status\n    my $access_control_status = $self->check_access_control_schema($c);\n    \n    # Debug: Log the structure of database_comparison\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Database comparison structure: \" . Data::Dumper::Dumper($database_comparison));\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller schema_compare view - Template: admin/schema_compare.tt\";\n        push @{$c->stash->{debug_msg}}, \"Total databases: \" . $database_comparison->{summary}->{total_databases};\n        push @{$c->stash->{debug_msg}}, \"Connected databases: \" . $database_comparison->{summary}->{connected_databases};\n        push @{$c->stash->{debug_msg}}, \"Current backend: \" . ($current_backend || 'none');\n    }\n    \n    # Set the template and data\n    $c->stash(\n        template => 'admin/schema_compare.tt',\n        database_comparison => $database_comparison,\n        access_control_status => $access_control_status\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Completed schema_compare action\");\n}\n\n# Get all database configurations from db_config.json\nsub get_all_database_configs {\n    my ($self, $c) = @_;\n    \n    my $config_file = '/home/shanta/PycharmProjects/comserv2/Comserv/db_config.json';\n    \n    unless (-f $config_file) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Database config file not found: $config_file\");\n        return {};\n    }\n    \n    my $json_content;\n    eval {\n        $json_content = read_file($config_file);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to read config file: $@\");\n        return {};\n    }\n    \n    my $configs;\n    eval {\n        $configs = decode_json($json_content);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to parse JSON config: $@\");\n        return {};\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_all_database_configs',\n        \"Loaded \" . scalar(keys %$configs) . \" database configurations\");\n    \n    return $configs;\n}\n\n# Test database connection for a specific configuration\nsub test_database_connection {\n    my ($self, $c, $db_key, $config) = @_;\n    \n    my $result = {\n        connected => 0,\n        error => '',\n        db_key => $db_key\n    };\n    \n    # Skip SQLite connections for now (they don't need network testing)\n    if ($config->{db_type} && $config->{db_type} eq 'sqlite') {\n        if ($config->{database_path} && -f $config->{database_path}) {\n            $result->{connected} = 1;\n        } else {\n            $result->{error} = \"SQLite database file not found: \" . ($config->{database_path} || 'not specified');\n        }\n        return $result;\n    }\n    \n    # For MySQL connections, test the connection\n    if ($config->{db_type} && $config->{db_type} eq 'mysql') {\n        eval {\n            my $dsn = sprintf(\"DBI:mysql:database=%s;host=%s;port=%s\",\n                $config->{database} || '',\n                $config->{host} || 'localhost',\n                $config->{port} || 3306\n            );\n            \n            my $dbh = DBI->connect(\n                $dsn,\n                $config->{username} || '',\n                $config->{password} || '',\n                {\n                    RaiseError => 1,\n                    PrintError => 0,\n                    mysql_connect_timeout => 5,\n                    mysql_read_timeout => 5,\n                    mysql_write_timeout => 5\n                }\n            );\n            \n            if ($dbh) {\n                # Test with a simple query\n                my $sth = $dbh->prepare(\"SELECT 1\");\n                $sth->execute();\n                $sth->finish();\n                $dbh->disconnect();\n                \n                $result->{connected} = 1;\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'test_database_connection',\n                    \"Successfully connected to database: $db_key\");\n            }\n        };\n        if ($@) {\n            $result->{error} = \"Connection failed: $@\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'test_database_connection',\n                \"Failed to connect to database $db_key: $@\");\n        }\n    } else {\n        $result->{error} = \"Unsupported database type: \" . ($config->{db_type} || 'unknown');\n    }\n    \n    return $result;\n}\n\n# Check access control schema status\nsub check_access_control_schema {\n    my ($self, $c) = @_;\n    \n    my $status = {\n        overall_status => 'unknown',\n        users_table => {},\n        user_site_roles_table => {},\n        migration_needed => 0,\n        errors => [],\n        recommendations => []\n    };\n    \n    # Check User table columns\n    $status->{users_table} = $self->check_users_table_schema($c);\n    \n    # Check UserSiteRole table\n    $status->{user_site_roles_table} = $self->check_user_site_roles_table_schema($c);\n    \n    # Determine overall status\n    my $has_errors = 0;\n    my $needs_migration = 0;\n    \n    if ($status->{users_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{users_table}->{errors}};\n    }\n    \n    if ($status->{user_site_roles_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{user_site_roles_table}->{errors}};\n    }\n    \n    if ($status->{users_table}->{needs_migration} || $status->{user_site_roles_table}->{needs_migration}) {\n        $needs_migration = 1;\n    }\n    \n    # Set overall status\n    if ($has_errors) {\n        $status->{overall_status} = 'error';\n        push @{$status->{recommendations}}, 'Database schema errors detected. System is using fallback compatibility mode.';\n    } elsif ($needs_migration) {\n        $status->{overall_status} = 'migration_available';\n        $status->{migration_needed} = 1;\n        push @{$status->{recommendations}}, 'Enhanced access control features are available. Migration is optional.';\n    } else {\n        $status->{overall_status} = 'ok';\n        push @{$status->{recommendations}}, 'Access control schema is up to date.';\n    }\n    \n    return $status;\n}\n\n# Check users table schema for access control enhancements\nsub check_users_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the users table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE users\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n        # Check for required columns\n        my @required_columns = qw(id username password email roles);\n        foreach my $col (@required_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{errors}}, \"Missing required column: $col\";\n                $table_status->{has_errors} = 1;\n            }\n        }\n        \n        # Check for optional enhancement columns\n        my @optional_columns = qw(status created_at last_login);\n        foreach my $col (@optional_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{missing_columns}}, $col;\n                $table_status->{needs_migration} = 1;\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        push @{$table_status->{errors}}, \"Error checking users table: $error\";\n        $table_status->{has_errors} = 1;\n        \n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'check_users_table_schema',\n            \"Error checking users table schema: $error\");\n    };\n    \n    return $table_status;\n}\n\n# Check user_site_roles table schema\nsub check_user_site_roles_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the user_site_roles table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE user_site_roles\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n    } catch {\n        my $error = $_;\n        if ($error =~ /doesn't exist/i) {\n            # Table doesn't exist - this is expected for basic installations\n            $table_status->{needs_migration} = 1;\n            push @{$table_status->{missing_columns}}, 'entire_table';\n        } else {\n            push @{$table_status->{errors}}, \"Error checking user_site_roles table: $error\";\n            $table_status->{has_errors} = 1;\n        }\n    };\n    \n    return $table_status;\n}\n\n# Access control help page\nsub access_control_help :Path('/admin/access_control_help') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'access_control_help',\n        \"Displaying access control help page\");\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller access_control_help view - Template: admin/access_control_help.tt\";\n    }\n    \n    $c->stash(\n        template => 'admin/access_control_help.tt',\n        title => 'Multi-Site Access Control Help'\n    );\n}\n\n# AJAX endpoint to get table schema details\nsub get_table_schema :Path('/admin/get_table_schema') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_table_schema', \n        \"Starting get_table_schema action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        my $schema_info;\n        \n        if ($database eq 'ency') {\n            $schema_info = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $schema_info = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        $c->stash(json => { \n            success => 1, \n            schema => $schema_info,\n            table_name => $table_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting table schema: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_table_schema', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field comparison between table and Result file\nsub get_field_comparison :Path('/admin/get_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n        \"Starting get_field_comparison action\");\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison', \n            \"Admin access granted to user Shanta (bypass role check)\");\n    }\n    else {\n        # Check if the user has admin role\n        unless ($c->user_exists && $c->check_user_roles('admin')) {\n            $c->response->status(403);\n            $c->stash(json => {\n                success => 0,\n                error => \"Access denied: Admin role required\"\n            });\n            $c->forward('View::JSON');\n            return;\n        }\n    }\n    \n    my $table_name = $c->request->param('table_name');\n    my $database = $c->request->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => 'Missing table_name or database parameter'\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Add debugging information\n        my $table_key = lc($table_name);\n        my $result_info = $result_table_mapping->{$table_key};\n        my $result_file_path = $result_info ? $result_info->{result_path} : undef;\n        my $result_name = $result_info ? $result_info->{result_name} : 'NOT FOUND';\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Table: $table_name, Database: $database, Result name: $result_name, Result file: \" . ($result_file_path || 'NOT FOUND'));\n        \n        # Add detailed debugging\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Comparison has_result_file: \" . ($comparison->{has_result_file} ? 'YES' : 'NO'));\n        \n        if ($comparison->{fields}) {\n            my $field_count = scalar(keys %{$comparison->{fields}});\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                \"Fields found: $field_count\");\n            \n            # Log first few fields for debugging\n            my $count = 0;\n            foreach my $field_name (keys %{$comparison->{fields}}) {\n                last if $count >= 3;\n                my $field_data = $comparison->{fields}->{$field_name};\n                my $has_table = $field_data->{table} ? 'YES' : 'NO';\n                my $has_result = $field_data->{result} ? 'YES' : 'NO';\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                    \"Field '$field_name': Table=$has_table, Result=$has_result\");\n                $count++;\n            }\n        }\n        \n        $c->stash(json => {\n            success => 1,\n            comparison => $comparison,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0,\n            debug => {\n                table_name => $table_name,\n                database => $database,\n                result_name => $result_name,\n                result_file_path => $result_file_path,\n                has_result_file => $comparison->{has_result_file},\n                total_result_files => scalar(keys %$result_table_mapping)\n            }\n        });\n        \n    } catch {\n        my $error = \"Error getting field comparison for $table_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_field_comparison', $error);\n        \n        # Don't return 500 status - return success with error info instead\n        # This prevents JavaScript parsing errors\n        $c->stash(json => {\n            success => 0,\n            error => $error,\n            table_name => $table_name,\n            database => $database,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to get result file fields\nsub get_result_file_fields :Path('/admin/get_result_file_fields') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Starting get_result_file_fields action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => {\n            success => 0,\n            error => \"Access denied: Admin role required\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $result_name = $c->req->param('result_name');\n    my $database = $c->req->param('database');\n    \n    unless ($result_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => \"Missing required parameters: result_name and database\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Getting fields for result: $result_name in database: $database\");\n    \n    try {\n        # Get the result file fields\n        my $fields = $self->get_result_file_field_definitions($c, $result_name, $database);\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n            \"Successfully retrieved \" . scalar(keys %$fields) . \" fields for result: $result_name\");\n        \n        $c->stash(json => {\n            success => 1,\n            fields => $fields,\n            result_name => $result_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting result file fields for $result_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_fields', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => {\n            success => 0,\n            error => $error\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field definitions from a result file\nsub get_result_file_field_definitions {\n    my ($self, $c, $result_name, $database) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Getting field definitions for result: $result_name in database: $database\");\n    \n    # Build the result file path\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    my $result_file_path;\n    \n    if (lc($database) eq 'ency') {\n        $result_file_path = \"$base_path/Ency/Result/$result_name.pm\";\n        # Also check subdirectories\n        unless (-f $result_file_path) {\n            if (-f \"$base_path/Ency/Result/System/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/System/$result_name.pm\";\n            } elsif (-f \"$base_path/Ency/Result/User/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/User/$result_name.pm\";\n            }\n        }\n    } elsif (lc($database) eq 'forager') {\n        $result_file_path = \"$base_path/Forager/Result/$result_name.pm\";\n    } else {\n        die \"Unsupported database: $database\";\n    }\n    \n    unless (-f $result_file_path) {\n        die \"Result file not found: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Found result file: $result_file_path\");\n    \n    # Parse the result file schema\n    my $schema_info = $self->get_result_file_schema($c, $result_name, $result_file_path);\n    \n    unless ($schema_info && $schema_info->{columns}) {\n        die \"Could not parse result file schema: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Successfully parsed \" . scalar(keys %{$schema_info->{columns}}) . \" fields from result file\");\n    \n    return $schema_info->{columns};\n}\n\n# Get database comparison between each database and its result files\nsub get_database_comparison {\n    my ($self, $c) = @_;\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Add backend-specific schema comparison\n    foreach my $backend_name (sort keys %$available_backends) {\n        my $backend_info = $available_backends->{$backend_name};\n        \n        $comparison->{backends}->{$backend_name} = {\n            name => $backend_name,\n            display_name => $backend_info->{config}->{description} || $backend_name,\n            type => $backend_info->{type},\n            available => $backend_info->{available},\n            priority => $backend_info->{config}->{priority} || 999,\n            connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n            tables => [],\n            table_count => 0,\n            table_comparisons => [],\n            error => undef\n        };\n        \n        # If backend is available, get its schema information\n        if ($backend_info->{available}) {\n            try {\n                my $backend_tables = $self->get_backend_database_tables($c, $backend_name, $backend_info);\n                $comparison->{backends}->{$backend_name}->{tables} = $backend_tables;\n                $comparison->{backends}->{$backend_name}->{table_count} = scalar(@$backend_tables);\n                \n                # Build result file mapping for this backend\n                my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                \n                # Compare each table with its result file\n                foreach my $table_name (@$backend_tables) {\n                    my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $backend_name, $backend_info, $result_table_mapping);\n                    push @{$comparison->{backends}->{$backend_name}->{table_comparisons}}, $table_comparison;\n                    \n                    if ($table_comparison->{has_result_file}) {\n                        $comparison->{summary}->{tables_with_results}++;\n                    } else {\n                        $comparison->{summary}->{tables_without_results}++;\n                    }\n                }\n                \n                $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                \n            } catch {\n                my $error = $_;\n                $comparison->{backends}->{$backend_name}->{error} = $error;\n                $comparison->{backends}->{$backend_name}->{connection_status} = 'error';\n                \n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', \n                    \"Error getting schema for backend '$backend_name': $error\");\n            };\n        }\n    }\n    \n    # Get Ency database tables and compare with result files\n    try {\n        my $ency_tables = $self->get_ency_database_tables($c);\n        $comparison->{ency}->{tables} = $ency_tables;\n        $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n        $comparison->{ency}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$ency_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to ency database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{ency}->{connection_status} = 'error';\n        $comparison->{ency}->{error} = $error;\n    };\n    \n    # Get Forager database tables and compare with result files\n    try {\n        my $forager_tables = $self->get_forager_database_tables($c);\n        $comparison->{forager}->{tables} = $forager_tables;\n        $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n        $comparison->{forager}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$forager_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Forager Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to forager database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{forager}->{connection_status} = 'error';\n        $comparison->{forager}->{error} = $error;\n    };\n    \n    return $comparison;\n}\n\n# Get database comparison data for a specific database only (performance optimized)\nsub get_database_comparison_selective {\n    my ($self, $c, $selected_db) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Starting selective comparison for database: $selected_db\");\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        selected_database => $selected_db,\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Only process the selected database\n    if ($selected_db eq 'ency') {\n        # Get Ency database tables and compare with result files\n        try {\n            my $ency_tables = $self->get_ency_database_tables($c);\n            $comparison->{ency}->{tables} = $ency_tables;\n            $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n            $comparison->{ency}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$ency_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to ency database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{ency}->{connection_status} = 'error';\n            $comparison->{ency}->{error} = $error;\n        };\n    }\n    elsif ($selected_db eq 'forager') {\n        # Get Forager database tables and compare with result files\n        try {\n            my $forager_tables = $self->get_forager_database_tables($c);\n            $comparison->{forager}->{tables} = $forager_tables;\n            $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n            $comparison->{forager}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$forager_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to forager database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{forager}->{connection_status} = 'error';\n            $comparison->{forager}->{error} = $error;\n        };\n    }\n    else {\n        # Handle backend-specific database selection\n        if (exists $available_backends->{$selected_db}) {\n            my $backend_info = $available_backends->{$selected_db};\n            \n            $comparison->{backends}->{$selected_db} = {\n                name => $selected_db,\n                display_name => $backend_info->{config}->{description} || $selected_db,\n                type => $backend_info->{type},\n                available => $backend_info->{available},\n                priority => $backend_info->{config}->{priority} || 999,\n                connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n                tables => [],\n                table_count => 0,\n                table_comparisons => [],\n                error => undef\n            };\n            \n            # If backend is available, get its schema information\n            if ($backend_info->{available}) {\n                try {\n                    my $backend_tables = $self->get_backend_database_tables($c, $selected_db, $backend_info);\n                    $comparison->{backends}->{$selected_db}->{tables} = $backend_tables;\n                    $comparison->{backends}->{$selected_db}->{table_count} = scalar(@$backend_tables);\n                    \n                    # Build result file mapping for this backend\n                    my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                    \n                    # Compare each table with its result file\n                    foreach my $table_name (@$backend_tables) {\n                        my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $selected_db, $backend_info, $result_table_mapping);\n                        push @{$comparison->{backends}->{$selected_db}->{table_comparisons}}, $table_comparison;\n                        \n                        if ($table_comparison->{has_result_file}) {\n                            $comparison->{summary}->{tables_with_results}++;\n                        } else {\n                            $comparison->{summary}->{tables_without_results}++;\n                        }\n                    }\n                    \n                    $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                    $comparison->{summary}->{connected_databases}++;\n                    \n                } catch {\n                    my $error = $_;\n                    $comparison->{backends}->{$selected_db}->{error} = $error;\n                    $comparison->{backends}->{$selected_db}->{connection_status} = 'error';\n                    \n                    $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', \n                        \"Error getting schema for backend '$selected_db': $error\");\n                };\n            }\n        }\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Completed selective comparison for database: $selected_db\");\n    \n    return $comparison;\n}\n\n# Compare a database table with its Result file\nsub compare_table_with_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Look for Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    if ($result_file_path && -f $result_file_path) {\n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_file_path;\n        $comparison->{last_modified} = (stat($result_file_path))[9];\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_file_path);\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find Result file for a table\nsub find_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Convert table name to proper case for Result file names\n    my $result_name = $self->table_name_to_result_name($table_name);\n    \n    # Database-specific Result file locations to check\n    my @search_paths;\n    \n    # Get the application root directory\n    my $app_root = $c->config->{home} || '/home/shanta/PycharmProjects/comserv2';\n    \n    if (lc($database) eq 'ency') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/System/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/User/$result_name.pm\"\n        );\n    } elsif (lc($database) eq 'forager') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Forager/Result/$result_name.pm\"\n        );\n    } else {\n        # Fallback for unknown databases\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Schema/Result/$result_name.pm\"\n        );\n    }\n    \n    foreach my $path (@search_paths) {\n        if (-f $path) {\n            return $path;\n        }\n    }\n    \n    return undef;\n}\n\n# Convert table name to Result class name\nsub table_name_to_result_name {\n    my ($self, $table_name) = @_;\n    \n    # Convert snake_case or lowercase to PascalCase\n    # e.g., \"user_group\" -> \"UserGroup\", \"ency_herb_tb\" -> \"Herb\"\n    \n    # Handle database-specific table name patterns\n    my $clean_name = $table_name;\n    \n    # Remove common prefixes\n    $clean_name =~ s/^ency_//i;\n    $clean_name =~ s/^forager_//i;\n    \n    # Remove common suffixes\n    $clean_name =~ s/_tb$//i;\n    $clean_name =~ s/_table$//i;\n    \n    # Handle special plurals and known mappings\n    my %table_to_result = (\n        'categories' => 'Category',\n        'event' => 'Event',\n        'files' => 'File',\n        'groups' => 'Group',\n        'internal_links_tb' => 'InternalLinksTb',\n        'learned_data' => 'Learned_data',\n        'log' => 'Log',\n        'mail_domains' => 'MailDomain',\n        'network_devices' => 'NetworkDevice',\n        'pages_content' => 'Pages_content',\n        'page_tb' => 'PageTb',\n        'pallets' => 'Pallet',\n        'participant' => 'Participant',\n        'projects' => 'Project',\n        'project_sites' => 'ProjectSite',\n        'queens' => 'Queen',\n        'reference' => 'Reference',\n        'site_config' => 'SiteConfig',\n        'sitedomain' => 'SiteDomain',\n        'sites' => 'Site',\n        'site_themes' => 'SiteTheme',\n        'site_workshop' => 'SiteWorkshop',\n        'themes' => 'Theme',\n        'theme_variables' => 'ThemeVariable',\n        'todo' => 'Todo',\n        'user_groups' => 'UserGroup',\n        'users' => 'User',\n        'user_sites' => 'UserSite',\n        'workshop' => 'WorkShop',\n        'yards' => 'Yard',\n        'ency_herb_tb' => 'Herb',\n        'page' => 'Page'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $table_to_result{lc($table_name)}) {\n        return $table_to_result{lc($table_name)};\n    }\n    \n    # Convert underscores to PascalCase\n    my $result_name = join('', map { ucfirst(lc($_)) } split(/_/, $clean_name));\n    \n    return $result_name;\n}\n\n# Find Result files that don't have corresponding database tables\nsub find_orphaned_result_files {\n    my ($self, $c, $database, $existing_tables) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file by reading the __PACKAGE__->table() declaration\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        # Skip if we couldn't extract table name\n        next unless $table_name;\n        \n        # Check if corresponding table exists\n        unless (exists $table_lookup{lc($table_name)}) {\n            push @orphaned_results, {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Extract table name from Result file by reading __PACKAGE__->table() declaration\nsub extract_table_name_from_result_file {\n    my ($self, $file_path) = @_;\n    \n    return undef unless -f $file_path;\n    \n    # Read the Result file\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return undef;\n    }\n    \n    # Extract table name from __PACKAGE__->table('table_name') declaration\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        return $1;\n    }\n    \n    return undef;\n}\n\n# Build comprehensive mapping of result files to their actual table names\nsub build_result_table_mapping {\n    my ($self, $c, $database) = @_;\n    \n    my %mapping = ();  # table_name => { result_name => ..., result_path => ... }\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    # Debug: Log the number of result files found\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Found \" . scalar(@result_files) . \" result files for database '$database'\");\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        if ($table_name) {\n            $mapping{lc($table_name)} = {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    # Debug: Log the final mapping keys\n    my @mapping_keys = sort keys %mapping;\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Final mapping contains \" . scalar(@mapping_keys) . \" entries: \" . join(', ', @mapping_keys));\n    \n    return \\%mapping;\n}\n\n# Compare table with result file using the comprehensive mapping\nsub compare_table_with_result_file_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Check if this table has a corresponding result file\n    my $table_key = lc($table_name);\n    if (exists $result_table_mapping->{$table_key}) {\n        my $result_info = $result_table_mapping->{$table_key};\n        \n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_info->{result_path};\n        $comparison->{last_modified} = $result_info->{last_modified};\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_info->{result_path});\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find result files without corresponding tables using the comprehensive mapping\nsub find_orphaned_result_files_v2 {\n    my ($self, $c, $database, $existing_tables, $result_table_mapping) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Check each result file to see if its table exists\n    foreach my $table_name (keys %$result_table_mapping) {\n        unless (exists $table_lookup{$table_name}) {\n            my $result_info = $result_table_mapping->{$table_name};\n            push @orphaned_results, {\n                result_name => $result_info->{result_name},\n                result_path => $result_info->{result_path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_info->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Get all Result files for a database\nsub get_all_result_files {\n    my ($self, $database) = @_;\n    \n    my @result_files = ();\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    \n    if (lc($database) eq 'ency') {\n        my $result_dir = \"$base_path/Ency/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n        \n        # Also scan subdirectories\n        if (-d \"$result_dir/System\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/System\", 'System/');\n        }\n        if (-d \"$result_dir/User\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/User\", 'User/');\n        }\n    } elsif (lc($database) eq 'forager') {\n        my $result_dir = \"$base_path/Forager/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n    }\n    \n    return @result_files;\n}\n\n# Scan a directory for Result files\nsub scan_result_directory {\n    my ($self, $dir_path, $prefix) = @_;\n    \n    my @files = ();\n    \n    if (opendir(my $dh, $dir_path)) {\n        while (my $file = readdir($dh)) {\n            next if $file =~ /^\\.\\.?$/;  # Skip . and ..\n            next unless $file =~ /\\.pm$/;  # Only .pm files\n            \n            my $full_path = \"$dir_path/$file\";\n            next unless -f $full_path;  # Only regular files\n            \n            my $name = $file;\n            $name =~ s/\\.pm$//;  # Remove .pm extension\n            \n            push @files, {\n                name => $prefix . $name,\n                path => $full_path,\n                last_modified => (stat($full_path))[9]\n            };\n        }\n        closedir($dh);\n    }\n    \n    return @files;\n}\n\n# Convert Result class name back to table name\nsub result_name_to_table_name {\n    my ($self, $result_name) = @_;\n    \n    # Remove any path prefix (e.g., \"System/Site\" -> \"Site\")\n    $result_name =~ s/.*\\///;\n    \n    # Handle special cases - map Result names to actual table names\n    my %result_to_table = (\n        'Category' => 'categories',\n        'File' => 'files',\n        'Group' => 'groups',\n        'User' => 'users',\n        'Event' => 'events',\n        'Site' => 'sites',\n        'Todo' => 'todos',\n        'Project' => 'projects',\n        'WorkShop' => 'workshops',\n        'Theme' => 'themes',\n        'Reference' => 'references',\n        'Participant' => 'participants',\n        'Herb' => 'ency_herb_tb',\n        'Page' => 'page',\n        'Pages_content' => 'pages_content',\n        'InternalLinksTb' => 'internal_links_tb',\n        'Learned_data' => 'learned_data',\n        'Log' => 'log',\n        'MailDomain' => 'mail_domains',\n        'NetworkDevice' => 'network_devices',\n        'PageTb' => 'page_tb',\n        'Pallet' => 'pallets',\n        'ProjectSite' => 'project_sites',\n        'Queen' => 'queens',\n        'SiteConfig' => 'site_config',\n        'SiteDomain' => 'sitedomain',\n        'SiteTheme' => 'site_themes',\n        'SiteWorkshop' => 'site_workshop',\n        'ThemeVariable' => 'theme_variables',\n        'UserGroup' => 'user_groups',\n        'UserSite' => 'user_sites',\n        'Yard' => 'yards'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $result_to_table{$result_name}) {\n        return $result_to_table{$result_name};\n    }\n    \n    # Convert PascalCase to snake_case\n    my $table_name = $result_name;\n    $table_name =~ s/([a-z])([A-Z])/$1_$2/g;  # Insert underscore before capitals\n    $table_name = lc($table_name);\n    \n    # For unknown mappings, try common patterns\n    # This is a fallback - ideally all mappings should be explicit above\n    return $table_name;\n}\n\n# Get detailed field comparison between table and Result file\nsub get_table_result_comparison {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Get table schema\n    my $table_schema;\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Find and parse Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    my $result_schema = { columns => {} };\n    \n    if ($result_file_path && -f $result_file_path) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_file_path);\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_file_path: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_file_path && -f $result_file_path) ? 1 : 0,\n        result_file_path => $result_file_path,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Get detailed field comparison between table and Result file using comprehensive mapping\nsub get_table_result_comparison_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    # Get table schema\n    my $table_schema = { columns => {} };\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        # Ensure we have a valid schema structure\n        $table_schema = { columns => {} } unless $table_schema && ref($table_schema) eq 'HASH';\n        $table_schema->{columns} = {} unless $table_schema->{columns} && ref($table_schema->{columns}) eq 'HASH';\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Check if this table has a corresponding result file using the mapping\n    my $table_key = lc($table_name);\n    my $result_info = $result_table_mapping->{$table_key};\n    my $result_schema = { columns => {} };\n    \n    if ($result_info && -f $result_info->{result_path}) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_info->{result_path});\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_info->{result_path}: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_info && -f $result_info->{result_path}) ? 1 : 0,\n        result_file_path => $result_info ? $result_info->{result_path} : undef,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Compare field attributes between table and Result file\nsub compare_field_attributes {\n    my ($self, $table_field, $result_field, $c, $field_name) = @_;\n    \n    my @differences = ();\n    my @attributes = qw(data_type size is_nullable is_auto_increment default_value);\n    \n    foreach my $attr (@attributes) {\n        my $table_value = $table_field ? $table_field->{$attr} : undef;\n        my $result_value = $result_field ? $result_field->{$attr} : undef;\n        \n        # Store original values for debugging\n        my $original_table_value = $table_value;\n        my $original_result_value = $result_value;\n        \n        # Normalize values for comparison\n        $table_value = $self->normalize_field_value($attr, $table_value);\n        $result_value = $self->normalize_field_value($attr, $result_value);\n        \n        # Add debug information for data_type comparisons when debug_mode is enabled\n        if ($c && $c->session->{debug_mode} && $attr eq 'data_type' && defined $original_table_value && defined $original_result_value) {\n            push @{$c->stash->{debug_msg}}, sprintf(\n                \"Field '%s' data_type normalization: Table Type: %s -> %s, Result Type: %s -> %s, Match: %s\",\n                $field_name || 'unknown',\n                $original_table_value || 'undef',\n                $table_value || 'undef',\n                $original_result_value || 'undef', \n                $result_value || 'undef',\n                (defined $table_value && defined $result_value && $table_value eq $result_value) ? 'YES' : 'NO'\n            );\n        }\n        \n        if (defined $table_value && defined $result_value) {\n            if ($table_value ne $result_value) {\n                push @differences, {\n                    attribute => $attr,\n                    table_value => $table_value,\n                    result_value => $result_value,\n                    original_table_value => $original_table_value,\n                    original_result_value => $original_result_value,\n                    type => 'different'\n                };\n            }\n        } elsif (defined $table_value && !defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => $table_value,\n                result_value => undef,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_result'\n            };\n        } elsif (!defined $table_value && defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => undef,\n                result_value => $result_value,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_table'\n            };\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Normalize field values for comparison\nsub normalize_field_value {\n    my ($self, $attribute, $value) = @_;\n    \n    return undef unless defined $value;\n    \n    # Handle data type normalization\n    if ($attribute eq 'data_type') {\n        return $self->normalize_data_type($value);\n    }\n    \n    # Handle boolean attributes\n    if ($attribute eq 'is_nullable' || $attribute eq 'is_auto_increment') {\n        return $value ? 1 : 0;\n    }\n    \n    # Handle numeric attributes\n    if ($attribute eq 'size') {\n        return $value + 0 if $value =~ /^\\d+$/;\n    }\n    \n    # Handle string attributes\n    return \"$value\";\n}\n\n# Parse Result file schema\nsub parse_result_file_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Try to load the Result class directly first\n    my $result_class_schema = $self->parse_result_class_schema($c, $file_path);\n    if ($result_class_schema && keys %{$result_class_schema->{columns}}) {\n        return $result_class_schema;\n    }\n    \n    # Fallback to file parsing if direct class loading fails\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return $schema;\n    }\n    \n    # Extract table name\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        $schema->{table_name} = $1;\n    }\n    \n    # Extract columns\n    if ($content =~ /__PACKAGE__->add_columns\\(\\s*(.*?)\\s*\\);/s) {\n        my $columns_block = $1;\n        \n        # Parse individual column definitions (format: column_name => { attributes })\n        while ($columns_block =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n            my ($col_name, $col_def) = ($1, $2);\n            \n            my $column = {\n                data_type => undef,\n                is_nullable => 1,\n                size => undef,\n                is_auto_increment => 0,\n                default_value => undef\n            };\n            \n            # Parse column attributes\n            if ($col_def =~ /data_type\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{data_type} = $1;\n            }\n            if ($col_def =~ /is_nullable\\s*=>\\s*(\\d+)/) {\n                $column->{is_nullable} = $1;\n            }\n            if ($col_def =~ /size\\s*=>\\s*(\\d+)/) {\n                $column->{size} = $1;\n            }\n            if ($col_def =~ /is_auto_increment\\s*=>\\s*(\\d+)/) {\n                $column->{is_auto_increment} = $1;\n            }\n            if ($col_def =~ /default_value\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{default_value} = $1;\n            }\n            \n            $schema->{columns}->{$col_name} = $column;\n        }\n    }\n    \n    # Extract primary keys\n    if ($content =~ /__PACKAGE__->set_primary_key\\(([^)]+)\\);/) {\n        my $pk_def = $1;\n        while ($pk_def =~ /['\"]([^'\"]+)['\"]/g) {\n            push @{$schema->{primary_keys}}, $1;\n        }\n    }\n    \n    # Extract relationships\n    while ($content =~ /__PACKAGE__->(belongs_to|has_many|might_have|has_one)\\(\\s*['\"]([^'\"]+)['\"],\\s*['\"]([^'\"]+)['\"],\\s*\\{([^}]+)\\}/gs) {\n        my ($rel_type, $accessor, $related_class, $rel_def) = ($1, $2, $3, $4);\n        \n        my $relationship = {\n            type => $rel_type,\n            accessor => $accessor,\n            related_class => $related_class,\n            foreign_key => undef\n        };\n        \n        if ($rel_def =~ /['\"]foreign\\.([^'\"]+)['\"]/) {\n            $relationship->{foreign_key} = $1;\n        }\n        \n        push @{$schema->{relationships}}, $relationship;\n    }\n    \n    return $schema;\n}\n\n# Parse Result class schema by loading the class directly\nsub parse_result_class_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Extract the Result class name from the file path\n    my $result_class;\n    if ($file_path =~ m{/Result/(.+)\\.pm$}) {\n        my $class_path = $1;\n        $class_path =~ s{/}{::}g;  # Convert path separators to Perl package separators\n        $result_class = \"Comserv::Model::Schema::Ency::Result::$class_path\";\n    } else {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Could not extract Result class name from path: $file_path\");\n        return $schema;\n    }\n    \n    # Try to load the Result class\n    eval {\n        eval \"require $result_class\";\n        die $@ if $@;\n        \n        # Get the table name\n        $schema->{table_name} = $result_class->table if $result_class->can('table');\n        \n        # Get column information\n        if ($result_class->can('columns_info')) {\n            my $columns_info = $result_class->columns_info;\n            foreach my $col_name (keys %$columns_info) {\n                my $col_info = $columns_info->{$col_name};\n                $schema->{columns}->{$col_name} = {\n                    data_type => $col_info->{data_type} || 'unknown',\n                    is_nullable => $col_info->{is_nullable} // 1,\n                    size => $col_info->{size},\n                    is_auto_increment => $col_info->{is_auto_increment} || 0,\n                    default_value => $col_info->{default_value},\n                    extra => $col_info->{extra}\n                };\n            }\n        }\n        \n        # Get primary key information\n        if ($result_class->can('primary_columns')) {\n            my @primary_keys = $result_class->primary_columns;\n            $schema->{primary_keys} = \\@primary_keys;\n        }\n        \n        # Get relationship information\n        if ($result_class->can('relationships')) {\n            my @relationships = $result_class->relationships;\n            foreach my $rel_name (@relationships) {\n                if ($result_class->can('relationship_info')) {\n                    my $rel_info = $result_class->relationship_info($rel_name);\n                    push @{$schema->{relationships}}, {\n                        type => $rel_info->{attrs}->{accessor} || 'unknown',\n                        accessor => $rel_name,\n                        related_class => $rel_info->{class},\n                        foreign_key => $rel_info->{cond} || {}\n                    };\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Successfully loaded Result class $result_class with \" . scalar(keys %{$schema->{columns}}) . \" columns\");\n            \n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Failed to load Result class $result_class: $@\");\n        return undef;  # Return undef to indicate failure, so fallback parsing can be used\n    }\n    \n    return $schema;\n}\n\n# Find differences between database and Result file schemas\nsub find_schema_differences {\n    my ($self, $db_schema, $result_schema) = @_;\n    \n    my @differences = ();\n    \n    # Compare columns\n    my %db_columns = %{$db_schema->{columns} || {}};\n    my %result_columns = %{$result_schema->{columns} || {}};\n    \n    # Find columns in database but not in Result file\n    foreach my $col_name (keys %db_columns) {\n        unless (exists $result_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_result',\n                column => $col_name,\n                description => \"Column '$col_name' exists in database but not in Result file\"\n            };\n        }\n    }\n    \n    # Find columns in Result file but not in database\n    foreach my $col_name (keys %result_columns) {\n        unless (exists $db_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_database',\n                column => $col_name,\n                description => \"Column '$col_name' exists in Result file but not in database\"\n            };\n        }\n    }\n    \n    # Compare column attributes for common columns\n    foreach my $col_name (keys %db_columns) {\n        if (exists $result_columns{$col_name}) {\n            my $db_col = $db_columns{$col_name};\n            my $result_col = $result_columns{$col_name};\n            \n            # Compare data types\n            if (($db_col->{data_type} || '') ne ($result_col->{data_type} || '')) {\n                push @differences, {\n                    type => 'column_type_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{data_type},\n                    result_value => $result_col->{data_type},\n                    description => \"Data type mismatch for column '$col_name'\"\n                };\n            }\n            \n            # Compare nullable status\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    type => 'column_nullable_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{is_nullable} ? 'YES' : 'NO',\n                    result_value => $result_col->{is_nullable} ? 'YES' : 'NO',\n                    description => \"Nullable status mismatch for column '$col_name'\"\n                };\n            }\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Get the database name\nsub get_database_name {\n    my ($self, $c) = @_;\n    \n    my $database_name = 'Unknown Database';\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SELECT DATABASE()\");\n        $sth->execute();\n        \n        if (my ($db_name) = $sth->fetchrow_array()) {\n            $database_name = $db_name;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_name', \n            \"Error getting database name: $_\");\n    };\n    \n    return $database_name;\n}\n\n# Get list of database tables with their schema information\nsub get_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_tables', \n            \"Error getting database tables: $_\");\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Ency database\nsub get_ency_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Log database connection info\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Connected to database: \" . $dbh->{Name});\n        \n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n        # Log the number of tables found\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Found \" . scalar(@tables) . \" tables: \" . join(', ', @tables));\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_database_tables', \n            \"Error getting ency database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Forager database\nsub get_forager_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_database_tables', \n            \"Error getting forager database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get table schema from the Ency database\nsub get_ency_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_table_schema', \n            \"Error getting ency table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get table schema from the Forager database\nsub get_forager_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_table_schema', \n            \"Error getting forager table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get database table schema information\nsub get_database_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE `$table_name`\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            # Parse MySQL column type\n            my ($data_type, $size) = $self->parse_mysql_column_type($row->{Type});\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $data_type,\n                size => $size,\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                extra => $row->{Extra}\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n        # Get unique constraints\n        $sth = $dbh->prepare(\"\n            SELECT \n                CONSTRAINT_NAME,\n                GROUP_CONCAT(COLUMN_NAME ORDER BY ORDINAL_POSITION) as COLUMNS\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND CONSTRAINT_NAME != 'PRIMARY'\n            GROUP BY CONSTRAINT_NAME\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{unique_constraints}}, {\n                name => $row->{CONSTRAINT_NAME},\n                columns => [split(',', $row->{COLUMNS})]\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_table_schema', \n            \"Error getting schema for table $table_name: $_\");\n    };\n    \n    return $schema_info;\n}\n\n# Parse MySQL column type to extract data type and size\nsub parse_mysql_column_type {\n    my ($self, $type_string) = @_;\n    \n    # Handle common MySQL types\n    if ($type_string =~ /^(\\w+)\\((\\d+)\\)/) {\n        return ($1, $2);\n    } elsif ($type_string =~ /^(\\w+)\\((\\d+),(\\d+)\\)/) {\n        return ($1, \"$2,$3\");  # For decimal types\n    } elsif ($type_string =~ /^(\\w+)/) {\n        return ($1, undef);\n    }\n    \n    return ($type_string, undef);\n}\n\n# Get Result files and their schema information\nsub get_result_files {\n    my ($self, $c) = @_;\n    \n    my $result_files = {};\n    \n    try {\n        my $result_dir = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result');\n        \n        if (-d $result_dir) {\n            find(sub {\n                return unless -f $_ && /\\.pm$/;\n                return if $_ eq 'User.pm' && -d $File::Find::dir . '/User'; # Skip if there's a User directory\n                \n                my $file_path = $File::Find::name;\n                my $relative_path = $file_path;\n                $relative_path =~ s/^\\Q$result_dir\\E\\/?//;\n                \n                # Skip files in subdirectories for now (like User/User.pm)\n                return if $relative_path =~ /\\//;\n                \n                my $table_name = $_;\n                $table_name =~ s/\\.pm$//;\n                \n                my $schema_info = $self->get_result_file_schema($c, $table_name, $file_path);\n                if ($schema_info) {\n                    $result_files->{$schema_info->{table_name} || lc($table_name)} = $schema_info;\n                }\n            }, $result_dir);\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_files', \n            \"Error getting Result files: $_\");\n    };\n    \n    return $result_files;\n}\n\n# Get schema information from a Result file\nsub get_result_file_schema {\n    my ($self, $c, $class_name, $file_path) = @_;\n    \n    my $schema_info = {\n        file_path => $file_path,\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    try {\n        # Read the file content\n        my $content = read_file($file_path);\n        \n        # Extract table name\n        if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\)/) {\n            $schema_info->{table_name} = $1;\n        }\n        \n        # Extract columns\n        if ($content =~ /__PACKAGE__->add_columns\\((.*?)\\);/s) {\n            my $columns_text = $1;\n            $schema_info->{columns} = $self->parse_result_file_columns($columns_text);\n        }\n        \n        # Extract primary key\n        if ($content =~ /__PACKAGE__->set_primary_key\\((.*?)\\)/) {\n            my $pk_text = $1;\n            $pk_text =~ s/['\"\\s]//g;\n            @{$schema_info->{primary_keys}} = split(/,/, $pk_text);\n        }\n        \n        # Extract unique constraints\n        while ($content =~ /__PACKAGE__->add_unique_constraint\\(['\"]([^'\"]+)['\"] => \\[(.*?)\\]\\)/g) {\n            my $constraint_name = $1;\n            my $columns_text = $2;\n            $columns_text =~ s/['\"\\s]//g;\n            push @{$schema_info->{unique_constraints}}, {\n                name => $constraint_name,\n                columns => [split(/,/, $columns_text)]\n            };\n        }\n        \n        # Extract relationships\n        while ($content =~ /__PACKAGE__->(belongs_to|has_many|has_one|might_have)\\(([^)]+)\\)/g) {\n            my $relationship_type = $1;\n            my $relationship_text = $2;\n            \n            # Parse relationship parameters\n            my @params = split(/,/, $relationship_text);\n            if (@params >= 3) {\n                my $accessor = $params[0];\n                my $related_class = $params[1];\n                my $foreign_key = $params[2];\n                \n                # Clean up the parameters\n                $accessor =~ s/['\"\\s]//g;\n                $related_class =~ s/['\"\\s]//g;\n                $foreign_key =~ s/['\"\\s]//g;\n                \n                push @{$schema_info->{relationships}}, {\n                    type => $relationship_type,\n                    accessor => $accessor,\n                    related_class => $related_class,\n                    foreign_key => $foreign_key\n                };\n            }\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_schema', \n            \"Error parsing Result file $file_path: $_\");\n        return undef;\n    };\n    \n    return $schema_info;\n}\n\n# Parse column definitions from Result file\nsub parse_result_file_columns {\n    my ($self, $columns_text) = @_;\n    \n    my $columns = {};\n    \n    # Split by column definitions (looking for column_name => { ... })\n    while ($columns_text =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n        my $column_name = $1;\n        my $column_def = $2;\n        \n        my $column_info = {};\n        \n        # Parse column attributes\n        while ($column_def =~ /(\\w+)\\s*=>\\s*['\"]?([^'\",\\s]+)['\"]?/g) {\n            my $attr = $1;\n            my $value = $2;\n            \n            if ($attr eq 'size' && $value =~ /^\\d+$/) {\n                $column_info->{$attr} = int($value);\n            } elsif ($attr eq 'is_nullable' || $attr eq 'is_auto_increment') {\n                $column_info->{$attr} = ($value eq '1' || $value eq 'true') ? 1 : 0;\n            } else {\n                $column_info->{$attr} = $value;\n            }\n        }\n        \n        $columns->{$column_name} = $column_info;\n    }\n    \n    return $columns;\n}\n\n# Compare schema between database table and Result file\nsub compare_table_schema {\n    my ($self, $c, $table_name, $db_tables, $result_files) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database_table_exists => 0,\n        result_file_exists => 0,\n        has_differences => 0,\n        column_differences => [],\n        primary_key_differences => [],\n        relationship_differences => [],\n        unique_constraint_differences => [],\n        database_schema => undef,\n        result_file_schema => undef\n    };\n    \n    # Check if database table exists\n    $comparison->{database_table_exists} = grep { $_ eq $table_name } @$db_tables;\n    \n    # Check if Result file exists\n    $comparison->{result_file_exists} = exists $result_files->{$table_name};\n    \n    # Get schemas if both exist\n    if ($comparison->{database_table_exists}) {\n        $comparison->{database_schema} = $self->get_database_table_schema($c, $table_name);\n    }\n    \n    if ($comparison->{result_file_exists}) {\n        $comparison->{result_file_schema} = $result_files->{$table_name};\n    }\n    \n    # Compare if both exist\n    if ($comparison->{database_table_exists} && $comparison->{result_file_exists}) {\n        $self->compare_columns($comparison);\n        $self->compare_primary_keys($comparison);\n        $self->compare_unique_constraints($comparison);\n        $self->compare_relationships($comparison);\n        \n        # Set has_differences flag\n        $comparison->{has_differences} = (\n            @{$comparison->{column_differences}} > 0 ||\n            @{$comparison->{primary_key_differences}} > 0 ||\n            @{$comparison->{relationship_differences}} > 0 ||\n            @{$comparison->{unique_constraint_differences}} > 0\n        );\n    } elsif (!$comparison->{database_table_exists} || !$comparison->{result_file_exists}) {\n        $comparison->{has_differences} = 1;\n    }\n    \n    return $comparison;\n}\n\n# Compare columns between database and Result file\nsub compare_columns {\n    my ($self, $comparison) = @_;\n    \n    my $db_columns = $comparison->{database_schema}->{columns};\n    my $result_columns = $comparison->{result_file_schema}->{columns};\n    \n    # Get all column names\n    my %all_columns = ();\n    foreach my $col (keys %$db_columns) { $all_columns{$col} = 1; }\n    foreach my $col (keys %$result_columns) { $all_columns{$col} = 1; }\n    \n    foreach my $column_name (sort keys %all_columns) {\n        my $db_col = $db_columns->{$column_name};\n        my $result_col = $result_columns->{$column_name};\n        \n        if (!$db_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_database',\n                result_file_definition => $result_col\n            };\n        } elsif (!$result_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_result_file',\n                database_definition => $db_col\n            };\n        } else {\n            # Compare column attributes\n            my @differences = ();\n            \n            # Compare data type\n            if (lc($db_col->{data_type}) ne lc($result_col->{data_type})) {\n                push @differences, {\n                    attribute => 'data_type',\n                    database_value => $db_col->{data_type},\n                    result_file_value => $result_col->{data_type}\n                };\n            }\n            \n            # Compare size\n            if (defined($db_col->{size}) != defined($result_col->{size}) ||\n                (defined($db_col->{size}) && defined($result_col->{size}) && \n                 $db_col->{size} ne $result_col->{size})) {\n                push @differences, {\n                    attribute => 'size',\n                    database_value => $db_col->{size},\n                    result_file_value => $result_col->{size}\n                };\n            }\n            \n            # Compare nullable\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    attribute => 'is_nullable',\n                    database_value => $db_col->{is_nullable},\n                    result_file_value => $result_col->{is_nullable}\n                };\n            }\n            \n            # Compare auto increment\n            if (($db_col->{is_auto_increment} || 0) != ($result_col->{is_auto_increment} || 0)) {\n                push @differences, {\n                    attribute => 'is_auto_increment',\n                    database_value => $db_col->{is_auto_increment},\n                    result_file_value => $result_col->{is_auto_increment}\n                };\n            }\n            \n            if (@differences) {\n                push @{$comparison->{column_differences}}, {\n                    column => $column_name,\n                    type => 'attribute_differences',\n                    differences => \\@differences,\n                    database_definition => $db_col,\n                    result_file_definition => $result_col\n                };\n            }\n        }\n    }\n}\n\n# Compare primary keys\nsub compare_primary_keys {\n    my ($self, $comparison) = @_;\n    \n    my $db_pks = $comparison->{database_schema}->{primary_keys};\n    my $result_pks = $comparison->{result_file_schema}->{primary_keys};\n    \n    # Sort for comparison\n    my @db_pks_sorted = sort @$db_pks;\n    my @result_pks_sorted = sort @$result_pks;\n    \n    if (join(',', @db_pks_sorted) ne join(',', @result_pks_sorted)) {\n        push @{$comparison->{primary_key_differences}}, {\n            database_primary_keys => \\@db_pks_sorted,\n            result_file_primary_keys => \\@result_pks_sorted\n        };\n    }\n}\n\n# Compare unique constraints\nsub compare_unique_constraints {\n    my ($self, $comparison) = @_;\n    \n    my $db_constraints = $comparison->{database_schema}->{unique_constraints};\n    my $result_constraints = $comparison->{result_file_schema}->{unique_constraints};\n    \n    # This is a simplified comparison - you might want to make it more sophisticated\n    if (@$db_constraints != @$result_constraints) {\n        push @{$comparison->{unique_constraint_differences}}, {\n            database_constraints => $db_constraints,\n            result_file_constraints => $result_constraints\n        };\n    }\n}\n\n# Compare relationships (this is Result file specific)\nsub compare_relationships {\n    my ($self, $comparison) = @_;\n    \n    # For now, we'll just note if relationships exist in the Result file\n    # but aren't reflected in the database foreign keys\n    my $result_relationships = $comparison->{result_file_schema}->{relationships};\n    my $db_foreign_keys = $comparison->{database_schema}->{foreign_keys};\n    \n    if (@$result_relationships > @$db_foreign_keys) {\n        push @{$comparison->{relationship_differences}}, {\n            type => 'missing_foreign_keys_in_database',\n            result_file_relationships => $result_relationships,\n            database_foreign_keys => $db_foreign_keys\n        };\n    }\n}\n\n# Apply selected schema changes\nsub apply_schema_changes {\n    my ($self, $c) = @_;\n    \n    my $changes = $c->req->param('changes');\n    my $direction = $c->req->param('direction'); # 'db_to_result' or 'result_to_db'\n    \n    if (!$changes) {\n        $c->flash->{error_msg} = \"No changes selected to apply.\";\n        return;\n    }\n    \n    try {\n        my $changes_data = decode_json($changes);\n        my $applied_changes = 0;\n        \n        foreach my $change (@$changes_data) {\n            if ($direction eq 'db_to_result') {\n                $self->apply_database_to_result_change($c, $change);\n            } elsif ($direction eq 'result_to_db') {\n                $self->apply_result_to_database_change($c, $change);\n            }\n            $applied_changes++;\n        }\n        \n        $c->flash->{success_msg} = \"Successfully applied $applied_changes changes.\";\n        \n    } catch {\n        my $error = \"Error applying changes: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'apply_schema_changes', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Apply change from database to Result file\nsub apply_database_to_result_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the Result file based on database schema\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_database_to_result_change', \n        \"Applying database to Result file change: \" . encode_json($change));\n}\n\n# Apply change from Result file to database\nsub apply_result_to_database_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the database schema based on Result file\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_result_to_database_change', \n        \"Applying Result file to database change: \" . encode_json($change));\n}\n\n# Generate Result file from database table\nsub generate_result_file {\n    my ($self, $c) = @_;\n    \n    my $table_name = $c->req->param('table_name');\n    \n    if (!$table_name) {\n        $c->flash->{error_msg} = \"No table name specified for Result file generation.\";\n        return;\n    }\n    \n    try {\n        my $db_schema = $self->get_database_table_schema($c, $table_name);\n        my $result_file_content = $self->generate_result_file_content($table_name, $db_schema);\n        \n        # Save the Result file\n        my $result_file_path = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result', ucfirst($table_name) . '.pm');\n        write_file($result_file_path, $result_file_content);\n        \n        $c->flash->{success_msg} = \"Result file generated successfully for table '$table_name'.\";\n        \n    } catch {\n        my $error = \"Error generating Result file: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'generate_result_file', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Generate Result file content from database schema\nsub generate_result_file_content {\n    my ($self, $table_name, $db_schema) = @_;\n    \n    my $class_name = ucfirst($table_name);\n    my $content = \"package Comserv::Model::Schema::Ency::Result::$class_name;\\n\";\n    $content .= \"use base 'DBIx::Class::Core';\\n\\n\";\n    $content .= \"__PACKAGE__->table('$table_name');\\n\";\n    $content .= \"__PACKAGE__->add_columns(\\n\";\n    \n    # Add columns\n    foreach my $column_name (sort keys %{$db_schema->{columns}}) {\n        my $col = $db_schema->{columns}->{$column_name};\n        $content .= \"    $column_name => {\\n\";\n        $content .= \"        data_type => '$col->{data_type}',\\n\";\n        \n        if (defined $col->{size}) {\n            $content .= \"        size => $col->{size},\\n\";\n        }\n        \n        if ($col->{is_nullable}) {\n            $content .= \"        is_nullable => 1,\\n\";\n        }\n        \n        if ($col->{is_auto_increment}) {\n            $content .= \"        is_auto_increment => 1,\\n\";\n        }\n        \n        if (defined $col->{default_value}) {\n            $content .= \"        default_value => '$col->{default_value}',\\n\";\n        }\n        \n        $content .= \"    },\\n\";\n    }\n    \n    $content .= \");\\n\";\n    \n    # Add primary key\n    if (@{$db_schema->{primary_keys}}) {\n        my $pk_list = join(', ', map { \"'$_'\" } @{$db_schema->{primary_keys}});\n        $content .= \"__PACKAGE__->set_primary_key($pk_list);\\n\";\n    }\n    \n    # Add unique constraints\n    foreach my $constraint (@{$db_schema->{unique_constraints}}) {\n        my $col_list = join(', ', map { \"'$_'\" } @{$constraint->{columns}});\n        $content .= \"__PACKAGE__->add_unique_constraint('$constraint->{name}' => [$col_list]);\\n\";\n    }\n    \n    $content .= \"\\n1;\\n\";\n    \n    return $content;\n}\n\n# Git pull functionality\nsub git_pull :Path('/admin/git_pull') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Starting git_pull action\");\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_pull', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request (user confirmed the git pull)\n    if ($c->req->method eq 'POST' && $c->req->param('confirm')) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n            \"Git pull confirmed, executing\");\n        \n        # Execute the git pull operation\n        my ($success, $output, $warning) = $self->execute_git_pull($c);\n        \n        # Store the results in stash for the template\n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Git pull completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Git pull failed. See output for details.\",\n            warning_msg => $warning\n        );\n    }\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller git_pull view - Template: admin/git_pull.tt\";\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_pull.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Completed git_pull action\");\n}\n\n# Execute the git pull operation with divergent branch handling\nsub execute_git_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 0;\n    \n    # Path to the theme_mappings.json file\n    my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n    my $backup_path = \"$theme_mappings_path.bak\";\n    \n    # Check if theme_mappings.json exists\n    my $theme_mappings_exists = -e $theme_mappings_path;\n    \n    try {\n        # Backup theme_mappings.json if it exists\n        if ($theme_mappings_exists) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Backing up theme_mappings.json\");\n            copy($theme_mappings_path, $backup_path) or die \"Failed to backup theme_mappings.json: $!\";\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Check Git status and handle divergent branches\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Checking Git status for divergent branches\");\n        \n        # First, fetch the latest changes from remote\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\";\n        \n        # Check for divergent branches\n        my $status_output = `git -C ${\\$c->path_to()} status --porcelain=v1 2>&1`;\n        my $branch_status = `git -C ${\\$c->path_to()} status -b --porcelain=v1 2>&1`;\n        \n        $output .= \"Git status output:\\n$status_output\\n\";\n        $output .= \"Branch status:\\n$branch_status\\n\";\n        \n        # Check if there are local changes that need to be stashed\n        my $has_local_changes = 0;\n        if ($theme_mappings_exists) {\n            my $git_status = `git -C ${\\$c->path_to()} status --porcelain root/static/config/theme_mappings.json`;\n            $has_local_changes = $git_status =~ /^\\s*[AM]\\s+root\\/static\\/config\\/theme_mappings\\.json/m;\n            \n            if ($has_local_changes) {\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Local changes detected in theme_mappings.json\");\n                $output .= \"Local changes detected in theme_mappings.json\\n\";\n                \n                # Stash the changes\n                my $stash_output = `git -C ${\\$c->path_to()} stash push -m \"Auto-stash before git pull\" -- root/static/config/theme_mappings.json 2>&1`;\n                $output .= \"Stashed changes: $stash_output\\n\";\n            }\n        }\n        \n        # Check if we have divergent branches by comparing local and remote\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit: $local_commit\\n\";\n        $output .= \"Remote commit: $remote_commit\\n\";\n        \n        # Check if branches have diverged\n        my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n        chomp($merge_base);\n        \n        my $diverged = 0;\n        if ($local_commit ne $remote_commit && $merge_base ne $local_commit && $merge_base ne $remote_commit) {\n            $diverged = 1;\n            $output .= \"Divergent branches detected - local and remote have different commits\\n\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                \"Divergent branches detected\");\n        }\n        \n        # Execute git pull with appropriate strategy\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Executing git pull with merge strategy\");\n        \n        # Use merge strategy to handle divergent branches safely\n        my $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n        $output .= \"Git pull output:\\n$pull_output\\n\";\n        \n        # Check if pull was successful or if we need to handle divergent branches\n        if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n            $success = 1;\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull completed successfully\");\n        } elsif ($pull_output =~ /divergent branches|Need to specify how to reconcile/) {\n            # Handle divergent branches with explicit merge strategy\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Handling divergent branches with merge strategy\");\n            \n            # Configure git to use merge strategy for divergent branches\n            my $config_output = `git -C ${\\$c->path_to()} config pull.rebase false 2>&1`;\n            $output .= \"Git config output: $config_output\\n\";\n            \n            # Try pull again with explicit merge strategy\n            $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n            $output .= \"Git pull (retry) output:\\n$pull_output\\n\";\n            \n            if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n                $success = 1;\n                $warning = \"Divergent branches were successfully merged. Local changes have been preserved.\";\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Divergent branches resolved successfully\");\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Git pull failed after handling divergent branches: $pull_output\");\n                return (0, $output, \"Git pull failed after attempting to resolve divergent branches. Manual intervention may be required.\");\n            }\n        } elsif ($pull_output =~ /CONFLICT/) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull resulted in conflicts: $pull_output\");\n            return (0, $output, \"Git pull resulted in merge conflicts. Manual resolution required.\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull failed: $pull_output\");\n            return (0, $output, \"Git pull failed. See output for details.\");\n        }\n        \n        # Apply stashed changes if needed\n        if ($has_local_changes) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Applying stashed changes\");\n            my $stash_apply_output = `git -C ${\\$c->path_to()} stash pop 2>&1`;\n            $output .= \"Applied stashed changes:\\n$stash_apply_output\\n\";\n            \n            # Check for conflicts\n            if ($stash_apply_output =~ /CONFLICT|error:/) {\n                $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Conflicts detected when applying stashed changes\");\n                $warning = \"Conflicts detected when applying stashed changes. You may need to manually resolve them.\";\n                \n                # Restore from backup\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Restoring theme_mappings.json from backup\");\n                copy($backup_path, $theme_mappings_path) or die \"Failed to restore from backup: $!\";\n                $output .= \"Restored theme_mappings.json from backup due to conflicts\\n\";\n            }\n        }\n        \n        # Final status check\n        my $final_status = `git -C ${\\$c->path_to()} status --porcelain 2>&1`;\n        if ($final_status) {\n            $output .= \"Final git status:\\n$final_status\\n\";\n            if ($final_status =~ /^UU|^AA|^DD/) {\n                $warning = \"There may be unresolved merge conflicts. Please check the repository status.\";\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Git pull operation completed\");\n            \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n            \"Error during git pull: $error\");\n        $output .= \"Error: $error\\n\";\n        return (0, $output, undef);\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Emergency Git operations for production servers\nsub git_emergency :Path('/admin/git_emergency') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Starting git_emergency action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_emergency', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request with specific action\n    if ($c->req->method eq 'POST') {\n        my $action = $c->req->param('action') || '';\n        my ($success, $output, $warning) = (0, '', undef);\n        \n        if ($action eq 'reset_hard') {\n            ($success, $output, $warning) = $self->execute_git_reset_hard($c);\n        } elsif ($action eq 'force_pull') {\n            ($success, $output, $warning) = $self->execute_git_force_pull($c);\n        } elsif ($action eq 'status_check') {\n            ($success, $output, $warning) = $self->execute_git_status_check($c);\n        }\n        \n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Operation completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Operation failed. See output for details.\",\n            warning_msg => $warning,\n            action_performed => $action\n        );\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_emergency.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Completed git_emergency action\");\n}\n\n# Execute Git status check for diagnostics\nsub execute_git_status_check {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 1;\n    \n    try {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Performing comprehensive Git status check\");\n        \n        # Get current branch\n        my $current_branch = `git -C ${\\$c->path_to()} branch --show-current 2>&1`;\n        chomp($current_branch);\n        $output .= \"Current branch: $current_branch\\n\\n\";\n        \n        # Get Git status\n        my $status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Git status:\\n$status\\n\\n\";\n        \n        # Get local and remote commit info\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit (HEAD): $local_commit\\n\";\n        $output .= \"Remote commit (origin/master): $remote_commit\\n\\n\";\n        \n        # Check if branches have diverged\n        if ($local_commit ne $remote_commit) {\n            my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n            chomp($merge_base);\n            \n            if ($merge_base ne $local_commit && $merge_base ne $remote_commit) {\n                $output .= \"⚠️  DIVERGENT BRANCHES DETECTED\\n\";\n                $output .= \"Merge base: $merge_base\\n\";\n                $warning = \"Branches have diverged. Local and remote have different commits.\";\n            } elsif ($merge_base eq $local_commit) {\n                $output .= \"✅ Local branch is behind remote (safe to pull)\\n\";\n            } else {\n                $output .= \"✅ Local branch is ahead of remote\\n\";\n            }\n        } else {\n            $output .= \"✅ Local and remote are in sync\\n\";\n        }\n        \n        # Get recent commits\n        my $recent_commits = `git -C ${\\$c->path_to()} log --oneline -5 2>&1`;\n        $output .= \"\\nRecent commits:\\n$recent_commits\\n\";\n        \n        # Check for uncommitted changes\n        my $uncommitted = `git -C ${\\$c->path_to()} diff --name-only 2>&1`;\n        if ($uncommitted) {\n            $output .= \"\\nUncommitted changes:\\n$uncommitted\\n\";\n        }\n        \n        # Check for untracked files\n        my $untracked = `git -C ${\\$c->path_to()} ls-files --others --exclude-standard 2>&1`;\n        if ($untracked) {\n            $output .= \"\\nUntracked files (first 10):\\n\";\n            my @untracked_lines = split(/\\n/, $untracked);\n            for my $i (0..9) {\n                last unless $untracked_lines[$i];\n                $output .= \"$untracked_lines[$i]\\n\";\n            }\n            if (@untracked_lines > 10) {\n                $output .= \"... and \" . (@untracked_lines - 10) . \" more files\\n\";\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Error during Git status check: $error\");\n        $output .= \"Error: $error\\n\";\n        $success = 0;\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git force pull (dangerous - use with caution)\nsub execute_git_force_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  FORCE PULL PERFORMED - Local changes may be lost!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Performing FORCE PULL - this may lose local changes\");\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Reset to remote state (DANGEROUS)\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard output:\\n$reset_output\\n\\n\";\n        \n        # Clean untracked files\n        my $clean_output = `git -C ${\\$c->path_to()} clean -fd 2>&1`;\n        $output .= \"Git clean output:\\n$clean_output\\n\\n\";\n        \n        # Verify final state\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Force pull completed - local changes were discarded\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Error during force pull: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git reset hard (very dangerous - use only in emergencies)\nsub execute_git_reset_hard {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  HARD RESET PERFORMED - All local changes have been discarded!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Performing HARD RESET - this will discard ALL local changes\");\n        \n        # Get current commit for reference\n        my $current_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($current_commit);\n        $output .= \"Current commit before reset: $current_commit\\n\\n\";\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes first\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Hard reset to remote master\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard origin/master output:\\n$reset_output\\n\\n\";\n        \n        # Get new commit for reference\n        my $new_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($new_commit);\n        $output .= \"New commit after reset: $new_commit\\n\\n\";\n        \n        # Final status\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Hard reset completed - repository is now at origin/master\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Error during hard reset: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# AJAX endpoint to sync table field to result file\nsub sync_table_to_result :Path('/admin/sync_table_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_table_to_result',\n        \"Starting sync_table_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    \n    unless ($table_name && $field_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, field_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Get table field info\n        my $table_field_info = $self->get_table_field_info($c, $table_name, $field_name, $database);\n        \n        # Update result file with table values\n        my $result = $self->update_result_field_from_table($c, $table_name, $field_name, $database, $table_field_info);\n        \n        $c->stash(json => {\n            success => 1,\n            message => \"Successfully synced table field '$field_name' to result file\",\n            field_info => $table_field_info\n        });\n        \n    } catch {\n        my $error = \"Error syncing table to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_table_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to sync result field to table\nsub sync_result_to_table :Path('/admin/sync_result_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_result_to_table',\n        \"Starting sync_result_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    my $sync_all = $json_data->{sync_all};\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # If field_name is not provided but sync_all is not true, return error\n    unless ($field_name || $sync_all) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Either field_name or sync_all must be provided' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        if ($sync_all) {\n            # Sync all fields from Result to table\n            my $result = $self->sync_all_fields_result_to_table($c, $table_name, $database);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced all fields from Result file to table '$table_name'\",\n                synced_fields => $result->{synced_fields} || [],\n                warnings => $result->{warnings} || []\n            });\n        } else {\n            # Sync single field\n            my $result_field_info = $self->get_result_field_info($c, $table_name, $field_name, $database);\n            my $result = $self->update_table_field_from_result($c, $table_name, $field_name, $database, $result_field_info);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced result field '$field_name' to table\",\n                field_info => $result_field_info\n            });\n        }\n        \n    } catch {\n        my $error = \"Error syncing result to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_result_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Debug endpoint to test field comparison\nsub debug_field_comparison :Path('/admin/debug_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name') || 'users';\n    my $database = $c->req->param('database') || 'ency';\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        $c->stash(json => {\n            success => 1,\n            table_name => $table_name,\n            database => $database,\n            comparison => $comparison,\n            mapping_keys => [keys %$result_table_mapping],\n            debug_info => {\n                has_result_file => $comparison->{has_result_file},\n                result_file_path => $comparison->{result_file_path},\n                fields_count => $comparison->{fields} ? scalar(keys %{$comparison->{fields}}) : 0\n            }\n        });\n        \n    } catch {\n        my $error = \"Debug field comparison error: $_\";\n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Helper method to get table field information\nsub get_table_field_info {\n    my ($self, $c, $table_name, $field_name, $database) = @_;\n    \n    my $model_name = $database eq 'ency' ? 'DBEncy' : 'DBForager';\n    my $schema = $c->model($model_name)->schema;\n    \n    # Get table information from database\n    my $dbh = $schema->storage->dbh;\n    my $sth = $dbh->column_info(undef, undef, $table_name, $field_name);\n    my $column_info = $sth->fetchrow_hashref;\n    \n    if (!$column_info) {\n        die \"Field '$field_name' not found in table '$table_name'\";\n    }\n    \n    return {\n        data_type => $column_info->{TYPE_NAME} || $column_info->{DATA_TYPE},\n        size => $column_info->{COLUMN_SIZE},\n        is_nullable => $column_info->{NULLABLE} ? 1 : 0,\n        is_auto_increment => $column_info->{IS_AUTOINCREMENT} ? 1 : 0,\n        default_value => $column_info->{COLUMN_DEF}\n    };\n}\n\n# Enhanced helper method to normalize data types for comparison\nsub normalize_data_type {\n    my ($self, $data_type) = @_;\n    \n    return ",
                    "language": "perl5"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1753560356139,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "codeBlock",
                        "attrs": {
                            "language": null
                        },
                        "content": [
                            {
                                "type": "text",
                                "text": "Caught exception in Comserv::Controller::Admin->schema_compare \"Can't use string (\"{\"success\":1,\"message\":\"Successf\"...) as a HASH ref while \"strict refs\" in use at /home/shanta/PycharmProjects/comserv2/Comserv/script/../lib/Comserv/Controller/Admin.pm line 1830.\"\nPlease catch the erros grasfully "
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "User AI Instruction",
                    "description": "User AI Instruction",
                    "uri": "zen-rules://user/custom",
                    "content": "read AI_DEVELOPMENT_GUIDELINES\nall code must be varifed by user"
                },
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "content": "\n\n# Comserv Project Information\n\n## Summary\nComserv is a comprehensive web-based system for managing business operations, projects, and documentation. It's built using the Catalyst Perl web framework and provides features for project management, theme customization, and user authentication.\n\n## Structure\n- `Comserv/`: Main application directory containing the core application code\n  - `lib/`: Application code and models\n  - `docs/`: Documentation files\n  - `root/`: Static assets and templates\n  - `script/`: Utility scripts for server management and database operations\n  - `t/`: Test files\n- `app/`: Additional application components\n- `data/`: Data files including pricing information\n- `proxmox/`: Proxmox VE integration components\n\n## Language & Runtime\n**Language**: Perl\n**Version**: 5.x (compatible with Perl 5.40.0)\n**Framework**: Catalyst 5.90130\n**Build System**: Module::Install\n**Package Manager**: CPAN\n\n## Dependencies\n**Main Dependencies**:\n- Catalyst::Runtime (5.90130)\n- Moose\n- DBIx::Class\n- Template (Template Toolkit)\n- JSON/JSON::MaybeXS\n- Log::Log4perl\n- DateTime\n- File::Slurp\n\n**Development Dependencies**:\n- Test::More (0.88+)\n- Test::Pod\n- Test::Pod::Coverage\n- Test::WWW::Mechanize::Catalyst\n- Catalyst::Devel\n\n## Build & Installation\n```bash\ncd Comserv\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n## Database\n**Type**: MySQL\n**Setup**: \n```bash\nmysql -u root -p < database_initialization_script.sql\n```\n**Schema Management**: DBIx::Class::Schema::Loader\n\n## Testing\n**Framework**: Test::More\n**Test Location**: Comserv/t/\n**Run Command**:\n```bash\ncd Comserv\nprove -l t/\n```\n\n## Server Execution\n**Development Server**:\n```bash\ncd Comserv\nscript/comserv_server.pl\n```\n**Production Deployment**:\n```bash\ncd Comserv\nscript/comserv_fastcgi.pl\n# or\nstarman --port 5000 --workers 5 comserv.psgi\n```\n\n## Authentication & Authorization\n- Session-based authentication\n- Role-based access control\n- Multiple authentication realms\n- Support for user groups and site-specific permissions\n\n## Features\n- Project management system\n- Theme customization system\n- Email integration\n- PDF generation\n- Proxmox VE integration\n- Multi-site support"
                },
                {
                    "name": "Database Development Standards and Best Practices",
                    "description": "Database Development Standards and Best Practices",
                    "uri": "zen-rules://repo/database-standards",
                    "content": "\n\n# Database Development Standards\n\n## Query Standards\n- **Table Aliases:** Use table aliases in all queries to avoid ambiguity (e.g., 'me.column_name')\n- **Error Handling:** Implement proper error handling with eval blocks and try/catch\n- **Parameterized Queries:** Use parameterized queries to prevent SQL injection\n\n## Schema Management\n- **Naming Conventions:** Follow naming conventions for tables, columns, and relationships\n- **Documentation:** Document schema changes and rationale for future reference\n- **Performance:** Regularly optimize database performance and indexes\n- **Version Control:** Use Git to track schema changes with proper tagging\n- **Backup Protocol:** Always backup database before making schema changes\n\n## Model Standards (DBIx::Class)\n- **Result Classes:** Located in `/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema/Ency/Result/`\n- **Relationships:** Define proper relationships between tables\n- **Validation:** Implement data validation in model classes\n\n## Configuration Priority\n- **Primary:** ZeroTier production server (172.30.161.222) - works from any network\n- **Secondary:** Local network production server (192.168.1.198) - home/office only\n- **Tertiary:** localhost MySQL (development)\n- **Fallback:** SQLite (offline mode)\n\n## Security Protocols\n- **Input Validation:** Validate all user inputs before database operations\n- **Access Controls:** Implement proper access controls based on user roles\n- **Regular Reviews:** Regularly review and update security protocols"
                },
                {
                    "name": "AI Behavior Enforcement Rules for Zencoder",
                    "description": "AI Behavior Enforcement Rules for Zencoder",
                    "uri": "zen-rules://repo/ai-behavior-enforcement",
                    "content": "\n\n# AI Behavior Enforcement Rules\n\n## MANDATORY PROMPT TRACKING\n**CURRENT PROMPT:** This is prompt #[X] of 5 maximum allowed prompts.\n\n### Prompt Counter Protocol\n- **Start Each Response:** Begin every response with current prompt count\n- **Track Internally:** Keep running count throughout conversation\n- **Warn at Prompt 4:** Alert user that next prompt will trigger handoff\n- **Stop at Prompt 5:** Refuse to continue, provide handoff documentation\n\n## MANDATORY APPROVAL WORKFLOW\n\n### Before ANY Code Changes\n1. **STOP:** Do not modify any files without explicit user approval\n2. **PRESENT:** Show exactly what will be changed using the standard format\n3. **WAIT:** Wait for explicit approval (\"yes\", \"approved\", \"apply changes\")\n4. **CONFIRM:** Acknowledge approval before proceeding\n5. **EXECUTE:** Apply changes only after confirmation\n\n### Standard Change Presentation\n```\n🔄 PROPOSED CHANGE TO: [filename]\n📝 CHANGE TYPE: [Addition/Modification/Deletion]\n📋 DESCRIPTION: [what this accomplishes]\n\n❌ CURRENT CODE:\n[existing code or \"N/A\"]\n\n✅ NEW CODE:\n[proposed code or \"DELETED\"]\n\n💡 REASON: [why needed]\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed\n```\n\n## VIOLATION CONSEQUENCES\n- **Prompt Limit Exceeded:** Immediate session termination with handoff\n- **Unapproved Changes:** Acknowledge violation and request approval retroactively\n- **Missing Counter:** Add prompt counter to current response\n\n## HANDOFF TEMPLATE (Use on 5th Prompt)\n```\n🚨 PROMPT LIMIT REACHED - HANDOFF REQUIRED\n\n📊 SESSION SUMMARY:\n- Prompts Used: 5/5\n- Files Modified: [list]\n- Tasks Completed: [list]\n- Tasks Remaining: [list]\n\n🔄 HANDOFF PROMPT FOR NEXT AI:\n\"Continue working on [project/task]. Read development-guidelines.md and ai-behavior-enforcement.md first. \nCurrent context: [brief context]\nFiles being worked on: [list]\nNext steps needed: [specific actions]\"\n\n📚 REQUIRED READING FOR NEXT AI:\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- [any other relevant docs]\n\n✅ DOCUMENTATION UPDATED: [what was recorded]\n```\n\n## EMERGENCY PROTOCOLS\n- **User Says \"Stop\":** Immediately cease all activities\n- **User Says \"Revert\":** Provide instructions for undoing changes\n- **User Says \"Handoff\":** Immediately provide handoff documentation"
                },
                {
                    "name": "Template Toolkit Standards and Requirements",
                    "description": "Template Toolkit Standards and Requirements",
                    "uri": "zen-rules://repo/template-standards",
                    "content": "\n\n# Template Toolkit (.tt) Standards\n\n## Required PageVersion Header Format\nAll .tt files must include this exact format:\n```\n[% META title = 'Page Title Here' %]\n[% PageVersion = 'relative/path/filename.tt,v 0.01 YYYY/MM/DD author Exp author ' %]\n[% IF c.session.debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n```\n\n## Template Standards\n- **Theme Compliance:** Use theme system variables for styling - NO page-specific CSS\n- **Debug Mode:** Include debug mode blocks for development visibility\n- **Responsive Design:** Implement mobile-first responsive design patterns\n- **HTML Structure:** Use proper semantic HTML structure\n- **Template Toolkit:** Follow Template Toolkit best practices\n\n## Navigation Integration\nWhen working with navigation templates:\n- **Main Navigation:** Include via `/Navigation/navigation.tt`\n- **Admin Menu:** Use `/Navigation/admintopmenu.tt` for admin-only sections\n- **Dropdown Menus:** Reference existing dropdown templates in `/Navigation/` directory\n\n## Documentation File Rules - CRITICAL\n- **File Format:** ONLY `.tt` files for application documentation - NO `.md` files\n- **EXISTING FILES FIRST:** ALWAYS search for and use existing files before creating new ones\n- **Naming Consistency:** Use same file names across AI sessions to prevent content loss\n- **Content Priority:** Always improve existing files rather than creating new ones\n- **Role-Based Access:** Respect existing Documentation/index.tt role-based structure\n- **Directory Consolidation:** Use established directory structure - don't create new directories\n\n## File Creation Protocol\n1. **Search First:** Use file search tools to find existing similar files\n2. **Check Directory:** Look at existing directory structure in target location\n3. **Ask User:** If multiple similar files exist, ask which should be updated\n4. **Update Existing:** Improve existing files rather than creating duplicates"
                },
                {
                    "name": "Debugging and Troubleshooting Protocols",
                    "description": "Debugging and Troubleshooting Protocols",
                    "uri": "zen-rules://repo/debugging-protocols",
                    "content": "\n\n# Debugging Protocols\n\n## Log Analysis Priority\n1. **Application Logs:** Check `/home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log` first\n2. **Error Logs:** Look for recent errors and stack traces\n3. **Debug Mode:** Enable debug mode in session for detailed output\n\n## Common Debugging Steps\n1. **Reproduce Issue:** Ensure issue is reproducible\n2. **Check Recent Changes:** Review recent code modifications\n3. **Verify Dependencies:** Ensure all required modules are installed\n4. **Database Connectivity:** Test database connections\n5. **Permission Issues:** Check file and directory permissions\n\n## Testing Protocol\n- **Unit Tests:** Run relevant unit tests first\n- **Integration Tests:** Test full workflow\n- **Browser Testing:** Always test in actual browser environment\n- **Log Monitoring:** Monitor logs during testing\n\n## Performance Issues\n- **Database Queries:** Check for slow queries\n- **Memory Usage:** Monitor memory consumption\n- **Template Rendering:** Check template compilation times\n- **Network Latency:** Consider network-related delays"
                }
            ]
        },
        {
            "id": "5fcde671-ca8c-428a-9fd4-e5f7dbac88e4",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "**CURRENT PROMPT:** This is prompt #4 of 5 maximum allowed prompts.\n\n⚠️ **WARNING:** This is prompt 4 of 5. The next prompt will trigger a handoff to another AI.\n\nPerfect! The error message shows exactly what's happening. The issue is that `$config` is actually a JSON string `{\"success\":1,\"message\":\"Successf\"...}` instead of a parsed hash reference. This means the problem is in the `get_all_database_configs` method - it's returning individual configs as JSON strings rather than parsed hash references.\n\nLet me fix this by adding proper JSON parsing for each individual config and graceful error handling:\n\n🔄 PROPOSED CHANGE TO: /home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm\n📝 CHANGE TYPE: Modification  \n📋 DESCRIPTION: Add graceful error handling and JSON parsing for individual database configs\n\n```diff\n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Debug: Check individual config\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n            \"Processing config for $db_key, type: \" . ref($config));\n        \n-       # Ensure config is a hash reference\n-       unless (ref($config) eq 'HASH') {\n-           $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n-               \"Config for $db_key is not a hash reference: \" . ref($config));\n-           next;\n-       }\n+       # Handle config that might be a JSON string\n+       if (!ref($config)) {\n+           # Try to parse as JSON if it's a string\n+           eval {\n+               $config = decode_json($config);\n+           };\n+           if ($@) {\n+               $self->logging->log_with_details($c, 'error', __FILE__,',\n+                   \"Failed to parse JSON config for $db_key: $@\");\n+               next;\n+           }\n+       }\n+       \n+       # Ensure config is now a hash reference\n+       unless (ref($config) eq 'HASH') {\n+           $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+               \"Config for $db_key is not a hash reference after parsing: \" . ref($config));\n+           next;\n+       }\n        \n-       # Test connection to determine availability\n-       my $connection_test = $self->test_database_connection($c, $db_key, $config);\n+       # Test connection to determine availability with error handling\n+       my $connection_ = $self->test_database_connection($c, $db_key, $config);\n+       };\n+       if ($@) {\n+           $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+               \"Error $@\");\n+           $ testing connection for $db_key:\n+               connected => 0,\n+               error test failed: $@\", {\n-           name => $db_key,\n-           display_comparison->{databases}->{$db_key} =_name => $config->{description} || $db_key,\n-           type => $config->{db_type} || 'unknown',\n-           priority => $config->{priority} || 999,\n-           available => $connection_test->{connected},\n-           error => $connection_test->{error},\n-           host => $config->{host} || 'localhost',\n-           database => $config->{database} || '',\n-           is_current => ($db_key eq $current_backend),\n-           table_count => 0,\n-           table_comparisons => [], # Will be loaded on demand via AJAX\n-           loaded => 0 # Flag to indicate if comparison data has been loaded\n-       };\n+       # Safely build database comparison entry\n+       eval {\n+           $database_comparison->{databases}->{$db_key} = {\n+               name => $db_key,\n+'unknown',\n+               priority => $config->{priority} || 999,\n+               available => $connection_test->{connected} || 0,\n+               error => $connection_test->{error} || '',\n+               host => $config->{host} || 'localhost',\n+               database => $config->{database} || '',\n+               is_current => ($db_key eq $current_backend),\n+               table_count => 0,\n+               table_comparisons => [], # Will be loaded on demand via AJAX\n+               loaded => 0 # Flag to indicate if comparison data has been loaded\n+           };\n+       };\n+       if ($@) {\n+           $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+               \"Error building database comparison entry for $db_key: $@\");\n+           next;\n+       }\n```\n\n💡 REASON: The error shows that `$config` is a JSON string instead of a parsed hash. This adds JSON parsing for individual configs and wraps all operations in eval blocks for graceful error handling.\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "f30dc1f0-d95b-4de0-9753-d8845bf95f56"
            },
            "createdAt": 1753560358012,
            "isInternal": false
        },
        {
            "id": "f7dd84ba-c8a0-4d5f-a56c-a530c6122ad5",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "yes"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                    "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "\npackage Comserv::Controller::Admin;\n\n\nuse Moose;\nuse namespace::autoclean;\nuse Comserv::Util::Logging;\nuse Data::Dumper;\nuse JSON qw(decode_json);\nuse Try::Tiny;\nuse DBI;\nuse MIME::Base64;\nuse File::Slurp qw(read_file write_file);\nuse File::Basename qw(dirname);\nuse File::Path qw(make_path);\nuse File::Copy;\nuse File::Spec;\nuse Digest::SHA qw(sha256_hex);\nuse File::Find;\nuse Module::Load;\nuse Cwd;\n\nBEGIN { extends 'Catalyst::Controller'; }\n\n# Returns an instance of the logging utility\nsub logging {\n    my ($self) = @_;\n    return Comserv::Util::Logging->instance();\n}\n\n# Begin method to check if the user has admin role\nsub begin : Private {\n    my ($self, $c) = @_;\n\n     $c->stash->{is_admin} = 1;\n    # Add detailed logging\n    my $username = ($c->user_exists && $c->user) ? $c->user->username : ($c->session->{username} || 'Guest');\n    $username = 'Shanta';\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'begin',\n        \"Admin controller begin method called by user: $username\");\n    \n    # Initialize debug_msg array if it doesn't exist and debug mode is enabled\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        \n        # Add the debug message to the array\n        push @{$c->stash->{debug_msg}}, \"Admin controller loaded successfully\";\n    }\n    \n    return 1; # Allow the request to proceed\n}\n\n# Base method for chained actions\nsub base :Chained('/') :PathPart('admin') :CaptureArgs(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Starting Admin base action\");\n    \n    # Common setup for all admin pages\n    $c->stash(section => 'admin');\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access granted to user Shanta (bypass role check)\");\n        return 1;\n    }\n    \n    # Check if the user has admin role\n    my $has_admin_role = 1;\n    \n    # First check if user exists\n    if ($c->user_exists) {\n        # Get roles from session\n        my $roles = $c->session->{roles};\n\n        # Log the roles for debugging\n        my $roles_debug = 'none';\n        if (defined $roles) {\n            if (ref($roles) eq 'ARRAY') {\n                $roles_debug = join(', ', @$roles);\n                \n                # Check if 'admin' is in the roles array\n                foreach my $role (@$roles) {\n                    if (lc($role) eq 'admin') {\n                        $has_admin_role = 1;\n                        last;\n                    }\n                }\n            } elsif (!ref($roles)) {\n                $roles_debug = $roles;\n                # Check if roles string contains 'admin'\n                if ($roles =~ /\\badmin\\b/i) {\n                    $has_admin_role = 1;\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n            \"Admin access check - User: \" . $c->session->{username} . \", Roles: $roles_debug, Has admin: \" . ($has_admin_role ? 'Yes' : 'No'));\n    }\n    $has_admin_role = 1;\n    unless ($has_admin_role) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'base', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return 0;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'base', \n        \"Completed Admin base action\");\n     $has_admin_role = 1;\n\n    return 1;\n}\n\n# Admin dashboard\nsub index :Path :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Starting Admin index action\");\n    \n    # Debug session information\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Session debug - Username: \" . ($c->session->{username} || 'none') . \n        \", User ID: \" . ($c->session->{user_id} || 'none') . \n        \", Roles: \" . (ref($c->session->{roles}) eq 'ARRAY' ? join(',', @{$c->session->{roles}}) : ($c->session->{roles} || 'none')));\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"user_exists: \" . ($c->user_exists ? 'true' : 'false') . \n        \", check_user_roles('admin'): \" . ($c->check_user_roles('admin') ? 'true' : 'false'));\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'index', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system stats\n    my $stats = $self->get_system_stats($c);\n    \n    # Get recent user activity\n    my $recent_activity = $self->get_recent_activity($c);\n    \n    # Get system notifications\n    my $notifications = $self->get_system_notifications($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller index view - Template: admin/index.tt\";\n    }\n    \n    # Check if user has CSC backup access\n    my $has_csc_access = $self->check_csc_access($c);\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/index.tt',\n        stats => $stats,\n        recent_activity => $recent_activity,\n        notifications => $notifications,\n        is_admin => 1,  # User has already passed admin check to get here\n        has_csc_access => $has_csc_access\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', \n        \"Completed Admin index action\");\n}\n\n# Get system statistics for the admin dashboard\nsub get_system_stats {\n    my ($self, $c) = @_;\n    \n    my $stats = {\n        user_count => 0,\n        content_count => 0,\n        comment_count => 0,\n        disk_usage => '0 MB',\n        db_size => '0 MB',\n        uptime => '0 days',\n    };\n    \n    # Try to get user count\n    eval {\n        $stats->{user_count} = $c->model('DBEncy::User')->count();\n    };\n    \n    # Try to get content count (pages, posts, etc.)\n    eval {\n        $stats->{content_count} = $c->model('DBEncy::Content')->count();\n    };\n    \n    # Try to get comment count\n    eval {\n        $stats->{comment_count} = $c->model('DBEncy::Comment')->count();\n    };\n    \n    # Get disk usage (this is a simplified example)\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/) {\n            $stats->{disk_usage} = \"$1%\";\n        }\n    };\n    \n    # Get database size (this would need to be customized for your DB)\n    eval {\n        # This is just a placeholder - you'd need to implement actual DB size checking\n        $stats->{db_size} = \"Unknown\";\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        if ($uptime_output =~ /up\\s+(.*?),\\s+\\d+\\s+users/) {\n            $stats->{uptime} = $1;\n        }\n    };\n    \n    return $stats;\n}\n\n# Get recent user activity for the admin dashboard\nsub get_recent_activity {\n    my ($self, $c) = @_;\n    \n    my @activity = ();\n    \n    # Try to get recent logins\n    eval {\n        my @logins = $c->model('DBEncy::UserLogin')->search(\n            {},\n            {\n                order_by => { -desc => 'login_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $login (@logins) {\n            push @activity, {\n                type => 'login',\n                user => $login->user->username,\n                time => $login->login_time,\n                details => $login->ip_address\n            };\n        }\n    };\n    \n    # Try to get recent content changes\n    eval {\n        my @changes = $c->model('DBEncy::ContentHistory')->search(\n            {},\n            {\n                order_by => { -desc => 'change_time' },\n                rows => 5\n            }\n        );\n        \n        foreach my $change (@changes) {\n            push @activity, {\n                type => 'content',\n                user => $change->user->username,\n                time => $change->change_time,\n                details => \"Updated \" . $change->content->title\n            };\n        }\n    };\n    \n    # Sort all activity by time (most recent first)\n    @activity = sort { $b->{time} cmp $a->{time} } @activity;\n    \n    # Limit to 10 items\n    if (scalar(@activity) > 10) {\n        @activity = @activity[0..9];\n    }\n    \n    return \\@activity;\n}\n\n# Get system notifications for the admin dashboard\nsub get_system_notifications {\n    my ($self, $c) = @_;\n    \n    my @notifications = ();\n    \n    # Check for pending user registrations\n    eval {\n        my $pending_count = $c->model('DBEncy::User')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'warning',\n                message => \"$pending_count pending user registration(s) require approval\",\n                link => $c->uri_for('/admin/users', { filter => 'pending' })\n            };\n        }\n    };\n    \n    # Check for low disk space\n    eval {\n        my $df_output = `df -h . | tail -1`;\n        if ($df_output =~ /(\\d+)%/ && $1 > 90) {\n            push @notifications, {\n                type => 'danger',\n                message => \"Disk space is critically low ($1% used)\",\n                link => undef\n            };\n        }\n        elsif ($df_output =~ /(\\d+)%/ && $1 > 80) {\n            push @notifications, {\n                type => 'warning',\n                message => \"Disk space is running low ($1% used)\",\n                link => undef\n            };\n        }\n    };\n    \n    # Check for pending comments\n    eval {\n        my $pending_count = $c->model('DBEncy::Comment')->search({ status => 'pending' })->count();\n        if ($pending_count > 0) {\n            push @notifications, {\n                type => 'info',\n                message => \"$pending_count pending comment(s) require moderation\",\n                link => $c->uri_for('/admin/comments', { filter => 'pending' })\n            };\n        }\n    };\n    \n    return \\@notifications;\n}\n\n# Admin users management\nsub users :Path('/admin/users') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Starting users action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'users', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $users_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'active') {\n        $search_conditions->{status} = 'active';\n    }\n    elsif ($filter eq 'pending') {\n        $search_conditions->{status} = 'pending';\n    }\n    elsif ($filter eq 'disabled') {\n        $search_conditions->{status} = 'disabled';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { username => { 'like', \"%$search%\" } },\n            { email => { 'like', \"%$search%\" } },\n            { first_name => { 'like', \"%$search%\" } },\n            { last_name => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get users from database\n    my $users_rs = $c->model('DBEncy::User')->search(\n        $search_conditions,\n        {\n            order_by => { -asc => 'username' },\n            page => $page,\n            rows => $users_per_page\n        }\n    );\n    \n    # Get user roles\n    my %user_roles = ();\n    eval {\n        my @user_role_records = $c->model('DBEncy::UserRole')->search({});\n        foreach my $record (@user_role_records) {\n            push @{$user_roles{$record->user_id}}, $record->role->role;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller users view - Template: admin/users.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"User count: \" . $users_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/users.tt',\n        users => [ $users_rs->all ],\n        user_roles => \\%user_roles,\n        filter => $filter,\n        search => $search,\n        pager => $users_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'users', \n        \"Completed users action\");\n}\n\n# Admin content management\nsub content :Path('/admin/content') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Starting content action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'content', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get filter parameter\n    my $filter = $c->req->param('filter') || 'all';\n    \n    # Get search parameter\n    my $search = $c->req->param('search') || '';\n    \n    # Get page parameter\n    my $page = $c->req->param('page') || 1;\n    my $items_per_page = 20;\n    \n    # Build search conditions\n    my $search_conditions = {};\n    \n    # Apply filter\n    if ($filter eq 'published') {\n        $search_conditions->{status} = 'published';\n    }\n    elsif ($filter eq 'draft') {\n        $search_conditions->{status} = 'draft';\n    }\n    elsif ($filter eq 'archived') {\n        $search_conditions->{status} = 'archived';\n    }\n    \n    # Apply search\n    if ($search) {\n        $search_conditions->{'-or'} = [\n            { title => { 'like', \"%$search%\" } },\n            { content => { 'like', \"%$search%\" } },\n            { 'author.username' => { 'like', \"%$search%\" } }\n        ];\n    }\n    \n    # Get content from database\n    my $content_rs = $c->model('DBEncy::Content')->search(\n        $search_conditions,\n        {\n            join => 'author',\n            order_by => { -desc => 'created_at' },\n            page => $page,\n            rows => $items_per_page\n        }\n    );\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller content view - Template: admin/content.tt\";\n        push @{$c->stash->{debug_msg}}, \"Filter: $filter, Search: $search, Page: $page\";\n        push @{$c->stash->{debug_msg}}, \"Content count: \" . $content_rs->pager->total_entries;\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/content.tt',\n        content_items => [ $content_rs->all ],\n        filter => $filter,\n        search => $search,\n        pager => $content_rs->pager\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'content', \n        \"Completed content action\");\n}\n\n# Admin settings\nsub settings :Path('/admin/settings') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Starting settings action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Handle form submission\n    if ($c->req->method eq 'POST') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n            \"Processing settings form submission\");\n        \n        # Get form parameters\n        my $site_name = $c->req->param('site_name');\n        my $site_description = $c->req->param('site_description');\n        my $admin_email = $c->req->param('admin_email');\n        my $items_per_page = $c->req->param('items_per_page');\n        my $allow_comments = $c->req->param('allow_comments') ? 1 : 0;\n        my $moderate_comments = $c->req->param('moderate_comments') ? 1 : 0;\n        my $theme = $c->req->param('theme');\n        \n        # Validate inputs\n        my $errors = {};\n        \n        unless ($site_name) {\n            $errors->{site_name} = \"Site name is required\";\n        }\n        \n        unless ($admin_email && $admin_email =~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) {\n            $errors->{admin_email} = \"Valid admin email is required\";\n        }\n        \n        unless ($items_per_page && $items_per_page =~ /^\\d+$/ && $items_per_page > 0) {\n            $errors->{items_per_page} = \"Items per page must be a positive number\";\n        }\n        \n        # If there are validation errors, re-display the form\n        if (%$errors) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'settings', \n                \"Validation errors in settings form\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                errors => $errors,\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n        \n        # Save settings to database\n        eval {\n            # Update site_name setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_name',\n                    value => $site_name\n                }\n            );\n            \n            # Update site_description setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'site_description',\n                    value => $site_description\n                }\n            );\n            \n            # Update admin_email setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'admin_email',\n                    value => $admin_email\n                }\n            );\n            \n            # Update items_per_page setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'items_per_page',\n                    value => $items_per_page\n                }\n            );\n            \n            # Update allow_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'allow_comments',\n                    value => $allow_comments\n                }\n            );\n            \n            # Update moderate_comments setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'moderate_comments',\n                    value => $moderate_comments\n                }\n            );\n            \n            # Update theme setting\n            $c->model('DBEncy::Setting')->update_or_create(\n                {\n                    name => 'theme',\n                    value => $theme\n                }\n            );\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n                \"Settings updated successfully\");\n            \n            # Set success message and redirect\n            $c->flash->{success_msg} = \"Settings updated successfully\";\n            $c->response->redirect($c->uri_for('/admin/settings'));\n            return;\n        };\n        \n        # Handle database errors\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'settings', \n                \"Error updating settings: $@\");\n            \n            $c->stash(\n                template => 'admin/settings.tt',\n                error_msg => \"Error updating settings: $@\",\n                form_data => {\n                    site_name => $site_name,\n                    site_description => $site_description,\n                    admin_email => $admin_email,\n                    items_per_page => $items_per_page,\n                    allow_comments => $allow_comments,\n                    moderate_comments => $moderate_comments,\n                    theme => $theme\n                }\n            );\n            return;\n        }\n    }\n    \n    # Get current settings from database\n    my %settings = ();\n    eval {\n        my @setting_records = $c->model('DBEncy::Setting')->search({});\n        foreach my $record (@setting_records) {\n            $settings{$record->name} = $record->value;\n        }\n    };\n    \n    # Get available themes\n    my @themes = ('default', 'dark', 'light', 'custom');\n    eval {\n        my $themes_dir = $c->path_to('root', 'static', 'themes');\n        if (-d $themes_dir) {\n            opendir(my $dh, $themes_dir) or die \"Cannot open themes directory: $!\";\n            @themes = grep { -d \"$themes_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller settings view - Template: admin/settings.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available themes: \" . join(', ', @themes);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/settings.tt',\n        settings => \\%settings,\n        themes => \\@themes\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'settings', \n        \"Completed settings action\");\n}\n\n# Admin system information\nsub system_info :Path('/admin/system_info') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Starting system_info action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'system_info', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get system information\n    my $system_info = $self->get_detailed_system_info($c);\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller system_info view - Template: admin/system_info.tt\";\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/system_info.tt',\n        system_info => $system_info\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'system_info', \n        \"Completed system_info action\");\n}\n\n# Get detailed system information\nsub get_detailed_system_info {\n    my ($self, $c) = @_;\n    \n    my $info = {\n        perl_version => $],\n        catalyst_version => $Catalyst::VERSION,\n        server_software => $ENV{SERVER_SOFTWARE} || 'Unknown',\n        server_name => $ENV{SERVER_NAME} || 'Unknown',\n        server_protocol => $ENV{SERVER_PROTOCOL} || 'Unknown',\n        server_admin => $ENV{SERVER_ADMIN} || 'Unknown',\n        server_port => $ENV{SERVER_PORT} || 'Unknown',\n        document_root => $ENV{DOCUMENT_ROOT} || 'Unknown',\n        script_name => $ENV{SCRIPT_NAME} || 'Unknown',\n        request_uri => $ENV{REQUEST_URI} || 'Unknown',\n        request_method => $ENV{REQUEST_METHOD} || 'Unknown',\n        query_string => $ENV{QUERY_STRING} || 'Unknown',\n        remote_addr => $ENV{REMOTE_ADDR} || 'Unknown',\n        remote_port => $ENV{REMOTE_PORT} || 'Unknown',\n        remote_user => $ENV{REMOTE_USER} || 'Unknown',\n        http_user_agent => $ENV{HTTP_USER_AGENT} || 'Unknown',\n        http_referer => $ENV{HTTP_REFERER} || 'Unknown',\n        http_accept => $ENV{HTTP_ACCEPT} || 'Unknown',\n        http_accept_language => $ENV{HTTP_ACCEPT_LANGUAGE} || 'Unknown',\n        http_accept_encoding => $ENV{HTTP_ACCEPT_ENCODING} || 'Unknown',\n        http_connection => $ENV{HTTP_CONNECTION} || 'Unknown',\n        http_host => $ENV{HTTP_HOST} || 'Unknown',\n        https => $ENV{HTTPS} || 'Off',\n        gateway_interface => $ENV{GATEWAY_INTERFACE} || 'Unknown',\n        server_signature => $ENV{SERVER_SIGNATURE} || 'Unknown',\n        server_addr => $ENV{SERVER_ADDR} || 'Unknown',\n        path => $ENV{PATH} || 'Unknown',\n        system_uptime => 'Unknown',\n        system_load => 'Unknown',\n        memory_usage => 'Unknown',\n        disk_usage => 'Unknown',\n        database_info => 'Unknown',\n        installed_modules => []\n    };\n    \n    # Get system uptime\n    eval {\n        my $uptime_output = `uptime`;\n        chomp($uptime_output);\n        $info->{system_uptime} = $uptime_output;\n        \n        if ($uptime_output =~ /load average: ([\\d.]+), ([\\d.]+), ([\\d.]+)/) {\n            $info->{system_load} = \"$1 (1 min), $2 (5 min), $3 (15 min)\";\n        }\n    };\n    \n    # Get memory usage\n    eval {\n        my $free_output = `free -h`;\n        my @lines = split(/\\n/, $free_output);\n        if ($lines[1] =~ /Mem:\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{memory_usage} = \"Total: $1, Used: $2, Free: $3\";\n        }\n    };\n    \n    # Get disk usage\n    eval {\n        my $df_output = `df -h .`;\n        my @lines = split(/\\n/, $df_output);\n        if ($lines[1] =~ /(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/) {\n            $info->{disk_usage} = \"Filesystem: $1, Size: $2, Used: $3, Avail: $4, Use%: $5, Mounted on: $6\";\n        }\n    };\n    \n    # Get database information\n    eval {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $db_info = $dbh->get_info(17); # SQL_DBMS_NAME\n        my $db_version = $dbh->get_info(18); # SQL_DBMS_VER\n        $info->{database_info} = \"$db_info version $db_version\";\n    };\n    \n    # Get installed Perl modules\n    eval {\n        my @modules = ();\n        foreach my $module (sort keys %INC) {\n            next unless $module =~ /\\.pm$/;\n            $module =~ s/\\//::/g;\n            $module =~ s/\\.pm$//;\n            \n            my $version = eval \"\\$${module}::VERSION\" || 'Unknown';\n            push @modules, { name => $module, version => $version };\n        }\n        $info->{installed_modules} = \\@modules;\n    };\n    \n    return $info;\n}\n\n# Admin logs viewer\nsub logs :Path('/admin/logs') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs', \n        \"Starting logs action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'logs', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get log file parameter\n    my $log_file = $c->req->param('file') || 'catalyst.log';\n    \n    # Get available log files\n    my @log_files = ();\n    eval {\n        my $logs_dir = $c->path_to('logs');\n        if (-d $logs_dir) {\n            opendir(my $dh, $logs_dir) or die \"Cannot open logs directory: $!\";\n            @log_files = grep { -f \"$logs_dir/$_\" && $_ !~ /^\\./ } readdir($dh);\n            closedir($dh);\n        }\n    };\n    \n    # Get log content\n    my $log_content = '';\n    eval {\n        my $log_path = $c->path_to('logs', $log_file);\n        if (-f $log_path) {\n            # Get the last 1000 lines of the log file\n            my $tail_output = `tail -n 1000 $log_path`;\n            $log_content = $tail_output;\n        }\n    };\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller logs view - Template: admin/logs.tt\";\n        push @{$c->stash->{debug_msg}}, \"Log file: $log_file\";\n        push @{$c->stash->{debug_msg}}, \"Available log files: \" . join(', ', @log_files);\n    }\n    \n    # Pass data to the template\n    $c->stash(\n        template => 'admin/logs.tt',\n        log_file => $log_file,\n        log_files => \\@log_files,\n        log_content => $log_content\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logs',\n        \"Completed logs action\");\n}\n\n# Add missing field from table to result file\nsub add_field_to_result :Path('/admin/add_field_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_result', \n        \"Starting add_field_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the table\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{table}) {\n            die \"Field '$field_name' not found in table '$table_name'\";\n        }\n        \n        my $field_def = $field_data->{table};\n        \n        # Add field to result file\n        my $success = $self->add_field_to_result_file($c, $comparison->{result_file_path}, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to result file successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to result file\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Add missing field from result file to table\nsub add_field_to_table :Path('/admin/add_field_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table', \n        \"Starting add_field_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    my $field_name = $c->req->param('field_name');\n    \n    unless ($table_name && $database && $field_name) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Use the native comparison method to get field definitions\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        # Debug: Check if our specific table is in the mapping\n        my $table_key = lc($table_name);\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Looking for table '$table_key' in mapping with \" . scalar(keys %$result_table_mapping) . \" entries\");\n        \n        if (exists $result_table_mapping->{$table_key}) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n                \"Found mapping for '$table_key': \" . $result_table_mapping->{$table_key}->{result_name});\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table',\n                \"No mapping found for '$table_key'. Available keys: \" . join(', ', sort keys %$result_table_mapping));\n        }\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Debug: Log the comparison result\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_field_to_table',\n            \"Comparison result: has_result_file=\" . ($comparison->{has_result_file} ? 'YES' : 'NO') . \n            \", result_file_path=\" . ($comparison->{result_file_path} || 'NONE'));\n        \n        unless ($comparison->{has_result_file}) {\n            die \"No result file found for table '$table_name'\";\n        }\n        \n        # Get the field definition from the result file\n        my $field_data = $comparison->{fields}->{$field_name};\n        unless ($field_data && $field_data->{result}) {\n            die \"Field '$field_name' not found in result file\";\n        }\n        \n        my $field_def = $field_data->{result};\n        \n        # Validate field definition has required attributes\n        my $validation_errors = $self->validate_field_definition($field_def, $field_name);\n        if (@$validation_errors) {\n            die \"Field validation errors: \" . join(', ', @$validation_errors);\n        }\n        \n        # Add field to database table\n        my $success = $self->add_field_to_database_table($c, $table_name, $database, $field_name, $field_def);\n        \n        if ($success) {\n            $c->stash(json => { \n                success => 1, \n                message => \"Field '$field_name' added to table '$table_name' successfully\",\n                field_name => $field_name,\n                table_name => $table_name\n            });\n        } else {\n            die \"Failed to add field to database table\";\n        }\n        \n    } catch {\n        my $error = \"Error adding field to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'add_field_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Admin backup and restore\nsub backup :Path('/admin/backup') :Args(0) {\n    my ($self, $c) = @_;\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Starting backup action\");\n\n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n            \"Access denied: User does not have CSC backup access\");\n\n        $c->flash->{error_msg} = \"You need CSC administrator privileges to access backup functionality.\";\n        $c->response->redirect($c->uri_for('/admin'));\n        return;\n    }\n\n    # Backup creation is now handled by the separate 'create' action method\n\n    # Handle backup restoration\n    if ($c->req->method eq 'POST' && $c->req->param('action') eq 'restore_backup') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Restoring backup\");\n\n        my $backup_file = $c->req->param('backup_file');\n\n        unless ($backup_file) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"No backup file selected for restoration\");\n\n            $c->flash->{error_msg} = \"No backup file selected for restoration\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Validate backup file\n        my $backup_path = $c->path_to('backups', $backup_file);\n        unless (-f $backup_path) {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'backup',\n                \"Backup file not found: $backup_file\");\n\n            $c->flash->{error_msg} = \"Backup file not found: $backup_file\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Create temporary directory for restoration\n        my $temp_dir = $c->path_to('tmp', 'restore_' . time());\n        eval { make_path($temp_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error creating temporary directory: $@\");\n\n            $c->flash->{error_msg} = \"Error creating temporary directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Extract backup to temporary directory\n        my $extract_command = \"tar -xzf $backup_path -C $temp_dir\";\n        my $extract_result = system($extract_command);\n\n        if ($extract_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error extracting backup: $!\");\n\n            $c->flash->{error_msg} = \"Error extracting backup: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Restore database if database dump exists\n        if (-f \"$temp_dir/db_dump.sql\") {\n            # This is a simplified example - you'd need to customize for your database\n            my $db_restore_command = \"mysql -u username -p'password' database_name < $temp_dir/db_dump.sql\";\n            my $db_restore_result = system($db_restore_command);\n\n            if ($db_restore_result != 0) {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                    \"Error restoring database: $!\");\n\n                $c->flash->{error_msg} = \"Error restoring database: $!\";\n                $c->response->redirect($c->uri_for('/admin/backup'));\n                return;\n            }\n        }\n\n        # Restore files\n        # This is a simplified example - you'd need to customize for your application\n        my $files_restore_command = \"cp -R $temp_dir/* .\";\n        my $files_restore_result = system($files_restore_command);\n\n        if ($files_restore_result != 0) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'backup',\n                \"Error restoring files: $!\");\n\n            $c->flash->{error_msg} = \"Error restoring files: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n\n        # Clean up temporary directory\n        my $cleanup_command = \"rm -rf $temp_dir\";\n        system($cleanup_command);\n\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n            \"Backup restored successfully: $backup_file\");\n\n        $c->flash->{success_msg} = \"Backup restored successfully: $backup_file\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n\n    # Clean up any orphaned backup files first\n    $self->cleanup_orphaned_backups($c);\n    \n    # Get available backups with detailed information\n    my $backups = $self->get_backup_list($c);\n\n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller backup view - Template: admin/backup.tt\";\n        push @{$c->stash->{debug_msg}}, \"Available backups: \" . scalar(@$backups);\n    }\n\n    # Pass data to the template\n    $c->stash(\n        template => 'admin/backup.tt',\n        backups => $backups\n    );\n\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'backup',\n        \"Completed backup action\");\n}\n\n# Handle backup creation (separate action for cleaner URL handling)\nsub create :Path('/admin/backup/create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Starting backup creation\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'create',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to create backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Only handle POST requests\n    unless ($c->req->method eq 'POST') {\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    my $backup_type = $c->req->param('type') || 'full';\n    my $description = $c->req->param('description') || '';\n    \n    # Generate backup name with timestamp and type\n    my $timestamp = time();\n    my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n    my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n    my $backup_name = \"backup_${date_str}_${backup_type}\";\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n        \"Creating $backup_type backup: $backup_name\");\n    \n    # Create backup directory if it doesn't exist\n    my $backup_dir = $c->path_to('backups');\n    unless (-d $backup_dir) {\n        eval { make_path($backup_dir) };\n        if ($@) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup directory: $@\");\n            \n            $c->flash->{error_msg} = \"Error creating backup directory: $@\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Create backup\n    my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n    my $backup_command = '';\n    my $backup_success = 0;\n    \n    if ($backup_type eq 'full') {\n        # Full backup (files + database)\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' --exclude='logs/*.log' .\";\n        \n    } elsif ($backup_type eq 'config') {\n        # Configuration files only\n        $backup_command = \"tar -czf '$backup_file' --exclude='backups' --exclude='tmp' config/ lib/Comserv.pm *.conf *.yml *.yaml 2>/dev/null || true\";\n        \n    } elsif ($backup_type eq 'database') {\n        # Database only backup\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            # Get the application root directory for relative path calculation\n            my $app_root = $c->path_to('.');\n            # Use relative path from app root for tar command\n            my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n            $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n            \n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Database backup dump file: $db_backup_result->{dump_file}\");\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                \"Relative dump file path: $relative_dump_file\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Failed to create database backup: \" . $db_backup_result->{error});\n            \n            $c->flash->{error_msg} = \"Failed to create database backup: \" . $db_backup_result->{error};\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        }\n    }\n    \n    # Execute backup command\n    if ($backup_command) {\n        # Get the application root directory for proper tar execution\n        my $app_root = $c->path_to('.');\n        \n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Executing backup command from directory: $app_root\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Backup command: $backup_command\");\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n            \"Target backup file: $backup_file\");\n        \n        # Change to application root directory and execute command\n        my $original_dir = Cwd::getcwd();\n        chdir($app_root) or do {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Cannot change to application directory: $app_root - $!\");\n            $c->flash->{error_msg} = \"Cannot change to application directory: $!\";\n            $c->response->redirect($c->uri_for('/admin/backup'));\n            return;\n        };\n        \n        my $result = system($backup_command);\n        \n        # Change back to original directory\n        chdir($original_dir);\n        \n        if ($result == 0) {\n            # Add a small delay to ensure file is fully written\n            sleep(1);\n            \n            # Verify backup file was created and has content\n            if (-f $backup_file && -s $backup_file) {\n                $backup_success = 1;\n                \n                my $file_size = -s $backup_file;\n                my $formatted_size = $self->format_file_size($file_size);\n                \n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'create',\n                    \"Backup created successfully: $backup_file ($formatted_size)\");\n                \n                # Force a debug message to appear in the UI\n                if ($c->session->{debug_mode}) {\n                    $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                    push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file created at: $backup_file (Size: $formatted_size)\";\n                }\n                \n                my $success_msg = \"Backup created successfully: $backup_name.tar.gz ($formatted_size)\";\n                $success_msg .= \" - $description\" if $description;\n                \n                $c->flash->{success_msg} = $success_msg;\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                    \"Backup file was not created or is empty: $backup_file\");\n                \n                # Additional debugging\n                if (-f $backup_file) {\n                    my $size = -s $backup_file;\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file exists but has size: $size bytes\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file exists but empty: $backup_file ($size bytes)\";\n                    }\n                } else {\n                    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'create',\n                        \"Backup file does not exist at: $backup_file\");\n                    \n                    # Force debug message to UI\n                    if ($c->session->{debug_mode}) {\n                        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                        push @{$c->stash->{debug_msg}}, \"DEBUG: Backup file does not exist: $backup_file\";\n                    }\n                }\n                \n                $c->flash->{error_msg} = \"Backup file was not created or is empty\";\n            }\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'create',\n                \"Error creating backup (exit code: $result): $!\");\n            \n            # Force debug message to UI\n            if ($c->session->{debug_mode}) {\n                $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n                push @{$c->stash->{debug_msg}}, \"DEBUG: Backup command failed with exit code: $result\";\n            }\n            \n            $c->flash->{error_msg} = \"Error creating backup (exit code: $result)\";\n        }\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Cleanup orphaned backup files (like .meta files without corresponding .tar.gz)\nsub cleanup_orphaned_backups {\n    my ($self, $c) = @_;\n    \n    my $backup_dir = $c->path_to('backups');\n    return unless -d $backup_dir;\n    \n    eval {\n        opendir(my $dh, $backup_dir) or die \"Cannot open backup directory: $!\";\n        my @all_files = readdir($dh);\n        closedir($dh);\n        \n        # Find .meta files\n        my @meta_files = grep { $_ =~ /\\.tar\\.gz\\.meta$/ } @all_files;\n        \n        foreach my $meta_file (@meta_files) {\n            my $backup_file = $meta_file;\n            $backup_file =~ s/\\.meta$//; # Remove .meta extension\n            \n            # If the corresponding .tar.gz file doesn't exist, remove the .meta file\n            unless (-f \"$backup_dir/$backup_file\") {\n                my $meta_path = \"$backup_dir/$meta_file\";\n                if (unlink($meta_path)) {\n                    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n                        \"Removed orphaned meta file: $meta_file\");\n                }\n            }\n        }\n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'cleanup_orphaned_backups',\n            \"Error during cleanup: $@\");\n    }\n}\n\n# Debug endpoint to check backup directory contents\nsub debug_backups :Path('/admin/backup/debug') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $backup_dir = $c->path_to('backups');\n    my $debug_info = {\n        backup_dir => \"$backup_dir\",\n        dir_exists => (-d $backup_dir) ? 1 : 0,\n        files => [],\n        error => ''\n    };\n    \n    if (-d $backup_dir) {\n        eval {\n            opendir(my $dh, $backup_dir) or die \"Cannot open directory: $!\";\n            my @all_files = readdir($dh);\n            closedir($dh);\n            \n            foreach my $file (@all_files) {\n                next if $file eq '.' || $file eq '..';\n                my $filepath = \"$backup_dir/$file\";\n                my @stat = stat($filepath);\n                \n                push @{$debug_info->{files}}, {\n                    name => $file,\n                    is_file => (-f $filepath) ? 1 : 0,\n                    size => $stat[7] || 0,\n                    mtime => $stat[9] || 0,\n                    matches_pattern => ($file =~ /\\.tar\\.gz$/) ? 1 : 0\n                };\n            }\n        };\n        $debug_info->{error} = $@ if $@;\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($debug_info));\n}\n\n# Test backup creation manually\nsub test_create :Path('/admin/backup/test_create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $c->response->body(\"Access denied\");\n        return;\n    }\n    \n    my $result = {\n        steps => [],\n        success => 0,\n        error => ''\n    };\n    \n    eval {\n        push @{$result->{steps}}, \"Starting manual backup test...\";\n        \n        my $backup_dir = $c->path_to('backups');\n        my $app_root = $c->path_to('.');\n        my $timestamp = time();\n        my ($sec, $min, $hour, $mday, $mon, $year) = localtime($timestamp);\n        my $date_str = sprintf(\"%04d%02d%02d_%02d%02d%02d\", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);\n        my $backup_name = \"test_backup_${date_str}_database\";\n        my $backup_file = \"$backup_dir/$backup_name.tar.gz\";\n        \n        push @{$result->{steps}}, \"Backup directory: $backup_dir\";\n        push @{$result->{steps}}, \"App root: $app_root\";\n        push @{$result->{steps}}, \"Backup name: $backup_name\";\n        push @{$result->{steps}}, \"Backup file: $backup_file\";\n        \n        # Test database backup creation\n        my $db_backup_result = $self->create_database_backup($c, $backup_dir, $backup_name);\n        \n        if ($db_backup_result->{success}) {\n            push @{$result->{steps}}, \"✅ Database dump created: \" . $db_backup_result->{dump_file};\n            \n            # Check if dump file exists\n            if (-f $db_backup_result->{dump_file}) {\n                my $dump_size = -s $db_backup_result->{dump_file};\n                push @{$result->{steps}}, \"✅ Dump file exists with size: $dump_size bytes\";\n                \n                # Create tar command\n                my $relative_dump_file = File::Spec->abs2rel($db_backup_result->{dump_file}, $app_root);\n                my $backup_command = \"tar -czf '$backup_file' '$relative_dump_file' && rm '$db_backup_result->{dump_file}'\";\n                \n                push @{$result->{steps}}, \"Relative dump file: $relative_dump_file\";\n                push @{$result->{steps}}, \"Backup command: $backup_command\";\n                \n                # Change to app root and execute\n                my $original_dir = Cwd::getcwd();\n                chdir($app_root);\n                push @{$result->{steps}}, \"Changed to directory: \" . Cwd::getcwd();\n                \n                my $cmd_result = system($backup_command);\n                chdir($original_dir);\n                \n                push @{$result->{steps}}, \"Command exit code: $cmd_result\";\n                \n                if ($cmd_result == 0) {\n                    if (-f $backup_file && -s $backup_file) {\n                        my $backup_size = -s $backup_file;\n                        push @{$result->{steps}}, \"✅ Backup created successfully: $backup_size bytes\";\n                        $result->{success} = 1;\n                        \n                        # Clean up test file\n                        unlink($backup_file);\n                        push @{$result->{steps}}, \"Test backup file cleaned up\";\n                    } else {\n                        push @{$result->{steps}}, \"❌ Backup file not created or empty\";\n                    }\n                } else {\n                    push @{$result->{steps}}, \"❌ Backup command failed\";\n                }\n            } else {\n                push @{$result->{steps}}, \"❌ Dump file does not exist\";\n            }\n        } else {\n            push @{$result->{steps}}, \"❌ Database backup failed: \" . $db_backup_result->{error};\n        }\n    };\n    \n    if ($@) {\n        $result->{error} = $@;\n        push @{$result->{steps}}, \"❌ Exception: $@\";\n    }\n    \n    $c->response->content_type('application/json');\n    $c->response->body(JSON::encode_json($result));\n}\n\n# Handle backup download\nsub download :Path('/admin/backup/download') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Starting backup download: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to download backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'download',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Serve the file for download\n    $c->response->content_type('application/gzip');\n    $c->response->header('Content-Disposition' => \"attachment; filename=\\\"$filename\\\"\");\n    $c->response->header('Content-Length' => -s $backup_file);\n    \n    # Stream the file\n    $c->serve_static_file($backup_file);\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'download',\n        \"Backup download completed: $filename\");\n}\n\n# Handle backup deletion\nsub delete :Path('/admin/backup/delete') :Args(1) {\n    my ($self, $c, $filename) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n        \"Starting backup deletion: $filename\");\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Access denied: User does not have CSC backup access\");\n        \n        $c->flash->{error_msg} = \"You need CSC administrator privileges to delete backups.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Validate filename (security check)\n    unless ($filename && $filename =~ /^[a-zA-Z0-9_\\-\\.]+\\.tar\\.gz$/) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Invalid filename: $filename\");\n        \n        $c->flash->{error_msg} = \"Invalid backup filename.\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Check if backup file exists\n    my $backup_file = $c->path_to('backups', $filename);\n    unless (-f $backup_file) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'delete',\n            \"Backup file not found: $backup_file\");\n        \n        $c->flash->{error_msg} = \"Backup file not found: $filename\";\n        $c->response->redirect($c->uri_for('/admin/backup'));\n        return;\n    }\n    \n    # Delete the backup file\n    if (unlink($backup_file)) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'delete',\n            \"Backup deleted successfully: $backup_file\");\n        \n        $c->flash->{success_msg} = \"Backup deleted successfully: $filename\";\n    } else {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'delete',\n            \"Error deleting backup: $!\");\n        \n        $c->flash->{error_msg} = \"Error deleting backup: $!\";\n    }\n    \n    $c->response->redirect($c->uri_for('/admin/backup'));\n}\n\n# Test database connection (AJAX endpoint)\nsub test_db :Path('/admin/backup/test_db') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has CSC backup access\n    unless ($self->check_csc_access($c)) {\n        my $result = {\n            success => 0,\n            message => \"Access denied: CSC administrator privileges required\"\n        };\n        $c->response->content_type('application/json');\n        $c->response->body(JSON::encode_json($result));\n        return;\n    }\n    \n    # This method already exists further down in the file, so we'll just redirect to it\n    # or we can implement it here if needed\n    $self->test_database_connection($c);\n}\n\n# Keeping it here for backward compatibility\nsub network_devices_forward :Path('/admin/network_devices_old') :Args(0) {\n    my ($self, $c) = @_;\n\n    # Redirect to the new network devices page\n    $c->response->redirect($c->uri_for('/admin/network_devices'));\n}\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub network_devices :Path('/admin/network_devices') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub add_network_device :Path('/admin/add_network_device') :Args(0) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub edit_network_device :Path('/admin/edit_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Commented out to avoid redefinition - this functionality is now in Admin::NetworkDevices\n# sub delete_network_device :Path('/admin/delete_network_device') :Args(1) {\n#     # Implementation removed to avoid duplication\n# }\n\n# Database Schema Comparison functionality (with alias)\nsub compare_schema :Path('/admin/compare_schema') :Args(0) {\n    my ($self, $c) = @_;\n    # Redirect to the main schema_compare action\n    $c->response->redirect($c->uri_for('/admin/schema_compare'));\n    return;\n}\n\n# Database Schema Comparison functionality\nsub schema_compare :Path('/admin/schema_compare') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Starting schema_compare action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'schema_compare', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Get all database configurations from JSON config\n    my $database_configs = $self->get_all_database_configs($c);\n    \n    # Get the currently active database backend\n    my $hybrid_db = $c->model('HybridDB');\n    my $status = $hybrid_db->get_status();\n    my $current_backend = $status->{current_backend};\n    \n    # Create database comparison structure with all databases as closed containers\n    my $database_comparison = {\n        current_backend => $current_backend,\n        databases => {},\n        summary => {\n            total_databases => scalar(keys %$database_configs),\n            connected_databases => 0,\n            total_backends => scalar(keys %$database_configs),\n            available_backends => 0,\n            total_tables => 0,\n            tables_with_results => 0\n        }\n    };\n    \n    # Debug: Check what we got from get_all_database_configs\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n        \"Database configs type: \" . ref($database_configs) . \", content: \" . (ref($database_configs) eq 'HASH' ? scalar(keys %$database_configs) . \" keys\" : \"not a hash\"));\n    \n    # Ensure we have a hash reference\n    unless (ref($database_configs) eq 'HASH') {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n            \"Expected hash reference but got: \" . ref($database_configs));\n        $c->stash(\n            template => 'admin/schema_compare.tt',\n            error => \"Failed to load database configurations: Invalid data format\"\n        );\n        return;\n    }\n    \n    # Process each database configuration\n    foreach my $db_key (sort keys %$database_configs) {\n        my $config = $database_configs->{$db_key};\n        \n        # Debug: Check individual config\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n            \"Processing config for $db_key, type: \" . ref($config));\n        \n        # Ensure config is a hash reference\n        unless (ref($config) eq 'HASH') {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n                \"Config for $db_key is not a hash reference: \" . ref($config));\n            next;\n        }\n        \n        # Test connection to determine availability\n        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n        \n        $database_comparison->{databases}->{$db_key} = {\n            name => $db_key,\n            display_name => $config->{description} || $db_key,\n            type => $config->{db_type} || 'unknown',\n            priority => $config->{priority} || 999,\n            available => $connection_test->{connected},\n            error => $connection_test->{error},\n            host => $config->{host} || 'localhost',\n            database => $config->{database} || '',\n            is_current => ($db_key eq $current_backend),\n            table_count => 0,\n            table_comparisons => [], # Will be loaded on demand via AJAX\n            loaded => 0 # Flag to indicate if comparison data has been loaded\n        };\n        \n        # Update summary counts\n        if ($connection_test->{connected}) {\n            $database_comparison->{summary}->{connected_databases}++;\n            $database_comparison->{summary}->{available_backends}++;\n        }\n    }\n    \n    # Add access control schema status\n    my $access_control_status = $self->check_access_control_schema($c);\n    \n    # Debug: Log the structure of database_comparison\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Database comparison structure: \" . Data::Dumper::Dumper($database_comparison));\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller schema_compare view - Template: admin/schema_compare.tt\";\n        push @{$c->stash->{debug_msg}}, \"Total databases: \" . $database_comparison->{summary}->{total_databases};\n        push @{$c->stash->{debug_msg}}, \"Connected databases: \" . $database_comparison->{summary}->{connected_databases};\n        push @{$c->stash->{debug_msg}}, \"Current backend: \" . ($current_backend || 'none');\n    }\n    \n    # Set the template and data\n    $c->stash(\n        template => 'admin/schema_compare.tt',\n        database_comparison => $database_comparison,\n        access_control_status => $access_control_status\n    );\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'schema_compare', \n        \"Completed schema_compare action\");\n}\n\n# Get all database configurations from db_config.json\nsub get_all_database_configs {\n    my ($self, $c) = @_;\n    \n    my $config_file = '/home/shanta/PycharmProjects/comserv2/Comserv/db_config.json';\n    \n    unless (-f $config_file) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Database config file not found: $config_file\");\n        return {};\n    }\n    \n    my $json_content;\n    eval {\n        $json_content = read_file($config_file);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to read config file: $@\");\n        return {};\n    }\n    \n    my $configs;\n    eval {\n        $configs = decode_json($json_content);\n    };\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_all_database_configs',\n            \"Failed to parse JSON config: $@\");\n        return {};\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_all_database_configs',\n        \"Loaded \" . scalar(keys %$configs) . \" database configurations\");\n    \n    return $configs;\n}\n\n# Test database connection for a specific configuration\nsub test_database_connection {\n    my ($self, $c, $db_key, $config) = @_;\n    \n    my $result = {\n        connected => 0,\n        error => '',\n        db_key => $db_key\n    };\n    \n    # Skip SQLite connections for now (they don't need network testing)\n    if ($config->{db_type} && $config->{db_type} eq 'sqlite') {\n        if ($config->{database_path} && -f $config->{database_path}) {\n            $result->{connected} = 1;\n        } else {\n            $result->{error} = \"SQLite database file not found: \" . ($config->{database_path} || 'not specified');\n        }\n        return $result;\n    }\n    \n    # For MySQL connections, test the connection\n    if ($config->{db_type} && $config->{db_type} eq 'mysql') {\n        eval {\n            my $dsn = sprintf(\"DBI:mysql:database=%s;host=%s;port=%s\",\n                $config->{database} || '',\n                $config->{host} || 'localhost',\n                $config->{port} || 3306\n            );\n            \n            my $dbh = DBI->connect(\n                $dsn,\n                $config->{username} || '',\n                $config->{password} || '',\n                {\n                    RaiseError => 1,\n                    PrintError => 0,\n                    mysql_connect_timeout => 5,\n                    mysql_read_timeout => 5,\n                    mysql_write_timeout => 5\n                }\n            );\n            \n            if ($dbh) {\n                # Test with a simple query\n                my $sth = $dbh->prepare(\"SELECT 1\");\n                $sth->execute();\n                $sth->finish();\n                $dbh->disconnect();\n                \n                $result->{connected} = 1;\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'test_database_connection',\n                    \"Successfully connected to database: $db_key\");\n            }\n        };\n        if ($@) {\n            $result->{error} = \"Connection failed: $@\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'test_database_connection',\n                \"Failed to connect to database $db_key: $@\");\n        }\n    } else {\n        $result->{error} = \"Unsupported database type: \" . ($config->{db_type} || 'unknown');\n    }\n    \n    return $result;\n}\n\n# Check access control schema status\nsub check_access_control_schema {\n    my ($self, $c) = @_;\n    \n    my $status = {\n        overall_status => 'unknown',\n        users_table => {},\n        user_site_roles_table => {},\n        migration_needed => 0,\n        errors => [],\n        recommendations => []\n    };\n    \n    # Check User table columns\n    $status->{users_table} = $self->check_users_table_schema($c);\n    \n    # Check UserSiteRole table\n    $status->{user_site_roles_table} = $self->check_user_site_roles_table_schema($c);\n    \n    # Determine overall status\n    my $has_errors = 0;\n    my $needs_migration = 0;\n    \n    if ($status->{users_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{users_table}->{errors}};\n    }\n    \n    if ($status->{user_site_roles_table}->{has_errors}) {\n        $has_errors = 1;\n        push @{$status->{errors}}, @{$status->{user_site_roles_table}->{errors}};\n    }\n    \n    if ($status->{users_table}->{needs_migration} || $status->{user_site_roles_table}->{needs_migration}) {\n        $needs_migration = 1;\n    }\n    \n    # Set overall status\n    if ($has_errors) {\n        $status->{overall_status} = 'error';\n        push @{$status->{recommendations}}, 'Database schema errors detected. System is using fallback compatibility mode.';\n    } elsif ($needs_migration) {\n        $status->{overall_status} = 'migration_available';\n        $status->{migration_needed} = 1;\n        push @{$status->{recommendations}}, 'Enhanced access control features are available. Migration is optional.';\n    } else {\n        $status->{overall_status} = 'ok';\n        push @{$status->{recommendations}}, 'Access control schema is up to date.';\n    }\n    \n    return $status;\n}\n\n# Check users table schema for access control enhancements\nsub check_users_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the users table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE users\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n        # Check for required columns\n        my @required_columns = qw(id username password email roles);\n        foreach my $col (@required_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{errors}}, \"Missing required column: $col\";\n                $table_status->{has_errors} = 1;\n            }\n        }\n        \n        # Check for optional enhancement columns\n        my @optional_columns = qw(status created_at last_login);\n        foreach my $col (@optional_columns) {\n            unless (exists $table_status->{columns}->{$col}) {\n                push @{$table_status->{missing_columns}}, $col;\n                $table_status->{needs_migration} = 1;\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        push @{$table_status->{errors}}, \"Error checking users table: $error\";\n        $table_status->{has_errors} = 1;\n        \n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'check_users_table_schema',\n            \"Error checking users table schema: $error\");\n    };\n    \n    return $table_status;\n}\n\n# Check user_site_roles table schema\nsub check_user_site_roles_table_schema {\n    my ($self, $c) = @_;\n    \n    my $table_status = {\n        exists => 0,\n        has_errors => 0,\n        needs_migration => 0,\n        columns => {},\n        missing_columns => [],\n        errors => []\n    };\n    \n    try {\n        # Try to describe the user_site_roles table\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"DESCRIBE user_site_roles\");\n        $sth->execute();\n        \n        $table_status->{exists} = 1;\n        \n        # Get existing columns\n        while (my $row = $sth->fetchrow_hashref) {\n            $table_status->{columns}->{lc($row->{Field})} = {\n                type => $row->{Type},\n                null => $row->{Null},\n                default => $row->{Default},\n                key => $row->{Key}\n            };\n        }\n        \n    } catch {\n        my $error = $_;\n        if ($error =~ /doesn't exist/i) {\n            # Table doesn't exist - this is expected for basic installations\n            $table_status->{needs_migration} = 1;\n            push @{$table_status->{missing_columns}}, 'entire_table';\n        } else {\n            push @{$table_status->{errors}}, \"Error checking user_site_roles table: $error\";\n            $table_status->{has_errors} = 1;\n        }\n    };\n    \n    return $table_status;\n}\n\n# Access control help page\nsub access_control_help :Path('/admin/access_control_help') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'access_control_help',\n        \"Displaying access control help page\");\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        $c->stash->{debug_msg} = [] unless ref($c->stash->{debug_msg}) eq 'ARRAY';\n        push @{$c->stash->{debug_msg}}, \"Admin controller access_control_help view - Template: admin/access_control_help.tt\";\n    }\n    \n    $c->stash(\n        template => 'admin/access_control_help.tt',\n        title => 'Multi-Site Access Control Help'\n    );\n}\n\n# AJAX endpoint to get table schema details\nsub get_table_schema :Path('/admin/get_table_schema') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_table_schema', \n        \"Starting get_table_schema action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name');\n    my $database = $c->req->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        my $schema_info;\n        \n        if ($database eq 'ency') {\n            $schema_info = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $schema_info = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        $c->stash(json => { \n            success => 1, \n            schema => $schema_info,\n            table_name => $table_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting table schema: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_table_schema', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field comparison between table and Result file\nsub get_field_comparison :Path('/admin/get_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n        \"Starting get_field_comparison action\");\n    \n    # TEMPORARY FIX: Allow specific users direct access\n    if ($c->session->{username} && $c->session->{username} eq 'Shanta') {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison', \n            \"Admin access granted to user Shanta (bypass role check)\");\n    }\n    else {\n        # Check if the user has admin role\n        unless ($c->user_exists && $c->check_user_roles('admin')) {\n            $c->response->status(403);\n            $c->stash(json => {\n                success => 0,\n                error => \"Access denied: Admin role required\"\n            });\n            $c->forward('View::JSON');\n            return;\n        }\n    }\n    \n    my $table_name = $c->request->param('table_name');\n    my $database = $c->request->param('database');\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => 'Missing table_name or database parameter'\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        # Add debugging information\n        my $table_key = lc($table_name);\n        my $result_info = $result_table_mapping->{$table_key};\n        my $result_file_path = $result_info ? $result_info->{result_path} : undef;\n        my $result_name = $result_info ? $result_info->{result_name} : 'NOT FOUND';\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Table: $table_name, Database: $database, Result name: $result_name, Result file: \" . ($result_file_path || 'NOT FOUND'));\n        \n        # Add detailed debugging\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n            \"Comparison has_result_file: \" . ($comparison->{has_result_file} ? 'YES' : 'NO'));\n        \n        if ($comparison->{fields}) {\n            my $field_count = scalar(keys %{$comparison->{fields}});\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                \"Fields found: $field_count\");\n            \n            # Log first few fields for debugging\n            my $count = 0;\n            foreach my $field_name (keys %{$comparison->{fields}}) {\n                last if $count >= 3;\n                my $field_data = $comparison->{fields}->{$field_name};\n                my $has_table = $field_data->{table} ? 'YES' : 'NO';\n                my $has_result = $field_data->{result} ? 'YES' : 'NO';\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_field_comparison',\n                    \"Field '$field_name': Table=$has_table, Result=$has_result\");\n                $count++;\n            }\n        }\n        \n        $c->stash(json => {\n            success => 1,\n            comparison => $comparison,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0,\n            debug => {\n                table_name => $table_name,\n                database => $database,\n                result_name => $result_name,\n                result_file_path => $result_file_path,\n                has_result_file => $comparison->{has_result_file},\n                total_result_files => scalar(keys %$result_table_mapping)\n            }\n        });\n        \n    } catch {\n        my $error = \"Error getting field comparison for $table_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_field_comparison', $error);\n        \n        # Don't return 500 status - return success with error info instead\n        # This prevents JavaScript parsing errors\n        $c->stash(json => {\n            success => 0,\n            error => $error,\n            table_name => $table_name,\n            database => $database,\n            debug_mode => $c->session->{debug_mode} ? 1 : 0\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to get result file fields\nsub get_result_file_fields :Path('/admin/get_result_file_fields') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Starting get_result_file_fields action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => {\n            success => 0,\n            error => \"Access denied: Admin role required\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $result_name = $c->req->param('result_name');\n    my $database = $c->req->param('database');\n    \n    unless ($result_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => {\n            success => 0,\n            error => \"Missing required parameters: result_name and database\"\n        });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n        \"Getting fields for result: $result_name in database: $database\");\n    \n    try {\n        # Get the result file fields\n        my $fields = $self->get_result_file_field_definitions($c, $result_name, $database);\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_fields', \n            \"Successfully retrieved \" . scalar(keys %$fields) . \" fields for result: $result_name\");\n        \n        $c->stash(json => {\n            success => 1,\n            fields => $fields,\n            result_name => $result_name,\n            database => $database\n        });\n        \n    } catch {\n        my $error = \"Error getting result file fields for $result_name ($database): $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_fields', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => {\n            success => 0,\n            error => $error\n        });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Get field definitions from a result file\nsub get_result_file_field_definitions {\n    my ($self, $c, $result_name, $database) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Getting field definitions for result: $result_name in database: $database\");\n    \n    # Build the result file path\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    my $result_file_path;\n    \n    if (lc($database) eq 'ency') {\n        $result_file_path = \"$base_path/Ency/Result/$result_name.pm\";\n        # Also check subdirectories\n        unless (-f $result_file_path) {\n            if (-f \"$base_path/Ency/Result/System/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/System/$result_name.pm\";\n            } elsif (-f \"$base_path/Ency/Result/User/$result_name.pm\") {\n                $result_file_path = \"$base_path/Ency/Result/User/$result_name.pm\";\n            }\n        }\n    } elsif (lc($database) eq 'forager') {\n        $result_file_path = \"$base_path/Forager/Result/$result_name.pm\";\n    } else {\n        die \"Unsupported database: $database\";\n    }\n    \n    unless (-f $result_file_path) {\n        die \"Result file not found: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Found result file: $result_file_path\");\n    \n    # Parse the result file schema\n    my $schema_info = $self->get_result_file_schema($c, $result_name, $result_file_path);\n    \n    unless ($schema_info && $schema_info->{columns}) {\n        die \"Could not parse result file schema: $result_file_path\";\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_result_file_field_definitions', \n        \"Successfully parsed \" . scalar(keys %{$schema_info->{columns}}) . \" fields from result file\");\n    \n    return $schema_info->{columns};\n}\n\n# Get database comparison between each database and its result files\nsub get_database_comparison {\n    my ($self, $c) = @_;\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Add backend-specific schema comparison\n    foreach my $backend_name (sort keys %$available_backends) {\n        my $backend_info = $available_backends->{$backend_name};\n        \n        $comparison->{backends}->{$backend_name} = {\n            name => $backend_name,\n            display_name => $backend_info->{config}->{description} || $backend_name,\n            type => $backend_info->{type},\n            available => $backend_info->{available},\n            priority => $backend_info->{config}->{priority} || 999,\n            connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n            tables => [],\n            table_count => 0,\n            table_comparisons => [],\n            error => undef\n        };\n        \n        # If backend is available, get its schema information\n        if ($backend_info->{available}) {\n            try {\n                my $backend_tables = $self->get_backend_database_tables($c, $backend_name, $backend_info);\n                $comparison->{backends}->{$backend_name}->{tables} = $backend_tables;\n                $comparison->{backends}->{$backend_name}->{table_count} = scalar(@$backend_tables);\n                \n                # Build result file mapping for this backend\n                my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                \n                # Compare each table with its result file\n                foreach my $table_name (@$backend_tables) {\n                    my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $backend_name, $backend_info, $result_table_mapping);\n                    push @{$comparison->{backends}->{$backend_name}->{table_comparisons}}, $table_comparison;\n                    \n                    if ($table_comparison->{has_result_file}) {\n                        $comparison->{summary}->{tables_with_results}++;\n                    } else {\n                        $comparison->{summary}->{tables_without_results}++;\n                    }\n                }\n                \n                $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                \n            } catch {\n                my $error = $_;\n                $comparison->{backends}->{$backend_name}->{error} = $error;\n                $comparison->{backends}->{$backend_name}->{connection_status} = 'error';\n                \n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', \n                    \"Error getting schema for backend '$backend_name': $error\");\n            };\n        }\n    }\n    \n    # Get Ency database tables and compare with result files\n    try {\n        my $ency_tables = $self->get_ency_database_tables($c);\n        $comparison->{ency}->{tables} = $ency_tables;\n        $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n        $comparison->{ency}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$ency_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to ency database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{ency}->{connection_status} = 'error';\n        $comparison->{ency}->{error} = $error;\n    };\n    \n    # Get Forager database tables and compare with result files\n    try {\n        my $forager_tables = $self->get_forager_database_tables($c);\n        $comparison->{forager}->{tables} = $forager_tables;\n        $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n        $comparison->{forager}->{connection_status} = 'connected';\n        $comparison->{summary}->{connected_databases}++;\n        $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n        \n        # Build comprehensive mapping of result files to their actual table names\n        my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n        \n        # Compare each table with its result file\n        my @tables_with_results = ();\n        my @tables_without_results = ();\n        \n        foreach my $table_name (@$forager_tables) {\n            my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n            \n            # Debug logging\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n                \"Forager Table: $table_name -> Has result: \" . ($table_comparison->{has_result_file} ? 'YES' : 'NO') .\n                ($table_comparison->{result_file_path} ? \" -> Path: \" . $table_comparison->{result_file_path} : \"\"));\n            \n            if ($table_comparison->{has_result_file}) {\n                push @tables_with_results, $table_comparison;\n                $comparison->{summary}->{tables_with_results}++;\n            } else {\n                push @tables_without_results, $table_comparison;\n                $comparison->{summary}->{tables_without_results}++;\n            }\n        }\n        \n        # Find result files without corresponding tables\n        my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n        $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n        \n        # Organize comparisons: tables with results first, then tables without results\n        $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n        $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison', \n            \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n            scalar(@tables_with_results) . \" with results, \" . \n            scalar(@tables_without_results) . \" without results, \" . \n            scalar(@results_without_tables) . \" orphaned results\");\n            \n    } catch {\n        my $error = \"Error connecting to forager database: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison', $error);\n        $comparison->{forager}->{connection_status} = 'error';\n        $comparison->{forager}->{error} = $error;\n    };\n    \n    return $comparison;\n}\n\n# Get database comparison data for a specific database only (performance optimized)\nsub get_database_comparison_selective {\n    my ($self, $c, $selected_db) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Starting selective comparison for database: $selected_db\");\n    \n    # Get available backends from HybridDB\n    my $hybrid_db = $c->model('HybridDB');\n    my $available_backends = $hybrid_db->get_available_backends() || {};\n    \n    my $comparison = {\n        selected_database => $selected_db,\n        backends => {},\n        ency => {\n            name => 'ency',\n            display_name => 'Encyclopedia Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        forager => {\n            name => 'forager',\n            display_name => 'Forager Database',\n            tables => [],\n            table_count => 0,\n            connection_status => 'unknown',\n            error => undef,\n            table_comparisons => []\n        },\n        summary => {\n            total_databases => 2,\n            connected_databases => 0,\n            total_tables => 0,\n            tables_with_results => 0,\n            tables_without_results => 0,\n            results_without_tables => 0,\n            total_backends => scalar(keys %$available_backends),\n            available_backends => scalar(grep { $available_backends->{$_}->{available} } keys %$available_backends)\n        }\n    };\n    \n    # Only process the selected database\n    if ($selected_db eq 'ency') {\n        # Get Ency database tables and compare with result files\n        try {\n            my $ency_tables = $self->get_ency_database_tables($c);\n            $comparison->{ency}->{tables} = $ency_tables;\n            $comparison->{ency}->{table_count} = scalar(@$ency_tables);\n            $comparison->{ency}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$ency_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$ency_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'ency', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'ency', $ency_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{ency}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{ency}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$ency_tables) . \" tables in ency database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to ency database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{ency}->{connection_status} = 'error';\n            $comparison->{ency}->{error} = $error;\n        };\n    }\n    elsif ($selected_db eq 'forager') {\n        # Get Forager database tables and compare with result files\n        try {\n            my $forager_tables = $self->get_forager_database_tables($c);\n            $comparison->{forager}->{tables} = $forager_tables;\n            $comparison->{forager}->{table_count} = scalar(@$forager_tables);\n            $comparison->{forager}->{connection_status} = 'connected';\n            $comparison->{summary}->{connected_databases}++;\n            $comparison->{summary}->{total_tables} += scalar(@$forager_tables);\n            \n            # Build comprehensive mapping of result files to their actual table names\n            my $result_table_mapping = $self->build_result_table_mapping($c, 'forager');\n            \n            # Compare each table with its result file\n            my @tables_with_results = ();\n            my @tables_without_results = ();\n            \n            foreach my $table_name (@$forager_tables) {\n                my $table_comparison = $self->compare_table_with_result_file_v2($c, $table_name, 'forager', $result_table_mapping);\n                \n                if ($table_comparison->{has_result_file}) {\n                    push @tables_with_results, $table_comparison;\n                    $comparison->{summary}->{tables_with_results}++;\n                } else {\n                    push @tables_without_results, $table_comparison;\n                    $comparison->{summary}->{tables_without_results}++;\n                }\n            }\n            \n            # Find result files without corresponding tables\n            my @results_without_tables = $self->find_orphaned_result_files_v2($c, 'forager', $forager_tables, $result_table_mapping);\n            $comparison->{summary}->{results_without_tables} += scalar(@results_without_tables);\n            \n            # Organize comparisons: tables with results first, then tables without results\n            $comparison->{forager}->{table_comparisons} = [@tables_with_results, @tables_without_results];\n            $comparison->{forager}->{results_without_tables} = \\@results_without_tables;\n            \n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n                \"Found \" . scalar(@$forager_tables) . \" tables in forager database, \" . \n                scalar(@tables_with_results) . \" with results, \" . \n                scalar(@tables_without_results) . \" without results, \" . \n                scalar(@results_without_tables) . \" orphaned results\");\n                \n        } catch {\n            my $error = \"Error connecting to forager database: $_\";\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', $error);\n            $comparison->{forager}->{connection_status} = 'error';\n            $comparison->{forager}->{error} = $error;\n        };\n    }\n    else {\n        # Handle backend-specific database selection\n        if (exists $available_backends->{$selected_db}) {\n            my $backend_info = $available_backends->{$selected_db};\n            \n            $comparison->{backends}->{$selected_db} = {\n                name => $selected_db,\n                display_name => $backend_info->{config}->{description} || $selected_db,\n                type => $backend_info->{type},\n                available => $backend_info->{available},\n                priority => $backend_info->{config}->{priority} || 999,\n                connection_status => $backend_info->{available} ? 'connected' : 'disconnected',\n                tables => [],\n                table_count => 0,\n                table_comparisons => [],\n                error => undef\n            };\n            \n            # If backend is available, get its schema information\n            if ($backend_info->{available}) {\n                try {\n                    my $backend_tables = $self->get_backend_database_tables($c, $selected_db, $backend_info);\n                    $comparison->{backends}->{$selected_db}->{tables} = $backend_tables;\n                    $comparison->{backends}->{$selected_db}->{table_count} = scalar(@$backend_tables);\n                    \n                    # Build result file mapping for this backend\n                    my $result_table_mapping = $self->build_result_table_mapping($c, 'ency');\n                    \n                    # Compare each table with its result file\n                    foreach my $table_name (@$backend_tables) {\n                        my $table_comparison = $self->compare_backend_table_with_result_file($c, $table_name, $selected_db, $backend_info, $result_table_mapping);\n                        push @{$comparison->{backends}->{$selected_db}->{table_comparisons}}, $table_comparison;\n                        \n                        if ($table_comparison->{has_result_file}) {\n                            $comparison->{summary}->{tables_with_results}++;\n                        } else {\n                            $comparison->{summary}->{tables_without_results}++;\n                        }\n                    }\n                    \n                    $comparison->{summary}->{total_tables} += scalar(@$backend_tables);\n                    $comparison->{summary}->{connected_databases}++;\n                    \n                } catch {\n                    my $error = $_;\n                    $comparison->{backends}->{$selected_db}->{error} = $error;\n                    $comparison->{backends}->{$selected_db}->{connection_status} = 'error';\n                    \n                    $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_comparison_selective', \n                        \"Error getting schema for backend '$selected_db': $error\");\n                };\n            }\n        }\n    }\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_database_comparison_selective', \n        \"Completed selective comparison for database: $selected_db\");\n    \n    return $comparison;\n}\n\n# Compare a database table with its Result file\nsub compare_table_with_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Look for Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    if ($result_file_path && -f $result_file_path) {\n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_file_path;\n        $comparison->{last_modified} = (stat($result_file_path))[9];\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_file_path);\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find Result file for a table\nsub find_result_file {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Convert table name to proper case for Result file names\n    my $result_name = $self->table_name_to_result_name($table_name);\n    \n    # Database-specific Result file locations to check\n    my @search_paths;\n    \n    # Get the application root directory\n    my $app_root = $c->config->{home} || '/home/shanta/PycharmProjects/comserv2';\n    \n    if (lc($database) eq 'ency') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/System/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Ency/Result/User/$result_name.pm\"\n        );\n    } elsif (lc($database) eq 'forager') {\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Forager/Result/$result_name.pm\"\n        );\n    } else {\n        # Fallback for unknown databases\n        @search_paths = (\n            \"$app_root/Comserv/lib/Comserv/Model/Schema/Result/$result_name.pm\",\n            \"$app_root/Comserv/lib/Comserv/Schema/Result/$result_name.pm\"\n        );\n    }\n    \n    foreach my $path (@search_paths) {\n        if (-f $path) {\n            return $path;\n        }\n    }\n    \n    return undef;\n}\n\n# Convert table name to Result class name\nsub table_name_to_result_name {\n    my ($self, $table_name) = @_;\n    \n    # Convert snake_case or lowercase to PascalCase\n    # e.g., \"user_group\" -> \"UserGroup\", \"ency_herb_tb\" -> \"Herb\"\n    \n    # Handle database-specific table name patterns\n    my $clean_name = $table_name;\n    \n    # Remove common prefixes\n    $clean_name =~ s/^ency_//i;\n    $clean_name =~ s/^forager_//i;\n    \n    # Remove common suffixes\n    $clean_name =~ s/_tb$//i;\n    $clean_name =~ s/_table$//i;\n    \n    # Handle special plurals and known mappings\n    my %table_to_result = (\n        'categories' => 'Category',\n        'event' => 'Event',\n        'files' => 'File',\n        'groups' => 'Group',\n        'internal_links_tb' => 'InternalLinksTb',\n        'learned_data' => 'Learned_data',\n        'log' => 'Log',\n        'mail_domains' => 'MailDomain',\n        'network_devices' => 'NetworkDevice',\n        'pages_content' => 'Pages_content',\n        'page_tb' => 'PageTb',\n        'pallets' => 'Pallet',\n        'participant' => 'Participant',\n        'projects' => 'Project',\n        'project_sites' => 'ProjectSite',\n        'queens' => 'Queen',\n        'reference' => 'Reference',\n        'site_config' => 'SiteConfig',\n        'sitedomain' => 'SiteDomain',\n        'sites' => 'Site',\n        'site_themes' => 'SiteTheme',\n        'site_workshop' => 'SiteWorkshop',\n        'themes' => 'Theme',\n        'theme_variables' => 'ThemeVariable',\n        'todo' => 'Todo',\n        'user_groups' => 'UserGroup',\n        'users' => 'User',\n        'user_sites' => 'UserSite',\n        'workshop' => 'WorkShop',\n        'yards' => 'Yard',\n        'ency_herb_tb' => 'Herb',\n        'page' => 'Page'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $table_to_result{lc($table_name)}) {\n        return $table_to_result{lc($table_name)};\n    }\n    \n    # Convert underscores to PascalCase\n    my $result_name = join('', map { ucfirst(lc($_)) } split(/_/, $clean_name));\n    \n    return $result_name;\n}\n\n# Find Result files that don't have corresponding database tables\nsub find_orphaned_result_files {\n    my ($self, $c, $database, $existing_tables) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file by reading the __PACKAGE__->table() declaration\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        # Skip if we couldn't extract table name\n        next unless $table_name;\n        \n        # Check if corresponding table exists\n        unless (exists $table_lookup{lc($table_name)}) {\n            push @orphaned_results, {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Extract table name from Result file by reading __PACKAGE__->table() declaration\nsub extract_table_name_from_result_file {\n    my ($self, $file_path) = @_;\n    \n    return undef unless -f $file_path;\n    \n    # Read the Result file\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return undef;\n    }\n    \n    # Extract table name from __PACKAGE__->table('table_name') declaration\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        return $1;\n    }\n    \n    return undef;\n}\n\n# Build comprehensive mapping of result files to their actual table names\nsub build_result_table_mapping {\n    my ($self, $c, $database) = @_;\n    \n    my %mapping = ();  # table_name => { result_name => ..., result_path => ... }\n    \n    # Get all Result files for this database\n    my @result_files = $self->get_all_result_files($database);\n    \n    # Debug: Log the number of result files found\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Found \" . scalar(@result_files) . \" result files for database '$database'\");\n    \n    foreach my $result_file (@result_files) {\n        # Extract actual table name from Result file\n        my $table_name = $self->extract_table_name_from_result_file($result_file->{path});\n        \n        if ($table_name) {\n            $mapping{lc($table_name)} = {\n                result_name => $result_file->{name},\n                result_path => $result_file->{path},\n                last_modified => $result_file->{last_modified}\n            };\n        }\n    }\n    \n    # Debug: Log the final mapping keys\n    my @mapping_keys = sort keys %mapping;\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'build_result_table_mapping',\n        \"Final mapping contains \" . scalar(@mapping_keys) . \" entries: \" . join(', ', @mapping_keys));\n    \n    return \\%mapping;\n}\n\n# Compare table with result file using the comprehensive mapping\nsub compare_table_with_result_file_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => 0,\n        result_file_path => undef,\n        database_schema => {},\n        result_file_schema => {},\n        differences => [],\n        sync_status => 'unknown',\n        last_modified => undef\n    };\n    \n    # Check if this table has a corresponding result file\n    my $table_key = lc($table_name);\n    if (exists $result_table_mapping->{$table_key}) {\n        my $result_info = $result_table_mapping->{$table_key};\n        \n        $comparison->{has_result_file} = 1;\n        $comparison->{result_file_path} = $result_info->{result_path};\n        $comparison->{last_modified} = $result_info->{last_modified};\n        \n        # Get database schema\n        try {\n            if ($database eq 'ency') {\n                $comparison->{database_schema} = $self->get_ency_table_schema($c, $table_name);\n            } elsif ($database eq 'forager') {\n                $comparison->{database_schema} = $self->get_forager_table_schema($c, $table_name);\n            }\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error getting database schema for $table_name: $_\");\n        };\n        \n        # Parse Result file schema\n        try {\n            $comparison->{result_file_schema} = $self->parse_result_file_schema($c, $result_info->{result_path});\n        } catch {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'compare_table_with_result_file_v2', \n                \"Error parsing Result file schema for $table_name: $_\");\n        };\n        \n        # Compare schemas and find differences\n        $comparison->{differences} = $self->find_schema_differences(\n            $comparison->{database_schema}, \n            $comparison->{result_file_schema}\n        );\n        \n        # Determine sync status\n        if (scalar(@{$comparison->{differences}}) == 0) {\n            $comparison->{sync_status} = 'synchronized';\n        } else {\n            $comparison->{sync_status} = 'needs_sync';\n        }\n    } else {\n        $comparison->{sync_status} = 'no_result_file';\n    }\n    \n    return $comparison;\n}\n\n# Find result files without corresponding tables using the comprehensive mapping\nsub find_orphaned_result_files_v2 {\n    my ($self, $c, $database, $existing_tables, $result_table_mapping) = @_;\n    \n    my @orphaned_results = ();\n    my %table_lookup = map { lc($_) => 1 } @$existing_tables;\n    \n    # Check each result file to see if its table exists\n    foreach my $table_name (keys %$result_table_mapping) {\n        unless (exists $table_lookup{$table_name}) {\n            my $result_info = $result_table_mapping->{$table_name};\n            push @orphaned_results, {\n                result_name => $result_info->{result_name},\n                result_path => $result_info->{result_path},\n                expected_table_name => $table_name,\n                actual_table_name => $table_name,\n                last_modified => $result_info->{last_modified}\n            };\n        }\n    }\n    \n    return @orphaned_results;\n}\n\n# Get all Result files for a database\nsub get_all_result_files {\n    my ($self, $database) = @_;\n    \n    my @result_files = ();\n    my $base_path = \"/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema\";\n    \n    if (lc($database) eq 'ency') {\n        my $result_dir = \"$base_path/Ency/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n        \n        # Also scan subdirectories\n        if (-d \"$result_dir/System\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/System\", 'System/');\n        }\n        if (-d \"$result_dir/User\") {\n            push @result_files, $self->scan_result_directory(\"$result_dir/User\", 'User/');\n        }\n    } elsif (lc($database) eq 'forager') {\n        my $result_dir = \"$base_path/Forager/Result\";\n        @result_files = $self->scan_result_directory($result_dir, '');\n    }\n    \n    return @result_files;\n}\n\n# Scan a directory for Result files\nsub scan_result_directory {\n    my ($self, $dir_path, $prefix) = @_;\n    \n    my @files = ();\n    \n    if (opendir(my $dh, $dir_path)) {\n        while (my $file = readdir($dh)) {\n            next if $file =~ /^\\.\\.?$/;  # Skip . and ..\n            next unless $file =~ /\\.pm$/;  # Only .pm files\n            \n            my $full_path = \"$dir_path/$file\";\n            next unless -f $full_path;  # Only regular files\n            \n            my $name = $file;\n            $name =~ s/\\.pm$//;  # Remove .pm extension\n            \n            push @files, {\n                name => $prefix . $name,\n                path => $full_path,\n                last_modified => (stat($full_path))[9]\n            };\n        }\n        closedir($dh);\n    }\n    \n    return @files;\n}\n\n# Convert Result class name back to table name\nsub result_name_to_table_name {\n    my ($self, $result_name) = @_;\n    \n    # Remove any path prefix (e.g., \"System/Site\" -> \"Site\")\n    $result_name =~ s/.*\\///;\n    \n    # Handle special cases - map Result names to actual table names\n    my %result_to_table = (\n        'Category' => 'categories',\n        'File' => 'files',\n        'Group' => 'groups',\n        'User' => 'users',\n        'Event' => 'events',\n        'Site' => 'sites',\n        'Todo' => 'todos',\n        'Project' => 'projects',\n        'WorkShop' => 'workshops',\n        'Theme' => 'themes',\n        'Reference' => 'references',\n        'Participant' => 'participants',\n        'Herb' => 'ency_herb_tb',\n        'Page' => 'page',\n        'Pages_content' => 'pages_content',\n        'InternalLinksTb' => 'internal_links_tb',\n        'Learned_data' => 'learned_data',\n        'Log' => 'log',\n        'MailDomain' => 'mail_domains',\n        'NetworkDevice' => 'network_devices',\n        'PageTb' => 'page_tb',\n        'Pallet' => 'pallets',\n        'ProjectSite' => 'project_sites',\n        'Queen' => 'queens',\n        'SiteConfig' => 'site_config',\n        'SiteDomain' => 'sitedomain',\n        'SiteTheme' => 'site_themes',\n        'SiteWorkshop' => 'site_workshop',\n        'ThemeVariable' => 'theme_variables',\n        'UserGroup' => 'user_groups',\n        'UserSite' => 'user_sites',\n        'Yard' => 'yards'\n    );\n    \n    # Check if it's a known mapping\n    if (exists $result_to_table{$result_name}) {\n        return $result_to_table{$result_name};\n    }\n    \n    # Convert PascalCase to snake_case\n    my $table_name = $result_name;\n    $table_name =~ s/([a-z])([A-Z])/$1_$2/g;  # Insert underscore before capitals\n    $table_name = lc($table_name);\n    \n    # For unknown mappings, try common patterns\n    # This is a fallback - ideally all mappings should be explicit above\n    return $table_name;\n}\n\n# Get detailed field comparison between table and Result file\nsub get_table_result_comparison {\n    my ($self, $c, $table_name, $database) = @_;\n    \n    # Get table schema\n    my $table_schema;\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Find and parse Result file\n    my $result_file_path = $self->find_result_file($c, $table_name, $database);\n    my $result_schema = { columns => {} };\n    \n    if ($result_file_path && -f $result_file_path) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_file_path);\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_file_path: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_file_path && -f $result_file_path) ? 1 : 0,\n        result_file_path => $result_file_path,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Get detailed field comparison between table and Result file using comprehensive mapping\nsub get_table_result_comparison_v2 {\n    my ($self, $c, $table_name, $database, $result_table_mapping) = @_;\n    \n    # Get table schema\n    my $table_schema = { columns => {} };\n    eval {\n        if ($database eq 'ency') {\n            $table_schema = $self->get_ency_table_schema($c, $table_name);\n        } elsif ($database eq 'forager') {\n            $table_schema = $self->get_forager_table_schema($c, $table_name);\n        } else {\n            die \"Invalid database: $database\";\n        }\n        \n        # Ensure we have a valid schema structure\n        $table_schema = { columns => {} } unless $table_schema && ref($table_schema) eq 'HASH';\n        $table_schema->{columns} = {} unless $table_schema->{columns} && ref($table_schema->{columns}) eq 'HASH';\n    };\n    if ($@) {\n        warn \"Failed to get table schema for $table_name ($database): $@\";\n        $table_schema = { columns => {} };\n    }\n    \n    # Check if this table has a corresponding result file using the mapping\n    my $table_key = lc($table_name);\n    my $result_info = $result_table_mapping->{$table_key};\n    my $result_schema = { columns => {} };\n    \n    if ($result_info && -f $result_info->{result_path}) {\n        eval {\n            $result_schema = $self->parse_result_file_schema($c, $result_info->{result_path});\n        };\n        if ($@) {\n            warn \"Failed to parse Result file $result_info->{result_path}: $@\";\n            $result_schema = { columns => {} };\n        }\n    }\n    \n    # Create field comparison\n    my $comparison = {\n        table_name => $table_name,\n        database => $database,\n        has_result_file => ($result_info && -f $result_info->{result_path}) ? 1 : 0,\n        result_file_path => $result_info ? $result_info->{result_path} : undef,\n        fields => {}\n    };\n    \n    # Get all unique field names from both sources\n    my %all_fields = ();\n    if ($table_schema && $table_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$table_schema->{columns}});\n    }\n    if ($result_schema && $result_schema->{columns}) {\n        %all_fields = (%all_fields, map { $_ => 1 } keys %{$result_schema->{columns}});\n    }\n    \n    # Compare each field\n    foreach my $field_name (sort keys %all_fields) {\n        my $table_field = $table_schema->{columns}->{$field_name};\n        my $result_field = $result_schema->{columns}->{$field_name};\n        \n        $comparison->{fields}->{$field_name} = {\n            table => $table_field,\n            result => $result_field,\n            differences => $self->compare_field_attributes($table_field, $result_field, $c, $field_name)\n        };\n    }\n    \n    return $comparison;\n}\n\n# Compare field attributes between table and Result file\nsub compare_field_attributes {\n    my ($self, $table_field, $result_field, $c, $field_name) = @_;\n    \n    my @differences = ();\n    my @attributes = qw(data_type size is_nullable is_auto_increment default_value);\n    \n    foreach my $attr (@attributes) {\n        my $table_value = $table_field ? $table_field->{$attr} : undef;\n        my $result_value = $result_field ? $result_field->{$attr} : undef;\n        \n        # Store original values for debugging\n        my $original_table_value = $table_value;\n        my $original_result_value = $result_value;\n        \n        # Normalize values for comparison\n        $table_value = $self->normalize_field_value($attr, $table_value);\n        $result_value = $self->normalize_field_value($attr, $result_value);\n        \n        # Add debug information for data_type comparisons when debug_mode is enabled\n        if ($c && $c->session->{debug_mode} && $attr eq 'data_type' && defined $original_table_value && defined $original_result_value) {\n            push @{$c->stash->{debug_msg}}, sprintf(\n                \"Field '%s' data_type normalization: Table Type: %s -> %s, Result Type: %s -> %s, Match: %s\",\n                $field_name || 'unknown',\n                $original_table_value || 'undef',\n                $table_value || 'undef',\n                $original_result_value || 'undef', \n                $result_value || 'undef',\n                (defined $table_value && defined $result_value && $table_value eq $result_value) ? 'YES' : 'NO'\n            );\n        }\n        \n        if (defined $table_value && defined $result_value) {\n            if ($table_value ne $result_value) {\n                push @differences, {\n                    attribute => $attr,\n                    table_value => $table_value,\n                    result_value => $result_value,\n                    original_table_value => $original_table_value,\n                    original_result_value => $original_result_value,\n                    type => 'different'\n                };\n            }\n        } elsif (defined $table_value && !defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => $table_value,\n                result_value => undef,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_result'\n            };\n        } elsif (!defined $table_value && defined $result_value) {\n            push @differences, {\n                attribute => $attr,\n                table_value => undef,\n                result_value => $result_value,\n                original_table_value => $original_table_value,\n                original_result_value => $original_result_value,\n                type => 'missing_in_table'\n            };\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Normalize field values for comparison\nsub normalize_field_value {\n    my ($self, $attribute, $value) = @_;\n    \n    return undef unless defined $value;\n    \n    # Handle data type normalization\n    if ($attribute eq 'data_type') {\n        return $self->normalize_data_type($value);\n    }\n    \n    # Handle boolean attributes\n    if ($attribute eq 'is_nullable' || $attribute eq 'is_auto_increment') {\n        return $value ? 1 : 0;\n    }\n    \n    # Handle numeric attributes\n    if ($attribute eq 'size') {\n        return $value + 0 if $value =~ /^\\d+$/;\n    }\n    \n    # Handle string attributes\n    return \"$value\";\n}\n\n# Parse Result file schema\nsub parse_result_file_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Try to load the Result class directly first\n    my $result_class_schema = $self->parse_result_class_schema($c, $file_path);\n    if ($result_class_schema && keys %{$result_class_schema->{columns}}) {\n        return $result_class_schema;\n    }\n    \n    # Fallback to file parsing if direct class loading fails\n    my $content;\n    eval {\n        $content = File::Slurp::read_file($file_path);\n    };\n    if ($@) {\n        warn \"Failed to read Result file $file_path: $@\";\n        return $schema;\n    }\n    \n    # Extract table name\n    if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\);/) {\n        $schema->{table_name} = $1;\n    }\n    \n    # Extract columns\n    if ($content =~ /__PACKAGE__->add_columns\\(\\s*(.*?)\\s*\\);/s) {\n        my $columns_block = $1;\n        \n        # Parse individual column definitions (format: column_name => { attributes })\n        while ($columns_block =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n            my ($col_name, $col_def) = ($1, $2);\n            \n            my $column = {\n                data_type => undef,\n                is_nullable => 1,\n                size => undef,\n                is_auto_increment => 0,\n                default_value => undef\n            };\n            \n            # Parse column attributes\n            if ($col_def =~ /data_type\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{data_type} = $1;\n            }\n            if ($col_def =~ /is_nullable\\s*=>\\s*(\\d+)/) {\n                $column->{is_nullable} = $1;\n            }\n            if ($col_def =~ /size\\s*=>\\s*(\\d+)/) {\n                $column->{size} = $1;\n            }\n            if ($col_def =~ /is_auto_increment\\s*=>\\s*(\\d+)/) {\n                $column->{is_auto_increment} = $1;\n            }\n            if ($col_def =~ /default_value\\s*=>\\s*['\"]([^'\"]+)['\"]/) {\n                $column->{default_value} = $1;\n            }\n            \n            $schema->{columns}->{$col_name} = $column;\n        }\n    }\n    \n    # Extract primary keys\n    if ($content =~ /__PACKAGE__->set_primary_key\\(([^)]+)\\);/) {\n        my $pk_def = $1;\n        while ($pk_def =~ /['\"]([^'\"]+)['\"]/g) {\n            push @{$schema->{primary_keys}}, $1;\n        }\n    }\n    \n    # Extract relationships\n    while ($content =~ /__PACKAGE__->(belongs_to|has_many|might_have|has_one)\\(\\s*['\"]([^'\"]+)['\"],\\s*['\"]([^'\"]+)['\"],\\s*\\{([^}]+)\\}/gs) {\n        my ($rel_type, $accessor, $related_class, $rel_def) = ($1, $2, $3, $4);\n        \n        my $relationship = {\n            type => $rel_type,\n            accessor => $accessor,\n            related_class => $related_class,\n            foreign_key => undef\n        };\n        \n        if ($rel_def =~ /['\"]foreign\\.([^'\"]+)['\"]/) {\n            $relationship->{foreign_key} = $1;\n        }\n        \n        push @{$schema->{relationships}}, $relationship;\n    }\n    \n    return $schema;\n}\n\n# Parse Result class schema by loading the class directly\nsub parse_result_class_schema {\n    my ($self, $c, $file_path) = @_;\n    \n    my $schema = {\n        columns => {},\n        primary_keys => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    # Extract the Result class name from the file path\n    my $result_class;\n    if ($file_path =~ m{/Result/(.+)\\.pm$}) {\n        my $class_path = $1;\n        $class_path =~ s{/}{::}g;  # Convert path separators to Perl package separators\n        $result_class = \"Comserv::Model::Schema::Ency::Result::$class_path\";\n    } else {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Could not extract Result class name from path: $file_path\");\n        return $schema;\n    }\n    \n    # Try to load the Result class\n    eval {\n        eval \"require $result_class\";\n        die $@ if $@;\n        \n        # Get the table name\n        $schema->{table_name} = $result_class->table if $result_class->can('table');\n        \n        # Get column information\n        if ($result_class->can('columns_info')) {\n            my $columns_info = $result_class->columns_info;\n            foreach my $col_name (keys %$columns_info) {\n                my $col_info = $columns_info->{$col_name};\n                $schema->{columns}->{$col_name} = {\n                    data_type => $col_info->{data_type} || 'unknown',\n                    is_nullable => $col_info->{is_nullable} // 1,\n                    size => $col_info->{size},\n                    is_auto_increment => $col_info->{is_auto_increment} || 0,\n                    default_value => $col_info->{default_value},\n                    extra => $col_info->{extra}\n                };\n            }\n        }\n        \n        # Get primary key information\n        if ($result_class->can('primary_columns')) {\n            my @primary_keys = $result_class->primary_columns;\n            $schema->{primary_keys} = \\@primary_keys;\n        }\n        \n        # Get relationship information\n        if ($result_class->can('relationships')) {\n            my @relationships = $result_class->relationships;\n            foreach my $rel_name (@relationships) {\n                if ($result_class->can('relationship_info')) {\n                    my $rel_info = $result_class->relationship_info($rel_name);\n                    push @{$schema->{relationships}}, {\n                        type => $rel_info->{attrs}->{accessor} || 'unknown',\n                        accessor => $rel_name,\n                        related_class => $rel_info->{class},\n                        foreign_key => $rel_info->{cond} || {}\n                    };\n                }\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Successfully loaded Result class $result_class with \" . scalar(keys %{$schema->{columns}}) . \" columns\");\n            \n    };\n    \n    if ($@) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'parse_result_class_schema',\n            \"Failed to load Result class $result_class: $@\");\n        return undef;  # Return undef to indicate failure, so fallback parsing can be used\n    }\n    \n    return $schema;\n}\n\n# Find differences between database and Result file schemas\nsub find_schema_differences {\n    my ($self, $db_schema, $result_schema) = @_;\n    \n    my @differences = ();\n    \n    # Compare columns\n    my %db_columns = %{$db_schema->{columns} || {}};\n    my %result_columns = %{$result_schema->{columns} || {}};\n    \n    # Find columns in database but not in Result file\n    foreach my $col_name (keys %db_columns) {\n        unless (exists $result_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_result',\n                column => $col_name,\n                description => \"Column '$col_name' exists in database but not in Result file\"\n            };\n        }\n    }\n    \n    # Find columns in Result file but not in database\n    foreach my $col_name (keys %result_columns) {\n        unless (exists $db_columns{$col_name}) {\n            push @differences, {\n                type => 'missing_in_database',\n                column => $col_name,\n                description => \"Column '$col_name' exists in Result file but not in database\"\n            };\n        }\n    }\n    \n    # Compare column attributes for common columns\n    foreach my $col_name (keys %db_columns) {\n        if (exists $result_columns{$col_name}) {\n            my $db_col = $db_columns{$col_name};\n            my $result_col = $result_columns{$col_name};\n            \n            # Compare data types\n            if (($db_col->{data_type} || '') ne ($result_col->{data_type} || '')) {\n                push @differences, {\n                    type => 'column_type_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{data_type},\n                    result_value => $result_col->{data_type},\n                    description => \"Data type mismatch for column '$col_name'\"\n                };\n            }\n            \n            # Compare nullable status\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    type => 'column_nullable_mismatch',\n                    column => $col_name,\n                    database_value => $db_col->{is_nullable} ? 'YES' : 'NO',\n                    result_value => $result_col->{is_nullable} ? 'YES' : 'NO',\n                    description => \"Nullable status mismatch for column '$col_name'\"\n                };\n            }\n        }\n    }\n    \n    return \\@differences;\n}\n\n# Get the database name\nsub get_database_name {\n    my ($self, $c) = @_;\n    \n    my $database_name = 'Unknown Database';\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SELECT DATABASE()\");\n        $sth->execute();\n        \n        if (my ($db_name) = $sth->fetchrow_array()) {\n            $database_name = $db_name;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_name', \n            \"Error getting database name: $_\");\n    };\n    \n    return $database_name;\n}\n\n# Get list of database tables with their schema information\nsub get_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_tables', \n            \"Error getting database tables: $_\");\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Ency database\nsub get_ency_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Log database connection info\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Connected to database: \" . $dbh->{Name});\n        \n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n        # Log the number of tables found\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'get_ency_database_tables',\n            \"Found \" . scalar(@tables) . \" tables: \" . join(', ', @tables));\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_database_tables', \n            \"Error getting ency database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get list of tables from the Forager database\nsub get_forager_database_tables {\n    my ($self, $c) = @_;\n    \n    my @tables = ();\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        my $sth = $dbh->prepare(\"SHOW TABLES\");\n        $sth->execute();\n        \n        while (my ($table) = $sth->fetchrow_array()) {\n            push @tables, $table;\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_database_tables', \n            \"Error getting forager database tables: $_\");\n        die $_;\n    };\n    \n    return \\@tables;\n}\n\n# Get table schema from the Ency database\nsub get_ency_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_ency_table_schema', \n            \"Error getting ency table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get table schema from the Forager database\nsub get_forager_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBForager')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE $table_name\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $row->{Type},\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                size => undef  # Will be parsed from Type if needed\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_forager_table_schema', \n            \"Error getting forager table schema for $table_name: $_\");\n        die $_;\n    };\n    \n    return $schema_info;\n}\n\n# Get database table schema information\nsub get_database_table_schema {\n    my ($self, $c, $table_name) = @_;\n    \n    my $schema_info = {\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        foreign_keys => [],\n        indexes => []\n    };\n    \n    try {\n        my $dbh = $c->model('DBEncy')->schema->storage->dbh;\n        \n        # Get column information\n        my $sth = $dbh->prepare(\"DESCRIBE `$table_name`\");\n        $sth->execute();\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            my $column_name = $row->{Field};\n            \n            # Parse MySQL column type\n            my ($data_type, $size) = $self->parse_mysql_column_type($row->{Type});\n            \n            $schema_info->{columns}->{$column_name} = {\n                data_type => $data_type,\n                size => $size,\n                is_nullable => ($row->{Null} eq 'YES' ? 1 : 0),\n                default_value => $row->{Default},\n                is_auto_increment => ($row->{Extra} =~ /auto_increment/i ? 1 : 0),\n                extra => $row->{Extra}\n            };\n            \n            # Check for primary key\n            if ($row->{Key} eq 'PRI') {\n                push @{$schema_info->{primary_keys}}, $column_name;\n            }\n        }\n        \n        # Get foreign key information\n        $sth = $dbh->prepare(\"\n            SELECT \n                COLUMN_NAME,\n                REFERENCED_TABLE_NAME,\n                REFERENCED_COLUMN_NAME,\n                CONSTRAINT_NAME\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND REFERENCED_TABLE_NAME IS NOT NULL\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{foreign_keys}}, {\n                column => $row->{COLUMN_NAME},\n                referenced_table => $row->{REFERENCED_TABLE_NAME},\n                referenced_column => $row->{REFERENCED_COLUMN_NAME},\n                constraint_name => $row->{CONSTRAINT_NAME}\n            };\n        }\n        \n        # Get unique constraints\n        $sth = $dbh->prepare(\"\n            SELECT \n                CONSTRAINT_NAME,\n                GROUP_CONCAT(COLUMN_NAME ORDER BY ORDINAL_POSITION) as COLUMNS\n            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n            WHERE TABLE_SCHEMA = DATABASE() \n            AND TABLE_NAME = ? \n            AND CONSTRAINT_NAME != 'PRIMARY'\n            GROUP BY CONSTRAINT_NAME\n        \");\n        $sth->execute($table_name);\n        \n        while (my $row = $sth->fetchrow_hashref()) {\n            push @{$schema_info->{unique_constraints}}, {\n                name => $row->{CONSTRAINT_NAME},\n                columns => [split(',', $row->{COLUMNS})]\n            };\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_database_table_schema', \n            \"Error getting schema for table $table_name: $_\");\n    };\n    \n    return $schema_info;\n}\n\n# Parse MySQL column type to extract data type and size\nsub parse_mysql_column_type {\n    my ($self, $type_string) = @_;\n    \n    # Handle common MySQL types\n    if ($type_string =~ /^(\\w+)\\((\\d+)\\)/) {\n        return ($1, $2);\n    } elsif ($type_string =~ /^(\\w+)\\((\\d+),(\\d+)\\)/) {\n        return ($1, \"$2,$3\");  # For decimal types\n    } elsif ($type_string =~ /^(\\w+)/) {\n        return ($1, undef);\n    }\n    \n    return ($type_string, undef);\n}\n\n# Get Result files and their schema information\nsub get_result_files {\n    my ($self, $c) = @_;\n    \n    my $result_files = {};\n    \n    try {\n        my $result_dir = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result');\n        \n        if (-d $result_dir) {\n            find(sub {\n                return unless -f $_ && /\\.pm$/;\n                return if $_ eq 'User.pm' && -d $File::Find::dir . '/User'; # Skip if there's a User directory\n                \n                my $file_path = $File::Find::name;\n                my $relative_path = $file_path;\n                $relative_path =~ s/^\\Q$result_dir\\E\\/?//;\n                \n                # Skip files in subdirectories for now (like User/User.pm)\n                return if $relative_path =~ /\\//;\n                \n                my $table_name = $_;\n                $table_name =~ s/\\.pm$//;\n                \n                my $schema_info = $self->get_result_file_schema($c, $table_name, $file_path);\n                if ($schema_info) {\n                    $result_files->{$schema_info->{table_name} || lc($table_name)} = $schema_info;\n                }\n            }, $result_dir);\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_files', \n            \"Error getting Result files: $_\");\n    };\n    \n    return $result_files;\n}\n\n# Get schema information from a Result file\nsub get_result_file_schema {\n    my ($self, $c, $class_name, $file_path) = @_;\n    \n    my $schema_info = {\n        file_path => $file_path,\n        columns => {},\n        primary_keys => [],\n        unique_constraints => [],\n        relationships => [],\n        table_name => undef\n    };\n    \n    try {\n        # Read the file content\n        my $content = read_file($file_path);\n        \n        # Extract table name\n        if ($content =~ /__PACKAGE__->table\\(['\"]([^'\"]+)['\"]\\)/) {\n            $schema_info->{table_name} = $1;\n        }\n        \n        # Extract columns\n        if ($content =~ /__PACKAGE__->add_columns\\((.*?)\\);/s) {\n            my $columns_text = $1;\n            $schema_info->{columns} = $self->parse_result_file_columns($columns_text);\n        }\n        \n        # Extract primary key\n        if ($content =~ /__PACKAGE__->set_primary_key\\((.*?)\\)/) {\n            my $pk_text = $1;\n            $pk_text =~ s/['\"\\s]//g;\n            @{$schema_info->{primary_keys}} = split(/,/, $pk_text);\n        }\n        \n        # Extract unique constraints\n        while ($content =~ /__PACKAGE__->add_unique_constraint\\(['\"]([^'\"]+)['\"] => \\[(.*?)\\]\\)/g) {\n            my $constraint_name = $1;\n            my $columns_text = $2;\n            $columns_text =~ s/['\"\\s]//g;\n            push @{$schema_info->{unique_constraints}}, {\n                name => $constraint_name,\n                columns => [split(/,/, $columns_text)]\n            };\n        }\n        \n        # Extract relationships\n        while ($content =~ /__PACKAGE__->(belongs_to|has_many|has_one|might_have)\\(([^)]+)\\)/g) {\n            my $relationship_type = $1;\n            my $relationship_text = $2;\n            \n            # Parse relationship parameters\n            my @params = split(/,/, $relationship_text);\n            if (@params >= 3) {\n                my $accessor = $params[0];\n                my $related_class = $params[1];\n                my $foreign_key = $params[2];\n                \n                # Clean up the parameters\n                $accessor =~ s/['\"\\s]//g;\n                $related_class =~ s/['\"\\s]//g;\n                $foreign_key =~ s/['\"\\s]//g;\n                \n                push @{$schema_info->{relationships}}, {\n                    type => $relationship_type,\n                    accessor => $accessor,\n                    related_class => $related_class,\n                    foreign_key => $foreign_key\n                };\n            }\n        }\n        \n    } catch {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'get_result_file_schema', \n            \"Error parsing Result file $file_path: $_\");\n        return undef;\n    };\n    \n    return $schema_info;\n}\n\n# Parse column definitions from Result file\nsub parse_result_file_columns {\n    my ($self, $columns_text) = @_;\n    \n    my $columns = {};\n    \n    # Split by column definitions (looking for column_name => { ... })\n    while ($columns_text =~ /(\\w+)\\s*=>\\s*\\{([^}]+)\\}/g) {\n        my $column_name = $1;\n        my $column_def = $2;\n        \n        my $column_info = {};\n        \n        # Parse column attributes\n        while ($column_def =~ /(\\w+)\\s*=>\\s*['\"]?([^'\",\\s]+)['\"]?/g) {\n            my $attr = $1;\n            my $value = $2;\n            \n            if ($attr eq 'size' && $value =~ /^\\d+$/) {\n                $column_info->{$attr} = int($value);\n            } elsif ($attr eq 'is_nullable' || $attr eq 'is_auto_increment') {\n                $column_info->{$attr} = ($value eq '1' || $value eq 'true') ? 1 : 0;\n            } else {\n                $column_info->{$attr} = $value;\n            }\n        }\n        \n        $columns->{$column_name} = $column_info;\n    }\n    \n    return $columns;\n}\n\n# Compare schema between database table and Result file\nsub compare_table_schema {\n    my ($self, $c, $table_name, $db_tables, $result_files) = @_;\n    \n    my $comparison = {\n        table_name => $table_name,\n        database_table_exists => 0,\n        result_file_exists => 0,\n        has_differences => 0,\n        column_differences => [],\n        primary_key_differences => [],\n        relationship_differences => [],\n        unique_constraint_differences => [],\n        database_schema => undef,\n        result_file_schema => undef\n    };\n    \n    # Check if database table exists\n    $comparison->{database_table_exists} = grep { $_ eq $table_name } @$db_tables;\n    \n    # Check if Result file exists\n    $comparison->{result_file_exists} = exists $result_files->{$table_name};\n    \n    # Get schemas if both exist\n    if ($comparison->{database_table_exists}) {\n        $comparison->{database_schema} = $self->get_database_table_schema($c, $table_name);\n    }\n    \n    if ($comparison->{result_file_exists}) {\n        $comparison->{result_file_schema} = $result_files->{$table_name};\n    }\n    \n    # Compare if both exist\n    if ($comparison->{database_table_exists} && $comparison->{result_file_exists}) {\n        $self->compare_columns($comparison);\n        $self->compare_primary_keys($comparison);\n        $self->compare_unique_constraints($comparison);\n        $self->compare_relationships($comparison);\n        \n        # Set has_differences flag\n        $comparison->{has_differences} = (\n            @{$comparison->{column_differences}} > 0 ||\n            @{$comparison->{primary_key_differences}} > 0 ||\n            @{$comparison->{relationship_differences}} > 0 ||\n            @{$comparison->{unique_constraint_differences}} > 0\n        );\n    } elsif (!$comparison->{database_table_exists} || !$comparison->{result_file_exists}) {\n        $comparison->{has_differences} = 1;\n    }\n    \n    return $comparison;\n}\n\n# Compare columns between database and Result file\nsub compare_columns {\n    my ($self, $comparison) = @_;\n    \n    my $db_columns = $comparison->{database_schema}->{columns};\n    my $result_columns = $comparison->{result_file_schema}->{columns};\n    \n    # Get all column names\n    my %all_columns = ();\n    foreach my $col (keys %$db_columns) { $all_columns{$col} = 1; }\n    foreach my $col (keys %$result_columns) { $all_columns{$col} = 1; }\n    \n    foreach my $column_name (sort keys %all_columns) {\n        my $db_col = $db_columns->{$column_name};\n        my $result_col = $result_columns->{$column_name};\n        \n        if (!$db_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_database',\n                result_file_definition => $result_col\n            };\n        } elsif (!$result_col) {\n            push @{$comparison->{column_differences}}, {\n                column => $column_name,\n                type => 'missing_in_result_file',\n                database_definition => $db_col\n            };\n        } else {\n            # Compare column attributes\n            my @differences = ();\n            \n            # Compare data type\n            if (lc($db_col->{data_type}) ne lc($result_col->{data_type})) {\n                push @differences, {\n                    attribute => 'data_type',\n                    database_value => $db_col->{data_type},\n                    result_file_value => $result_col->{data_type}\n                };\n            }\n            \n            # Compare size\n            if (defined($db_col->{size}) != defined($result_col->{size}) ||\n                (defined($db_col->{size}) && defined($result_col->{size}) && \n                 $db_col->{size} ne $result_col->{size})) {\n                push @differences, {\n                    attribute => 'size',\n                    database_value => $db_col->{size},\n                    result_file_value => $result_col->{size}\n                };\n            }\n            \n            # Compare nullable\n            if (($db_col->{is_nullable} || 0) != ($result_col->{is_nullable} || 0)) {\n                push @differences, {\n                    attribute => 'is_nullable',\n                    database_value => $db_col->{is_nullable},\n                    result_file_value => $result_col->{is_nullable}\n                };\n            }\n            \n            # Compare auto increment\n            if (($db_col->{is_auto_increment} || 0) != ($result_col->{is_auto_increment} || 0)) {\n                push @differences, {\n                    attribute => 'is_auto_increment',\n                    database_value => $db_col->{is_auto_increment},\n                    result_file_value => $result_col->{is_auto_increment}\n                };\n            }\n            \n            if (@differences) {\n                push @{$comparison->{column_differences}}, {\n                    column => $column_name,\n                    type => 'attribute_differences',\n                    differences => \\@differences,\n                    database_definition => $db_col,\n                    result_file_definition => $result_col\n                };\n            }\n        }\n    }\n}\n\n# Compare primary keys\nsub compare_primary_keys {\n    my ($self, $comparison) = @_;\n    \n    my $db_pks = $comparison->{database_schema}->{primary_keys};\n    my $result_pks = $comparison->{result_file_schema}->{primary_keys};\n    \n    # Sort for comparison\n    my @db_pks_sorted = sort @$db_pks;\n    my @result_pks_sorted = sort @$result_pks;\n    \n    if (join(',', @db_pks_sorted) ne join(',', @result_pks_sorted)) {\n        push @{$comparison->{primary_key_differences}}, {\n            database_primary_keys => \\@db_pks_sorted,\n            result_file_primary_keys => \\@result_pks_sorted\n        };\n    }\n}\n\n# Compare unique constraints\nsub compare_unique_constraints {\n    my ($self, $comparison) = @_;\n    \n    my $db_constraints = $comparison->{database_schema}->{unique_constraints};\n    my $result_constraints = $comparison->{result_file_schema}->{unique_constraints};\n    \n    # This is a simplified comparison - you might want to make it more sophisticated\n    if (@$db_constraints != @$result_constraints) {\n        push @{$comparison->{unique_constraint_differences}}, {\n            database_constraints => $db_constraints,\n            result_file_constraints => $result_constraints\n        };\n    }\n}\n\n# Compare relationships (this is Result file specific)\nsub compare_relationships {\n    my ($self, $comparison) = @_;\n    \n    # For now, we'll just note if relationships exist in the Result file\n    # but aren't reflected in the database foreign keys\n    my $result_relationships = $comparison->{result_file_schema}->{relationships};\n    my $db_foreign_keys = $comparison->{database_schema}->{foreign_keys};\n    \n    if (@$result_relationships > @$db_foreign_keys) {\n        push @{$comparison->{relationship_differences}}, {\n            type => 'missing_foreign_keys_in_database',\n            result_file_relationships => $result_relationships,\n            database_foreign_keys => $db_foreign_keys\n        };\n    }\n}\n\n# Apply selected schema changes\nsub apply_schema_changes {\n    my ($self, $c) = @_;\n    \n    my $changes = $c->req->param('changes');\n    my $direction = $c->req->param('direction'); # 'db_to_result' or 'result_to_db'\n    \n    if (!$changes) {\n        $c->flash->{error_msg} = \"No changes selected to apply.\";\n        return;\n    }\n    \n    try {\n        my $changes_data = decode_json($changes);\n        my $applied_changes = 0;\n        \n        foreach my $change (@$changes_data) {\n            if ($direction eq 'db_to_result') {\n                $self->apply_database_to_result_change($c, $change);\n            } elsif ($direction eq 'result_to_db') {\n                $self->apply_result_to_database_change($c, $change);\n            }\n            $applied_changes++;\n        }\n        \n        $c->flash->{success_msg} = \"Successfully applied $applied_changes changes.\";\n        \n    } catch {\n        my $error = \"Error applying changes: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'apply_schema_changes', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Apply change from database to Result file\nsub apply_database_to_result_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the Result file based on database schema\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_database_to_result_change', \n        \"Applying database to Result file change: \" . encode_json($change));\n}\n\n# Apply change from Result file to database\nsub apply_result_to_database_change {\n    my ($self, $c, $change) = @_;\n    \n    # This would update the database schema based on Result file\n    # Implementation depends on the specific change type\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'apply_result_to_database_change', \n        \"Applying Result file to database change: \" . encode_json($change));\n}\n\n# Generate Result file from database table\nsub generate_result_file {\n    my ($self, $c) = @_;\n    \n    my $table_name = $c->req->param('table_name');\n    \n    if (!$table_name) {\n        $c->flash->{error_msg} = \"No table name specified for Result file generation.\";\n        return;\n    }\n    \n    try {\n        my $db_schema = $self->get_database_table_schema($c, $table_name);\n        my $result_file_content = $self->generate_result_file_content($table_name, $db_schema);\n        \n        # Save the Result file\n        my $result_file_path = $c->path_to('lib', 'Comserv', 'Model', 'Schema', 'Ency', 'Result', ucfirst($table_name) . '.pm');\n        write_file($result_file_path, $result_file_content);\n        \n        $c->flash->{success_msg} = \"Result file generated successfully for table '$table_name'.\";\n        \n    } catch {\n        my $error = \"Error generating Result file: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'generate_result_file', $error);\n        $c->flash->{error_msg} = $error;\n    };\n}\n\n# Generate Result file content from database schema\nsub generate_result_file_content {\n    my ($self, $table_name, $db_schema) = @_;\n    \n    my $class_name = ucfirst($table_name);\n    my $content = \"package Comserv::Model::Schema::Ency::Result::$class_name;\\n\";\n    $content .= \"use base 'DBIx::Class::Core';\\n\\n\";\n    $content .= \"__PACKAGE__->table('$table_name');\\n\";\n    $content .= \"__PACKAGE__->add_columns(\\n\";\n    \n    # Add columns\n    foreach my $column_name (sort keys %{$db_schema->{columns}}) {\n        my $col = $db_schema->{columns}->{$column_name};\n        $content .= \"    $column_name => {\\n\";\n        $content .= \"        data_type => '$col->{data_type}',\\n\";\n        \n        if (defined $col->{size}) {\n            $content .= \"        size => $col->{size},\\n\";\n        }\n        \n        if ($col->{is_nullable}) {\n            $content .= \"        is_nullable => 1,\\n\";\n        }\n        \n        if ($col->{is_auto_increment}) {\n            $content .= \"        is_auto_increment => 1,\\n\";\n        }\n        \n        if (defined $col->{default_value}) {\n            $content .= \"        default_value => '$col->{default_value}',\\n\";\n        }\n        \n        $content .= \"    },\\n\";\n    }\n    \n    $content .= \");\\n\";\n    \n    # Add primary key\n    if (@{$db_schema->{primary_keys}}) {\n        my $pk_list = join(', ', map { \"'$_'\" } @{$db_schema->{primary_keys}});\n        $content .= \"__PACKAGE__->set_primary_key($pk_list);\\n\";\n    }\n    \n    # Add unique constraints\n    foreach my $constraint (@{$db_schema->{unique_constraints}}) {\n        my $col_list = join(', ', map { \"'$_'\" } @{$constraint->{columns}});\n        $content .= \"__PACKAGE__->add_unique_constraint('$constraint->{name}' => [$col_list]);\\n\";\n    }\n    \n    $content .= \"\\n1;\\n\";\n    \n    return $content;\n}\n\n# Git pull functionality\nsub git_pull :Path('/admin/git_pull') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Starting git_pull action\");\n    \n    # Check if the user has admin role (same as other admin functions)\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_pull', \n            \"Access denied: User does not have admin role\");\n        \n        # Set error message in flash\n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        \n        # Redirect to login page with destination parameter\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request (user confirmed the git pull)\n    if ($c->req->method eq 'POST' && $c->req->param('confirm')) {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n            \"Git pull confirmed, executing\");\n        \n        # Execute the git pull operation\n        my ($success, $output, $warning) = $self->execute_git_pull($c);\n        \n        # Store the results in stash for the template\n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Git pull completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Git pull failed. See output for details.\",\n            warning_msg => $warning\n        );\n    }\n    \n    # Use the standard debug message system\n    if ($c->session->{debug_mode}) {\n        push @{$c->stash->{debug_msg}}, \"Admin controller git_pull view - Template: admin/git_pull.tt\";\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_pull.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_pull', \n        \"Completed git_pull action\");\n}\n\n# Execute the git pull operation with divergent branch handling\nsub execute_git_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 0;\n    \n    # Path to the theme_mappings.json file\n    my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n    my $backup_path = \"$theme_mappings_path.bak\";\n    \n    # Check if theme_mappings.json exists\n    my $theme_mappings_exists = -e $theme_mappings_path;\n    \n    try {\n        # Backup theme_mappings.json if it exists\n        if ($theme_mappings_exists) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Backing up theme_mappings.json\");\n            copy($theme_mappings_path, $backup_path) or die \"Failed to backup theme_mappings.json: $!\";\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Check Git status and handle divergent branches\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Checking Git status for divergent branches\");\n        \n        # First, fetch the latest changes from remote\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\";\n        \n        # Check for divergent branches\n        my $status_output = `git -C ${\\$c->path_to()} status --porcelain=v1 2>&1`;\n        my $branch_status = `git -C ${\\$c->path_to()} status -b --porcelain=v1 2>&1`;\n        \n        $output .= \"Git status output:\\n$status_output\\n\";\n        $output .= \"Branch status:\\n$branch_status\\n\";\n        \n        # Check if there are local changes that need to be stashed\n        my $has_local_changes = 0;\n        if ($theme_mappings_exists) {\n            my $git_status = `git -C ${\\$c->path_to()} status --porcelain root/static/config/theme_mappings.json`;\n            $has_local_changes = $git_status =~ /^\\s*[AM]\\s+root\\/static\\/config\\/theme_mappings\\.json/m;\n            \n            if ($has_local_changes) {\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Local changes detected in theme_mappings.json\");\n                $output .= \"Local changes detected in theme_mappings.json\\n\";\n                \n                # Stash the changes\n                my $stash_output = `git -C ${\\$c->path_to()} stash push -m \"Auto-stash before git pull\" -- root/static/config/theme_mappings.json 2>&1`;\n                $output .= \"Stashed changes: $stash_output\\n\";\n            }\n        }\n        \n        # Check if we have divergent branches by comparing local and remote\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit: $local_commit\\n\";\n        $output .= \"Remote commit: $remote_commit\\n\";\n        \n        # Check if branches have diverged\n        my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n        chomp($merge_base);\n        \n        my $diverged = 0;\n        if ($local_commit ne $remote_commit && $merge_base ne $local_commit && $merge_base ne $remote_commit) {\n            $diverged = 1;\n            $output .= \"Divergent branches detected - local and remote have different commits\\n\";\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                \"Divergent branches detected\");\n        }\n        \n        # Execute git pull with appropriate strategy\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Executing git pull with merge strategy\");\n        \n        # Use merge strategy to handle divergent branches safely\n        my $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n        $output .= \"Git pull output:\\n$pull_output\\n\";\n        \n        # Check if pull was successful or if we need to handle divergent branches\n        if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n            $success = 1;\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull completed successfully\");\n        } elsif ($pull_output =~ /divergent branches|Need to specify how to reconcile/) {\n            # Handle divergent branches with explicit merge strategy\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Handling divergent branches with merge strategy\");\n            \n            # Configure git to use merge strategy for divergent branches\n            my $config_output = `git -C ${\\$c->path_to()} config pull.rebase false 2>&1`;\n            $output .= \"Git config output: $config_output\\n\";\n            \n            # Try pull again with explicit merge strategy\n            $pull_output = `git -C ${\\$c->path_to()} pull --no-rebase origin master 2>&1`;\n            $output .= \"Git pull (retry) output:\\n$pull_output\\n\";\n            \n            if ($pull_output =~ /Already up to date|Fast-forward|Updating|Merge made by/) {\n                $success = 1;\n                $warning = \"Divergent branches were successfully merged. Local changes have been preserved.\";\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Divergent branches resolved successfully\");\n            } else {\n                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Git pull failed after handling divergent branches: $pull_output\");\n                return (0, $output, \"Git pull failed after attempting to resolve divergent branches. Manual intervention may be required.\");\n            }\n        } elsif ($pull_output =~ /CONFLICT/) {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull resulted in conflicts: $pull_output\");\n            return (0, $output, \"Git pull resulted in merge conflicts. Manual resolution required.\");\n        } else {\n            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n                \"Git pull failed: $pull_output\");\n            return (0, $output, \"Git pull failed. See output for details.\");\n        }\n        \n        # Apply stashed changes if needed\n        if ($has_local_changes) {\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                \"Applying stashed changes\");\n            my $stash_apply_output = `git -C ${\\$c->path_to()} stash pop 2>&1`;\n            $output .= \"Applied stashed changes:\\n$stash_apply_output\\n\";\n            \n            # Check for conflicts\n            if ($stash_apply_output =~ /CONFLICT|error:/) {\n                $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Conflicts detected when applying stashed changes\");\n                $warning = \"Conflicts detected when applying stashed changes. You may need to manually resolve them.\";\n                \n                # Restore from backup\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n                    \"Restoring theme_mappings.json from backup\");\n                copy($backup_path, $theme_mappings_path) or die \"Failed to restore from backup: $!\";\n                $output .= \"Restored theme_mappings.json from backup due to conflicts\\n\";\n            }\n        }\n        \n        # Final status check\n        my $final_status = `git -C ${\\$c->path_to()} status --porcelain 2>&1`;\n        if ($final_status) {\n            $output .= \"Final git status:\\n$final_status\\n\";\n            if ($final_status =~ /^UU|^AA|^DD/) {\n                $warning = \"There may be unresolved merge conflicts. Please check the repository status.\";\n            }\n        }\n        \n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_pull', \n            \"Git pull operation completed\");\n            \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_pull', \n            \"Error during git pull: $error\");\n        $output .= \"Error: $error\\n\";\n        return (0, $output, undef);\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Emergency Git operations for production servers\nsub git_emergency :Path('/admin/git_emergency') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Starting git_emergency action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'git_emergency', \n            \"Access denied: User does not have admin role\");\n        \n        $c->flash->{error_msg} = \"You need to be an administrator to access this area.\";\n        $c->response->redirect($c->uri_for('/user/login', {\n            destination => $c->req->uri\n        }));\n        return;\n    }\n    \n    # Check if this is a POST request with specific action\n    if ($c->req->method eq 'POST') {\n        my $action = $c->req->param('action') || '';\n        my ($success, $output, $warning) = (0, '', undef);\n        \n        if ($action eq 'reset_hard') {\n            ($success, $output, $warning) = $self->execute_git_reset_hard($c);\n        } elsif ($action eq 'force_pull') {\n            ($success, $output, $warning) = $self->execute_git_force_pull($c);\n        } elsif ($action eq 'status_check') {\n            ($success, $output, $warning) = $self->execute_git_status_check($c);\n        }\n        \n        $c->stash(\n            output => $output,\n            success_msg => $success ? \"Operation completed successfully.\" : undef,\n            error_msg => $success ? undef : \"Operation failed. See output for details.\",\n            warning_msg => $warning,\n            action_performed => $action\n        );\n    }\n    \n    # Set the template\n    $c->stash(template => 'admin/git_emergency.tt');\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'git_emergency', \n        \"Completed git_emergency action\");\n}\n\n# Execute Git status check for diagnostics\nsub execute_git_status_check {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = undef;\n    my $success = 1;\n    \n    try {\n        $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Performing comprehensive Git status check\");\n        \n        # Get current branch\n        my $current_branch = `git -C ${\\$c->path_to()} branch --show-current 2>&1`;\n        chomp($current_branch);\n        $output .= \"Current branch: $current_branch\\n\\n\";\n        \n        # Get Git status\n        my $status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Git status:\\n$status\\n\\n\";\n        \n        # Get local and remote commit info\n        my $local_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        my $remote_commit = `git -C ${\\$c->path_to()} rev-parse origin/master 2>&1`;\n        chomp($local_commit);\n        chomp($remote_commit);\n        \n        $output .= \"Local commit (HEAD): $local_commit\\n\";\n        $output .= \"Remote commit (origin/master): $remote_commit\\n\\n\";\n        \n        # Check if branches have diverged\n        if ($local_commit ne $remote_commit) {\n            my $merge_base = `git -C ${\\$c->path_to()} merge-base HEAD origin/master 2>&1`;\n            chomp($merge_base);\n            \n            if ($merge_base ne $local_commit && $merge_base ne $remote_commit) {\n                $output .= \"⚠️  DIVERGENT BRANCHES DETECTED\\n\";\n                $output .= \"Merge base: $merge_base\\n\";\n                $warning = \"Branches have diverged. Local and remote have different commits.\";\n            } elsif ($merge_base eq $local_commit) {\n                $output .= \"✅ Local branch is behind remote (safe to pull)\\n\";\n            } else {\n                $output .= \"✅ Local branch is ahead of remote\\n\";\n            }\n        } else {\n            $output .= \"✅ Local and remote are in sync\\n\";\n        }\n        \n        # Get recent commits\n        my $recent_commits = `git -C ${\\$c->path_to()} log --oneline -5 2>&1`;\n        $output .= \"\\nRecent commits:\\n$recent_commits\\n\";\n        \n        # Check for uncommitted changes\n        my $uncommitted = `git -C ${\\$c->path_to()} diff --name-only 2>&1`;\n        if ($uncommitted) {\n            $output .= \"\\nUncommitted changes:\\n$uncommitted\\n\";\n        }\n        \n        # Check for untracked files\n        my $untracked = `git -C ${\\$c->path_to()} ls-files --others --exclude-standard 2>&1`;\n        if ($untracked) {\n            $output .= \"\\nUntracked files (first 10):\\n\";\n            my @untracked_lines = split(/\\n/, $untracked);\n            for my $i (0..9) {\n                last unless $untracked_lines[$i];\n                $output .= \"$untracked_lines[$i]\\n\";\n            }\n            if (@untracked_lines > 10) {\n                $output .= \"... and \" . (@untracked_lines - 10) . \" more files\\n\";\n            }\n        }\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_status_check', \n            \"Error during Git status check: $error\");\n        $output .= \"Error: $error\\n\";\n        $success = 0;\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git force pull (dangerous - use with caution)\nsub execute_git_force_pull {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  FORCE PULL PERFORMED - Local changes may be lost!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Performing FORCE PULL - this may lose local changes\");\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Reset to remote state (DANGEROUS)\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard output:\\n$reset_output\\n\\n\";\n        \n        # Clean untracked files\n        my $clean_output = `git -C ${\\$c->path_to()} clean -fd 2>&1`;\n        $output .= \"Git clean output:\\n$clean_output\\n\\n\";\n        \n        # Verify final state\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Force pull completed - local changes were discarded\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_force_pull', \n            \"Error during force pull: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# Execute Git reset hard (very dangerous - use only in emergencies)\nsub execute_git_reset_hard {\n    my ($self, $c) = @_;\n    my $output = '';\n    my $warning = \"⚠️  HARD RESET PERFORMED - All local changes have been discarded!\";\n    my $success = 0;\n    \n    try {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Performing HARD RESET - this will discard ALL local changes\");\n        \n        # Get current commit for reference\n        my $current_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($current_commit);\n        $output .= \"Current commit before reset: $current_commit\\n\\n\";\n        \n        # Backup theme_mappings.json if it exists\n        my $theme_mappings_path = $c->path_to('root', 'static', 'config', 'theme_mappings.json');\n        my $backup_path = \"$theme_mappings_path.bak\";\n        \n        if (-e $theme_mappings_path) {\n            copy($theme_mappings_path, $backup_path);\n            $output .= \"Backed up theme_mappings.json to $backup_path\\n\";\n        }\n        \n        # Fetch latest changes first\n        my $fetch_output = `git -C ${\\$c->path_to()} fetch origin 2>&1`;\n        $output .= \"Git fetch output:\\n$fetch_output\\n\\n\";\n        \n        # Hard reset to remote master\n        my $reset_output = `git -C ${\\$c->path_to()} reset --hard origin/master 2>&1`;\n        $output .= \"Git reset --hard origin/master output:\\n$reset_output\\n\\n\";\n        \n        # Get new commit for reference\n        my $new_commit = `git -C ${\\$c->path_to()} rev-parse HEAD 2>&1`;\n        chomp($new_commit);\n        $output .= \"New commit after reset: $new_commit\\n\\n\";\n        \n        # Final status\n        my $final_status = `git -C ${\\$c->path_to()} status 2>&1`;\n        $output .= \"Final status:\\n$final_status\\n\";\n        \n        $success = 1;\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Hard reset completed - repository is now at origin/master\");\n        \n    } catch {\n        my $error = $_;\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'execute_git_reset_hard', \n            \"Error during hard reset: $error\");\n        $output .= \"Error: $error\\n\";\n    };\n    \n    return ($success, $output, $warning);\n}\n\n# AJAX endpoint to sync table field to result file\nsub sync_table_to_result :Path('/admin/sync_table_to_result') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_table_to_result',\n        \"Starting sync_table_to_result action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    \n    unless ($table_name && $field_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, field_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        # Get table field info\n        my $table_field_info = $self->get_table_field_info($c, $table_name, $field_name, $database);\n        \n        # Update result file with table values\n        my $result = $self->update_result_field_from_table($c, $table_name, $field_name, $database, $table_field_info);\n        \n        $c->stash(json => {\n            success => 1,\n            message => \"Successfully synced table field '$field_name' to result file\",\n            field_info => $table_field_info\n        });\n        \n    } catch {\n        my $error = \"Error syncing table to result: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_table_to_result', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# AJAX endpoint to sync result field to table\nsub sync_result_to_table :Path('/admin/sync_result_to_table') :Args(0) {\n    my ($self, $c) = @_;\n    \n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'sync_result_to_table',\n        \"Starting sync_result_to_table action\");\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # Parse JSON request\n    my $json_data;\n    try {\n        my $body = $c->req->body;\n        if ($body) {\n            local $/;\n            my $json_text = <$body>;\n            $json_data = decode_json($json_text);\n        } else {\n            die \"No request body provided\";\n        }\n    } catch {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => \"Invalid JSON request: $_\" });\n        $c->forward('View::JSON');\n        return;\n    };\n    \n    my $table_name = $json_data->{table_name};\n    my $field_name = $json_data->{field_name};\n    my $database = $json_data->{database};\n    my $sync_all = $json_data->{sync_all};\n    \n    unless ($table_name && $database) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Missing required parameters: table_name, database' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    # If field_name is not provided but sync_all is not true, return error\n    unless ($field_name || $sync_all) {\n        $c->response->status(400);\n        $c->stash(json => { success => 0, error => 'Either field_name or sync_all must be provided' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    try {\n        if ($sync_all) {\n            # Sync all fields from Result to table\n            my $result = $self->sync_all_fields_result_to_table($c, $table_name, $database);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced all fields from Result file to table '$table_name'\",\n                synced_fields => $result->{synced_fields} || [],\n                warnings => $result->{warnings} || []\n            });\n        } else {\n            # Sync single field\n            my $result_field_info = $self->get_result_field_info($c, $table_name, $field_name, $database);\n            my $result = $self->update_table_field_from_result($c, $table_name, $field_name, $database, $result_field_info);\n            \n            $c->stash(json => {\n                success => 1,\n                message => \"Successfully synced result field '$field_name' to table\",\n                field_info => $result_field_info\n            });\n        }\n        \n    } catch {\n        my $error = \"Error syncing result to table: $_\";\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'sync_result_to_table', $error);\n        \n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Debug endpoint to test field comparison\nsub debug_field_comparison :Path('/admin/debug_field_comparison') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Check if the user has admin role\n    unless ($c->user_exists && $c->check_user_roles('admin')) {\n        $c->response->status(403);\n        $c->stash(json => { success => 0, error => 'Access denied' });\n        $c->forward('View::JSON');\n        return;\n    }\n    \n    my $table_name = $c->req->param('table_name') || 'users';\n    my $database = $c->req->param('database') || 'ency';\n    \n    try {\n        # Build comprehensive mapping for this database\n        my $result_table_mapping = $self->build_result_table_mapping($c, $database);\n        \n        my $comparison = $self->get_table_result_comparison_v2($c, $table_name, $database, $result_table_mapping);\n        \n        $c->stash(json => {\n            success => 1,\n            table_name => $table_name,\n            database => $database,\n            comparison => $comparison,\n            mapping_keys => [keys %$result_table_mapping],\n            debug_info => {\n                has_result_file => $comparison->{has_result_file},\n                result_file_path => $comparison->{result_file_path},\n                fields_count => $comparison->{fields} ? scalar(keys %{$comparison->{fields}}) : 0\n            }\n        });\n        \n    } catch {\n        my $error = \"Debug field comparison error: $_\";\n        $c->response->status(500);\n        $c->stash(json => { success => 0, error => $error });\n    };\n    \n    $c->forward('View::JSON');\n}\n\n# Helper method to get table field information\nsub get_table_field_info {\n    my ($self, $c, $table_name, $field_name, $database) = @_;\n    \n    my $model_name = $database eq 'ency' ? 'DBEncy' : 'DBForager';\n    my $schema = $c->model($model_name)->schema;\n    \n    # Get table information from database\n    my $dbh = $schema->storage->dbh;\n    my $sth = $dbh->column_info(undef, undef, $table_name, $field_name);\n    my $column_info = $sth->fetchrow_hashref;\n    \n    if (!$column_info) {\n        die \"Field '$field_name' not found in table '$table_name'\";\n    }\n    \n    return {\n        data_type => $column_info->{TYPE_NAME} || $column_info->{DATA_TYPE},\n        size => $column_info->{COLUMN_SIZE},\n        is_nullable => $column_info->{NULLABLE} ? 1 : 0,\n        is_auto_increment => $column_info->{IS_AUTOINCREMENT} ? 1 : 0,\n        default_value => $column_info->{COLUMN_DEF}\n    };\n}\n\n# Enhanced helper method to normalize data types for comparison\nsub normalize_data_type {\n    my ($self, $data_type) = @_;\n    \n    return ",
                    "language": "perl5"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1753560450967,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "yes"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "User AI Instruction",
                    "description": "User AI Instruction",
                    "uri": "zen-rules://user/custom",
                    "content": "read AI_DEVELOPMENT_GUIDELINES\nall code must be varifed by user"
                },
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "content": "\n\n# Comserv Project Information\n\n## Summary\nComserv is a comprehensive web-based system for managing business operations, projects, and documentation. It's built using the Catalyst Perl web framework and provides features for project management, theme customization, and user authentication.\n\n## Structure\n- `Comserv/`: Main application directory containing the core application code\n  - `lib/`: Application code and models\n  - `docs/`: Documentation files\n  - `root/`: Static assets and templates\n  - `script/`: Utility scripts for server management and database operations\n  - `t/`: Test files\n- `app/`: Additional application components\n- `data/`: Data files including pricing information\n- `proxmox/`: Proxmox VE integration components\n\n## Language & Runtime\n**Language**: Perl\n**Version**: 5.x (compatible with Perl 5.40.0)\n**Framework**: Catalyst 5.90130\n**Build System**: Module::Install\n**Package Manager**: CPAN\n\n## Dependencies\n**Main Dependencies**:\n- Catalyst::Runtime (5.90130)\n- Moose\n- DBIx::Class\n- Template (Template Toolkit)\n- JSON/JSON::MaybeXS\n- Log::Log4perl\n- DateTime\n- File::Slurp\n\n**Development Dependencies**:\n- Test::More (0.88+)\n- Test::Pod\n- Test::Pod::Coverage\n- Test::WWW::Mechanize::Catalyst\n- Catalyst::Devel\n\n## Build & Installation\n```bash\ncd Comserv\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n## Database\n**Type**: MySQL\n**Setup**: \n```bash\nmysql -u root -p < database_initialization_script.sql\n```\n**Schema Management**: DBIx::Class::Schema::Loader\n\n## Testing\n**Framework**: Test::More\n**Test Location**: Comserv/t/\n**Run Command**:\n```bash\ncd Comserv\nprove -l t/\n```\n\n## Server Execution\n**Development Server**:\n```bash\ncd Comserv\nscript/comserv_server.pl\n```\n**Production Deployment**:\n```bash\ncd Comserv\nscript/comserv_fastcgi.pl\n# or\nstarman --port 5000 --workers 5 comserv.psgi\n```\n\n## Authentication & Authorization\n- Session-based authentication\n- Role-based access control\n- Multiple authentication realms\n- Support for user groups and site-specific permissions\n\n## Features\n- Project management system\n- Theme customization system\n- Email integration\n- PDF generation\n- Proxmox VE integration\n- Multi-site support"
                },
                {
                    "name": "Database Development Standards and Best Practices",
                    "description": "Database Development Standards and Best Practices",
                    "uri": "zen-rules://repo/database-standards",
                    "content": "\n\n# Database Development Standards\n\n## Query Standards\n- **Table Aliases:** Use table aliases in all queries to avoid ambiguity (e.g., 'me.column_name')\n- **Error Handling:** Implement proper error handling with eval blocks and try/catch\n- **Parameterized Queries:** Use parameterized queries to prevent SQL injection\n\n## Schema Management\n- **Naming Conventions:** Follow naming conventions for tables, columns, and relationships\n- **Documentation:** Document schema changes and rationale for future reference\n- **Performance:** Regularly optimize database performance and indexes\n- **Version Control:** Use Git to track schema changes with proper tagging\n- **Backup Protocol:** Always backup database before making schema changes\n\n## Model Standards (DBIx::Class)\n- **Result Classes:** Located in `/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Model/Schema/Ency/Result/`\n- **Relationships:** Define proper relationships between tables\n- **Validation:** Implement data validation in model classes\n\n## Configuration Priority\n- **Primary:** ZeroTier production server (172.30.161.222) - works from any network\n- **Secondary:** Local network production server (192.168.1.198) - home/office only\n- **Tertiary:** localhost MySQL (development)\n- **Fallback:** SQLite (offline mode)\n\n## Security Protocols\n- **Input Validation:** Validate all user inputs before database operations\n- **Access Controls:** Implement proper access controls based on user roles\n- **Regular Reviews:** Regularly review and update security protocols"
                },
                {
                    "name": "AI Behavior Enforcement Rules for Zencoder",
                    "description": "AI Behavior Enforcement Rules for Zencoder",
                    "uri": "zen-rules://repo/ai-behavior-enforcement",
                    "content": "\n\n# AI Behavior Enforcement Rules\n\n## MANDATORY PROMPT TRACKING\n**CURRENT PROMPT:** This is prompt #[X] of 5 maximum allowed prompts.\n\n### Prompt Counter Protocol\n- **Start Each Response:** Begin every response with current prompt count\n- **Track Internally:** Keep running count throughout conversation\n- **Warn at Prompt 4:** Alert user that next prompt will trigger handoff\n- **Stop at Prompt 5:** Refuse to continue, provide handoff documentation\n\n## MANDATORY APPROVAL WORKFLOW\n\n### Before ANY Code Changes\n1. **STOP:** Do not modify any files without explicit user approval\n2. **PRESENT:** Show exactly what will be changed using the standard format\n3. **WAIT:** Wait for explicit approval (\"yes\", \"approved\", \"apply changes\")\n4. **CONFIRM:** Acknowledge approval before proceeding\n5. **EXECUTE:** Apply changes only after confirmation\n\n### Standard Change Presentation\n```\n🔄 PROPOSED CHANGE TO: [filename]\n📝 CHANGE TYPE: [Addition/Modification/Deletion]\n📋 DESCRIPTION: [what this accomplishes]\n\n❌ CURRENT CODE:\n[existing code or \"N/A\"]\n\n✅ NEW CODE:\n[proposed code or \"DELETED\"]\n\n💡 REASON: [why needed]\n\n⚠️  APPROVAL REQUIRED: Please confirm with \"approved\" or \"yes\"\n🔄 REVERT: Changes can be undone if needed\n```\n\n## VIOLATION CONSEQUENCES\n- **Prompt Limit Exceeded:** Immediate session termination with handoff\n- **Unapproved Changes:** Acknowledge violation and request approval retroactively\n- **Missing Counter:** Add prompt counter to current response\n\n## HANDOFF TEMPLATE (Use on 5th Prompt)\n```\n🚨 PROMPT LIMIT REACHED - HANDOFF REQUIRED\n\n📊 SESSION SUMMARY:\n- Prompts Used: 5/5\n- Files Modified: [list]\n- Tasks Completed: [list]\n- Tasks Remaining: [list]\n\n🔄 HANDOFF PROMPT FOR NEXT AI:\n\"Continue working on [project/task]. Read development-guidelines.md and ai-behavior-enforcement.md first. \nCurrent context: [brief context]\nFiles being worked on: [list]\nNext steps needed: [specific actions]\"\n\n📚 REQUIRED READING FOR NEXT AI:\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- [any other relevant docs]\n\n✅ DOCUMENTATION UPDATED: [what was recorded]\n```\n\n## EMERGENCY PROTOCOLS\n- **User Says \"Stop\":** Immediately cease all activities\n- **User Says \"Revert\":** Provide instructions for undoing changes\n- **User Says \"Handoff\":** Immediately provide handoff documentation"
                },
                {
                    "name": "Template Toolkit Standards and Requirements",
                    "description": "Template Toolkit Standards and Requirements",
                    "uri": "zen-rules://repo/template-standards",
                    "content": "\n\n# Template Toolkit (.tt) Standards\n\n## Required PageVersion Header Format\nAll .tt files must include this exact format:\n```\n[% META title = 'Page Title Here' %]\n[% PageVersion = 'relative/path/filename.tt,v 0.01 YYYY/MM/DD author Exp author ' %]\n[% IF c.session.debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n```\n\n## Template Standards\n- **Theme Compliance:** Use theme system variables for styling - NO page-specific CSS\n- **Debug Mode:** Include debug mode blocks for development visibility\n- **Responsive Design:** Implement mobile-first responsive design patterns\n- **HTML Structure:** Use proper semantic HTML structure\n- **Template Toolkit:** Follow Template Toolkit best practices\n\n## Navigation Integration\nWhen working with navigation templates:\n- **Main Navigation:** Include via `/Navigation/navigation.tt`\n- **Admin Menu:** Use `/Navigation/admintopmenu.tt` for admin-only sections\n- **Dropdown Menus:** Reference existing dropdown templates in `/Navigation/` directory\n\n## Documentation File Rules - CRITICAL\n- **File Format:** ONLY `.tt` files for application documentation - NO `.md` files\n- **EXISTING FILES FIRST:** ALWAYS search for and use existing files before creating new ones\n- **Naming Consistency:** Use same file names across AI sessions to prevent content loss\n- **Content Priority:** Always improve existing files rather than creating new ones\n- **Role-Based Access:** Respect existing Documentation/index.tt role-based structure\n- **Directory Consolidation:** Use established directory structure - don't create new directories\n\n## File Creation Protocol\n1. **Search First:** Use file search tools to find existing similar files\n2. **Check Directory:** Look at existing directory structure in target location\n3. **Ask User:** If multiple similar files exist, ask which should be updated\n4. **Update Existing:** Improve existing files rather than creating duplicates"
                },
                {
                    "name": "Debugging and Troubleshooting Protocols",
                    "description": "Debugging and Troubleshooting Protocols",
                    "uri": "zen-rules://repo/debugging-protocols",
                    "content": "\n\n# Debugging Protocols\n\n## Log Analysis Priority\n1. **Application Logs:** Check `/home/shanta/PycharmProjects/comserv2/Comserv/logs/application.log` first\n2. **Error Logs:** Look for recent errors and stack traces\n3. **Debug Mode:** Enable debug mode in session for detailed output\n\n## Common Debugging Steps\n1. **Reproduce Issue:** Ensure issue is reproducible\n2. **Check Recent Changes:** Review recent code modifications\n3. **Verify Dependencies:** Ensure all required modules are installed\n4. **Database Connectivity:** Test database connections\n5. **Permission Issues:** Check file and directory permissions\n\n## Testing Protocol\n- **Unit Tests:** Run relevant unit tests first\n- **Integration Tests:** Test full workflow\n- **Browser Testing:** Always test in actual browser environment\n- **Log Monitoring:** Monitor logs during testing\n\n## Performance Issues\n- **Database Queries:** Check for slow queries\n- **Memory Usage:** Monitor memory consumption\n- **Template Rendering:** Check template compilation times\n- **Network Latency:** Consider network-related delays"
                }
            ]
        },
        {
            "id": "8025428b-0bef-477c-a000-0cea7489ea74",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "**CURRENT PROMPT:** This is prompt #5 of 5 maximum allowed prompts.\n\n🚨 **PROMPT LIMIT REACHED - HANDOFF REQUIRED**\n\n✅ **APPROVAL CONFIRMED** - Applying the final critical fix before handoff."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_0132mBGnqY3BXHdNQxJExz1L",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                                "fsPath": "/home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- /home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm\n+++ /home/shanta/PycharmProjects/comserv2/Comserv/lib/Comserv/Controller/Admin.pm\n@@ -1809,30 +1809,63 @@\n         $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'schema_compare',\n             \"Processing config for $db_key, type: \" . ref($config));\n         \n-        # Ensure config is a hash reference\n+        # Handle config that might be a JSON string\n+        if (!ref($config)) {\n+            # Try to parse as JSON if it's a string\n+            eval {\n+                $config = decode_json($config);\n+            };\n+            if ($@) {\n+                $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+                    \"Failed to parse JSON config for $db_key: $@\");\n+                next;\n+            }\n+        }\n+        \n+        # Ensure config is now a hash reference\n         unless (ref($config) eq 'HASH') {\n             $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n-                \"Config for $db_key is not a hash reference: \" . ref($config));\n+                \"Config for $db_key is not a hash reference after parsing: \" . ref($config));\n             next;\n         }\n         \n-        # Test connection to determine availability\n-        my $connection_test = $self->test_database_connection($c, $db_key, $config);\n-        \n-        $database_comparison->{databases}->{$db_key} = {\n-            name => $db_key,\n-            display_name => $config->{description} || $db_key,\n-            type => $config->{db_type} || 'unknown',\n-            priority => $config->{priority} || 999,\n-            available => $connection_test->{connected},\n-            error => $connection_test->{error},\n-            host => $config->{host} || 'localhost',\n-            database => $config->{database} || '',\n-            is_current => ($db_key eq $current_backend),\n-            table_count => 0,\n-            table_comparisons => [], # Will be loaded on demand via AJAX\n-            loaded => 0 # Flag to indicate if comparison data has been loaded\n+        # Test connection to determine availability with error handling\n+        my $connection_test;\n+        eval {\n+            $connection_test = $self->test_database_connection($c, $db_key, $config);\n         };\n+        if ($@) {\n+            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+                \"Error testing connection for $db_key: $@\");\n+            $connection_test = {\n+                connected => 0,\n+                error => \"Connection test failed: $@\",\n+                db_key => $db_key\n+            };\n+        }\n+        \n+        # Safely build database comparison entry\n+        eval {\n+            $database_comparison->{databases}->{$db_key} = {\n+                name => $db_key,\n+                display_name => $config->{description} || $db_key,\n+                type => $config->{db_type} || 'unknown',\n+                priority => $config->{priority} || 999,\n+                available => $connection_test->{connected} || 0,\n+                error => $connection_test->{error} || '',\n+                host => $config->{host} || 'localhost',\n+                database => $config->{database} || '',\n+                is_current => ($db_key eq $current_backend),\n+                table_count => 0,\n+                table_comparisons => [], # Will be loaded on demand via AJAX\n+                loaded => 0 # Flag to indicate if comparison data has been loaded\n+            };\n+        };\n+        if ($@) {\n+            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',\n+                \"Error building database comparison entry for $db_key: $@\");\n+            next;\n+        }\n         \n         # Update summary counts\n         if ($connection_test->{connected}) {",
                    "refToolCallId": "toolu_0132mBGnqY3BXHdNQxJExz1L"
                },
                {
                    "type": "text",
                    "text": "📊 **SESSION SUMMARY:**\n- **Prompts Used:** 5/5\n- **Files Modified:** `/home/shanta/PycharmProjects/comserv2/pm`\n- **Tasks Completed:** \n  - ✅ Fixed critical hash reference error on line 1804\n  - ✅ Added JSON parsing for individual database configs\n  - ✅ Added comprehensive error handling with eval blocks\n  - ✅ Added debugging output to identify data type issues\n- **Tasks Remaining:** \n  - Update schema_compare.tt template for collapsible containers\n  - Add AJAX functionality for loading comparison data\n  - Test the complete performance improvement\n\n🔄 **HANDOFF PROMPT FOR NEXT AI:**\n\"Continue working on schema comparison performance optimization. Read development-guidelines.md and ai-\nCRITICAL BUG FIXED: The hash reference error in Admin.pm line 1804 has been resolved by adding JSON parsing for individual database configs and comprehensive error handling.\nCURRENT CONTEXT: The schema_compare method now properly handles JSON string configs from get_all_database_configs and has graceful error handling. The backend is ready for testing.\nFILES BEING WORKED ON:\n/home/shanta/PycharmProjects/comserv2/pm (critical bug fixed, ready for testing)\n/home/shanta/PycharmProjects/comserv2/Comserv/root/admin/schema_compare.tt (needs template updates)\nNEXT STEPS NEEDED:\n1. Test the schema_compare method to ensure the hash reference error is resolved\n2. Update schema_compare.tt template to display all databases as collapsible containers\n3. Add AJAX functionality to load comparison data when containers are opened\n4. Test the complete performance improvement workflow\"\n\n📚 **REQUIRED READING FOR NEXT AI:**\n- .zencoder/rules/development-guidelines.md\n- .zencoder/rules/ai-behavior-enforcement.md\n- .zencoder/rules/template-standards.md\n- .zencoder/rules/database-standards.md\n- .zencoder/rules/debugging-protocols.md\n\n✅ **DOCUMENTATION UPDATED:** Critical hash reference bug fixed in schema_compare method with JSON parsing and comprehensive error handling. Backend is now ready for testing and template development."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "Comserv/lib/Comserv/Controller/Admin.pm",
                            "patch": "@@ -67208,32 +67208,492 @@\n fig));%0A        %0A\n+        # Handle config that might be a JSON string%0A        if (!ref($config)) %7B%0A            # Try to parse as JSON if it's a string%0A            eval %7B%0A                $config = decode_json($config);%0A            %7D;%0A            if ($@) %7B%0A                $self-%3Elogging-%3Elog_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',%0A                    %22Failed to parse JSON config for $db_key: $@%22);%0A                next;%0A            %7D%0A        %7D%0A        %0A\n         # Ensure\n@@ -67703,16 +67703,20 @@\n nfig is \n+now \n a hash r\n@@ -67921,16 +67921,30 @@\n eference\n+ after parsing\n : %22 . re\n@@ -68036,32 +68036,52 @@\n ine availability\n+ with error handling\n %0A        my $con\n@@ -68068,32 +68068,77 @@\n ling%0A        my \n+$connection_test;%0A        eval %7B%0A            \n $connection_test\n@@ -68195,33 +68195,466 @@\n onfig);%0A        \n+%7D;\n %0A\n+        if ($@) %7B%0A            $self-%3Elogging-%3Elog_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',%0A                %22Error testing connection for $db_key: $@%22);%0A            $connection_test = %7B%0A                connected =%3E 0,%0A                error =%3E %22Connection test failed: $@%22,%0A                db_key =%3E $db_key%0A            %7D;%0A        %7D%0A        %0A        # Safely build database comparison entry%0A        eval %7B%0A    \n         $databas\n@@ -68698,32 +68698,36 @@\n = %7B%0A            \n+    \n name =%3E $db_key,\n@@ -68731,32 +68731,36 @@\n ey,%0A            \n+    \n display_name =%3E \n@@ -68798,32 +68798,36 @@\n ey,%0A            \n+    \n type =%3E $config-\n@@ -68843,32 +68843,36 @@\n %7D %7C%7C 'unknown',%0A\n+    \n             prio\n@@ -68911,32 +68911,36 @@\n 99,%0A            \n+    \n available =%3E $co\n@@ -68965,16 +68965,21 @@\n nnected%7D\n+ %7C%7C 0\n ,%0A      \n@@ -68976,32 +68976,36 @@\n  0,%0A            \n+    \n error =%3E $connec\n@@ -69022,16 +69022,22 @@\n %3E%7Berror%7D\n+ %7C%7C ''\n ,%0A      \n@@ -69042,16 +69042,20 @@\n         \n+    \n host =%3E \n@@ -69090,32 +69090,36 @@\n t',%0A            \n+    \n database =%3E $con\n@@ -69153,16 +69153,20 @@\n         \n+    \n is_curre\n@@ -69202,16 +69202,20 @@\n ckend),%0A\n+    \n         \n@@ -69240,32 +69240,36 @@\n  0,%0A            \n+    \n table_comparison\n@@ -69325,16 +69325,20 @@\n         \n+    \n loaded =\n@@ -69395,34 +69395,268 @@\n  loaded%0A        \n+    %7D;%0A        %7D;%0A        if ($@) %7B%0A            $self-%3Elogging-%3Elog_with_details($c, 'error', __FILE__, __LINE__, 'schema_compare',%0A                %22Error building database comparison entry for $db_key: $@%22);%0A            next;%0A        \n %7D\n-;\n %0A        %0A      \n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "68b733ec-b529-4d54-abd4-deed497919aa"
            },
            "createdAt": 1753560452855,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "isQnaAgent": false,
    "isRepoInfoAgent": false,
    "autoApply": false
}
}