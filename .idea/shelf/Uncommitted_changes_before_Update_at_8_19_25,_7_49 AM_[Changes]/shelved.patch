Index: Comserv/lib/Comserv/Controller/Todo.pm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Comserv::Controller::Todo;\nuse Moose;\nuse namespace::autoclean;\nuse DateTime::Format::ISO8601;\nuse Data::Dumper;\nuse Comserv::Util::Logging; # Import the logging utility\nBEGIN { extends 'Catalyst::Controller'; }\nhas 'logging' => (\n    is => 'ro',\n    default => sub { Comserv::Util::Logging->instance }\n);\n\n# Apply restrictions to the entire controller\nsub begin :Private {\n    my ($self, $c) = @_;\n\n    # Log the path the user is accessing\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'begin', \"User accessing path: \" . $c->req->uri);\n\n    # Fetch the user's roles from the session\n    my $roles = $c->session->{roles} || [];\n\n    # Ensure roles are an array reference\n    if (ref $roles ne 'ARRAY') {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'begin', \"Invalid or undefined roles in session for user: \" . ($c->session->{username} || 'Guest'));\n\n        # Stash the current path so it can be used for redirection after login\n        $c->stash->{template} = $c->req->uri;\n\n        # Set error message for session problems\n        $c->stash->{error_msg} = \"Session expired or invalid. Please log in again.\";\n\n        # Redirect to login\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'begin', \"Redirecting to login page due to missing or invalid roles.\");\n        $c->res->redirect($c->uri_for('/user/login'));\n        $c->detach;\n    }\n\n    # Check if the user has the 'admin' role\n    unless (grep { $_ eq 'admin' } @$roles) {\n        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'begin', \"Unauthorized access attempt by user: \" . ($c->session->{username} || 'Guest'));\n\n        # Stash the current path for potential use\n        $c->stash->{redirect_to} = $c->req->uri;\n\n        # Redirect unauthorized users to the home page with an error message\n        $c->stash->{error_msg} = \"Unauthorized access. You do not have permission to view this page.\";\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'begin', \"Redirecting unauthorized user to the home page.\");\n        $c->res->redirect($c->uri_for('/'));\n        $c->detach;\n    }\n\n    # If we get here, the user is authorized\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'begin', \"User authorized to access Todo: \" . ($c->session->{username} || 'Guest'));\n}\n\nsub index :Path(/todo) :Args(0) {\n    my ( $self, $c ) = @_;\n\n    # Use safe_search to retrieve all todo records - this will sync missing tables from production\n    my $schema = $c->model('DBEncy');\n    my @todos = $schema->safe_search($c, 'Todo', {}, {});\n    $c->stash(todos => \\@todos);\n\n    # Set the TT template to use.\n    $c->stash(template => 'todo/todo.tt');\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'index', 'Fetched todos for the, todo page using safe_search');\n    $c->forward($c->view('TT'));\n}\nsub auto :Private {\n    my ($self, $c) = @_;\n\n    # Check if the user is logged in and is an admin\n    unless (defined $c->session->{username} && grep { $_ eq 'admin' } @{$c->session->{roles}}) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'auto', \"Unauthorized access attempt to Todo controller\");\n        $c->response->redirect($c->uri_for('/'));\n        return 0;\n    }\n\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'auto', \"User authorized to access Todo controller\");\n    return 1;\n}\n\n# Main todo action with filtering capabilities\nsub todo :Path('/todo') :Args(0) {\n    my ( $self, $c ) = @_;\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'todo', 'Fetching todos for the todo page');\n\n    # Get filter parameters from query string\n    my $filter_type = $c->request->query_parameters->{filter} || 'all';\n    my $search_term = $c->request->query_parameters->{search} || '';\n    my $project_id = $c->request->query_parameters->{project_id} || '';\n    my $status_filter = $c->request->query_parameters->{status} || '';\n\n    # ROUTING FIX: Redirect to dedicated views when using specific filters without other parameters\n    # This ensures consistency between /todo?filter=day and /todo/day\n    if (!$search_term && !$project_id && !$status_filter) {\n        if ($filter_type eq 'day' || $filter_type eq 'today') {\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'todo', 'Redirecting to dedicated day view');\n            $c->res->redirect($c->uri_for('/todo/day'));\n            $c->detach;\n        } elsif ($filter_type eq 'week') {\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'todo', 'Redirecting to dedicated week view');\n            $c->res->redirect($c->uri_for('/todo/week'));\n            $c->detach;\n        } elsif ($filter_type eq 'month') {\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'todo', 'Redirecting to dedicated month view');\n            $c->res->redirect($c->uri_for('/todo/month'));\n            $c->detach;\n        }\n    }\n\n    # Get a DBIx::Class::Schema object with HybridDB backend integration\n    my $schema = $c->model('DBEncy');\n    \n    # Check user's backend preference and use appropriate schema\n    my $backend_preference = $schema->get_hybrid_backend_preference($c);\n    my $actual_backend = 'mysql';  # Default\n    \n    if ($backend_preference eq 'sqlite') {\n        my $sqlite_schema = $schema->get_sqlite_schema($c);\n        if ($sqlite_schema) {\n            $schema = $sqlite_schema;\n            $actual_backend = 'sqlite';\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'todo', \n                \"Using SQLite backend for database access\");\n        } else {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'todo', \n                \"SQLite backend requested but unavailable, falling back to MySQL\");\n        }\n    } else {\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'todo', \n            \"Using MySQL backend for database access\");\n    }\n    \n    # Store backend info in stash for template display\n    $c->stash(\n        current_backend => $actual_backend,\n        backend_preference => $backend_preference,\n    );\n\n    # Build the search conditions\n    my $search_conditions = {\n        'me.sitename' => $c->session->{SiteName},  # filter by site (specify table alias)\n    };\n\n    # Only show non-completed todos by default (unless explicitly filtering for completed)\n    if ($status_filter eq 'completed') {\n        $search_conditions->{'me.status'} = 3;  # completed status\n    } elsif ($status_filter eq 'in_progress') {\n        $search_conditions->{'me.status'} = 2;  # in progress status\n    } elsif ($status_filter eq 'new') {\n        $search_conditions->{'me.status'} = 1;  # new status\n    } elsif ($status_filter ne 'all') {\n        $search_conditions->{'me.status'} = { '!=' => 3 };  # exclude completed todos\n    }\n\n    # Add project filter if specified\n    if ($project_id) {\n        $search_conditions->{'me.project_id'} = $project_id;\n    }\n\n    # Add search term filter if specified\n    if ($search_term) {\n        $search_conditions->{'-or'} = [\n            { 'me.subject' => { 'like', \"%$search_term%\" } },\n            { 'me.description' => { 'like', \"%$search_term%\" } },\n            { 'me.comments' => { 'like', \"%$search_term%\" } }\n        ];\n    }\n\n    # Apply date filters\n    my $now = DateTime->now;\n    my $today = $now->ymd;\n\n    if ($filter_type eq 'day' || $filter_type eq 'today') {\n        # Today's todos: show todos that are due today, start today, or are active and overdue\n        $search_conditions->{'-or'} = [\n            { 'me.due_date' => $today },                    # Due today\n            { 'me.start_date' => $today },                  # Starting today\n            { '-and' => [                              # Overdue but not completed\n                { 'me.due_date' => { '<' => $today } },\n                { 'me.status' => { '!=' => 3 } }\n            ]}\n        ];\n    } elsif ($filter_type eq 'week') {\n        # This week's todos\n        my $start_of_week = $now->clone->subtract(days => $now->day_of_week - 1)->ymd;\n        my $end_of_week = $now->clone->add(days => 7 - $now->day_of_week)->ymd;\n\n        $search_conditions->{'-and'} = [\n            { 'me.start_date' => { '<=' => $end_of_week } },\n            { '-or' => [\n                { 'me.due_date' => { '>=' => $start_of_week } },\n                { 'me.status' => { '!=' => 3 } }  # Not completed\n            ]}\n        ];\n    } elsif ($filter_type eq 'month') {\n        # This month's todos\n        my $start_of_month = $now->clone->set_day(1)->ymd;\n        my $end_of_month = $now->clone->set_day($now->month_length)->ymd;\n\n        $search_conditions->{'-and'} = [\n            { 'me.start_date' => { '<=' => $end_of_month } },\n            { '-or' => [\n                { 'me.due_date' => { '>=' => $start_of_month } },\n                { 'me.status' => { '!=' => 3 } }  # Not completed\n            ]}\n        ];\n    }\n\n    # Fetch todos with the applied filters using safe search\n    my @todos = $schema->safe_search(\n        $c,\n        'Todo',\n        $search_conditions,\n        { \n            order_by => { -asc => ['me.priority', 'me.start_date'] },\n            prefetch => 'project'  # Include project data for better integration\n        }\n    );\n\n    # Fetch all projects for the filter dropdown\n    my $projects = [];\n    eval {\n        my $project_controller = $c->controller('Project');\n        if ($project_controller) {\n            $projects = $project_controller->fetch_projects_with_subprojects($c) || [];\n        }\n    };\n\n    if ($@) {\n        $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'todo',\n            \"Error fetching projects: $@\");\n    }\n\n    # Get overdue todos for dashboard\n    my $overdue_todos = $self->get_overdue_todos($c);\n\n    # Add the todos and filter info to the stash\n    $c->stash(\n        todos => \\@todos,\n        sitename => $c->session->{SiteName},\n        filter_type => $filter_type,\n        search_term => $search_term,\n        project_id => $project_id,\n        status_filter => $status_filter,\n        projects => $projects,\n        overdue_todos => $overdue_todos,\n        template => 'todo/todo.tt',\n    );\n\n    $c->forward($c->view('TT'));\n}\nsub details :Path('/todo/details') :Args {\n    my ( $self, $c ) = @_;\n\n    # Get the record_id from the request parameters\n    my $record_id = $c->request->parameters->{record_id};\n\n    # Get a DBIx::Class::Schema object with HybridDB backend integration\n    my $schema = $c->model('DBEncy');\n    \n    # Check user's backend preference and use appropriate schema\n    my $backend_preference = $schema->get_hybrid_backend_preference($c);\n    if ($backend_preference eq 'sqlite') {\n        my $sqlite_schema = $schema->get_sqlite_schema($c);\n        if ($sqlite_schema) {\n            $schema = $sqlite_schema;\n            $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'details', \n                \"Using SQLite backend for database access\");\n        } else {\n            $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'details', \n                \"SQLite backend requested but unavailable, falling back to MySQL\");\n        }\n    } else {\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'details', \n            \"Using MySQL backend for database access\");\n    }\n\n    # Fetch the todo with the given record_id using safe find\n    my $todo = $schema->safe_find($c, 'Todo', $record_id);\n\n    # Check if the todo was found\n    if (defined $todo) {\n        # Calculate accumulative_time using the Log model\n        my $log_model = $c->model('Log');\n        my $accumulative_time_in_seconds = $log_model->calculate_accumulative_time($c, $record_id);\n\n        # Convert accumulative_time from seconds to hours and minutes\n        my $hours = int($accumulative_time_in_seconds / 3600);\n        my $minutes = int(($accumulative_time_in_seconds % 3600) / 60);\n\n        # Format the total time as 'HH:MM'\n        my $accumulative_time = sprintf(\"%02d:%02d\", $hours, $minutes);\n\n        # Add the todo and accumulative_time to the stash\n        $c->stash(record => $todo, accumulative_time => $accumulative_time);\n\n        # Set the template to 'todo/details.tt'\n        $c->stash(template => 'todo/details.tt');\n    } else {\n        # Handle the case where the todo is not found\n        $c->response->body('Todo not found');\n    }\n}\n\nsub addtodo :Path('/todo/addtodo') :Args(0) {\n    my ($self, $c) = @_;\n\n    # Logging the start of the addtodo method\n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'addtodo', 'Initiating addtodo subroutine'\n    );\n\n    # Fetch project data from the Project Controller\n    my $project_controller = $c->controller('Project');\n    my $projects = $project_controller->fetch_projects_with_subprojects($c);\n\n    # Fetch the project_id from query parameters (if any)\n    my $project_id = $c->request->query_parameters->{project_id};\n    my $current_project;\n\n    # Attempt to locate the current project based on project_id\n    if ($project_id) {\n        my $schema = $c->model('DBEncy');\n        \n        # Check user's backend preference and use appropriate schema\n        my $backend_preference = $schema->get_hybrid_backend_preference($c);\n        if ($backend_preference eq 'sqlite') {\n            my $sqlite_schema = $schema->get_sqlite_schema($c);\n            if ($sqlite_schema) {\n                $schema = $sqlite_schema;\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'addtodo', \n                    \"Using SQLite backend for database access\");\n            } else {\n                $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'addtodo', \n                    \"SQLite backend requested but unavailable, falling back to MySQL\");\n            }\n        }\n        \n        $current_project = $schema->resultset('Project')->find($project_id);\n        if ($current_project) {\n            $self->logging->log_with_details(\n                $c, 'info', __FILE__, __LINE__, 'addtodo',\n                \"Located current project with ID: $project_id (\" . $current_project->name . \")\"\n            );\n        } else {\n            $self->logging->log_with_details(\n                $c, 'warn', __FILE__, __LINE__, 'addtodo',\n                \"Invalid project ID passed in query: $project_id\"\n            );\n        }\n    }\n\n    # Fetch all users to populate the user drop-down\n    my $schema = $c->model('DBEncy');\n    \n    # Check user's backend preference and use appropriate schema (if not already done)\n    unless ($project_id) {  # Only check if we haven't already done it above\n        my $backend_preference = $schema->get_hybrid_backend_preference($c);\n        if ($backend_preference eq 'sqlite') {\n            my $sqlite_schema = $schema->get_sqlite_schema($c);\n            if ($sqlite_schema) {\n                $schema = $sqlite_schema;\n                $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'addtodo', \n                    \"Using SQLite backend for database access\");\n            } else {\n                $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'addtodo', \n                    \"SQLite backend requested but unavailable, falling back to MySQL\");\n            }\n        }\n    }\n    \n    my @users = $schema->resultset('User')->search({}, { order_by => 'id' });\n\n    # Log a message confirming users were fetched\n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'addtodo',\n        'Fetched users to populate user_id dropdown'\n    );\n\n    # Add the projects, sitename, and users to the stash\n    $c->stash(\n        projects        => $projects,        # Parent projects with nested sub-projects\n        current_project => $current_project, # Selected project for the form (if any)\n        users           => \\@users,          # List of users to populate dropdown\n        template        => 'todo/addtodo.tt' # Template for rendering\n    );\n\n    # Log the end of the addtodo subroutine\n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'addtodo', 'Completed addtodo subroutine'\n    );\n}\n\nsub debug :Local {\n    my ($self, $c) = @_;\n\n    # Print the @INC path\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'debug', \"INC: \" . join(\", \", @INC));\n\n    # Check if the DateTime plugin is installed\n    my $is_installed = eval {\n        require Template::Plugin::DateTime;\n        1;\n    };\n    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'debug', \"DateTime plugin is \" . ($is_installed ? \"\" : \"not \") . \"installed\");\n\n    $c->response->body(\"Debugging information has been logged\");\n}\n\nsub edit :Path('/todo/edit') :Args(1) {\n    my ($self, $c, $record_id) = @_;\n\n    # Log the entry into the edit action\n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'edit',\n        \"Entered edit action for record_id: \" . ($record_id || 'undefined')\n    );\n\n    # Error handling for record_id\n    unless ($record_id) {\n        $self->logging->log_with_details(\n            $c, 'error', __FILE__, __LINE__, 'edit.record_id',\n            'Record ID is missing in the URL.'\n        );\n        $c->stash(\n            error_msg => 'Record ID is required but was not provided.',\n            template  => 'todo/todo.tt',\n        );\n        return;\n    }\n\n    # Initialize the schema to fetch data\n    my $schema = $c->model('DBEncy');\n\n    # Fetch the todo item with the given record_id using safe find\n    my $todo = $schema->safe_find($c, 'Todo', $record_id);\n\n    if (!$todo) {\n        $self->logging->log_with_details(\n            $c, 'error', __FILE__, __LINE__, 'edit.record_not_found',\n            \"Todo item not found for record ID: $record_id.\"\n        );\n        $c->stash(\n            error_msg => \"No todo item found for record ID: $record_id.\",\n            template  => 'todo/todo.tt',\n        );\n        return;\n    }\n\n    # Fetch project data from the Project Controller\n    my $project_controller = $c->controller('Project');\n    my $projects = $project_controller->fetch_projects_with_subprojects($c);\n\n    # Fetch all users to populate the user drop-down\n    my @users = $schema->resultset('User')->search({}, { order_by => 'id' });\n\n    # Calculate accumulative_time using the Log model\n    my $log_model = $c->model('Log');\n    my $accumulative_time_in_seconds = $log_model->calculate_accumulative_time($c, $record_id);\n\n    # Convert accumulative_time from seconds to hours and minutes\n    my $hours = int($accumulative_time_in_seconds / 3600);\n    my $minutes = int(($accumulative_time_in_seconds % 3600) / 60);\n\n    # Format the total time as 'HH:MM'\n    my $accumulative_time = sprintf(\"%02d:%02d\", $hours, $minutes);\n\n    # Add the todo, projects, and users to the stash\n    $c->stash(\n        record           => $todo,\n        projects         => $projects,\n        users            => \\@users,\n        accumulative_time => $accumulative_time,\n        template         => 'todo/edit.tt'\n    );\n\n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'edit',\n        \"Successfully loaded edit form for record ID: $record_id\"\n    );\n}\nsub modify :Path('/todo/modify') :Args(1) {\n    my ( $self, $c, $record_id ) = @_;\n\n    # Log the entry into the modify action\n    $self->logging->log_with_details(\n        $c,\n        'info',\n        __FILE__,\n        __LINE__,\n        'modify',\n        \"Entered modify action for record_id: \" . ( $record_id || 'undefined' )\n    );\n\n    # Error handling for record_id\n    unless ($record_id) {\n        $self->logging->log_with_details(\n            $c,\n            'error',\n            __FILE__,\n            __LINE__,\n            'modify.record_id',\n            'Record ID is missing in the URL.'\n        );\n        $c->stash(\n            error_msg => 'Record ID is required but was not provided.',\n            form_data => $c->request->params, # Preserve form values\n            template  => 'todo/details.tt',    # Re-render the form\n        );\n        return; # Return to allow the user to fix the error\n    }\n\n    # Initialize the schema to fetch data\n    my $schema = $c->model('DBEncy');\n\n    # Fetch the todo item with the given record_id\n    my $todo = $schema->resultset('Todo')->find($record_id);\n\n    if (!$todo) {\n        $self->logging->log_with_details(\n            $c,\n            'error',\n            __FILE__,\n            __LINE__,\n            'modify.record_not_found',\n            \"Todo item not found for record ID: $record_id.\"\n        );\n        $c->stash(\n            error_msg => \"No todo item found for record ID: $record_id.\",\n            form_data => $c->request->params, # Preserve form values\n            template  => 'todo/details.tt',    # Re-render the form\n        );\n        return;\n    }\n\n    # Retrieve form data from the user's request\n    my $form_data = $c->request->params;\n\n    # Log form data for debugging\n    $self->logging->log_with_details(\n        $c,\n        'debug',\n        __FILE__,\n        __LINE__,\n        'modify.form_data',\n        \"Form data received: \" . join(\", \", map { \"$_: $form_data->{$_}\" } keys %$form_data)\n    );\n\n    # Validate mandatory fields (example: \"sitename\" is required)\n    unless ($form_data->{sitename}) {\n        $self->logging->log_with_details(\n            $c,\n            'warn',\n            __FILE__,\n            __LINE__,\n            'modify.validation',\n            'Sitename is required but missing in the form data.'\n        );\n        $c->stash(\n            error_msg => 'Sitename is required. Please provide it.',\n            form_data => $form_data,          # Preserve form values\n            record    => $todo,              # Pass the current todo item\n            template  => 'todo/details.tt',   # Re-render the form\n        );\n        return; # Early exit to allow the user to fix the error\n    }\n\n    # Declare and initialize variables with form data or defaults\n    my $parent_todo = $form_data->{parent_todo} || $todo->parent_todo || '';\n    my $accumulative_time = $form_data->{accumulative_time} || 0;\n\n    # Log the start of the update process\n    $self->logging->log_with_details(\n        $c,\n        'info',\n        __FILE__,\n        __LINE__,\n        'modify.update',\n        \"Updating todo item with record ID: $record_id.\"\n    );\n\n    # Handle project_id properly - ensure it's a valid integer or find/create default project\n    my $project_id = $form_data->{project_id};\n    \n    # Convert empty string to undef, then handle undef case\n    if (!defined $project_id || $project_id eq '' || $project_id eq '0') {\n        # Try to get existing project_id from todo record\n        $project_id = $todo->project_id;\n        \n        # If still no valid project_id, find or create a default project\n        if (!defined $project_id || $project_id eq '' || $project_id eq '0') {\n            my $default_project = $schema->resultset('Project')->find_or_create({\n                sitename => $c->session->{SiteName},\n                project_name => 'Default Project',\n                project_code => 'DEFAULT',\n                description => 'Default project for todos without specific project assignment',\n                status => 'active',\n                created_by => $c->session->{username} || 'system',\n                created_date => DateTime->now->ymd,\n            });\n            $project_id = $default_project->id;\n            \n            $self->logging->log_with_details(\n                $c, 'info', __FILE__, __LINE__, 'modify.default_project',\n                \"Using default project (ID: $project_id) for todo record $record_id\"\n            );\n        }\n    }\n    \n    # Ensure user_id is valid integer\n    my $user_id = $form_data->{user_id};\n    if (!defined $user_id || $user_id eq '' || $user_id eq '0') {\n        $user_id = $todo->user_id || 1;  # Use existing or default to 1\n    }\n    \n    # Ensure estimated_man_hours is valid integer\n    my $estimated_hours = $form_data->{estimated_man_hours};\n    if (!defined $estimated_hours || $estimated_hours eq '') {\n        $estimated_hours = $todo->estimated_man_hours || 0;\n    }\n    \n    # Ensure priority is valid integer\n    my $priority = $form_data->{priority};\n    if (!defined $priority || $priority eq '') {\n        $priority = $todo->priority || 1;\n    }\n    \n    # Handle time_of_day field - convert empty string to undef for nullable time field\n    my $time_of_day = $form_data->{time_of_day};\n    if (defined $time_of_day && $time_of_day eq '') {\n        $time_of_day = undef;  # Convert empty string to NULL for database\n    }\n\n    # Attempt to update the todo record\n    eval {\n        $todo->update({\n            sitename             => $form_data->{sitename},\n            start_date           => $form_data->{start_date},\n            parent_todo          => $parent_todo,\n            due_date             => $form_data->{due_date} || DateTime->now->add(days => 7)->ymd,\n            subject              => $form_data->{subject},\n            description          => $form_data->{description},\n            estimated_man_hours  => $estimated_hours,\n            comments             => $form_data->{comments},\n            accumulative_time    => $accumulative_time,\n            reporter             => $form_data->{reporter},\n            company_code         => $form_data->{company_code},\n            owner                => $form_data->{owner},\n            developer            => $form_data->{developer},\n            username_of_poster   => $c->session->{username},\n            status               => $form_data->{status},\n            priority             => $priority,\n            share                => $form_data->{share} || 0,\n            last_mod_by          => $c->session->{username} || 'system',\n            last_mod_date        => DateTime->now->ymd,\n            user_id              => $user_id,\n            project_id           => $project_id,\n            date_time_posted     => $form_data->{date_time_posted},\n            time_of_day          => $time_of_day,\n        });\n    };\n    if ($@) {\n        my $error_msg = $@;\n        my $user_friendly_msg = \"An error occurred while updating the record.\";\n        \n        # Provide more specific error messages for common issues\n        if ($error_msg =~ /Incorrect integer value.*for column.*project_id/) {\n            $user_friendly_msg = \"Invalid project selection. Please choose a valid project or leave it blank.\";\n        } elsif ($error_msg =~ /Incorrect integer value.*for column.*user_id/) {\n            $user_friendly_msg = \"Invalid user selection. Please choose a valid user.\";\n        } elsif ($error_msg =~ /Data too long for column/) {\n            $user_friendly_msg = \"One or more fields contain too much text. Please shorten your input.\";\n        } elsif ($error_msg =~ /cannot be null/) {\n            $user_friendly_msg = \"Required fields are missing. Please fill in all required information.\";\n        }\n        \n        $self->logging->log_with_details(\n            $c,\n            'error',\n            __FILE__,\n            __LINE__,\n            'modify.update_failure',\n            \"Failed to update todo item for record ID: $record_id. Error: $error_msg\"\n        );\n        \n        # Send email notification to admin for database errors\n        $self->_notify_admin_of_error($c, $record_id, $error_msg, $form_data);\n        \n        $c->stash(\n            error_msg => $user_friendly_msg,\n            technical_error => $error_msg,      # For debugging if needed\n            form_data => $form_data,            # Preserve form values\n            record    => $todo,                 # Pass the current todo item\n            template  => 'todo/details.tt',     # Re-render the form\n        );\n        return; # Early exit on database error\n    }\n\n    # Log the successful update\n    $self->logging->log_with_details(\n        $c,\n        'info',\n        __FILE__,\n        __LINE__,\n        'modify.success',\n        \"Todo item successfully updated for record ID: $record_id.\"\n    );\n\n    # Handle successful update\n    $c->stash(\n        success_msg => \"Todo item with ID $record_id has been successfully updated.\",\n        record      => $todo,             # Provide updated data\n        template    => 'todo/details.tt',  # Redirect back to the form for review\n    );\n}\n\nsub create :Local {\n    my ( $self, $c ) = @_;\n\n    # Retrieve the form data from the request\n    my $record_id = $c->request->params->{record_id};\n    my $sitename = $c->request->params->{sitename};\n    my $start_date = $c->request->params->{start_date};\n    my $parent_todo = $c->request->params->{parent_todo} || 0;\n    my $due_date = $c->request->params->{due_date} || DateTime->now->add(days => 7)->ymd; # Set default value if not provided\n    my $subject = $c->request->params->{subject};\n    my $schema = $c->model('DBEncy');\n    my $description = $c->request->params->{description};\n    my $estimated_man_hours = $c->request->params->{estimated_man_hours};\n    my $comments = $c->request->params->{comments};\n    my $accumulative_time = $c->request->params->{accumulative_time};\n    my $reporter = $c->request->params->{reporter};\n    my $company_code = $c->request->params->{company_code};\n    my $owner = $c->request->params->{owner};\n    my $developer = $c->request->params->{developer};\n    my $username_of_poster = $c->session->{username} || 'Shanta';\n    my $status = $c->request->params->{status};\n    my $priority = $c->request->params->{priority};\n    my $share = $c->request->params->{share} || 0;\n    my $last_mod_by = $c->session->{username} || 'default_user';\n    my $last_mod_date = $c->request->params->{last_mod_date};\n    my $group_of_poster = $c->session->{roles} || 'default_group';\n    my $project_id = $c->request->params->{project_id};\n    my $manual_project_id = $c->request->params->{manual_project_id};\n    my $date_time_posted = $c->request->params->{date_time_posted};\n    my $time_of_day = $c->request->params->{time_of_day};\n\n    # If manual_project_id is not empty, use it as the project ID\n    my $selected_project_id = $manual_project_id ? $manual_project_id : $project_id;\n\n    # Ensure project_id is never null - find or create a default project\n    if (!$selected_project_id) {\n        # Try to find a default project or use the first available project\n        my $default_project = $schema->resultset('Project')->search(\n            { sitename => $sitename },\n            { order_by => 'id', rows => 1 }\n        )->first;\n        \n        if ($default_project) {\n            $selected_project_id = $default_project->id;\n            $self->logging->log_with_details(\n                $c, 'info', __FILE__, __LINE__, 'create.default_project',\n                \"No project selected, using default project_id: $selected_project_id\"\n            );\n        } else {\n            # Create a default project if none exists\n            $default_project = $schema->resultset('Project')->create({\n                project_name => 'Default Project',\n                project_code => 'DEFAULT',\n                sitename => $sitename,\n                description => 'Auto-created default project for todos',\n                status => 'active'\n            });\n            $selected_project_id = $default_project->id;\n            $self->logging->log_with_details(\n                $c, 'info', __FILE__, __LINE__, 'create.created_default_project',\n                \"Created default project with project_id: $selected_project_id\"\n            );\n        }\n    }\n\n    # Fetch the project_code using the selected_project_id\n    my $project_code;\n    if ($selected_project_id) {\n        my $project = $schema->resultset('Project')->find($selected_project_id);\n        $project_code = $project ? $project->project_code : 'default_code'; # Set a default code if not found\n    } else {\n        $project_code = 'default_code'; # Set a default code if no project ID is provided\n    }\n\n    # Check if accumulative_time is a valid integer\n    $accumulative_time = $c->request->params->{accumulative_time};\n    if (!defined $accumulative_time || $accumulative_time !~ /^\\d+$/) {\n        $accumulative_time = 0;\n    }\n\n    # Get the current date\n    my $current_date = DateTime->now->ymd;\n\n    # Retrieve user_id from session or another reliable source\n    my $user_id = $c->session->{user_id};\n    unless (defined $user_id) {\n        # Handle the case where user_id is not found\n        $c->response->body('User ID not found in session');\n        return;\n    }\n\n    # Create a new todo record with retry logic for lock timeouts\n    my $todo;\n    my $max_retries = 3;\n    my $retry_count = 0;\n    \n    while ($retry_count < $max_retries) {\n        eval {\n            $schema->txn_do(sub {\n                $todo = $schema->resultset('Todo')->create({\n                    record_id => $record_id,\n                    sitename => $sitename,\n                    start_date => $start_date,\n                    parent_todo => $parent_todo,\n                    due_date => $due_date,\n                    subject => $subject,\n                    description => $description,\n                    estimated_man_hours => $estimated_man_hours,\n                    comments => $comments,\n                    accumulative_time => $accumulative_time,\n                    reporter => $reporter,\n                    company_code => $company_code,\n                    owner => $owner,\n                    project_code => $project_code, # Ensure this is set\n                    developer => $developer,\n                    username_of_poster => $username_of_poster,\n                    status => $status,\n                    priority => $priority,\n                    share => $share,\n                    last_mod_by => $last_mod_by,\n                    last_mod_date => $current_date,\n                    user_id => $user_id, # Ensure this is set\n                    group_of_poster => $group_of_poster,\n                    project_id => $selected_project_id,\n                    date_time_posted => $date_time_posted,\n                    time_of_day => $time_of_day,\n                });\n            });\n        };\n        \n        if ($@) {\n            $retry_count++;\n            if ($@ =~ /Lock wait timeout exceeded/ && $retry_count < $max_retries) {\n                # Log the retry attempt\n                $self->logging->log_with_details(\n                    $c,\n                    'warn',\n                    __FILE__,\n                    __LINE__,\n                    'todo.create.retry',\n                    \"Database lock timeout, retrying ($retry_count/$max_retries): $@\"\n                );\n                # Wait briefly before retry (exponential backoff)\n                sleep(0.1 * (2 ** $retry_count));\n                next;\n            } else {\n                # Log the final error and re-throw\n                $self->logging->log_with_details(\n                    $c,\n                    'error',\n                    __FILE__,\n                    __LINE__,\n                    'todo.create.failed',\n                    \"Failed to create todo after $retry_count retries: $@\"\n                );\n                die $@;\n            }\n        } else {\n            # Success - break out of retry loop\n            last;\n        }\n    }\n\n    # Redirect the user to the index action\n    $c->response->redirect($c->uri_for($self->action_for('index')));\n}\n\nsub day :Path('/todo/day') :Args {\n    my ( $self, $c, $date_arg ) = @_;\n\n    # Validate and parse the date_arg\n    my $date;\n    my $dt;\n    if (defined $date_arg && $date_arg =~ /^\\d{4}-\\d{2}-\\d{2}$/) {\n        $date = $date_arg;\n        eval { $dt = DateTime->new(year => substr($date, 0, 4), month => substr($date, 5, 2), day => substr($date, 8, 2)) };\n        if ($@) {\n            $dt = DateTime->now;\n            $date = $dt->ymd;\n        }\n    } else {\n        $dt = DateTime->now;\n        $date = $dt->ymd;\n    }\n    \n    # Calculate the previous and next dates\n    my $previous_date = $dt->clone->subtract(days => 1)->ymd;\n    my $next_date = $dt->clone->add(days => 1)->ymd;\n\n    # Fetch ALL todos for the site directly from database (like month view)\n    my $schema = $c->model('DBEncy');\n    my @all_todos = $schema->resultset('Todo')->search(\n        {\n            'me.sitename' => $c->session->{SiteName},\n        },\n        { \n            order_by => { -asc => 'me.start_date' },\n            prefetch => 'project'\n        }\n    );\n\n    # Filter todos for the given day: due today or starting today\n    my @filtered_todos = grep { \n        ($_->due_date && $_->due_date eq $date) ||           # Due today\n        ($_->start_date && $_->start_date eq $date)          # Starting today  \n    } @all_todos;\n    \n    # Sort todos by time_of_day: NULL times first, then chronological order\n    @filtered_todos = sort {\n        # Handle NULL time_of_day values - put them at the top\n        return -1 if (!defined $a->time_of_day && defined $b->time_of_day);\n        return 1 if (defined $a->time_of_day && !defined $b->time_of_day);\n        return 0 if (!defined $a->time_of_day && !defined $b->time_of_day);\n        \n        # Both have time values - sort chronologically\n        return $a->time_of_day cmp $b->time_of_day;\n    } @filtered_todos;\n    \n    # Organize todos by hour for time-slot display\n    my %todos_by_hour = ();\n    my @unscheduled_todos = ();\n    \n    foreach my $todo (@filtered_todos) {\n        # Safely check for time_of_day field (might not exist in database yet)\n        my $time_of_day;\n        eval { $time_of_day = $todo->time_of_day; };\n        \n        # Debug logging for this specific todo\n        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'day', \n            \"Processing todo: \" . $todo->subject . \", time_of_day: \" . ($time_of_day || 'NULL') . \n            \", length: \" . (defined $time_of_day ? length($time_of_day) : 'N/A'));\n        \n        if (defined $time_of_day && $time_of_day ne '' && $time_of_day =~ /^(\\d{1,2}):/) {\n            my $hour = int($1);\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'day', \n                \"Scheduling todo '\" . $todo->subject . \"' at hour: $hour\");\n            push @{$todos_by_hour{$hour}}, $todo;\n        } else {\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'day', \n                \"Adding todo '\" . $todo->subject . \"' to unscheduled (time: \" . ($time_of_day || 'NULL') . \")\");\n            push @unscheduled_todos, $todo;\n        }\n    }\n    \n    # Debug logging\n    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'day', \n        \"Day view debug: Found \" . scalar(@all_todos) . \" total todos, \" . scalar(@filtered_todos) . \" filtered todos for date: $date\");\n    \n    if ($c->session->{debug_mode}) {\n        foreach my $todo (@all_todos) {\n            my $time_of_day;\n            eval { $time_of_day = $todo->time_of_day; };\n            $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'day', \n                \"Todo: \" . $todo->subject . \", Start: \" . ($todo->start_date || 'NULL') . \n                \", Due: \" . ($todo->due_date || 'NULL') . \", Status: \" . $todo->status . \n                \", Time: \" . ($time_of_day || 'NULL'));\n        }\n    }\n\n    # Add the todos to the stash\n    $c->stash(\n        todos => \\@filtered_todos,\n        todos_by_hour => \\%todos_by_hour,\n        unscheduled_todos => \\@unscheduled_todos,\n        sitename => $c->session->{SiteName},\n        date => $date,\n        previous_date => $previous_date,\n        next_date => $next_date,\n        template => 'todo/day.tt',\n    );\n\n    $c->forward($c->view('TT'));\n}\nsub week :Path('/todo/week') :Args {\n    my ($self, $c, $date) = @_;\n\n    # Get the Todo model\n    my $todo_model = $c->model('Todo');\n\n    # If no date is provided, use the current date\n    if (!defined $date) {\n        $date = DateTime->now->ymd;\n    }\n\n    # Calculate the start and end of the week\n    my $dt = DateTime::Format::ISO8601->parse_datetime($date);\n    \n    # Calculate start of week (Sunday)\n    my $start_dt = $dt->clone;\n    if ($start_dt->day_of_week != 7) { # If not Sunday\n        $start_dt = $start_dt->subtract(days => $start_dt->day_of_week);\n    }\n    \n    my $start_of_week = $start_dt->strftime('%Y-%m-%d');\n    my $end_of_week = $start_dt->clone->add(days => 6)->strftime('%Y-%m-%d');\n\n    # Calculate previous and next week dates\n    my $prev_week_date = $start_dt->clone->subtract(days => 7)->strftime('%Y-%m-%d');\n    my $next_week_date = $start_dt->clone->add(days => 7)->strftime('%Y-%m-%d');\n    \n    # Create week calendar structure with all 7 days\n    my @week_days = ();\n    for my $day_offset (0..6) {\n        my $current_date = $start_dt->clone->add(days => $day_offset);\n        push @week_days, {\n            date => $current_date->strftime('%Y-%m-%d'),\n            day_name => $current_date->day_name,\n            day_number => $current_date->day,\n            month_name => $current_date->month_name,\n            is_today => ($current_date->ymd eq DateTime->now->ymd) ? 1 : 0\n        };\n    }\n\n    # Fetch todos for the site within the week, ordered by start_date\n    my $todos = $todo_model->get_top_todos($c, $c->session->{SiteName});\n\n    # Filter todos for the given week: starting this week, due this week, or overdue but not completed\n    my @filtered_todos = grep { \n        ($_->start_date && $_->start_date ge $start_of_week && $_->start_date le $end_of_week) ||  # Starting this week\n        ($_->due_date && $_->due_date ge $start_of_week && $_->due_date le $end_of_week) ||      # Due this week\n        ($_->due_date && $_->due_date lt $start_of_week && $_->status ne '3')                   # Overdue but not completed\n    } @$todos;\n\n    # Add the todos to the stash\n    $c->stash(\n        todos => \\@filtered_todos,\n        week_days => \\@week_days,\n        sitename => $c->session->{SiteName},\n        start_of_week => $start_of_week,\n        end_of_week => $end_of_week,\n        prev_week_date => $prev_week_date,\n        next_week_date => $next_week_date,\n        template => 'todo/week.tt',\n    );\n\n    $c->forward($c->view('TT'));\n}\n\nsub month :Path('/todo/month') :Args {\n    my ($self, $c, $date) = @_;\n\n    # Get the Todo model\n    my $todo_model = $c->model('Todo');\n\n    # If no date is provided, use the current date\n    if (!defined $date) {\n        $date = DateTime->now->ymd;\n    }\n\n    # Parse the date\n    my $dt = DateTime::Format::ISO8601->parse_datetime($date);\n\n    # Calculate the start and end of the month\n    my $start_of_month = $dt->clone->set_day(1)->strftime('%Y-%m-%d');\n    my $end_of_month = $dt->clone->set_day($dt->month_length)->strftime('%Y-%m-%d');\n\n    # Calculate previous and next month dates\n    my $prev_month_date = $dt->clone->subtract(months => 1)->set_day(1)->strftime('%Y-%m-%d');\n    my $next_month_date = $dt->clone->add(months => 1)->set_day(1)->strftime('%Y-%m-%d');\n\n    # Fetch ALL todos for the site directly from database\n    my $schema = $c->model('DBEncy');\n    my @all_todos = $schema->resultset('Todo')->search(\n        {\n            'me.sitename' => $c->session->{SiteName},\n        },\n        { \n            order_by => { -asc => 'me.start_date' },\n            prefetch => 'project'\n        }\n    );\n\n    # Filter todos for the given month: starting this month, due this month, or overdue but not completed\n    my @filtered_todos = grep { \n        ($_->start_date && $_->start_date ge $start_of_month && $_->start_date le $end_of_month) ||  # Starting this month\n        ($_->due_date && $_->due_date ge $start_of_month && $_->due_date le $end_of_month) ||      # Due this month\n        ($_->due_date && $_->due_date lt $start_of_month && $_->status ne '3')                     # Overdue but not completed\n    } @all_todos;\n\n    # Debug logging\n    $c->log->info(\"Month view debug: Found \" . scalar(@all_todos) . \" total todos, \" . scalar(@filtered_todos) . \" filtered todos for month $start_of_month to $end_of_month\");\n\n    # Organize todos by day of month (use due_date if available, otherwise start_date)\n    my %todos_by_day;\n    \n    foreach my $todo (@filtered_todos) {\n        my $display_date = $todo->due_date || $todo->start_date;\n        if ($display_date) {\n            my $todo_date = DateTime::Format::ISO8601->parse_datetime($display_date);\n            # Only add to calendar if the display date is within this month\n            if ($todo_date->year == $dt->year && $todo_date->month == $dt->month) {\n                my $day = $todo_date->day;\n                push @{$todos_by_day{$day}}, $todo;\n            }\n        }\n    }\n\n    # Create a calendar structure\n    my @calendar;\n    my $first_day = DateTime->new(year => $dt->year, month => $dt->month, day => 1);\n    my $day_of_week = $first_day->day_of_week % 7; # 0 for Sunday, 6 for Saturday\n\n    # Add empty cells for days before the first day of the month\n    for (my $i = 0; $i < $day_of_week; $i++) {\n        push @calendar, { day => '', todos => [] };\n    }\n\n    # Add cells for each day of the month\n    for (my $day = 1; $day <= $dt->month_length; $day++) {\n        push @calendar, {\n            day => $day,\n            date => sprintf(\"%04d-%02d-%02d\", $dt->year, $dt->month, $day),\n            todos => $todos_by_day{$day} || []\n        };\n    }\n\n    # Add the todos and calendar to the stash\n    $c->stash(\n        todos => \\@filtered_todos,\n        calendar => \\@calendar,\n        sitename => $c->session->{SiteName},\n        month_name => $dt->month_name,\n        year => $dt->year,\n        start_of_month => $start_of_month,\n        end_of_month => $end_of_month,\n        prev_month_date => $prev_month_date,\n        next_month_date => $next_month_date,\n        template => 'todo/month.tt',\n    );\n\n    $c->forward($c->view('TT'));\n}\n\n# Get overdue todos for dashboard display\nsub get_overdue_todos :Private {\n    my ($self, $c) = @_;\n    \n    my $schema = $c->model('DBEncy');\n    my $sitename = $c->session->{SiteName};\n    my $today = DateTime->now->ymd;\n    \n    my @overdue_todos = $schema->safe_search($c, 'Todo', \n        {\n            'me.sitename' => $sitename,\n            'me.due_date' => { '<' => $today },\n            'me.status' => { '!=' => 3 } # Not completed\n        },\n        { \n            order_by => { -asc => 'me.due_date' },\n            prefetch => 'project'\n        }\n    );\n    \n    return \\@overdue_todos;\n}\n\n# AI-driven todo creation from natural language prompts\nsub ai_create_todo :Path('/todo/ai_create') :Args(0) {\n    my ($self, $c) = @_;\n    \n    # Get the AI prompt from request parameters\n    my $ai_prompt = $c->request->params->{prompt} || '';\n    my $auto_assign = $c->request->params->{auto_assign} || 0;\n    \n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'ai_create_todo',\n        \"AI todo creation requested with prompt: $ai_prompt\"\n    );\n    \n    # Validate input\n    unless ($ai_prompt) {\n        $c->stash(\n            error_msg => 'AI prompt is required for todo creation.',\n            template => 'todo/ai_create.tt'\n        );\n        return;\n    }\n    \n    # Parse the AI prompt to extract todo details\n    my $todo_data = $self->_parse_ai_prompt($c, $ai_prompt);\n    \n    if ($todo_data->{error}) {\n        $c->stash(\n            error_msg => $todo_data->{error},\n            template => 'todo/ai_create.tt'\n        );\n        return;\n    }\n    \n    # Create the todo using parsed data\n    my $result = $self->_create_todo_from_data($c, $todo_data, 'ai_prompt');\n    \n    if ($result->{success}) {\n        $c->stash(\n            success_msg => \"Todo successfully created from AI prompt. Record ID: \" . $result->{record_id},\n            todo_record => $result->{todo},\n            template => 'todo/ai_create.tt'\n        );\n        \n        $self->logging->log_with_details(\n            $c, 'info', __FILE__, __LINE__, 'ai_create_todo.success',\n            \"AI todo created successfully with ID: \" . $result->{record_id}\n        );\n    } else {\n        $c->stash(\n            error_msg => $result->{error},\n            template => 'todo/ai_create.tt'\n        );\n    }\n}\n\n# Parse AI prompt to extract todo details\nsub _parse_ai_prompt :Private {\n    my ($self, $c, $prompt) = @_;\n    \n    $self->logging->log_with_details(\n        $c, 'debug', __FILE__, __LINE__, 'parse_ai_prompt',\n        \"Parsing AI prompt: $prompt\"\n    );\n    \n    # Initialize default values\n    my $todo_data = {\n        sitename => $c->session->{SiteName} || 'default',\n        start_date => DateTime->now->ymd,\n        due_date => DateTime->now->add(days => 7)->ymd,\n        priority => 2, # Medium priority by default\n        status => 1,   # New status\n        username_of_poster => $c->session->{username} || 'AI_System',\n        last_mod_by => $c->session->{username} || 'AI_System',\n        user_id => $c->session->{user_id} || 1,\n        project_id => undef,\n        share => 0,\n        accumulative_time => 0,\n        estimated_man_hours => 1,\n        parent_todo => '', # Default empty parent_todo to fix database constraint\n        project_code => 'default', # Default project_code to fix database constraint\n    };\n    \n    # Extract subject from prompt\n    if ($prompt =~ /create\\s+(?:a\\s+)?todo\\s+(?:for\\s+)?(.+?)(?:\\s+to\\s+(.+))?$/i) {\n        my $subject_part = $1;\n        my $description_part = $2 || '';\n        \n        # Clean up subject\n        $subject_part =~ s/\\s+for\\s+(.+?)$//i;\n        my $assignee_part = $1 || '';\n        \n        $todo_data->{subject} = $subject_part;\n        $todo_data->{description} = $description_part;\n        \n        # Try to extract assignee information\n        if ($assignee_part) {\n            $todo_data->{owner} = $assignee_part;\n            $todo_data->{developer} = $assignee_part;\n        }\n    } else {\n        # Fallback: use the entire prompt as subject\n        $todo_data->{subject} = $prompt;\n        $todo_data->{description} = \"Auto-generated todo from AI prompt: $prompt\";\n    }\n    \n    # Extract priority keywords\n    if ($prompt =~ /\\b(urgent|critical|high|important)\\b/i) {\n        $todo_data->{priority} = 1; # High priority\n        $todo_data->{due_date} = DateTime->now->add(days => 1)->ymd; # Due tomorrow\n    } elsif ($prompt =~ /\\b(low|minor|later)\\b/i) {\n        $todo_data->{priority} = 3; # Low priority\n        $todo_data->{due_date} = DateTime->now->add(days => 14)->ymd; # Due in 2 weeks\n    }\n    \n    # Extract specific assignees\n    if ($prompt =~ /\\b(?:for|assign(?:ed)?\\s+to)\\s+([A-Za-z]+(?:\\s+[A-Za-z]+)*)/i) {\n        my $assignee = $1;\n        $todo_data->{owner} = $assignee;\n        $todo_data->{developer} = $assignee;\n        \n        # Try to find user_id for the assignee\n        my $schema = $c->model('DBEncy');\n        my $user = $schema->resultset('User')->search({ username => $assignee })->first;\n        if ($user) {\n            $todo_data->{user_id} = $user->id;\n        }\n    }\n    \n    # Extract project information\n    if ($prompt =~ /\\b(?:project|for)\\s+([A-Za-z0-9_\\-]+)/i) {\n        my $project_name = $1;\n        my $schema = $c->model('DBEncy');\n        my $project = $schema->safe_search($c, 'Project', { \n            -or => [\n                { name => { 'like', \"%$project_name%\" } },\n                { project_code => { 'like', \"%$project_name%\" } }\n            ]\n        }, {})->first;\n        \n        if ($project) {\n            $todo_data->{project_id} = $project->id;\n            $todo_data->{project_code} = $project->project_code;\n        }\n    }\n    \n    # Validate required fields\n    unless ($todo_data->{subject}) {\n        return { error => \"Could not extract a valid subject from the AI prompt.\" };\n    }\n    \n    $self->logging->log_with_details(\n        $c, 'debug', __FILE__, __LINE__, 'parse_ai_prompt.result',\n        \"Parsed todo data: Subject=\" . $todo_data->{subject} . \n        \", Priority=\" . $todo_data->{priority} . \n        \", Assignee=\" . ($todo_data->{owner} || 'none')\n    );\n    \n    return $todo_data;\n}\n\n# Create todo from structured data (used by both AI and error systems)\nsub _create_todo_from_data :Private {\n    my ($self, $c, $todo_data, $source) = @_;\n    \n    $source ||= 'manual';\n    \n    $self->logging->log_with_details(\n        $c, 'info', __FILE__, __LINE__, 'create_todo_from_data',\n        \"Creating todo from $source with subject: \" . $todo_data->{subject}\n    );\n    \n    # Get current date for timestamps\n    my $current_date = DateTime->now->ymd;\n    \n    # Ensure required fields have defaults\n    $todo_data->{sitename} ||= $c->session->{SiteName} || 'default';\n    $todo_data->{start_date} ||= $current_date;\n    $todo_data->{due_date} ||= DateTime->now->add(days => 7)->ymd;\n    $todo_data->{last_mod_date} = $current_date;\n    $todo_data->{date_time_posted} ||= DateTime->now->strftime('%Y-%m-%d %H:%M:%S');\n    $todo_data->{username_of_poster} ||= $c->session->{username} || 'System';\n    $todo_data->{last_mod_by} ||= $c->session->{username} || 'System';\n    $todo_data->{user_id} ||= $c->session->{user_id} || 1;\n    $todo_data->{group_of_poster} ||= join(',', @{$c->session->{roles} || ['system']});\n    $todo_data->{parent_todo} ||= ''; # Ensure parent_todo is always set to avoid database constraint error\n    $todo_data->{project_code} ||= 'default'; # Ensure project_code is always set to avoid database constraint error\n    \n    # Set project_code if project_id is provided but project_code is missing\n    if ($todo_data->{project_id} && !$todo_data->{project_code}) {\n        my $schema = $c->model('DBEncy');\n        my $project = $schema->resultset('Project')->find($todo_data->{project_id});\n        $todo_data->{project_code} = $project ? $project->project_code : 'default_code';\n    }\n    \n    # Attempt to create the todo record\n    eval {\n        my $schema = $c->model('DBEncy');\n        my $todo = $schema->resultset('Todo')->create($todo_data);\n        \n        $self->logging->log_with_details(\n            $c, 'info', __FILE__, __LINE__, 'create_todo_from_data.success',\n            \"Todo created successfully with ID: \" . $todo->record_id . \" from source: $source\"\n        );\n        \n        return {\n            success => 1,\n            record_id => $todo->record_id,\n            todo => $todo\n        };\n    };\n    \n    if ($@) {\n        my $error_msg = $@;\n        $self->logging->log_with_details(\n            $c, 'error', __FILE__, __LINE__, 'create_todo_from_data.failure',\n            \"Failed to create todo from $source. Error: $error_msg\"\n        );\n        \n        return {\n            success => 0,\n            error => \"Failed to create todo: $error_msg\"\n        };\n    }\n}\n\n# Enhanced error notification that also creates todos for critical errors\nsub _notify_admin_of_error :Private {\n    my ($self, $c, $record_id, $error_msg, $form_data) = @_;\n    \n    # Log the notification attempt\n    $self->logging->log_with_details(\n        $c,\n        'info',\n        __FILE__,\n        __LINE__,\n        'notify_admin',\n        \"Attempting to notify admin of database error for record ID: $record_id\"\n    );\n    \n    # Prepare error details for admin notification\n    my $user = $c->session->{username} || 'Unknown User';\n    my $sitename = $c->session->{SiteName} || 'Unknown Site';\n    my $timestamp = DateTime->now->strftime('%Y-%m-%d %H:%M:%S');\n    my $url = $c->req->uri;\n    \n    # Create a summary of form data (excluding sensitive information)\n    my $form_summary = '';\n    if ($form_data && ref $form_data eq 'HASH') {\n        for my $key (sort keys %$form_data) {\n            next if $key =~ /password|token|session/i; # Skip sensitive fields\n            my $value = $form_data->{$key} || '';\n            $value = substr($value, 0, 100) . '...' if length($value) > 100; # Truncate long values\n            $form_summary .= \"  $key: $value\\n\";\n        }\n    }\n    \n    my $error_details = qq{\nDatabase Error in Todo System\n\nTime: $timestamp\nUser: $user\nSite: $sitename\nURL: $url\nRecord ID: $record_id\n\nError Message:\n$error_msg\n\nForm Data Submitted:\n$form_summary\n\nThis error has been logged and requires administrator attention.\n    };\n    \n    # Create a todo for critical database errors\n    $self->_create_error_todo($c, $error_msg, $record_id, $user, $sitename, $url);\n    \n    # Try to send email notification if email system is available\n    eval {\n        if ($c->can('model') && $c->model('Email')) {\n            $c->model('Email')->send(\n                to      => 'admin@' . ($c->config->{domain} || 'localhost'),\n                subject => \"Database Error in Todo System - Record ID: $record_id\",\n                body    => $error_details,\n            );\n            \n            $self->logging->log_with_details(\n                $c,\n                'info',\n                __FILE__,\n                __LINE__,\n                'notify_admin.email_sent',\n                \"Admin notification email sent for record ID: $record_id\"\n            );\n        }\n    };\n    \n    if ($@) {\n        $self->logging->log_with_details(\n            $c,\n            'warn',\n            __FILE__,\n            __LINE__,\n            'notify_admin.email_failed',\n            \"Failed to send admin notification email: $@\"\n        );\n    }\n    \n    # Always log the full error details for admin review\n    $self->logging->log_with_details(\n        $c,\n        'error',\n        __FILE__,\n        __LINE__,\n        'notify_admin.full_details',\n        $error_details\n    );\n}\n\n# Create a todo for system errors\nsub _create_error_todo :Private {\n    my ($self, $c, $error_msg, $record_id, $user, $sitename, $url) = @_;\n    \n    # Determine if this is a critical error that needs immediate attention\n    my $is_critical = $error_msg =~ /\\b(database|connection|timeout|deadlock|constraint|foreign key)\\b/i;\n    \n    my $priority = $is_critical ? 1 : 2; # High priority for critical errors\n    my $due_days = $is_critical ? 1 : 3; # Due tomorrow for critical, 3 days for others\n    \n    # Create todo data for the error\n    my $todo_data = {\n        sitename => $sitename,\n        start_date => DateTime->now->ymd,\n        due_date => DateTime->now->add(days => $due_days)->ymd,\n        subject => \"System Error: \" . substr($error_msg, 0, 100),\n        description => qq{\nAUTOMATED TODO: System Error Detected\n\nError Details:\n- Time: } . DateTime->now->strftime('%Y-%m-%d %H:%M:%S') . qq{\n- User: $user\n- Site: $sitename\n- URL: $url\n- Record ID: $record_id\n\nError Message:\n$error_msg\n\nThis todo was automatically created by the error handling system.\nPlease investigate and resolve this issue.\n        },\n        priority => $priority,\n        status => 1, # New\n        owner => 'admin',\n        developer => 'admin',\n        reporter => 'System',\n        username_of_poster => 'Error_System',\n        last_mod_by => 'Error_System',\n        user_id => 1, # Default admin user\n        estimated_man_hours => $is_critical ? 4 : 2,\n        comments => \"Auto-generated from system error. Priority: \" . ($is_critical ? \"CRITICAL\" : \"Normal\"),\n    };\n    \n    # Create the error todo\n    my $result = $self->_create_todo_from_data($c, $todo_data, 'error_system');\n    \n    if ($result->{success}) {\n        $self->logging->log_with_details(\n            $c, 'info', __FILE__, __LINE__, 'create_error_todo.success',\n            \"Error todo created successfully with ID: \" . $result->{record_id} . \n            \" for error: \" . substr($error_msg, 0, 50)\n        );\n    } else {\n        $self->logging->log_with_details(\n            $c, 'warn', __FILE__, __LINE__, 'create_error_todo.failure',\n            \"Failed to create error todo: \" . $result->{error}\n        );\n    }\n    \n    return $result;\n}\n\n1;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Comserv/lib/Comserv/Controller/Todo.pm b/Comserv/lib/Comserv/Controller/Todo.pm
--- a/Comserv/lib/Comserv/Controller/Todo.pm	(revision d10a7207b15200f2d7f1c2c08afdbd9dd3ae61fb)
+++ b/Comserv/lib/Comserv/Controller/Todo.pm	(date 1753905662692)
@@ -294,8 +294,23 @@
         # Format the total time as 'HH:MM'
         my $accumulative_time = sprintf("%02d:%02d", $hours, $minutes);
 
-        # Add the todo and accumulative_time to the stash
-        $c->stash(record => $todo, accumulative_time => $accumulative_time);
+        # Fetch project data for the project dropdown
+        my $project_controller = $c->controller('Project');
+        my $projects = [];
+        eval {
+            $projects = $project_controller->fetch_projects_with_subprojects($c) || [];
+        };
+        if ($@) {
+            $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'details',
+                "Error fetching projects: $@");
+        }
+
+        # Add the todo, accumulative_time, and projects to the stash
+        $c->stash(
+            record => $todo, 
+            accumulative_time => $accumulative_time,
+            projects => $projects
+        );
 
         # Set the template to 'todo/details.tt'
         $c->stash(template => 'todo/details.tt');
@@ -305,6 +320,17 @@
     }
 }
 
+sub add_project :Path('/todo/add_project') :Args(0) {
+    my ($self, $c) = @_;
+    
+    # Log the action
+    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'add_project', 
+        'Redirecting to add_project form from todo context');
+    
+    # Forward to the Project controller's add_project action
+    $c->forward('/project/addproject');
+}
+
 sub addtodo :Path('/todo/addtodo') :Args(0) {
     my ($self, $c) = @_;
 
Index: Comserv/root/todo/addtodo.tt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[% PageVersion = 'addtodo.tt,v 0.04 2024/11/23 shanta Exp shanta ' %]\n[% IF debug_mode == 1 %]\n    Version: [% PageVersion %]\n[% END %]\n\n\n\n<h1>Add a New To-do Item</h1>\n\n<form action=\"/todo/create\" method=\"post\">\n    <div>\n        <label for=\"sitename\">Site Name:</label>\n        <input type=\"text\" id=\"sitename\" name=\"sitename\" value=\"[% SiteName OR 'Site Name' %]\" readonly>\n    </div>\n    <div>\n        <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" value=\"[% start_date OR '' %]\">\n    </div>\n    <div>\n        <label for=\"project_id\">Select Project:</label>\n          [% INCLUDE \"todo/project_list.tt\" projects=projects selected_project_id=current_project.id %]<br>\n    </div>\n\n    <div>\n        <label for=\"manual_project_id\">Manual Project ID:</label>\n        <input type=\"text\" id=\"manual_project_id\" name=\"manual_project_id\" value=\"[% project_id OR '' %]\" placeholder=\"Only if project not in list\">\n    </div>\n    <div>\n        <label for=\"due_date\">Due Date:</label>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\" value=\"[% todo.due_date OR '' %]\">\n    </div>\n    <div>\n        <label for=\"time_of_day\">Time of Day (optional):</label>\n        <div class=\"time-input-container\">\n            <select id=\"time_preset\" class=\"time-preset\" onchange=\"setTimeFromPreset()\" style=\"margin-bottom: 5px; padding: 5px; width: 100%;\">\n                <option value=\"\">-- Select Common Time --</option>\n                <option value=\"08:00\">8:00 AM</option>\n                <option value=\"09:00\">9:00 AM</option>\n                <option value=\"10:00\">10:00 AM</option>\n                <option value=\"11:00\">11:00 AM</option>\n                <option value=\"12:00\">12:00 PM</option>\n                <option value=\"13:00\">1:00 PM</option>\n                <option value=\"14:00\">2:00 PM</option>\n                <option value=\"15:00\">3:00 PM</option>\n                <option value=\"16:00\">4:00 PM</option>\n                <option value=\"17:00\">5:00 PM</option>\n                <option value=\"18:00\">6:00 PM</option>\n                <option value=\"19:00\">7:00 PM</option>\n                <option value=\"20:00\">8:00 PM</option>\n            </select>\n            <input type=\"time\" id=\"time_of_day\" name=\"time_of_day\" value=\"[% todo.time_of_day OR '' %]\" placeholder=\"HH:MM\" style=\"width: 100%; padding: 5px;\">\n        </div>\n        <small style=\"color: #666; font-size: 0.9em;\">Select from common times or enter manually for day view organization</small>\n    </div>\n\n    <script>\n    function setTimeFromPreset() {\n        var preset = document.getElementById('time_preset');\n        var manual = document.getElementById('time_of_day');\n        if (preset.value) {\n            manual.value = preset.value;\n        }\n    }\n    </script>\n    <div>\n        <label for=\"subject\">Subject:</label>\n        <input type=\"text\" id=\"subject\" name=\"subject\" value=\"[% todo.subject OR '' %]\">\n    </div>\n    <div>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">[% todo.description OR '' %]</textarea>\n    </div>\n    <div>\n        <label for=\"estimated_man_hours\">Estimated Man Hours:</label>\n        <select id=\"estimated_man_hours\" name=\"estimated_man_hours\">\n        [% FOREACH hour IN [1..24] %]\n        <option value=\"[% hour %]\" [% IF hour == todo.estimated_man_hours %]selected[% END %]>[% hour %]</option>\n        [% END %]\n        </select>\n    </div>\n    <div>\n        <label for=\"accumulative_time\">Accumulative Time:</label>\n        <input type=\"number\" id=\"accumulative_time\" name=\"accumulative_time\" value=\"[% todo.accumulative_time OR '' %]\">\n    </div>\n    <div>\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\" class=\"form-select\">\n            <option value=\"1\" [% IF todo.status == 'NEW' %]selected[% END %]>NEW</option>\n            <option value=\"2\" [% IF todo.status == 'IN PROGRESS' %]selected[% END %]>IN PROGRESS</option>\n            <option value=\"3\" [% IF todo.status == 'DONE' %]selected[% END %]>DONE</option>\n        </select>\n    </div>\n    <div>\n        <label for=\"priority\">Priority:</label>\n        <select id=\"priority\" name=\"priority\" class=\"form-select\">\n        [% FOREACH priority IN [1..10] %]\n        <option value=\"[% priority %]\" [% IF priority == todo.priority %]selected[% END %]>[% priority %]</option>\n        [% END %]\n        </select>\n    </div>\n    <div>\n        <label for=\"share\">Share:</label>\n        <select id=\"share\" name=\"share\" class=\"form-select\">\n            <option value=\"0\" [% IF todo.share == 'public' %]selected[% END %]>Public</option>\n            <option value=\"1\" [% IF todo.share == 'private' %]selected[% END %]>Private</option>\n        </select>\n    </div>\n    <div>\n        <label for=\"last_mod_by\">Last Modified By:</label>\n        <input type=\"text\" id=\"last_mod_by\" name=\"last_mod_by\" value=\"[% todo.last_mod_by OR '' %]\">\n    </div>\n    <div>\n        <label for=\"last_mod_date\">Last Modified Date:</label>\n        <input type=\"date\" id=\"last_mod_date\" name=\"last_mod_date\" value=\"[% todo.last_mod_date OR '' %]\">\n    </div>\n    <div>\n        <label for=\"user_id\">User ID:</label>\n        <select id=\"user_id\" name=\"user_id\" class=\"form-select\">\n        [% FOREACH user IN users %]\n        <option value=\"[% user.id %]\" [% IF user.id == user_id %]selected[% END %]>[% user.username %]</option>\n        [% END %]\n        </select>\n    </div>\n    <div>\n        <input type=\"submit\" value=\"Add Todo\" class=\"btn btn-primary\">\n    </div>\n</form>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Comserv/root/todo/addtodo.tt b/Comserv/root/todo/addtodo.tt
--- a/Comserv/root/todo/addtodo.tt	(revision d10a7207b15200f2d7f1c2c08afdbd9dd3ae61fb)
+++ b/Comserv/root/todo/addtodo.tt	(date 1753905861651)
@@ -18,7 +18,19 @@
     </div>
     <div>
         <label for="project_id">Select Project:</label>
-          [% INCLUDE "todo/project_list.tt" projects=projects selected_project_id=current_project.id %]<br>
+        <div style="display: flex; align-items: center; gap: 10px;">
+          <select id="project_id" name="project_id" style="flex: 1;">
+            <option value="" [% IF !current_project.id %]selected[% END %]>None (No Project)</option>
+            [% FOREACH project IN projects %]
+                <option value="[% project.id %]" [% IF project.id == current_project.id %]selected[% END %]>
+                    [% project.name %]
+                </option>
+            [% END %]
+          </select>
+          <button type="button" class="btn btn-secondary" onclick="openAddProjectForm()" title="Add New Project">
+            <i class="fas fa-plus"></i> Add Project
+          </button>
+        </div>
     </div>
 
     <div>
@@ -61,6 +73,21 @@
             manual.value = preset.value;
         }
     }
+    
+    function openAddProjectForm() {
+        var url = window.location.origin + '/todo/add_project';
+        console.log("Opening Add Project URL: " + url);
+        var projectWindow = window.open(url, 'addProject', 'width=800,height=600,scrollbars=yes,resizable=yes');
+        
+        // Listen for project creation completion
+        window.addEventListener('message', function(event) {
+            if (event.data.type === 'projectCreated') {
+                console.log('Project created, refreshing project list');
+                // Reload the current page to refresh the project list
+                window.location.reload();
+            }
+        });
+    }
     </script>
     <div>
         <label for="subject">Subject:</label>
Index: Comserv/root/todo/project_list.tt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[% MACRO display_project_options(projects, selected_project_id, level) BLOCK %]\n    [% FOREACH project IN projects.sort('name') %]\n        [% SET indent = '' %]\n        [% FOREACH i IN [1 .. level] %]\n            [% indent = indent _ '--- ' %]\n        [% END %]\n        <option value=\"[% project.id %]\"\n            [% IF project.id == selected_project_id %]style=\"font-weight: bold;\" selected[% END %]>\n            [% indent %][% project.name %]\n        </option>\n        [% IF project.sub_projects.size %]\n            [% display_project_options(project.sub_projects, selected_project_id, level + 1) %]\n        [% END %]\n    [% END %]\n[% END %]\n\n\n<select id=\"parent_id\" name=\"parent_id\">\n    <option value=\"\" [% IF !selected_project_id %]selected[% END %]>None (Top-level Project)</option>\n    [% display_project_options(projects, selected_project_id, 0) %]\n</select>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Comserv/root/todo/project_list.tt b/Comserv/root/todo/project_list.tt
--- a/Comserv/root/todo/project_list.tt	(revision d10a7207b15200f2d7f1c2c08afdbd9dd3ae61fb)
+++ b/Comserv/root/todo/project_list.tt	(date 1753906185209)
@@ -15,7 +15,7 @@
 [% END %]
 
 
-<select id="parent_id" name="parent_id">
-    <option value="" [% IF !selected_project_id %]selected[% END %]>None (Top-level Project)</option>
+<select id="[% field_name || 'parent_id' %]" name="[% field_name || 'parent_id' %]" [% IF field_name == 'project_id' %]style="flex: 1;"[% END %]>
+    <option value="" [% IF !selected_project_id %]selected[% END %]>[% IF field_name == 'project_id' %]None (No Project)[% ELSE %]None (Top-level Project)[% END %]</option>
     [% display_project_options(projects, selected_project_id, 0) %]
 </select>
\ No newline at end of file
Index: Comserv/root/todo/add_project.tt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[% META title = 'Add Project' %]\n[% PageVersion = 'todo/add_project.tt,v 0.01 2023/11/28 shanta Exp shanta ' %]\n[% IF debug_mode == 1 %]\n    [% PageVersion %]\n[% END %]\n\n<h1>Add Project</h1>\n\n<!-- Display the error message if there is one -->\n[% IF error_message %]\n    <p class=\"error\">[% error_message %]</p>\n[% END %]\n\n<form method=\"POST\" action=\"/project/create_project\">\n  [% INCLUDE \"todo/site_list.tt\" %]<br>\n\n    <label for=\"name\">Project Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" value=\"[% form_data.name %]\" required><br>\n\n    <label for=\"parent_id\">Parent Project (Optional):</label><br>\n    [% INCLUDE \"todo/project_list.tt\" projects=projects selected_project_id=form_data.parent_id %]<br>\n    <small>Select a parent project to create this as a sub-project, or leave as \"None\" for a top-level project</small><br><br>\n\n    <label for=\"description\">Description:</label><br>\n    <textarea id=\"description\" name=\"description\" required>[% form_data.description %]</textarea><br>\n\n    <label for=\"start_date\">Start Date:</label><br>\n    <input type=\"date\" id=\"start_date\" name=\"start_date\" value=\"[% form_data.start_date %]\" required><br>\n\n    <label for=\"end_date\">End Date:</label><br>\n    <input type=\"date\" id=\"end_date\" name=\"end_date\" value=\"[% form_data.end_date %]\" required><br>\n\n    <label for=\"status\">Status:</label><br>\n    <select id=\"status\" name=\"status\" required>\n        <option value=\"Requested\" [% IF form_data.status == 'Requested' %]selected[% END %]>Requested</option>\n        <option value=\"Public\" [% IF form_data.status == 'Public' %]selected[% END %]>Public</option>\n        <option value=\"In-Process\" [% IF form_data.status == 'In-Process' %]selected[% END %]>In-Process</option>\n        <option value=\"Testing\" [% IF form_data.status == 'Testing' %]selected[% END %]>Testing</option>\n        <option value=\"Delivered\" [% IF form_data.status == 'Delivered' %]selected[% END %]>Delivered</option>\n    </select><br>\n\n    <label for=\"project_code\">Project Code:</label><br>\n    <input type=\"text\" id=\"project_code\" name=\"project_code\" value=\"[% form_data.project_code %]\" required><br>\n\n    <label for=\"project_size\">Project Size:</label><br>\n    <input type=\"number\" id=\"project_size\" name=\"project_size\" value=\"[% form_data.project_size %]\" required><br>\n\n    <label for=\"estimated_man_hours\">Estimated Man Hours:</label><br>\n    <input type=\"number\" id=\"estimated_man_hours\" name=\"estimated_man_hours\" value=\"[% form_data.estimated_man_hours %]\" required><br>\n\n    <label for=\"developer_name\">Developer Name:</label><br>\n    <input type=\"text\" id=\"developer_name\" name=\"developer_name\" value=\"[% form_data.developer_name %]\" required><br>\n\n    <label for=\"client_name\">Client Name:</label><br>\n    <input type=\"text\" id=\"client_name\" name=\"client_name\" value=\"[% form_data.client_name %]\" required><br>\n\n    <label for=\"comments\">Comments:</label><br>\n    <textarea id=\"comments\" name=\"comments\" required>[% form_data.comments %]</textarea><br>\n\n    <input type=\"submit\" value=\"Add Project\">\n</form>\n<script>\nfunction openAddSiteForm() {\n    var url = window.location.origin + '/site/add_site_form';\n    console.log(\"Opening URL: \" + url);\n    window.open(url, '_blank');\n}\n</script>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Comserv/root/todo/add_project.tt b/Comserv/root/todo/add_project.tt
--- a/Comserv/root/todo/add_project.tt	(revision d10a7207b15200f2d7f1c2c08afdbd9dd3ae61fb)
+++ b/Comserv/root/todo/add_project.tt	(date 1753905468147)
@@ -65,4 +65,32 @@
     console.log("Opening URL: " + url);
     window.open(url, '_blank');
 }
+
+// Check if this window was opened as a popup and notify parent on successful creation
+window.addEventListener('load', function() {
+    // Check for success message or redirect that indicates project was created
+    var urlParams = new URLSearchParams(window.location.search);
+    if (urlParams.get('success') === '1' || window.location.pathname.includes('/project/')) {
+        if (window.opener) {
+            console.log('Notifying parent window of project creation');
+            window.opener.postMessage({type: 'projectCreated'}, '*');
+            window.close();
+        }
+    }
+});
+
+// Override form submission to handle success notification
+document.addEventListener('DOMContentLoaded', function() {
+    var form = document.querySelector('form[action="/project/create_project"]');
+    if (form) {
+        form.addEventListener('submit', function(e) {
+            // Let the form submit normally, but add a flag to detect success
+            var input = document.createElement('input');
+            input.type = 'hidden';
+            input.name = 'popup_mode';
+            input.value = '1';
+            form.appendChild(input);
+        });
+    }
+});
 </script>
Index: Comserv/root/todo/details.tt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n[% PageVersion  = 'todo/details.tt,v 0.05 2025/04/01 Shanta Exp Shanta'; %]\n[%# PageVersion  = 'todo/details.tt,v 0.1 2023/12/07 Shanta Exp Shanta'; %]\n[% IF debug_mode == 1 %]\n\n    [% PageVersion %]\n[% END %]\n\n\n\n<h1>Record Details View.</h1>\n\n<!-- Return navigation buttons -->\n<div class=\"todo-nav-buttons\">\n    <a href=\"/todo\" class=\"btn btn-secondary\">Return to List View</a>\n    <a href=\"/todo/day\" class=\"btn btn-secondary\">Return to Day View</a>\n    <a href=\"/todo/week\" class=\"btn btn-secondary\">Return to Week View</a>\n    <a href=\"/todo/month\" class=\"btn btn-secondary\">Return to Month View</a>\n    <button type=\"button\" class=\"btn btn-secondary\" onclick=\"window.history.back();\">Return to Previous Page</button>\n</div>\n\n<p>Record ID: [% record.get_column('record_id') %]</p>\n\n<!-- Display the accumulated time for the todo record -->\n<div>\n    <label for=\"accumulative_time_display\">Accumulated Time:</label>\n    <span id=\"accumulative_time_display\">[% accumulative_time %]</span>\n</div>\n\n<form action=\"/todo/modify/[% record.get_column('record_id') %]\" method=\"post\">\n    <div>\n        <label for=\"sitename\">Site Name:</label>\n        <input type=\"text\" id=\"sitename\" name=\"sitename\" value=\"[% record.get_column('sitename') %]\">\n    </div>\n\n    <div>\n        <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" value=\"[% record.get_column('start_date') %]\">[% record.get_column('start_date') %]\n    </div>\n\n    <div>\n        <label for=\"due_date\">Due Date:</label>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\" value=\"[% record.get_column('due_date') %]\">\n    </div>\n\n    <div>\n        <label for=\"time_of_day\">Time of Day:</label>\n        <input type=\"time\" id=\"time_of_day\" name=\"time_of_day\" value=\"[% record.get_column('time_of_day') %]\">\n        [% IF record.get_column('time_of_day') %]\n            <span class=\"time-display\">Scheduled for: [% record.get_column('time_of_day') %]</span>\n        [% ELSE %]\n            <span class=\"no-time\">No specific time set</span>\n        [% END %]\n    </div>\n\n    <div>\n        <label for=\"subject\">Subject:</label>\n        <input type=\"text\" id=\"subject\" name=\"subject\" value=\"[% record.get_column('subject') %]\">\n    </div>\n\n    <div>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">[% record.get_column('description') %]</textarea>\n    </div>\n\n    <div>\n        <label for=\"estimated_man_hours\">Estimated Man Hours:</label>\n        <input type=\"number\" id=\"estimated_man_hours\" name=\"estimated_man_hours\" value=\"[% record.get_column('estimated_man_hours') %]\">\n    </div>\n\n    <div>\n        <label for=\"accumulative_time\">Accumulative Time:</label>\n        <input type=\"text\" id=\"accumulative_time\" name=\"accumulative_time\" value=\"[% accumulative_time %]\">\n    </div>\n\n    <div>\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\">\n            <option value=\"1\" [% IF record.get_column('status') == status.1 %]selected[% END %]>NEW</option>\n            <option value=\"2\" [% IF record.get_column('status') == status.2 %]selected[% END %]>IN PROGRESS</option>\n            <option value=\"3\" [% IF record.get_column('status') == status.3 %]selected[% END %]>DONE</option>\n        </select>\n    </div>\n\n    <div>\n        <label for=\"priority\">Priority:</label>\n        <input type=\"number\" id=\"priority\" name=\"priority\" value=\"[% record.get_column('priority') %]\">\n    </div>\n\n    <div>\n        <label for=\"last_mod_by\">Last Modified By:</label>\n        <input type=\"text\" id=\"last_mod_by\" name=\"last_mod_by\" value=\"[% record.get_column('last_mod_by') %]\">\n    </div>\n\n    <div>\n        <label for=\"last_mod_date\">Last Modified Date:</label>\n        <input type=\"date\" id=\"last_mod_date\" name=\"last_mod_date\" value=\"[% record.get_column('last_mod_date') %]\">\n    </div>\n\n    <div>\n        <label for=\"group_of_poster\">Group of Poster:</label>\n        <input type=\"text\" id=\"group_of_poster\" name=\"group_of_poster\" value=\"[% record.get_column('group_of_poster') %]\">\n    </div>\n\n    <div>\n        <label for=\"user_id\">User ID:</label>\n        <input type=\"number\" id=\"user_id\" name=\"user_id\" value=\"[% record.get_column('user_id') %]\">\n    </div>\n\n    <div>\n        <label for=\"project_id\">Project ID:</label>\n        <input type=\"number\" id=\"project_id\" name=\"project_id\" value=\"[% record.get_column('project_id') %]\">\n    </div>\n\n    <div>\n        <input type=\"submit\" value=\"Submit\">\n    </div>\n</form>\n\n<div class=\"todo-action-buttons\">\n    <form action=\"/log/log_form\" method=\"POST\" target=\"_blank\" style=\"display: inline;\">\n        <input type=\"hidden\" name=\"todo_record_id\" value=\"[% record.get_column('record_id') %]\">\n        <input type=\"hidden\" name=\"site_name\" value=\"[% record.get_column('sitename') %]\">\n        <input type=\"hidden\" name=\"start_date\" value=\"[% record.get_column('start_date') %]\">\n        <input type=\"hidden\" name=\"due_date\" value=\"[% record.get_column('due_date') %]\">\n        <input type=\"hidden\" name=\"abstract\" value=\"[% record.get_column('subject') %]\">\n        <input type=\"hidden\" name=\"details\" value=\"[% record.get_column('description') %]\">\n        <input type=\"hidden\" name=\"priority\" value=\"[% record.get_column('priority') %]\">\n        <input type=\"hidden\" name=\"status\" value=\"[% record.get_column('status') %]\">\n        <input type=\"hidden\" name=\"comments\" value=\"[% record.get_column('comments') %]\">\n        <button type=\"submit\" class=\"btn btn-success\">Add Log Entry</button>\n    </form>\n    <form action=\"/todo/edit/[% record.get_column('record_id') %]\" method=\"POST\" style=\"display: inline;\">\n        <input type=\"hidden\" name=\"record_id\" value=\"[% record.get_column('record_id') %]\">\n        <button type=\"submit\" class=\"btn btn-warning\">Edit Todo</button>\n    </form>\n</div>\n<!-- Return navigation buttons -->\n<div class=\"todo-nav-buttons\">\n    <a href=\"/todo\" class=\"btn btn-secondary\">Return to List View</a>\n    <a href=\"/todo/day\" class=\"btn btn-secondary\">Return to Day View</a>\n    <a href=\"/todo/week\" class=\"btn btn-secondary\">Return to Week View</a>\n    <a href=\"/todo/month\" class=\"btn btn-secondary\">Return to Month View</a>\n    <button type=\"button\" class=\"btn btn-secondary\" onclick=\"window.history.back();\">Return to Previous Page</button>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Comserv/root/todo/details.tt b/Comserv/root/todo/details.tt
--- a/Comserv/root/todo/details.tt	(revision d10a7207b15200f2d7f1c2c08afdbd9dd3ae61fb)
+++ b/Comserv/root/todo/details.tt	(date 1753906190656)
@@ -108,8 +108,14 @@
     </div>
 
     <div>
-        <label for="project_id">Project ID:</label>
-        <input type="number" id="project_id" name="project_id" value="[% record.get_column('project_id') %]">
+        <label for="project_id">Select Project:</label>
+        <div style="display: flex; align-items: center; gap: 10px;">
+          [% INCLUDE "todo/project_list.tt" projects=projects selected_project_id=record.get_column('project_id') field_name='project_id' %]
+          <button type="button" class="btn btn-secondary" onclick="openAddProjectForm()" title="Add New Project">
+            <i class="fas fa-plus"></i> Add Project
+          </button>
+        </div>
+        <small style="color: #666; font-size: 0.9em;">Current Project ID: [% record.get_column('project_id') || 'None' %]</small>
     </div>
 
     <div>
@@ -143,3 +149,19 @@
     <a href="/todo/month" class="btn btn-secondary">Return to Month View</a>
     <button type="button" class="btn btn-secondary" onclick="window.history.back();">Return to Previous Page</button>
 </div>
+<script>
+function openAddProjectForm() {
+    var url = window.location.origin + '/todo/add_project';
+    console.log("Opening Add Project URL: " + url);
+    var projectWindow = window.open(url, 'addProject', 'width=800,height=600,scrollbars=yes,resizable=yes');
+    
+    // Listen for project creation completion
+    window.addEventListener('message', function(event) {
+        if (event.data.type === 'projectCreated') {
+            console.log('Project created, refreshing project list');
+            // Reload the current page to refresh the project list
+            window.location.reload();
+        }
+    });
+}
+</script>
