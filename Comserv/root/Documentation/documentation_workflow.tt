[% PageVersion = 'Documentation/documentation_workflow.tt,v 1.0 2024/05/31 shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

<div class="documentation-page">
    <h1>Documentation Workflow Guidelines</h1>
    
    <p>This guide outlines the recommended workflow for updating, creating, and maintaining documentation in the Comserv system.</p>
    
    <div class="toc">
        <h2>Table of Contents</h2>
        <ul>
            <li><a href="#identify">1. Identify Documentation Needs</a></li>
            <li><a href="#update">2. Update or Create Documentation Files</a></li>
            <li><a href="#migrate">3. Migrate Documentation to the New Format</a></li>
            <li><a href="#prepare">4. Prepare for Git Commit</a></li>
            <li><a href="#json">5. Update the JSON Tracking File</a></li>
            <li><a href="#commit">6. Create Git Commit</a></li>
            <li><a href="#update-json">7. Update JSON with Commit Information</a></li>
            <li><a href="#push">8. Push Changes to Repository</a></li>
            <li><a href="#benefits">Benefits of This Workflow</a></li>
        </ul>
    </div>
    
    <section id="identify">
        <h2>1. Identify Documentation Needs</h2>
        
        <p>First, identify what documentation needs to be updated or created:</p>
        
        <ul>
            <li><strong>Review existing documentation</strong> to identify gaps or outdated information</li>
            <li><strong>Gather requirements</strong> for new features that need documentation</li>
            <li><strong>Prioritize updates</strong> based on user needs and feature importance</li>
        </ul>
    </section>
    
    <section id="update">
        <h2>2. Update or Create Documentation Files</h2>
        
        <p>For each documentation item:</p>
        
        <ol>
            <li><strong>Locate the appropriate template file</strong> in <code>/comserv/Comserv/root/Documentation/</code></li>
            <li><strong>Create new files</strong> if needed using the existing format (TT template files)</li>
            <li><strong>Update content</strong> with clear, concise information</li>
            <li><strong>Include examples</strong> where appropriate</li>
            <li><strong>Add cross-references</strong> to related documentation</li>
        </ol>
        
        <p>For example, if updating the log form functionality:</p>
        <ul>
            <li>Update or create <code>/comserv/Comserv/root/Documentation/log_system.tt</code></li>
            <li>Include details about the new project selection feature</li>
            <li>Add screenshots or code examples</li>
        </ul>
    </section>
    
    <section id="migrate">
        <h2>3. Migrate Documentation to the New Format</h2>

        <p>If migrating from an older format:</p>

        <ol>
            <li><strong>Extract relevant content</strong> from the old documentation</li>
            <li><strong>Restructure</strong> according to the new documentation template format</li>
            <li><strong>Update terminology</strong> to be consistent with the current system</li>
            <li><strong>Enhance with new information</strong> about recent features</li>
            <li><strong>Verify links</strong> and cross-references work in the new structure</li>
        </ol>
    </section>

    <section id="prepare">
        <h2>4. Prepare for Git Commit</h2>

        <p>Before committing:</p>

        <ol>
            <li><strong>Review all changes</strong> to ensure accuracy and completeness</li>
            <li><strong>Test documentation links</strong> to verify they work</li>
            <li><strong>Check for formatting issues</strong> or inconsistencies</li>
            <li><strong>Validate any code examples</strong> included in the documentation</li>
        </ol>
    </section>

    <section id="json">
        <h2>5. Update the JSON Tracking File</h2>

        <p>After preparing your documentation but before committing:</p>

        <ol>
            <li><strong>Open the completed_items.json file</strong>:
                <pre><code>/comserv/Comserv/root/Documentation/completed_items.json</code></pre>
            </li>
            <li><strong>Add a new entry</strong> for each significant documentation update:
                <pre><code>{
  "item": "Updated Log Form Documentation - Added project selection details",
  "status": "completed",
  "date_created": "YYYY-MM-DD",
  "date_completed": "YYYY-MM-DD"
}</code></pre>
            </li>
            <li><strong>Include specific details</strong> about what was updated</li>
            <li><strong>Use consistent formatting</strong> for entries</li>
            <li><strong>Add new fields if needed</strong> to capture additional information about the update (e.g., related_features, affected_modules, etc.)</li>
        </ol>
    </section>
    
    <section id="commit">
        <h2>6. Create Git Commit</h2>
        
        <p>Follow the Git workflow guidelines:</p>
        
        <ol>
            <li><strong>Stage your changes</strong>:
                <pre><code>git add /comserv/Comserv/root/Documentation/your_updated_file.tt
git add /comserv/Comserv/root/Documentation/completed_items.json</code></pre>
            </li>
            <li><strong>Create a descriptive commit message</strong>:
                <pre><code>git commit -m "Documentation: Updated log form with project selection details"</code></pre>
            </li>
            <li><strong>Note the commit hash</strong> after committing</li>
        </ol>
    </section>
    
    <section id="update-json">
        <h2>7. Update JSON with Commit Information</h2>
        
        <p>After committing:</p>
        
        <ol>
            <li><strong>Open the completed_items.json file</strong> again</li>
            <li><strong>Add the commit hash</strong> to your recent entries:
                <pre><code>{
  "item": "Updated Log Form Documentation - Added project selection details",
  "status": "completed",
  "date_created": "YYYY-MM-DD",
  "date_completed": "YYYY-MM-DD",
  "commit": "a1b2c3d4e5f6" 
}</code></pre>
            </li>
            <li><strong>Commit this update</strong> with a simple message:
                <pre><code>git add /comserv/Comserv/root/Documentation/completed_items.json
git commit -m "Update completed_items.json with commit reference"</code></pre>
            </li>
        </ol>
    </section>
    
    <section id="push">
        <h2>8. Push Changes to Repository</h2>
        
        <p>Finally:</p>
        
        <ol>
            <li><strong>Push your changes</strong> to the appropriate branch:
                <pre><code>git push origin your-branch-name</code></pre>
            </li>
            <li><strong>Create a pull request</strong> if using a branch workflow</li>
            <li><strong>Notify team members</strong> about the documentation updates</li>
        </ol>
    </section>
    
    <section id="benefits">
        <h2>Benefits of This Workflow</h2>
        
        <p>This workflow ensures:</p>
        
        <ol>
            <li><strong>Documentation stays current</strong> with system changes</li>
            <li><strong>Changes are tracked</strong> in the JSON file for easy reference</li>
            <li><strong>Commit information is preserved</strong> for traceability</li>
            <li><strong>Users can see recent updates</strong> in the documentation center</li>
            <li><strong>The application start date</strong> is available for reference</li>
        </ol>
        
        <p>By following this structured approach, you'll maintain high-quality documentation that evolves with your system while keeping a clear record of all changes.</p>
    </section>

    <section id="ongoing-challenges">
        <h2>Ongoing Documentation Challenges & Solutions</h2>
        
        <p>As the application grows, several challenges have been identified that need systematic addressing:</p>
        
        <h3>Navigation Consistency Issues</h3>
        <ul>
            <li><strong>Problem:</strong> Keeping AI assistants consistent with navigation changes across sessions</li>
            <li><strong>Impact:</strong> Navigation templates and controller routes can become inconsistent</li>
            <li><strong>Solution Needed:</strong> 
                <ul>
                    <li>Standardized navigation update checklist</li>
                    <li>Cross-reference validation between templates and controllers</li>
                    <li>Navigation change documentation requirements</li>
                </ul>
            </li>
        </ul>
        
        <h3>File Growth & Organization</h3>
        <ul>
            <li><strong>Problem:</strong> As file numbers grow, navigation becomes increasingly complex</li>
            <li><strong>Impact:</strong> Users and developers struggle to find related files</li>
            <li><strong>Solution Needed:</strong>
                <ul>
                    <li>Improved file categorization system</li>
                    <li>Better search functionality</li>
                    <li>Automated file relationship detection</li>
                </ul>
            </li>
        </ul>
        
        <h3>Related File Linking</h3>
        <ul>
            <li><strong>Problem:</strong> Related files need better cross-linking within the files themselves</li>
            <li><strong>Impact:</strong> Users miss important related information</li>
            <li><strong>Solution Needed:</strong>
                <ul>
                    <li>Standardized "Related Files" sections in documentation</li>
                    <li>Automated relationship detection and suggestion</li>
                    <li>Cross-reference validation during documentation updates</li>
                </ul>
            </li>
        </ul>
        
        <h3>AI Session Consistency</h3>
        <ul>
            <li><strong>Problem:</strong> Maintaining consistency across AI assistant sessions</li>
            <li><strong>Impact:</strong> Changes made in one session may not be properly carried forward</li>
            <li><strong>Solution Needed:</strong>
                <ul>
                    <li>Enhanced handoff documentation protocols</li>
                    <li>Session state tracking improvements</li>
                    <li>Better context preservation between sessions</li>
                </ul>
            </li>
        </ul>
        
        <h3>Action Items for Future Development</h3>
        <ol>
            <li><strong>Create Navigation Change Protocol:</strong> Document required steps when navigation changes</li>
            <li><strong>Implement File Relationship Tracking:</strong> System to track and display related files</li>
            <li><strong>Enhance AutoDiscovery Tool:</strong> Add relationship detection capabilities</li>
            <li><strong>Improve AI Handoff Process:</strong> Better context preservation between sessions</li>
            <li><strong>Add Cross-Reference Validation:</strong> Automated checking of file links and references</li>
        </ol>
        
        <p><strong>Note:</strong> These challenges should be addressed incrementally as part of ongoing development work. Each AI session should consider these issues when making changes to the documentation system.</p>
    </section>
</div>

<style>
    .documentation-page {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        line-height: 1.6;
    }
    
    .toc {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
    }
    
    .toc ul {
        list-style-type: none;
        padding-left: 15px;
    }
    
    .toc li {
        margin-bottom: 5px;
    }
    
    section {
        margin-bottom: 30px;
        border-bottom: 1px solid #eee;
        padding-bottom: 20px;
    }
    
    pre {
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
    }
    
    code {
        font-family: monospace;
        background-color: #f1f1f1;
        padding: 2px 4px;
        border-radius: 3px;
    }
    
    pre code {
        background-color: transparent;
        padding: 0;
    }
</style>