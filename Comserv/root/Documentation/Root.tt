
[% PageVersion = 'Documentation/Root.tt,v 0.018 2025/03/02 AI Update Exp AI_Assistant' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

<h1 id="roottop">Comserv App Documentation: Root Controller</h1>

<nav>
    <!-- Updated navigation with unique IDs for Root.tt -->
    <a href="#rootoverview">Overview</a> |
    <a href="#rootnaming">Naming Conventions</a> |
    <a href="#rootlogging">Logging</a> |
    <a href="#rootdomain">Domain Mapping</a> |
    <a href="#rootindex">index Action</a> |
    <a href="#rootauto">auto Action</a> |
    <a href="#rootfetch">fetch_and_set Method</a> |
    <a href="#rootsite_setup">site_setup Method</a> |
    <a href="#rootend">end Action</a> |
    <a href="#roottop">back to top</a>
</nav>

<p>The `Root` controller serves as the backbone of the Comserv application. It provides:
<ul>
    <li>Domain mapping to process requests in a multi-tenant environment.</li>
    <li>Guidelines for consistency in logging, variable management, and naming conventions.</li>
    <li>Context setup for further request handling.</li>
</ul>
</p>

<h2 id="rootoverview">1. Overview</h2>
<p>The Root controller lays the foundation of the Comserv application by executing its responsibilities:</p>
<ul>
    <li><b>Mapping Domains:</b> Dynamically determines which tenant (domain) a request belongs to and routes it appropriately.</li>
    <li><b>Maintaining Conventions:</b> Enables consistent naming, logging, and request handling across the app.</li>
    <li><b>Handling Root Requests:</b> Processes requests to the root path (`/`) and forwards them to the appropriate controller or renders a default template.</li>
</ul>
<a href="#roottop">back to top</a>

<h2 id="rootnaming">2. Naming Conventions</h2>
<p>To avoid errors and maintain clarity in a dynamic, multi-tenant platform:</p>
<ul>
    <li>Session or stash variables must use camelCase naming (e.g., `ControllerName`, `SiteName`).</li>
    <li>Template names should align with their use case or tenant (e.g., `usbm_home.tt` for USBM domain homepages).</li>
</ul>
<a href="#roottop">back to top</a>

<h2 id="rootlogging">3. Logging</h2>
<p>Logging in `Root.pm` adheres to detailed conventions for traceability and debugging. Each log should include the following components:</p>
<ol>
    <li><b>File and Line Number:</b> Use `__FILE__` and `__LINE__` to pinpoint the origin of the log.</li>
    <li><b>Action or Method Context:</b> Provide the action or method name in the log message.</li>
    <li><b>Detailed Message:</b> Add relevant variables and states.</li>
</ol>
<h3>Example:</h3>
<pre>
$self->logging->log_with_details($c, __FILE__, __LINE__,
    'fetch_and_set',
    "ControllerName resolved to: $c->session->{ControllerName}");
</pre>
<a href="#roottop">back to top</a>

<h2 id="rootdomain">4. Domain Mapping</h2>
<p>Domain management ensures requests are correctly directed based on the incoming domain:</p>
<h3>Steps:</h3>
<ol>
    <li><b>Extract Domain:</b> Fetch the domain from the request:
        <pre>$domain = $c->req->base->host;</pre>
    </li>
    <li><b>Match in Database:</b> Query the database to match the domain:
        <pre>my $site_domain = $c->model('Site')->get_site_domain($domain);</pre>
    </li>
    <li><b>Set Context:</b> If a match is found, set critical request variables (`SiteName`, `ControllerName`).</li>
    <li><b>Fallback:</b> Default to a fallback domain if no match exists.</li>
</ol>
<a href="#roottop">back to top</a>

<h2 id="rootindex">5. index Action</h2>
<p>The `index` action serves as the default route and processes root (`/`) requests.</p>
<ul>
    <li>It retrieves the `ControllerName` from the session or sets a fallback default.</li>
    <li>Forwards the request to the appropriate controller's `index` action if `ControllerName` is set.</li>
    <li>Renders the default `index.tt` template if no `ControllerName` is set.</li>
</ul>
<h3>Example:</h3>
<pre>
if ($ControllerName) {
    $c->detach($ControllerName, 'index');
} else {
    $c->stash(template => 'index.tt');
    $c->forward($c->view('TT'));
}
</pre>
<a href="#roottop">back to top</a>

<h2 id="rootauto">6. auto Action</h2>
<p>The `auto` action runs before each routed action method. Its primary responsibilities include:</p>
<ul>
    <li><b>Domain Setup:</b> Runs `fetch_and_set` to resolve the current tenant.</li>
    <li><b>Session Context:</b> Prepares variables in both session and stash environments.</li>
    <li><b>Debug Mode Toggling:</b> The `auto` action checks for a `debug` parameter in the URL. If `debug=1`, it enables the debug mode by setting `c.session.debug_mode` to `1`. If `debug=0`, it disables the debug mode by setting `c.session.debug_mode` to `0`. This allows for dynamic toggling of debug mode based on URL parameters.</li>
    <li><b>ControllerName Setup:</b> Ensures `ControllerName` is set to the same value as `SiteName` after determining the `SiteName`.</li>
    <li><b>Forwarding:</b> Forwards to the `index` method for the final decision on the controller or default homepage.</li>
</ul>
<h3>Example:</h3>
<pre>
if ($c->req->path eq '/' || $c->req->path eq '') {
    $self->index($c);
}
</pre>
<a href="#roottop">back to top</a>

<h2 id="rootfetch">7. fetch_and_set Method</h2>
<p>An essential helper method used to:</p>
<ul>
    <li>Extract variables dynamically from query parameters, the session, or the database.</li>
    <li>Update session and stash values so they can be used downstream in the request lifecycle.</li>
    <li>Set `ControllerName` based on the site's `home_view` or default to `Root` if no `home_view` is specified.</li>
</ul>
<a href="#roottop">back to top</a>

<h2 id="rootsite_setup">8. site_setup Method</h2>
<p>The `site_setup` method fetches additional tenant-specific details (like styling or configuration) and initializes view-related data. This method builds on the variables set by `fetch_and_set` and customizes request processing further.</p>
<a href="#roottop">back to top</a>

<h2 id="rootend">9. end Action</h2>
<p>The `end` action is the final step in the Catalyst request lifecycle. It renders the response by processing and populating the required template using Catalystâ€™s `RenderView` action.</p>
<a href="#roottop">back to top</a>

<h2 id="rootsuggestions">10. Suggestions for Improvement</h2>
<p>To improve the readability and functionality of the `Root` controller, consider the following:</p>
<ul>
    <li><b>Refactor Domain Mapping:</b> Move domain mapping logic into a separate utility method to reduce complexity in `setup_site`.</li>
    <li><b>Enhance Logging:</b> Add more granular logging for debugging, especially in the `auto` and `index` actions.</li>
    <li><b>Improve Error Handling:</b> Add fallback mechanisms    <li><b>Improve Error Handling:</b> Add fallback mechanisms for missing or invalid `ControllerName` or `SiteName` values. For example, if `ControllerName` is not set, the application should gracefully fall back to a default controller or template instead of failing silently.</li>
    <li><b>Optimize Template Handling:</b> Use a centralized template resolver to avoid hardcoding template paths. This would make it easier to manage and update templates across the application.</li>
    <li><b>Centralize Configuration:</b> Move configuration settings (e.g., default template paths, fallback values) into a centralized configuration file or module. This would make it easier to maintain and update these settings.</li>
    <li><b>Add Unit Tests:</b> Write comprehensive unit tests for the `Root` controller, especially for edge cases like missing session data, invalid domains, or unexpected query parameters.</li>
    <li><b>Document Edge Cases:</b> Add detailed documentation for edge cases, such as handling requests with missing or malformed data, to ensure developers understand how the controller behaves in all scenarios.</li>
</ul>
<a href="#roottop">back to top</a>

<footer>
    <hr>
    <p>Page Version: [% PageVersion %]</p>
    <p><a href="#roottop">Root Controller Documentation</a> | <a href="documentation.tt#overview">Complete Application Documentation</a></p>
</footer>