<!-- File: /home/shanta/PycharmProjects/comserv2/Comserv/root/Documentation/index.tt -->
[% PageVersion = 'Documentation/index.tt,v 1.7 2025/01/20 shanta Exp shanta ' %]
[% META title = 'Comserv Documentation' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[%# Determine user role for display %]
[% SET display_role = 'Guest' %]
[% IF c.session.roles %]
    [% IF c.session.roles.grep('admin').size %]
        [% SET display_role = 'Administrator' %]
    [% ELSIF c.session.roles.grep('developer').size %]
        [% SET display_role = 'Developer' %]
    [% ELSIF c.session.roles.grep('editor').size %]
        [% SET display_role = 'Editor' %]
    [% ELSIF c.session.roles.grep('user').size %]
        [% SET display_role = 'User' %]
    [% END %]
[% END %]

[% IF c.session.debug_mode == 1 %]
<div class="debug">
    <h3>Debug Information</h3>
    <p>User Role from Controller: [% user_role %]</p>
    <p>Display Role from Template: [% display_role %]</p>
    <p>Session Roles: [% c.session.roles.join(', ') IF c.session.roles %]</p>
    <p>Debug Message: [% debug_msg %]</p>
    <p>Categories Available:</p>
    <ul>
        <li>user_guides: [% categories.user_guides ? 'Yes' : 'No' %]</li>
        <li>tutorials: [% categories.tutorials ? 'Yes' : 'No' %]</li>
        <li>site_specific: [% categories.site_specific ? 'Yes' : 'No' %]</li>
        <li>admin_guides: [% categories.admin_guides ? 'Yes' : 'No' %]</li>
        <li>proxmox: [% categories.proxmox ? 'Yes' : 'No' %]</li>
        <li>controllers: [% categories.controllers ? 'Yes' : 'No' %]</li>
        <li>models: [% categories.models ? 'Yes' : 'No' %]</li>
        <li>changelog: [% categories.changelog ? 'Yes' : 'No' %]</li>
        <li>general: [% categories.general ? 'Yes' : 'No' %]</li>
    </ul>
    
    <h4>Changelog Entries:</h4>
    <ul>
        [% IF categories.changelog && categories.changelog.pages.size > 0 %]
            [% FOREACH page_name IN categories.changelog.pages.sort.reverse %]
                [% page = structured_pages.$page_name %]
                <li>
                    [% page_name %] - 
                    Title: [% page.title %], 
                    Description: [% page.description %], 
                    Date: [% page.date %]
                </li>
            [% END %]
        [% ELSE %]
            <li>No changelog entries found.</li>
        [% END %]
    </ul>
    
    <h4>Controller Documentation Files:</h4>
    <ul>
        [% IF categories.controllers && categories.controllers.pages.size > 0 %]
            [% FOREACH page_name IN categories.controllers.pages.sort %]
                <li>[% page_name %] - [% structured_pages.$page_name ? 'Found' : 'Not Found' %]</li>
            [% END %]
        [% ELSE %]
            <li>No controller documentation files found.</li>
        [% END %]
    </ul>
    
    <h4>Model Documentation Files:</h4>
    <ul>
        [% IF categories.models && categories.models.pages.size > 0 %]
            [% FOREACH page_name IN categories.models.pages.sort %]
                <li>[% page_name %] - [% structured_pages.$page_name ? 'Found' : 'Not Found' %]</li>
            [% END %]
        [% ELSE %]
            <li>No model documentation files found.</li>
        [% END %]
    </ul>
</div>
[% END %]

<div class="apiary-container">
    <header class="apiary-header">
        <h1><i class="fas fa-book"></i>Comserv Documentation</h1>
        <div class="apiary-context">
            <span class="context-item"><strong>Site:</strong> [% site_name || 'Comserv' %]</span>
            <span class="context-item"><strong>Role:</strong> [% display_role %]</span>
            [% IF is_admin %]
                <span class="context-item status-active"><strong>Access:</strong> Administrator</span>
            [% END %]
        </div>
    </header>
    
    <!-- Search Box Section -->
    <div class="section">
        <div class="section-header collapsible-header" onclick="toggleSection('search-section')">
            <h2><i class="fas fa-search"></i>Search Documentation <span class="toggle-icon"></span></h2>
        </div>
        <div id="search-section" class="section-content collapsible-content" style="display: none;">
            <div class="admin-container">
                <input type="text" id="doc-search-input" placeholder="Search all documentation..." class="search-input">
                <button type="button" id="doc-search-btn" class="search-button">
                    <i class="fas fa-search"></i>Search
                </button>
                <button type="button" id="doc-clear-btn" class="clear-button">
                    <i class="fas fa-times"></i>Clear
                </button>
            </div>
            <div id="search-results" class="admin-container" style="display: none;">
                <h3><i class="fas fa-list"></i>Search Results</h3>
                <div id="search-results-list" class="admin-grid"></div>
            </div>
        </div>
    </div>
    
    [% IF is_admin %]
    <!-- Quick Access Links for Administrators -->
    <div class="section">
        <div class="section-header collapsible-header" onclick="toggleSection('quick-access-section')">
            <h3><i class="fas fa-tools"></i>Quick Access for Administrators <span class="toggle-icon"></span></h3>
        </div>
        <div id="quick-access-section" class="section-content collapsible-content" style="display: none;">
            <div class="admin-grid">
                <div class="admin-card">
                    <h4><i class="fas fa-server"></i>System Management</h4>
                    <ul>
                        <li><a href="[% c.uri_for('/Documentation/view/proxmox_commands') %]">Proxmox Command Reference</a></li>
                        <li><a href="[% c.uri_for('/api_credentials') %]">API Credentials Management</a></li>
                        <li><a href="[% c.uri_for('/admin') %]">System Administration</a></li>
                    </ul>
                </div>
                <div class="admin-card">
                    <h4><i class="fas fa-code"></i>Developer Resources</h4>
                    <ul>
                        <li><a href="[% c.uri_for('/Documentation/view/css_theme_system_rules') %]">CSS Theme System Rules</a></li>
                        <li><a href="[% c.uri_for('/Documentation/api') %]">API Documentation</a></li>
                        <li><a href="[% c.uri_for('/Documentation/view/architecture') %]">System Architecture</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    [% END %]

    [%# User-facing sections %]
    [% INCLUDE 'Documentation/user_docs.tt' %]
    [% INCLUDE 'Documentation/tutorials.tt' %]
    [% INCLUDE 'Documentation/site_specific.tt' %]
    [% INCLUDE 'Documentation/developer_guides.tt' %]

    [%# Admin-only sections %]
    [% # Use the is_admin flag passed from the controller %]
    [% IF is_admin %]
        [% # Debug output %]
        [% IF c.session.debug_mode == 1 %]
            <div class="debug">
                <p>Admin sections visible: user_role=[% user_role %], session roles=[% c.session.roles.join(',') IF c.session.roles %]</p>
            </div>
        [% END %]
        [% INCLUDE 'Documentation/admin_guides.tt' %]
        [% INCLUDE 'Documentation/proxmox.tt' %]
        [% INCLUDE 'Documentation/controllers.tt' %]
        [% INCLUDE 'Documentation/models.tt' %]
        <!-- Pure Directory-Based Changelog Section -->
        <div class="section">
            <div class="section-header collapsible-header" onclick="toggleSection('changelog-section')">
                <h3><i class="fas fa-history"></i>System Changelog <span class="toggle-icon"></span></h3>
            </div>
            <div id="changelog-section" class="section-content collapsible-content" style="display: none;">
                <p>System updates and changes. <span class="admin-badge">Admin Only</span></p>
                
                [% # Get changelog pages from the categories and sort by date %]
                [% IF categories.changelog.pages.size > 0 %]
                    [% # Create array with date sorting info %]
                    [% changelog_with_dates = [] %]
                    [% FOREACH page_key IN categories.changelog.pages %]
                        [% page = structured_pages.$page_key %]
                        [% NEXT UNLESS page %]
                        
                        [% # Extract date from filename for sorting %]
                        [% date_match = page_key.match('(\d{4}-\d{2}(-\d{2})?)') %]
                        [% IF date_match %]
                            [% sort_date = date_match.0 %]
                            [% # Normalize to YYYY-MM-DD format for proper sorting %]
                            [% IF sort_date.length == 7 %]
                                [% sort_date = sort_date _ '-01' %]
                            [% END %]
                        [% ELSE %]
                            [% sort_date = '0000-00-00' %]
                        [% END %]
                        
                        [% changelog_with_dates.push({
                            key => page_key,
                            page => page,
                            sort_date => sort_date,
                            display_date => date_match ? date_match.0.replace('-', '/') : 'Recent'
                        }) %]
                    [% END %]
                    
                    [% # Sort by date (newest first) %]
                    [% sorted_changelog = changelog_with_dates.sort('sort_date').reverse %]
                    
                    [% # Set display limit %]
                    [% display_limit = 5 %]
                    [% total_count = sorted_changelog.size %]
                    
                    <div class="admin-grid">
                        [% # Display recent entries %]
                        [% FOREACH entry IN sorted_changelog %]
                            [% LAST IF loop.index >= display_limit %]
                            
                            <div class="admin-card [% IF loop.index >= display_limit %]changelog-hidden[% END %]">
                                <h4><i class="fas fa-calendar-alt"></i>[% entry.page.title %]</h4>
                                <div class="changelog-meta">
                                    <span class="date"><strong>Date:</strong> [% entry.display_date %]</span>
                                </div>
                                <p>[% entry.page.description || 'System change documentation.' %]</p>
                                <span class="role-badge">Admin Only</span>
                                <ul>
                                    <li><a href="[% c.uri_for('/Documentation/view/' _ entry.key) %]">View Details</a></li>
                                </ul>
                            </div>
                        [% END %]
                        
                        [% # Hidden entries for "show all" functionality %]
                        [% IF total_count > display_limit %]
                            [% FOREACH entry IN sorted_changelog %]
                                [% NEXT IF loop.index < display_limit %]
                                
                                <div class="admin-card changelog-hidden" style="display: none;">
                                    <h4><i class="fas fa-calendar-alt"></i>[% entry.page.title %]</h4>
                                    <div class="changelog-meta">
                                        <span class="date"><strong>Date:</strong> [% entry.display_date %]</span>
                                    </div>
                                    <p>[% entry.page.description || 'System change documentation.' %]</p>
                                    <span class="role-badge">Admin Only</span>
                                    <ul>
                                        <li><a href="[% c.uri_for('/Documentation/view/' _ entry.key) %]">View Details</a></li>
                                    </ul>
                                </div>
                            [% END %]
                        [% END %]
                    </div>
                    
                    [% # Show "View All" button if there are more than display_limit entries %]
                    [% IF total_count > display_limit %]
                        <div class="changelog-controls">
                            <button onclick="toggleAllChangelogs()" id="changelog-toggle-btn" class="btn btn-secondary">
                                <i class="fas fa-expand-alt"></i>Show All ([% total_count %] entries)
                            </button>
                        </div>
                    [% END %]
                    
                [% ELSE %]
                    <div class="admin-card">
                        <h4><i class="fas fa-info-circle"></i>No Changelog Entries</h4>
                        <p>No changelog entries available in the changelog directory.</p>
                    </div>
                [% END %]
            </div>
        </div>
        [% INCLUDE 'Documentation/all_docs.tt' %]
    [% END %]

    [%# Admin/Developer/Debug sections %]
    [% IF display_role == 'Administrator' || display_role == 'Developer' || c.session.debug_mode == 1 %]
        [% INCLUDE 'Documentation/system_info.tt' %]
    [% END %]

    <!-- Recent Updates Section -->
    <div class="section">
        <div class="section-header collapsible-header" onclick="toggleSection('recent-updates-section')">
            <h3><i class="fas fa-history"></i>Recent Updates <span class="toggle-icon"></span></h3>
        </div>
        <div id="recent-updates-section" class="section-content collapsible-content" style="display: none;">
            <p>Latest changes and improvements to the system</p>
            <div class="action-buttons">
                <a href="[% c.uri_for('/Documentation/all_changelog') %]" class="btn btn-primary">
                    <i class="fas fa-list"></i>View All Documentation
                </a>
            </div>
            
            <!-- Recent Updates Grid -->
            <div class="feature-grid">
        [% # Get all changelog pages from the structured_pages hash %]
        [% changelog_pages = [] %]
        [% FOREACH page_name IN structured_pages.keys %]
            [% # Check if the page is in the changelog directory %]
            [% IF structured_pages.$page_name.path.match('Documentation/changelog/') %]
                [% changelog_pages.push(page_name) %]
            [% END %]
        [% END %]
        
        [% # Sort changelog pages by date in the filename (if available) %]
        [% date_sorted_pages = [] %]
        [% FOREACH page_name IN changelog_pages %]
            [% # Extract date from filename if it exists (format: YYYY-MM-DD) %]
            [% date_match = page_name.match('(\d{4}-\d{2}(-\d{2})?)') %]
            [% sort_key = date_match ? date_match.0 : page_name %]
            [% date_sorted_pages.push({ name => page_name, sort_key => sort_key }) %]
        [% END %]
        
        [% # Sort by the extracted date in reverse order (newest first) %]
        [% date_sorted_pages = date_sorted_pages.sort('sort_key').reverse %]
        
        [% # Display only the 5 most recent entries %]
        [% recent_count = 0 %]
        [% FOREACH page_info IN date_sorted_pages %]
            [% LAST IF recent_count >= 5 %]
            [% page_name = page_info.name %]
            [% page = structured_pages.$page_name %]
            [% recent_count = recent_count + 1 %]
            
            [% # Extract date from filename if it exists (format: YYYY-MM-DD) %]
            [% date_match = page_name.match('(\d{4}-\d{2}(-\d{2})?)') %]
            [% changelog_date = date_match ? date_match.0 : 'Recent' %]
            [% # Replace hyphens with slashes for better display %]
            [% changelog_date = changelog_date.replace('-', '/') %]
            
            <div class="feature-card">
                <div class="feature-header">
                    <h4><i class="fas fa-calendar feature-icon"></i>[% page.title %]</h4>
                </div>
                <div class="feature-content">
                    <div class="changelog-meta">
                        <span class="date"><strong>Date:</strong> [% changelog_date %]</span>
                        [% IF page.author %]<span class="author"><strong>Author:</strong> [% page.author %]</span>[% END %]
                    </div>
                    <p>[% page.description || 'System update' %]</p>
                </div>
                <div class="feature-actions">
                    <a href="[% page.url %]" class="btn btn-primary">
                        <i class="fas fa-arrow-right"></i>Read Details
                    </a>
                </div>
            </div>
        [% END %]
        
        [% IF recent_count == 0 %]
            <div class="feature-card">
                <div class="feature-content">
                    <p>No recent updates available.</p>
                </div>
            </div>
        [% END %]
            </div>
        </div>
    </div>
</div>

<!-- CSS moved to /static/css/themes/documentation.css for theme consistency -->

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('doc-search-input');
    const searchBtn = document.getElementById('doc-search-btn');
    const clearBtn = document.getElementById('doc-clear-btn');
    const searchResults = document.getElementById('search-results');
    const searchResultsList = document.getElementById('search-results-list');
    
    // Get all documentation pages for searching - simplified approach without JSON plugin
    const allPages = [
        [% IF sorted_page_names %]
            [% FOREACH page_name IN sorted_page_names %]
                [% page = structured_pages.$page_name %]
                {
                    name: "[% page_name | html %]",
                    title: "[% page.title | html %]",
                    path: "[% page.path | html %]",
                    url: "[% page.url | html %]",
                    site: "[% page.site || 'all' | html %]"
                }[% UNLESS loop.last %],[% END %]
            [% END %]
        [% END %]
    ];
    
    // Debug: Log the data to console
    console.log('Documentation pages loaded:', allPages.length);
    console.log('sorted_page_names available:', [% sorted_page_names ? 'true' : 'false' %]);
    console.log('sorted_page_names length:', [% sorted_page_names ? sorted_page_names.size : 0 %]);
    if (allPages.length > 0) {
        console.log('Sample page data:', allPages[0]);
        console.log('All pages:', allPages);
    } else {
        console.warn('No documentation pages loaded - this may cause search issues');
        console.warn('Will rely on backend search only');
    }
    
    function performSearch() {
        const searchTerm = searchInput.value.trim();
        console.log('Searching for:', searchTerm);
        
        if (searchTerm === '') {
            searchResults.style.display = 'none';
            return;
        }
        
        if (searchTerm.length < 1) {
            displaySearchResults([], searchTerm, 'Please enter at least 1 character');
            return;
        }
        
        // Show loading message
        searchResultsList.innerHTML = '<p class="loading">Searching...</p>';
        searchResults.style.display = 'block';
        
        // Always try backend search first since it's more reliable
        performBackendSearch(searchTerm)
            .then(results => {
                console.log('Backend search results:', results.length);
                if (results.length > 0) {
                    console.log('Sample result:', results[0]);
                }
                displaySearchResults(results, searchTerm);
            })
            .catch(error => {
                console.error('Backend search failed:', error);
                // Show error message to user
                displaySearchResults([], searchTerm, 'Search service temporarily unavailable. Please try again.');
            });
    }
    
    function performBackendSearch(searchTerm) {
        const searchUrl = '[% c.uri_for("/Documentation/search") %]?q=' + encodeURIComponent(searchTerm);
        console.log('Backend search URL:', searchUrl);
        
        return fetch(searchUrl)
            .then(response => {
                console.log('Backend search response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('Backend search data received:', data);
                if (data.error) {
                    throw new Error('Backend error: ' + data.error);
                }
                return data.results || [];
            })
            .catch(error => {
                console.error('Backend search error:', error);
                throw error;
            });
    }
    
    function performClientSearch(searchTerm) {
        let results = [];
        const searchTermLower = searchTerm.toLowerCase();
        
        // First try to search the allPages array if it exists and has data
        if (allPages && allPages.length > 0) {
            results = allPages.filter(page => {
                const titleMatch = page.title && page.title.toLowerCase().includes(searchTermLower);
                const pathMatch = page.path && page.path.toLowerCase().includes(searchTermLower);
                const nameMatch = page.name && page.name.toLowerCase().includes(searchTermLower);
                return titleMatch || pathMatch || nameMatch;
            });
        } else {
            // Fallback: search through visible page elements on the page
            console.log('Using DOM search method');
            results = searchVisibleElements(searchTermLower);
        }
        
        console.log('Client search results:', results.length);
        displaySearchResults(results, searchTerm);
    }
    
    function searchVisibleElements(searchTerm) {
        const results = [];
        
        // Search through feature cards
        const featureCards = document.querySelectorAll('.feature-card');
        featureCards.forEach(card => {
            const titleElement = card.querySelector('h4');
            const linkElement = card.querySelector('a');
            
            if (titleElement && linkElement) {
                const title = titleElement.textContent.toLowerCase();
                if (title.includes(searchTerm)) {
                    results.push({
                        name: titleElement.textContent,
                        title: titleElement.textContent,
                        path: 'Feature Card',
                        url: linkElement.href,
                        site: 'all'
                    });
                }
            }
        });
        
        // Search through admin cards
        const adminCards = document.querySelectorAll('.admin-card');
        adminCards.forEach(card => {
            const titleElement = card.querySelector('h4');
            const links = card.querySelectorAll('a');
            
            if (titleElement) {
                const title = titleElement.textContent.toLowerCase();
                if (title.includes(searchTerm)) {
                    links.forEach(link => {
                        results.push({
                            name: link.textContent,
                            title: link.textContent,
                            path: 'Admin Section',
                            url: link.href,
                            site: 'all'
                        });
                    });
                }
            }
        });
        
        return results;
    }
    
    function displaySearchResults(results, searchTerm, message) {
        searchResultsList.innerHTML = '';
        
        if (message) {
            searchResultsList.innerHTML = '<p class="no-results">' + escapeHtml(message) + '</p>';
        } else if (results.length === 0) {
            searchResultsList.innerHTML = '<p class="no-results">No documentation found matching "' + escapeHtml(searchTerm) + '"</p>';
        } else {
            // Use global naming convention - results displayed as admin-cards in admin-grid
            results.forEach(page => {
                const resultItem = document.createElement('div');
                resultItem.className = 'admin-card';
                
                const title = highlightSearchTerm(escapeHtml(page.title || page.name || 'Untitled'), searchTerm);
                const path = highlightSearchTerm(escapeHtml(page.path || ''), searchTerm);
                
                // Build the result HTML using admin-card structure
                let resultHTML = `
                    <h4><a href="${escapeHtml(page.url)}"><i class="fas fa-file-alt"></i>${title}</a></h4>
                    <p class="result-path"><i class="fas fa-folder"></i>${path}</p>
                `;
                
                // Add context for content matches
                if (page.context && page.context.trim()) {
                    const context = highlightSearchTerm(escapeHtml(page.context), searchTerm);
                    resultHTML += `<p class="result-context"><i class="fas fa-quote-left"></i>${context}</p>`;
                }
                
                // Add match type badge
                if (page.match_type) {
                    const matchTypeLabels = {
                        'title': 'Title Match',
                        'path': 'Path Match', 
                        'name': 'Name Match',
                        'content': 'Content Match'
                    };
                    const matchLabel = matchTypeLabels[page.match_type] || page.match_type;
                    resultHTML += `<span class="match-type-badge match-type-${page.match_type}">${matchLabel}</span>`;
                }
                
                // Add site badge
                if (page.site && page.site !== 'all') {
                    resultHTML += `<span class="site-badge">Site: ${escapeHtml(page.site)}</span>`;
                }
                
                resultItem.innerHTML = resultHTML;
                searchResultsList.appendChild(resultItem);
                
                // Debug log for each result
                console.log('Displaying result:', {
                    title: page.title,
                    path: page.path,
                    match_type: page.match_type,
                    has_context: !!page.context
                });
            });
            
            // Add results count at the top
            const resultsCount = document.createElement('p');
            resultsCount.className = 'results-count';
            resultsCount.innerHTML = `<i class="fas fa-info-circle"></i>Found ${results.length} document${results.length !== 1 ? 's' : ''} matching "${escapeHtml(searchTerm)}"`;
            
            searchResultsList.insertBefore(resultsCount, searchResultsList.firstChild);
        }
        
        searchResults.style.display = 'block';
        searchResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
    
    function highlightSearchTerm(text, term) {
        const regex = new RegExp(`(${escapeRegex(term)})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }
    
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    function escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    function clearSearch() {
        searchInput.value = '';
        searchResults.style.display = 'none';
    }
    
    // Event listeners
    searchBtn.addEventListener('click', function() {
        console.log('Search button clicked');
        performSearch();
    });
    clearBtn.addEventListener('click', function() {
        console.log('Clear button clicked');
        clearSearch();
    });
    
    searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        } else if (e.key === 'Escape') {
            clearSearch();
        }
    });
    
    // Real-time search as user types (with debounce)
    let searchTimeout;
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(performSearch, 300);
    });
});

// Collapsible section functionality with proper toggle icon handling
function toggleSection(sectionId) {
    console.log('Toggling section:', sectionId);
    const section = document.getElementById(sectionId);
    
    if (!section) {
        console.error('Section not found:', sectionId);
        return;
    }
    
    // Find the header - it should be the previous sibling
    const header = section.previousElementSibling;
    if (!header) {
        console.error('Header not found for section:', sectionId);
        return;
    }
    
    const toggleIcon = header.querySelector('.toggle-icon');
    if (!toggleIcon) {
        console.error('Toggle icon not found in header for section:', sectionId);
        return;
    }
    
    // Check current state and toggle
    const isHidden = section.style.display === 'none' || section.style.display === '';
    
    if (isHidden) {
        // Show section
        section.style.display = 'block';
        toggleIcon.classList.add('expanded');
        console.log('Opened section:', sectionId);
    } else {
        // Hide section
        section.style.display = 'none';
        toggleIcon.classList.remove('expanded');
        console.log('Closed section:', sectionId);
    }
}

// Initialize all sections to be closed on page load
document.addEventListener('DOMContentLoaded', function() {
    // Find all collapsible sections and ensure they start closed
    const collapsibleSections = document.querySelectorAll('.collapsible-content');
    collapsibleSections.forEach(function(section) {
        section.style.display = 'none';
        
        // Find the corresponding toggle icon and ensure it's in the correct state
        const header = section.previousElementSibling;
        if (header) {
            const toggleIcon = header.querySelector('.toggle-icon');
            if (toggleIcon) {
                toggleIcon.classList.remove('expanded');
            }
        }
    });
    
    console.log('Initialized', collapsibleSections.length, 'collapsible sections to closed state');
});

// Changelog "show all" functionality
function toggleAllChangelogs() {
    const hiddenEntries = document.querySelectorAll('.changelog-hidden');
    const toggleBtn = document.getElementById('changelog-toggle-btn');
    const isShowingAll = toggleBtn.textContent.includes('Show Less');
    
    hiddenEntries.forEach(entry => {
        if (isShowingAll) {
            entry.style.display = 'none';
        } else {
            entry.style.display = 'block';
        }
    });
    
    if (isShowingAll) {
        toggleBtn.innerHTML = '<i class="fas fa-expand-alt"></i>Show All (' + hiddenEntries.length + ' more entries)';
    } else {
        toggleBtn.innerHTML = '<i class="fas fa-compress-alt"></i>Show Less';
    }
}
</script>

<!-- All CSS moved to theme system - NO INLINE STYLES ALLOWED -->