[% PageVersion = 'Comserv/root/Documentation/developer/troubleshooting.tt,v 0.01 2025/06/10 shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% META title = 'Troubleshooting Guide for Developers' %]

<!-- Documentation page for troubleshooting -->
<div class="documentation-content">




<!-- Documentation CSS is now included in the theme system -->

<div class="markdown-content">


**Version:** 1.0  

**Last Updated:** May 31, 2024  

**Author:** Development Team



<h2>Overview</h2>



This guide provides comprehensive troubleshooting information for developers working on the Comserv application. It covers common issues, debugging techniques, and solutions for various components of the system.



<h2>Logging System</h2>



<h3>Understanding the Logging System</h3>



Comserv uses a custom logging system that provides detailed context information:



<code></code>`perl

$self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'method_name', 

    "Detailed message about the action");

<code></code>`



Parameters:

<ul><li><code>$c</code>: Catalyst context</li></ul>

<ul><li>Log level: 'debug', 'info', 'warn', 'error', or 'fatal'</li></ul>

<ul><li><code>__FILE__</code>: Current file path</li></ul>

<ul><li><code>__LINE__</code>: Current line number</li></ul>

<ul><li>Method name: Identifier for the current method</li></ul>

<ul><li>Message: Detailed description of the event</li></ul>



<h3>Log File Locations</h3>



<ul><li>Main application log: <code>/logs/application.log</code></li></ul>

<ul><li>Error log: <code>/logs/error.log</code></li></ul>

<ul><li>Debug log: <code>/logs/debug.log</code> (when debug mode is enabled)</li></ul>



<h3>Enabling Debug Mode</h3>



Debug mode can be enabled in several ways:



<ol><li>**User Settings**: Users with appropriate permissions can enable debug mode in their account settings</li></ol>

<ol><li>**Session Variable**: Set <code>$c->session->{debug_mode} = 1;</code> in code</li></ol>

<ol><li>**Environment Variable**: Set <code>CATALYST_DEBUG=1</code> before starting the application</li></ol>



<h3>Debug Messages</h3>



The application supports pushing debug messages to the UI:



<code></code>`perl

<h1>Add a single debug message</h1>

push @{$c->stash->{debug_msg}}, "Debug information: $variable";



<h1>Add multiple debug messages</h1>

push @{$c->stash->{debug_msg}}, (

    "First debug message",

    "Second debug message: $variable",

    "Third debug message"

);

<code></code>`



These messages will be displayed in the debug section of the page when debug mode is enabled.



<h2>Common Issues and Solutions</h2>



<h3>1. Authentication Issues</h3>



<h4>404 Error on Logout</h4>



**Symptoms:**

<ul><li>User clicks logout and gets a 404 error</li></ul>

<ul><li>"Page not found" when accessing <code>/user/logout</code></li></ul>



**Possible Causes:**

<ul><li>Missing logout method in the User controller</li></ul>

<ul><li>Incorrect URL in the logout link</li></ul>



**Solutions:**

<ul><li>Ensure the User controller has a properly defined logout method:</li></ul>



<code></code>`perl

sub logout :Local {

    my ($self, $c) = @_;

    

    # Log the logout action

    $self->logging->log_with_details($c, 'info', __FILE__, __LINE__, 'logout', 

        "User '" . ($c->session->{username} || 'unknown') . "' logging out");

    

    # Clear the session

    $c->session({});

    

    # Set a success message

    $c->flash->{success_msg} = "You have been successfully logged out.";

    

    # Redirect to the home page

    $c->response->redirect($c->uri_for('/'));

    return;

}

<code></code>`



<ul><li>Verify the logout link uses the correct URI:</li></ul>



<code></code>`html

<a href="[% c.uri_for('/user/logout') %]">Logout</a>

<code></code>`



<h4>Login Redirect Issues</h4>



**Symptoms:**

<ul><li>User is redirected to the wrong page after login</li></ul>

<ul><li>User is stuck in a login loop</li></ul>



**Possible Causes:**

<ul><li>Incorrect referer handling</li></ul>

<ul><li>Session issues</li></ul>



**Solutions:**

<ul><li>Check the referer handling in the login method:</li></ul>



<code></code>`perl

<h1>Store the referer URL if it hasn't been stored already</h1>

my $referer = $c->req->referer || $c->uri_for('/');



<h1>Don't store the login page as the referer</h1>

if ($referer !~ m{/user/login} && $referer !~ m{/login} && $referer !~ m{/do_login}) {

    $c->session->{referer} = $referer;

}

<code></code>`



<ul><li>Ensure the redirect after login is properly implemented:</li></ul>



<code></code>`perl

<h1>Get redirect path</h1>

my $redirect_path = $c->session->{referer} || '/';



<h1>Ensure we're not redirecting back to the login page</h1>

if ($redirect_path =~ m{/user/login} || $redirect_path =~ m{/login} || $redirect_path =~ m{/do_login}) {

    $redirect_path = '/';

}



<h1>Clear the referer to prevent redirect loops</h1>

$c->session->{referer} = undef;



<h1>Redirect to the appropriate page</h1>

$c->res->redirect($redirect_path);

<code></code>`



<h3>2. Template Issues</h3>



<h4>Missing Footer</h4>



**Symptoms:**

<ul><li>Footer is not displayed</li></ul>

<ul><li>Template error in the logs</li></ul>



**Possible Causes:**

<ul><li>Missing footer.tt file</li></ul>

<ul><li>Path issues</li></ul>

<ul><li>Template syntax errors</li></ul>



**Solutions:**

<ul><li>Use TRY/CATCH blocks for footer inclusion:</li></ul>



<code></code>`html

[% TRY %]

    [% INCLUDE 'footer.tt' %]

[% CATCH %]

    <!-- Fallback footer -->

    <footer>

        <div class="footer-content">

            <p>&copy; [% USE date; date.format(date.now, '%Y') %] Comserv. All rights reserved.</p>



                <p><a href="[% c.uri_for('/reset_session') %]">Reset Session</a></p>



    </footer>


<code></code>`



<ul><li>Check the footer.tt file exists and has correct syntax</li></ul>

<ul><li>Verify the include path in the layout.tt file</li></ul>



<h4>Template Variable Issues</h4>



**Symptoms:**

<ul><li>Empty content where variables should be displayed</li></ul>

<ul><li>Raw TT code displayed (e.g., "[% variable %]")</li></ul>



**Possible Causes:**

<ul><li>Variables not set in the controller</li></ul>

<ul><li>Typos in variable names</li></ul>

<ul><li>Incorrect variable scope</li></ul>



**Solutions:**

<ul><li>Check variable assignment in the controller:</li></ul>



<code></code>`perl

$c->stash(

    user => $user_data,

    template => 'user/profile.tt'

);

<code></code>`



<ul><li>Use defensive programming in templates:</li></ul>



<code></code>`html

[% IF user.defined %]

    [% user.first_name %]

[% ELSE %]

    Guest


<code></code>`



<ul><li>Enable debug mode and inspect the stash contents</li></ul>



<h3>3. Database Issues</h3>



<h4>Database Connection Errors</h4>



**Symptoms:**

<ul><li>"Database unavailable" errors</li></ul>

<ul><li>Timeout errors when accessing the database</li></ul>



**Possible Causes:**

<ul><li>Database server down</li></ul>

<ul><li>Incorrect connection parameters</li></ul>

<ul><li>Connection pool exhaustion</li></ul>



**Solutions:**

<ul><li>Check database server status</li></ul>

<ul><li>Verify connection parameters in the configuration</li></ul>

<ul><li>Increase connection pool size if needed</li></ul>

<ul><li>Add connection retry logic:</li></ul>



<code></code>`perl

my $max_retries = 3;

my $retry_count = 0;

my $result;



while ($retry_count < $max_retries) {

    eval {

        $result = $c->model('DBEncy::User')->find({ username => $username });

    };

    

    if ($@) {

        $retry_count++;

        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'database', 

            "Database connection attempt $retry_count failed: $@");

        sleep(1);  # Wait before retrying

    } else {

        last;  # Success, exit the loop

    }

}



if ($retry_count == $max_retries) {

    $self->logging->log_with_details($c, 'error', __FILE__, __LINE__, 'database', 

        "All database connection attempts failed");

    $c->stash(error_msg => "Database connection error. Please try again later.");

    $c->forward($c->view('TT'));

    return;

}

<code></code>`



<h4>Query Performance Issues</h4>



**Symptoms:**

<ul><li>Slow page loads</li></ul>

<ul><li>Timeout errors</li></ul>

<ul><li>High database load</li></ul>



**Solutions:**

<ul><li>Add query logging for performance analysis:</li></ul>



<code></code>`perl

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'database', 

    "Executing query: " . $query->as_query);

my $start_time = Time::HiRes::time();

my $result = $query->all;

my $end_time = Time::HiRes::time();

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'database', 

    "Query completed in " . ($end_time - $start_time) . " seconds");

<code></code>`



<ul><li>Optimize queries with proper indexing</li></ul>

<ul><li>Use result caching for frequently accessed data</li></ul>

<ul><li>Consider pagination for large result sets</li></ul>



<h2>Debugging Techniques</h2>



<h3>1. Session Debugging</h3>



To debug session-related issues:



<code></code>`perl

<h1>Log all session variables</h1>

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'session', 

    "Session contents: " . Dumper($c->session));



<h1>Add session info to debug messages</h1>

push @{$c->stash->{debug_msg}}, "Session ID: " . $c->sessionid;

push @{$c->stash->{debug_msg}}, "Username: " . ($c->session->{username} || 'not set');

push @{$c->stash->{debug_msg}}, "Roles: " . join(', ', @{$c->session->{roles} || []});

<code></code>`



<h3>2. Request Debugging</h3>



To debug request parameters:



<code></code>`perl

<h1>Log all request parameters</h1>

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'request', 

    "Request parameters: " . Dumper($c->req->params));



<h1>Log specific access methods</h1>

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'request',

    "Using body_parameters: " . Dumper($c->req->body_parameters));

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'request',

    "Using query_parameters: " . Dumper($c->req->query_parameters));

<code></code>`



<h3>3. Template Debugging</h3>



To debug template processing:



<ol><li>Enable template debugging in the configuration:</li></ol>



<code></code>`perl

__PACKAGE__->config(

    'View::TT' => {

        TEMPLATE_EXTENSION => '.tt',

        render_die => 1,

        DEBUG => 'undef',  # Shows undefined variables

    },

);

<code></code>`



<ol><li>Use the DUMP directive in templates:</li></ol>



<code></code>`html

[% DUMP c.session %]

[% DUMP user %]

<code></code>`



<ol><li>Add debug comments in templates:</li></ol>



<code></code>`html

<!-- DEBUG: Including navigation -->

[% INCLUDE 'Navigation/TopDropListMain.tt' %]

<!-- DEBUG: Navigation included -->

<code></code>`



<h3>4. Database Debugging</h3>



To debug database operations:



<ol><li>Enable SQL logging in the configuration:</li></ol>



<code></code>`perl

__PACKAGE__->config(

    'Model::DBEncy' => {

        schema_class => 'Comserv::Schema',

        connect_info => {

            dsn => 'dbi:mysql:database=comserv',

            user => 'username',

            password => 'password',

            AutoCommit => 1,

            RaiseError => 1,

            mysql_enable_utf8 => 1,

            on_connect_do => ['SET NAMES utf8'],

            quote_char => '`',

            name_sep => '.',

            debug => 1,  # Enable SQL debugging

        },

    },

);

<code></code>`



<ol><li>Log database operations manually:</li></ol>



<code></code>`perl

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'database', 

    "Finding user with username: $username");

my $user = $c->model('DBEncy::User')->find({ username => $username });

$self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'database', 

    "User found: " . ($user ? 'yes' : 'no'));

<code></code>`



<h2>Performance Optimization</h2>



<h3>1. Template Caching</h3>



Enable template caching for production:



<code></code>`perl

__PACKAGE__->config(

    'View::TT' => {

        TEMPLATE_EXTENSION => '.tt',

        CACHE_SIZE => 128,  # Cache up to 128 templates

        PRE_PROCESS => 'config/main',

    },

);

<code></code>`



<h3>2. Database Optimization</h3>



Optimize database access:



<code></code>`perl

<h1>Cache frequently accessed data</h1>

my $cache_key = "user_$username";

my $user;



if ($c->cache->get($cache_key)) {

    $user = $c->cache->get($cache_key);

    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'cache', 

        "User retrieved from cache: $username");

} else {

    $user = $c->model('DBEncy::User')->find({ username => $username });

    if ($user) {

        $c->cache->set($cache_key, $user, 3600);  # Cache for 1 hour

        $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'cache', 

            "User added to cache: $username");

    }

}

<code></code>`



<h3>3. Session Optimization</h3>



Optimize session handling:



<code></code>`perl

<h1>Only update session if necessary</h1>

if ($c->session->{last_updated} < time() - 300) {  # 5 minutes

    $c->session->{last_updated} = time();

    $self->logging->log_with_details($c, 'debug', __FILE__, __LINE__, 'session', 

        "Session updated");

}

<code></code>`



<h2>Security Considerations</h2>



<h3>1. Input Validation</h3>



Always validate user input:



<code></code>`perl

<h1>Validate email format</h1>

unless ($email =~ /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/) {

    $c->flash->{error_msg} = "Invalid email format.";

    $c->response->redirect($c->uri_for('/user/settings'));

    return;

}

<code></code>`



<h3>2. CSRF Protection</h3>



Implement CSRF protection for forms:



<code></code>`perl

<h1>In the controller that displays the form</h1>

sub display_form :Local {

    my ($self, $c) = @_;

    

    # Generate a CSRF token

    my $csrf_token = $self->generate_csrf_token($c);

    $c->session->{csrf_token} = $csrf_token;

    

    $c->stash(

        csrf_token => $csrf_token,

        template => 'form.tt'

    );

}



<h1>In the form template</h1>

<form method="post" action="[% c.uri_for('/submit_form') %]">

    <input type="hidden" name="csrf_token" value="[% csrf_token %]">

    <!-- Form fields -->

    <button type="submit">Submit</button>

</form>



<h1>In the controller that processes the form</h1>

sub submit_form :Local {

    my ($self, $c) = @_;

    

    # Verify CSRF token

    my $submitted_token = $c->req->params->{csrf_token};

    my $stored_token = $c->session->{csrf_token};

    

    unless ($submitted_token && $stored_token && $submitted_token eq $stored_token) {

        $self->logging->log_with_details($c, 'warn', __FILE__, __LINE__, 'security', 

            "CSRF token validation failed");

        $c->flash->{error_msg} = "Security validation failed. Please try again.";

        $c->response->redirect($c->uri_for('/display_form'));

        return;

    }

    

    # Clear the token to prevent reuse

    $c->session->{csrf_token} = undef;

    

    # Process the form

    # ...

}

<code></code>`



<h3>3. SQL Injection Prevention</h3>



Use parameterized queries to prevent SQL injection:



<code></code>`perl

<h1>Unsafe</h1>

my $result = $c->model('DB')->schema->resultset('User')

    ->search_literal("username = '$username'");  # DON'T DO THIS



<h1>Safe</h1>

my $result = $c->model('DB')->schema->resultset('User')

    ->search({ username => $username });  # DO THIS

<code></code>`



<h2>Advanced Debugging</h2>



<h3>1. Using the Catalyst Debug Screen</h3>



Enable the Catalyst debug screen for development:



<code></code>`perl

<h1>In your development environment</h1>

$ENV{CATALYST_DEBUG} = 1;

<code></code>`



This provides:

<ul><li>Request details</li></ul>

<ul><li>Stash contents</li></ul>

<ul><li>Session information</li></ul>

<ul><li>Timing data</li></ul>

<ul><li>Log messages</li></ul>



<h3>2. Remote Debugging</h3>



For remote debugging:



<ol><li>Install the Catalyst::Plugin::RemoteDebug module</li></ol>

<ol><li>Configure it in your application</li></ol>

<ol><li>Connect to the debug port from your development machine</li></ol>



<h3>3. Profiling</h3>



Profile your application to identify bottlenecks:



<code></code>`perl

use Devel::NYTProf;



<h1>Start profiling</h1>

DB::enable_profile();



<h1>Code to profile</h1>

<h1>...</h1>



<h1>Stop profiling</h1>

DB::disable_profile();

<code></code>`



Generate a report:



<code></code>`bash

nytprofhtml --file=/path/to/nytprof.out --out=/path/to/report

<code></code>`



<h2>Getting Help</h2>



If you encounter issues not covered in this guide:



<ol><li>Check the application logs for detailed error messages</li></ol>

<ol><li>Review the Catalyst documentation for framework-specific issues</li></ol>

<ol><li>Search the developer forums for similar problems</li></ol>

<ol><li>Submit a detailed bug report with:</li></ol>

   - Error messages

   - Steps to reproduce

   - Expected vs. actual behavior

   - Relevant code snippets

   - Log excerpts

[% END %]</div>
