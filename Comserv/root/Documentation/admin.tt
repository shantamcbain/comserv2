[% PageVersion = 'Documentation/admin.tt,v 0.03 2025/01/28 shanta Exp shanta' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% META title = 'Admin Module Documentation' %]

<div class="documentation-content">

<div class="markdown-content">

# Admin Module Documentation

## Table of Contents
- [Site Management](#site_management)
- [System Management](#system_management)
- [Database Schema Management](#database_schema_management)
- [Best Practices](#best_practices)

## Introduction

The Admin module provides a comprehensive suite of tools for managing various aspects of the Comserv system, including site management, system operations, and database schema management.

## Site Management {#site_management}

The Site Management section includes the following features:

- **Edit Documentation** - Update system documentation
- **Change Styles** - Modify the appearance of the site
- **Theme Management** - Create and manage site themes
- **Add Theme Column** - Add theme support to database tables
- **Update Software** - Keep the system up to date
- **Change User Roles** - Manage user permissions
- **Access Logging** - View system access logs

## System Management {#system_management}

The System Management section provides tools for managing the application server and codebase:

### Git Pull
The Git Pull feature allows administrators to update the application codebase directly from the web interface.

**How it works:**
1. Navigate to Admin Dashboard → System Management → Pull from Git Repository
2. Review the warning about potential conflicts with local changes
3. Click "Yes, Pull from Git" to confirm
4. The system will execute a git pull command and display the results
5. If successful, you'll see a success message and the output from Git

**Security:** This feature is only available to users with the 'admin' role in their session.

### Restart Starman Server
The Restart Starman Server feature allows administrators to restart the application server after updates or when troubleshooting issues.

**How it works:**
1. Navigate to Admin Dashboard → System Management → Restart Starman Server
2. Review the warning about service interruption
3. Click "Yes, Restart Starman Server" to confirm
4. The system will execute the systemctl restart command for the Starman service
5. After the restart, the system will check the service status and display the results

**Important notes:**
- Restarting the server will temporarily interrupt service to all users
- The restart process typically takes a few seconds
- This feature requires that the web server user has sudo privileges to restart the Starman service
- Only users with the 'admin' role in their session can access this feature

**Typical workflow:**
1. Use the Git Pull feature to update the codebase
2. Use the Restart Starman Server feature to apply the changes
3. Check the application logs for any errors after restart

### Other System Management Features
- **View Application Log** - View the application's log files
- **Theme Management** - Manage the application's visual themes

## Database Schema Management {#database_schema_management}

The Database Schema Management section focuses on managing database schema changes from within the application:

### Admin Controller Routes
The Admin Controller handles various administrative tasks with the following routes:

1. **begin** - Checks if the user is logged in and if they have the 'admin' role. If not, redirects to an error page.
2. **index** - Sets the Template Toolkit template to 'admin/index.tt' and forwards the request to the view.
3. **git_pull** - Allows administrators to pull the latest changes from the Git repository.
4. **restart_starman** - Allows administrators to restart the Starman server.
5. **edit_documentation** - Sets the Template Toolkit template to 'admin/edit_documentation.tt'.
6. **add_schema** - Handles the addition of new schemas.
7. **migrate_schema** - Handles the migration of schemas.
8. **toggle_debug** - Toggles the 'CATALYST_DEBUG' environment variable.
9. **get_table_info** - Retrieves information about a specific table from the 'DBEncy' model.
10. **schema_manager** - Provides an interface for managing database schemas.
11. **manage_users** - Provides an interface for managing users.

### Schema Management Features

#### Add New Schema
This feature allows you to add new schemas to the database:

1. Click on the "Add New Schema" link to open the interface
2. The method retrieves current schemas from the database and application schema
3. Compares the two sets of schemas for differences
4. Adds new schemas that are present in the application but not in the database
5. Updates existing schemas that have differences
6. Returns success or error messages based on the operation result

#### Get Table Information
Retrieves information about a specific table from the 'DBEncy' model. If the table exists, displays its schema. If the table does not exist, displays an error message.

#### Migrate Schema
Handles the migration of schemas. If the request method is 'POST', runs the 'migrate_schema.pl' script.

### Schema Management Workflow

#### Adding a New Schema
1. Navigate to "Add New Schema" in the Admin section
2. Enter the schema name and description
3. Define tables, columns, and relationships
4. Save the schema

#### Migrating a Schema
1. Navigate to "Migrate Schema" in the Admin section
2. Select the source and target schemas
3. Review the proposed changes
4. Apply the migration

## Best Practices {#best_practices}

When working with the Admin module, consider these best practices:

- **Always back up your database before making schema changes**
- **Test migrations in a development environment first**
- **Document all schema changes for future reference**
- **Use descriptive names for tables and columns**
- **Regularly review access logs for security purposes**
- **Follow the typical workflow: Git Pull → Restart Starman → Check Logs**
- **Ensure proper admin role permissions before performing administrative tasks**

## Security Considerations

- All admin features require the 'admin' role in the user session
- Git operations and server restarts require appropriate system permissions
- Regular security reviews of access logs are recommended
- Database operations should always be backed up before execution

</div>

</div>