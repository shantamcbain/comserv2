[% PageVersion = 'Comserv/root/Documentation/proxmox/commands.tt,v 0.01 2025/06/10 shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% META title = 'Proxmox VE Command Reference' %]

<!-- Documentation page for commands -->
<div class="documentation-content">



<!-- Include documentation CSS -->
<link rel="stylesheet" href="/static/css/documentation.css">

<div class="markdown-content">


This document provides a comprehensive list of command-line operations for managing Proxmox VE environments, including virtual machines, containers, networking, storage, backups, and more.



<h2>Table of Contents</h2>



<ol><li><a href="#virtual-machine-management-qemukvm">Virtual Machine Management (QEMU/KVM)</a></li></ol>

<ol><li><a href="#container-management-lxc">Container Management (LXC)</a></li></ol>

<ol><li><a href="#network-configuration">Network Configuration</a></li></ol>

<ol><li><a href="#storage-management">Storage Management</a></li></ol>

<ol><li><a href="#backup-and-restore">Backup and Restore</a></li></ol>

<ol><li><a href="#cluster-management">Cluster Management</a></li></ol>

<ol><li><a href="#firewall-management">Firewall Management</a></li></ol>

<ol><li><a href="#api-and-shell-interface">API and Shell Interface</a></li></ol>

<ol><li><a href="#system-administration">System Administration</a></li></ol>



<h2>Virtual Machine Management (QEMU/KVM)</h2>



The <code>qm</code> command is used to manage QEMU/KVM virtual machines.



<h3>Basic VM Operations</h3>



<code></code>`bash

<h1>List all VMs</h1>

qm list



<h1>Show VM configuration</h1>

qm config <vmid>



<h1>Start a VM</h1>

qm start <vmid>



<h1>Stop a VM (immediate power off)</h1>

qm stop <vmid>



<h1>Gracefully shutdown a VM</h1>

qm shutdown <vmid>



<h1>Reset a VM</h1>

qm reset <vmid>



<h1>Suspend a VM</h1>

qm suspend <vmid>



<h1>Resume a suspended VM</h1>

qm resume <vmid>



<h1>Reboot a VM</h1>

qm reboot <vmid>



<h1>Delete a VM</h1>

qm destroy <vmid>

<code></code>`



<h3>VM Creation and Cloning</h3>



<code></code>`bash

<h1>Create a new VM with ID 100</h1>

qm create 100



<h1>Create a VM with basic configuration</h1>

qm create 101 --name "web-server" --memory 2048 --cores 2 --net0 virtio,bridge=vmbr0



<h1>Create a VM with an OS disk</h1>

qm create 102 --name "db-server" --memory 4096 --cores 4 --net0 virtio,bridge=vmbr0 --scsi0 local-lvm:20



<h1>Clone a VM</h1>

qm clone <source-vmid> <target-vmid> --name "clone-name"



<h1>Create a template from a VM</h1>

qm template <vmid>

<code></code>`



<h3>VM Configuration</h3>



<code></code>`bash

<h1>Set VM name</h1>

qm set <vmid> --name <name>



<h1>Set memory (in MB)</h1>

qm set <vmid> --memory <memory>



<h1>Set CPU cores</h1>

qm set <vmid> --cores <cores>



<h1>Set CPU type</h1>

qm set <vmid> --cpu <cputype>



<h1>Add a network interface</h1>

qm set <vmid> --net0 virtio,bridge=vmbr0



<h1>Set IP address for a VM (requires QEMU guest agent)</h1>

qm set <vmid> --ipconfig0 ip=192.168.1.100/24,gw=192.168.1.1



<h1>Add a virtual disk</h1>

qm set <vmid> --scsi0 local-lvm:20



<h1>Resize a disk (increase to 40GB)</h1>

qm resize <vmid> scsi0 40G



<h1>Set boot order</h1>

qm set <vmid> --boot c --bootdisk scsi0



<h1>Enable/disable QEMU guest agent</h1>

qm set <vmid> --agent enabled=1,fstrim_cloned_disks=1



<h1>Set VM to start on boot</h1>

qm set <vmid> --onboot 1



<h1>Set VM startup/shutdown order</h1>

qm set <vmid> --startup order=1,up=120,down=60

<code></code>`



<h3>VM Migration</h3>



<code></code>`bash

<h1>Migrate a VM to another node</h1>

qm migrate <vmid> <target-node>



<h1>Migrate with specific options</h1>

qm migrate <vmid> <target-node> --online --with-local-disks

<code></code>`



<h3>VM Snapshots</h3>



<code></code>`bash

<h1>Create a snapshot</h1>

qm snapshot <vmid> <snapshot-name> --description "Description"



<h1>List snapshots</h1>

qm listsnapshot <vmid>



<h1>Rollback to a snapshot</h1>

qm rollback <vmid> <snapshot-name>



<h1>Delete a snapshot</h1>

qm delsnapshot <vmid> <snapshot-name>

<code></code>`



<h2>Container Management (LXC)</h2>



The <code>pct</code> command is used to manage Linux Containers (LXC).



<h3>Basic Container Operations</h3>



<code></code>`bash

<h1>List all containers</h1>

pct list



<h1>Show container configuration</h1>

pct config <ctid>



<h1>Start a container</h1>

pct start <ctid>



<h1>Stop a container</h1>

pct stop <ctid>



<h1>Restart a container</h1>

pct restart <ctid>



<h1>Enter a container (get shell)</h1>

pct enter <ctid>



<h1>Delete a container</h1>

pct destroy <ctid>

<code></code>`



<h3>Container Creation and Cloning</h3>



<code></code>`bash

<h1>Create a container from a template</h1>

pct create <ctid> <storage>:vztmpl/<template> --hostname <hostname> --memory <memory> --net0 name=eth0,bridge=vmbr0,ip=dhcp



<h1>Create a container with static IP</h1>

pct create <ctid> <storage>:vztmpl/<template> --hostname <hostname> --memory <memory> --net0 name=eth0,bridge=vmbr0,ip=192.168.1.100/24,gw=192.168.1.1



<h1>Clone a container</h1>

pct clone <source-ctid> <target-ctid> --name <name>

<code></code>`



<h3>Container Configuration</h3>



<code></code>`bash

<h1>Set container hostname</h1>

pct set <ctid> --hostname <hostname>



<h1>Set memory limit (in MB)</h1>

pct set <ctid> --memory <memory>



<h1>Set CPU cores</h1>

pct set <ctid> --cores <cores>



<h1>Set container to start on boot</h1>

pct set <ctid> --onboot 1



<h1>Set container startup/shutdown order</h1>

pct set <ctid> --startup order=1,up=120,down=60



<h1>Add a network interface with DHCP</h1>

pct set <ctid> --net0 name=eth0,bridge=vmbr0,ip=dhcp



<h1>Set static IP address for a container</h1>

pct set <ctid> --net0 name=eth0,bridge=vmbr0,ip=192.168.1.100/24,gw=192.168.1.1



<h1>Add a mount point</h1>

pct set <ctid> --mp0 <host_path>,mp=<container_path>



<h1>Resize a container disk</h1>

pct resize <ctid> rootfs 20G

<code></code>`



<h3>Container Migration</h3>



<code></code>`bash

<h1>Migrate a container to another node</h1>

pct migrate <ctid> <target-node>



<h1>Migrate with specific options</h1>

pct migrate <ctid> <target-node> --online

<code></code>`



<h3>Container Snapshots</h3>



<code></code>`bash

<h1>Create a snapshot</h1>

pct snapshot <ctid> <snapshot-name> --description "Description"



<h1>List snapshots</h1>

pct listsnapshot <ctid>



<h1>Rollback to a snapshot</h1>

pct rollback <ctid> <snapshot-name>



<h1>Delete a snapshot</h1>

pct delsnapshot <ctid> <snapshot-name>

<code></code>`



<h2>Network Configuration</h2>



<h3>Host Network Configuration</h3>



<code></code>`bash

<h1>View network interfaces</h1>

ip addr show



<h1>View routing table</h1>

ip route show



<h1>Restart networking service</h1>

systemctl restart networking



<h1>Apply network changes without reboot</h1>

ifreload -a

<code></code>`



<h3>Bridge Management</h3>



<code></code>`bash

<h1>Create a bridge</h1>

echo "auto vmbr1

iface vmbr1 inet static

    address 192.168.2.1/24

    bridge-ports none

    bridge-stp off

    bridge-fd 0" >> /etc/network/interfaces



<h1>Activate a bridge</h1>

ifup vmbr1



<h1>Deactivate a bridge</h1>

ifdown vmbr1

<code></code>`



<h3>VLAN Configuration</h3>



<code></code>`bash

<h1>Create a VLAN interface</h1>

echo "auto vmbr0.10

iface vmbr0.10 inet static

    address 10.10.10.1/24

    vlan-raw-device vmbr0" >> /etc/network/interfaces



<h1>Activate a VLAN interface</h1>

ifup vmbr0.10

<code></code>`



<h3>Bond Configuration</h3>



<code></code>`bash

<h1>Create a bond interface</h1>

echo "auto bond0

iface bond0 inet manual

    bond-slaves eno1 eno2

    bond-miimon 100

    bond-mode 802.3ad

    bond-xmit-hash-policy layer2+3



auto vmbr0

iface vmbr0 inet static

    address 192.168.1.1/24

    gateway 192.168.1.254

    bridge-ports bond0

    bridge-stp off

    bridge-fd 0" >> /etc/network/interfaces

<code></code>`



<h2>Storage Management</h2>



The <code>pvesm</code> command is used to manage Proxmox VE storage.



<h3>Storage Operations</h3>



<code></code>`bash

<h1>List all storage</h1>

pvesm status



<h1>Show storage configuration</h1>

pvesm config <storage>



<h1>Add a directory storage</h1>

pvesm add dir <storage> --path <path>



<h1>Add an NFS storage</h1>

pvesm add nfs <storage> --server <server> --export <export> --path <path>



<h1>Add an iSCSI storage</h1>

pvesm add iscsi <storage> --portal <portal> --target <target>



<h1>Add a Ceph RBD storage</h1>

pvesm add rbd <storage> --pool <pool> --monhost <monhost>



<h1>Add an LVM storage</h1>

pvesm add lvmthin <storage> --vgname <vgname> --thinpool <thinpool>



<h1>Add a ZFS storage</h1>

pvesm add zfspool <storage> --pool <pool>



<h1>Remove a storage</h1>

pvesm remove <storage>

<code></code>`



<h3>Content Management</h3>



<code></code>`bash

<h1>List storage content</h1>

pvesm list <storage>



<h1>List available ISO images</h1>

pvesm list <storage> --content iso



<h1>List available VM templates</h1>

pvesm list <storage> --content vztmpl



<h1>List available backups</h1>

pvesm list <storage> --content backup



<h1>Allocate disk image</h1>

pvesm alloc <storage> <vmid> <name> <size>



<h1>Free disk image</h1>

pvesm free <volume>

<code></code>`



<h2>Backup and Restore</h2>



<h3>VZDump Backup</h3>



<code></code>`bash

<h1>Backup a single VM</h1>

vzdump <vmid> --compress zstd --mode snapshot --storage <storage>



<h1>Backup multiple VMs</h1>

vzdump <vmid1>,<vmid2>,<vmid3> --compress zstd --mode snapshot --storage <storage>



<h1>Backup all VMs</h1>

vzdump --all --compress zstd --mode snapshot --storage <storage>



<h1>Backup with specific options</h1>

vzdump <vmid> --compress zstd --mode snapshot --storage <storage> --maxfiles 5 --mailto admin@example.com

<code></code>`



<h3>Restore from Backup</h3>



<code></code>`bash

<h1>Restore a VM from backup</h1>

qmrestore /var/lib/vz/dump/vzdump-qemu-<vmid>-<date>.vma.zst <vmid> --storage <storage>



<h1>Restore a container from backup</h1>

pct restore <ctid> /var/lib/vz/dump/vzdump-lxc-<ctid>-<date>.tar.zst --storage <storage>

<code></code>`



<h3>Proxmox Backup Server</h3>



<code></code>`bash

<h1>Configure PBS repository</h1>

proxmox-backup-manager repository create <repo> --datastore <datastore> --fingerprint <fingerprint> --server <server> --user <user>



<h1>Backup to PBS</h1>

proxmox-backup-client backup <vmid>.pxar:/etc --repository <repo>



<h1>Restore from PBS</h1>

proxmox-backup-client restore <vmid>.pxar:/etc --repository <repo> --target /tmp/restore

<code></code>`



<h2>Cluster Management</h2>



The <code>pvecm</code> command is used to manage Proxmox VE clusters.



<h3>Cluster Operations</h3>



<code></code>`bash

<h1>Create a new cluster</h1>

pvecm create <clustername>



<h1>Add a node to a cluster</h1>

pvecm add <hostname>



<h1>Show cluster status</h1>

pvecm status



<h1>Show cluster nodes</h1>

pvecm nodes



<h1>Remove a node from the cluster</h1>

pvecm delnode <nodename>

<code></code>`



<h3>Quorum Management</h3>



<code></code>`bash

<h1>Show quorum status</h1>

pvecm expected <expected-votes>



<h1>Set expected votes</h1>

pvecm expected <expected-votes>

<code></code>`



<h3>HA Management</h3>



<code></code>`bash

<h1>List HA resources</h1>

ha-manager status



<h1>Enable HA for a VM</h1>

ha-manager add vm:<vmid> --state started



<h1>Disable HA for a VM</h1>

ha-manager remove vm:<vmid>



<h1>Migrate a HA resource</h1>

ha-manager migrate vm:<vmid> <node>



<h1>Show HA resource configuration</h1>

ha-manager config

<code></code>`



<h2>Firewall Management</h2>



<h3>Firewall Operations</h3>



<code></code>`bash

<h1>Show firewall status</h1>

pve-firewall status



<h1>Start firewall</h1>

pve-firewall start



<h1>Stop firewall</h1>

pve-firewall stop



<h1>Reload firewall configuration</h1>

pve-firewall reload

<code></code>`



<h3>Firewall Rules Management</h3>



<code></code>`bash

<h1>List firewall rules</h1>

pvesh get /cluster/firewall/rules



<h1>Add a firewall rule to allow SSH</h1>

pvesh create /cluster/firewall/rules --action accept --proto tcp --dport 22 --enable 1



<h1>Add a firewall rule to allow HTTP</h1>

pvesh create /cluster/firewall/rules --action accept --proto tcp --dport 80 --enable 1



<h1>Add a firewall rule to allow HTTPS</h1>

pvesh create /cluster/firewall/rules --action accept --proto tcp --dport 443 --enable 1



<h1>Delete a firewall rule</h1>

pvesh delete /cluster/firewall/rules/<pos>

<code></code>`



<h3>VM/Container Firewall</h3>



<code></code>`bash

<h1>Enable firewall for a VM</h1>

pvesh set /nodes/<node>/qemu/<vmid>/firewall/options --enable 1



<h1>Add a rule to a VM firewall</h1>

pvesh create /nodes/<node>/qemu/<vmid>/firewall/rules --action accept --proto tcp --dport 80 --enable 1



<h1>Enable firewall for a container</h1>

pvesh set /nodes/<node>/lxc/<ctid>/firewall/options --enable 1



<h1>Add a rule to a container firewall</h1>

pvesh create /nodes/<node>/lxc/<ctid>/firewall/rules --action accept --proto tcp --dport 80 --enable 1

<code></code>`



<h2>API and Shell Interface</h2>



The <code>pvesh</code> command provides a shell interface to the Proxmox VE API.



<h3>API Operations</h3>



<code></code>`bash

<h1>Get API version</h1>

pvesh get /version



<h1>List all API paths</h1>

pvesh get /



<h1>Get cluster resources</h1>

pvesh get /cluster/resources



<h1>Get node status</h1>

pvesh get /nodes/<node>/status



<h1>Get VM list</h1>

pvesh get /nodes/<node>/qemu



<h1>Get container list</h1>

pvesh get /nodes/<node>/lxc



<h1>Get storage list</h1>

pvesh get /storage



<h1>Get task list</h1>

pvesh get /nodes/<node>/tasks

<code></code>`



<h3>API Usage</h3>



<code></code>`bash

<h1>Show API command usage</h1>

pvesh usage <path>



<h1>Show API command usage with verbose output</h1>

pvesh usage <path> -v

<code></code>`



<h2>System Administration</h2>



<h3>System Operations</h3>



<code></code>`bash

<h1>Show system status</h1>

pveversion -v



<h1>Show node status</h1>

pvesh get /nodes/<node>/status



<h1>Show subscription status</h1>

pvesh get /nodes/<node>/subscription



<h1>Update package lists</h1>

apt update



<h1>Upgrade packages</h1>

apt dist-upgrade



<h1>Reboot node</h1>

reboot



<h1>Shutdown node</h1>

shutdown -h now

<code></code>`



<h3>Task Management</h3>



<code></code>`bash

<h1>Show running tasks</h1>

pvesh get /nodes/<node>/tasks?running=1



<h1>Show task details</h1>

pvesh get /nodes/<node>/tasks/<upid>



<h1>Show task log</h1>

pvesh get /nodes/<node>/tasks/<upid>/log

<code></code>`



<h3>User Management</h3>



<code></code>`bash

<h1>List users</h1>

pveum user list



<h1>Add a user</h1>

pveum user add <userid> --password <password>



<h1>Modify a user</h1>

pveum user modify <userid> --email <email>



<h1>Delete a user</h1>

pveum user delete <userid>



<h1>List groups</h1>

pveum group list



<h1>Add a group</h1>

pveum group add <groupid>



<h1>Add a user to a group</h1>

pveum user modify <userid> --groups <groupid>



<h1>List roles</h1>

pveum role list



<h1>Add a role</h1>

pveum role add <roleid> --privs <privs>



<h1>Add ACL</h1>

pveum acl modify / --users <userid> --roles <roleid>

<code></code>`



<h3>API Token Management</h3>



<code></code>`bash

<h1>List API tokens</h1>

pveum user token list <userid>



<h1>Create API token</h1>

pveum user token add <userid> <tokenid> --privsep 0



<h1>Remove API token</h1>

pveum user token remove <userid> <tokenid>

<code></code>`



<h2>Additional Resources</h2>



<ul><li><a href="https://pve.proxmox.com/pve-docs/">Official Proxmox VE Documentation</a></li></ul>

<ul><li><a href="https://pve.proxmox.com/wiki/">Proxmox VE Wiki</a></li></ul>

<ul><li><a href="https://pve.proxmox.com/pve-docs/api-viewer/">Proxmox VE API Documentation</a></li></ul>

<ul><li><a href="https://forum.proxmox.com/">Proxmox VE Forum</a></li></ul>

</div>
