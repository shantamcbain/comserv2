[% PageVersion = 'Comserv/root/Documentation/changelog/2025-01-15-git-divergent-branches-fix.tt,v 0.01 2025/01/15 shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% META title = 'Git Divergent Branches Fix - Production Deployment Solution' %]

<!-- Documentation page for Git Divergent Branches Fix -->
<div class="documentation-content">

<div class="markdown-content">

<h1>Git Divergent Branches Fix - Production Deployment Solution</h1>

<p><strong>Date:</strong> 2025-01-15<br>
<strong>Category:</strong> Deployment & Git Management<br>
<strong>Priority:</strong> High<br>
<strong>Status:</strong> Implemented</p>

<h2>Problem Description</h2>

<p>Production server at <code>/opt/comserv/</code> was experiencing Git divergent branches error when attempting to pull latest changes from GitHub:</p>

<pre><code>Backed up theme_mappings.json to /opt/comserv/Comserv/root/static/config/theme_mappings.json.bak 
Git pull output: From https://github.com/shantamcbain/comserv2 
86dc11e..1f2c575 master -> origin/master 
hint: You have divergent branches and need to specify how to reconcile them. 
hint: You can do so by running one of the following commands sometime before 
hint: your next pull: 
hint: 
hint: git config pull.rebase false # merge 
hint: git config pull.rebase true # rebase 
hint: git config pull.ff only # fast-forward only 
hint: 
hint: You can replace "git config" with "git config --global" to set a default 
hint: preference for all repositories. You can also pass --rebase, --no-rebase, 
hint: or --ff-only on the command line to override the configured default per 
hint: invocation. 
fatal: Need to specify how to reconcile divergent branches.
</code></pre>

<h2>Root Cause Analysis</h2>

<ol>
<li><strong>Divergent Branches</strong>: Local production repository had commits that differed from the remote GitHub repository</li>
<li><strong>Git Configuration</strong>: Production server's Git was not configured with a default strategy for handling divergent branches</li>
<li><strong>Deployment Process</strong>: The existing Git pull functionality didn't handle divergent branch scenarios</li>
<li><strong>Recent Changes</strong>: Menu link fixes (commits 86dc11e to 1f2c575) needed to be deployed but were blocked by this issue</li>
</ol>

<h2>Solution Implemented</h2>

<h3>1. Enhanced Git Pull Functionality</h3>

<p><strong>File Modified:</strong> <code>Comserv/lib/Comserv/Controller/Admin.pm</code></p>

<p><strong>Method Updated:</strong> <code>execute_git_pull</code></p>

<p><strong>Key Improvements:</strong></p>
<ul>
<li><strong>Divergent Branch Detection</strong>: Added logic to detect when local and remote branches have diverged</li>
<li><strong>Automatic Resolution</strong>: Configures Git to use merge strategy (<code>pull.rebase false</code>) when divergent branches are detected</li>
<li><strong>Safe Merge Process</strong>: Uses <code>--no-rebase</code> flag to ensure merge strategy is applied</li>
<li><strong>Enhanced Logging</strong>: Comprehensive logging of Git operations for debugging</li>
<li><strong>Backup Protection</strong>: Maintains existing theme_mappings.json backup functionality</li>
</ul>

<p><strong>Code Changes:</strong></p>
<pre><code class="language-perl">
# Check if we have divergent branches by comparing local and remote
my $local_commit = `git -C ${\$c->path_to()} rev-parse HEAD 2>&1`;
my $remote_commit = `git -C ${\$c->path_to()} rev-parse origin/master 2>&1`;

# Detect divergent branches
my $merge_base = `git -C ${\$c->path_to()} merge-base HEAD origin/master 2>&1`;
if ($local_commit ne $remote_commit && $merge_base ne $local_commit && $merge_base ne $remote_commit) {
    $diverged = 1;
    # Handle divergent branches with explicit merge strategy
    my $config_output = `git -C ${\$c->path_to()} config pull.rebase false 2>&1`;
    $pull_output = `git -C ${\$c->path_to()} pull --no-rebase origin master 2>&1`;
}
</code></pre>

<h3>2. Emergency Git Operations</h3>

<p><strong>New File Created:</strong> <code>Comserv/root/admin/git_emergency.tt</code></p>

<p><strong>New Method Added:</strong> <code>git_emergency</code> in Admin controller</p>

<p><strong>Features:</strong></p>
- **Git Status Check**: Comprehensive repository diagnostics
- **Force Pull**: Dangerous operation to reset to remote state
- **Hard Reset**: Nuclear option for extreme emergencies
- **Safety Warnings**: Multiple confirmation dialogs for dangerous operations

**Emergency Operations Available:**
1. **Status Check**: Safe diagnostic tool
2. **Force Pull**: Resets to remote state (loses local changes)
3. **Hard Reset**: Complete repository reset (permanent data loss)

### 3. Production Deployment Strategy

**Recommended Approach for Production:**

1. **First Attempt**: Use the enhanced normal Git Pull
   - Navigate to `/admin/git_pull`
   - The enhanced functionality will automatically handle divergent branches
   - Uses merge strategy to preserve both local and remote changes

2. **If Normal Pull Fails**: Use Emergency Git Status Check
   - Navigate to `/admin/git_emergency`
   - Click "Check Git Status" to diagnose the issue
   - Review the output to understand the repository state

3. **If Safe to Proceed**: Use Force Pull (with caution)
   - Only if local changes are not critical
   - Backs up theme_mappings.json automatically
   - Resets repository to match remote exactly

4. **Last Resort**: Hard Reset
   - Only in extreme emergencies
   - Permanently destroys all local changes
   - Requires double confirmation

## Technical Details

### Git Commands Used

**Normal Enhanced Pull:**
```bash
git fetch origin
git config pull.rebase false
git pull --no-rebase origin master
```

**Force Pull:**
```bash
git fetch origin
git reset --hard origin/master
git clean -fd
```

**Hard Reset:**
```bash
git fetch origin
git reset --hard origin/master
```

### Safety Measures

1. **Automatic Backups**: theme_mappings.json is always backed up before operations
2. **Comprehensive Logging**: All Git operations are logged with detailed output
3. **Status Verification**: Final repository status is checked after operations
4. **Conflict Detection**: Merge conflicts are detected and reported
5. **User Confirmation**: Dangerous operations require explicit confirmation

## Files Modified/Created

### Modified Files:
- `Comserv/lib/Comserv/Controller/Admin.pm`
  - Enhanced `execute_git_pull` method
  - Added `git_emergency` method
  - Added `execute_git_status_check` method
  - Added `execute_git_force_pull` method
  - Added `execute_git_reset_hard` method

### New Files:
- `Comserv/root/admin/git_emergency.tt` - Emergency Git operations interface
- `Comserv/root/Documentation/changelog/2025-01-15-git-divergent-branches-fix.tt` - This documentation

## Testing Instructions

### Development Environment Testing:
1. Create a divergent branch scenario
2. Test the enhanced Git pull functionality
3. Verify emergency operations work correctly
4. Confirm backup and restore functionality

### Production Deployment:
1. Deploy the updated Admin.pm controller
2. Deploy the new git_emergency.tt template
3. Test with Git status check first
4. Proceed with normal Git pull
5. Monitor logs for any issues

## Deployment Commands for Production

```bash
# On production server (/opt/comserv/)
cd /opt/comserv

# First, try the enhanced Git pull through web interface
# Navigate to: https://your-domain/admin/git_pull

# Or manually resolve if needed:
git config pull.rebase false
git pull --no-rebase origin master
```

## Expected Results

After implementing this fix:

1. **Automatic Resolution**: Divergent branches will be automatically resolved using merge strategy
2. **Successful Deployment**: Latest changes (commits 86dc11e to 1f2c575) will be successfully pulled
3. **Menu Fixes Deployed**: Back, Hosted, and Member functionality fixes will be active
4. **Future-Proof**: Production server will handle future divergent branch scenarios automatically

## Monitoring and Maintenance

1. **Log Monitoring**: Check application logs for Git operation results
2. **Backup Verification**: Ensure theme_mappings.json backups are created successfully
3. **Repository Health**: Periodically use Git status check to monitor repository health
4. **Documentation Updates**: Keep this documentation updated with any future changes

## Rollback Plan

If issues occur:
1. **Restore Backup**: Use the automatically created theme_mappings.json.bak
2. **Revert Controller**: Replace Admin.pm with previous version
3. **Manual Git Reset**: Use `git reset --hard` to previous known good commit
4. **Emergency Access**: Use emergency Git operations interface for recovery

## Related Issues

- **Menu Link Fixes**: This deployment enables the menu link fixes for Back, Hosted, and Member functionality
- **Production Stability**: Resolves ongoing deployment issues on production server
- **Git Workflow**: Establishes proper Git workflow for production deployments

## Future Improvements

1. **Automated Testing**: Add automated tests for Git operations
2. **Deployment Pipeline**: Consider implementing CI/CD pipeline
3. **Monitoring Integration**: Add monitoring alerts for Git operation failures
4. **Documentation**: Create user guide for production deployments

---

<p><strong>Implementation Status:</strong> âœ… Complete<br>
<strong>Testing Status:</strong> âœ… Ready for Production<br>
<strong>Documentation Status:</strong> âœ… Complete<br>
<strong>Deployment Status:</strong> ðŸ”„ Ready for Production Deployment</p>

</div>

</div>