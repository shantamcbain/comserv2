[% PageVersion = 'Documentation/ENCY.tt,v 0.02 2024/05/22 Shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

<h1 id="encyctop"><a href="#ency_top"</a>ENCY Controller</h1>


<p>The ENCY controller is responsible for handling requests related to the ENCY model. It includes several subroutines, each of which performs a specific task.</p>
<p><a href="#encyctop">Return to top</a></p>
<nav>
  <a href="#indexencyc">index</a> |
  <a href="#botanical_name_view">botanical_name_view</a> |
  <a href="#herb_detail">herb_detail</a> |
  <a href="#get_reference_by_id">get_reference_by_id</a> |
  <a href="#create_reference">create_reference</a> |
  <a href="#get_category_by_id">get_category_by_id</a> |
  <a href="#create_category">create_category</a>
</nav>

<h3 id="indexencyc">index</h3>
<p>The <code>index</code> subroutine handles requests to the root of the ENCY controller's URL. It sets the template to 'ENCY/index.tt', which is used to render the response.</p>
<pre><code>
sub index :Path('/ENCY') :Args(0) {
    my ( $self, $c ) = @_;
    # The index action will display the 'index.tt' template
    $c->stash(template => 'ENCY/index.tt');
}
</code></pre>
<p><a href="#encyctop">Return to top</a></p>

<h3 id="botanical_name_view">botanical_name_view</h3>
<p>The <code>botanical_name_view</code> subroutine handles requests to display the Botanical Name View page. It fetches herbal data from the 'DBForager' model and passes this data to the template.</p>
<pre><code>
sub index :Path('/ENCY') :Args(0) {
    my ( $self, $c ) = @_;
    # The index action will display the 'index.tt' template
    $c->stash(template => 'ENCY/index.tt');
}
</code></pre>
<p><a href="#encyctop">Return to top</a></p>

<h3 id="botanical_name_view">botanical_name_view</h3>
<p>The <code>botanical_name_view</code> subroutine handles requests to display the Botanical Name View page. It fetches herbal data from the 'DBForager' model and passes this data to the template.</p>
<pre><code>
sub botanical_name_view :Path('/ENCY/BotanicalNameView') :Args(0) {
    my ( $self, $c ) = @_;

    # Fetch the herbal data
    my $forager_data = $c->model('DBForager')->get_herbal_data();

    # Pass the data to the template
    my $herbal_data = $forager_data;
    $c->stash(herbal_data => $herbal_data, template => 'ENCY/BotanicalNameView.tt');
}
</code></pre>
<p><a href="#encyctop">Return to top</a></p>

<h3 id="herb_detail">herb_detail</h3>
<p>The <code>herb_detail</code> subroutine handles requests to display detailed information about a specific herb. It takes an <code>id</code> as an argument, fetches the corresponding herb from the 'DBForager' model, and sets the herb and the template 'ENCY/HerbDetailView.tt' in the stash.</p>
<pre><code>
sub herb_detail :Path('/ENCY/herb_detail') :Args(1) {
    my ( $self, $c, $id ) = @_;
    my $herb = $c->model('DBForager')->get_herb_by_id($id);
    $c->stash(herb => $herb, template => 'ENCY/HerbDetailView.tt');
}
</code></pre>
<p><a href="#encyctop">Return to top</a></p>

<h3 id="add_herb">add_herb</h3>
<p>The <code>add_herb</code> subroutine handles requests to add a new herb. It processes the form submission and saves the new herb to the database.</p>
<pre><code>
sub add_herb :Path('/ENCY/add_herb') :Args(0) {
    my ( $self, $c ) = @_;

    if ($c->request->method eq 'POST') {
        # Handle form submission
        my $form_data = $c->request->body_parameters;

        my $new_herb = {
            therapeutic_action => $form_data->{therapeutic_action},
            botanical_name => $form_data->{botanical_name},
            common_names => $form_data->{common_names},
            parts_used => $form_data->{parts_used},
            comments => $form_data->{comments},
            medical_uses => $form_data->{medical_uses},
            homiopathic => $form_data->{homiopathic},
            ident_character => $form_data->{ident_character},
            image => $form_data->{image},
            stem => $form_data->{stem},
            nectar => $form_data->{nectar},
            pollinator => $form_data->{pollinator},
            pollen => $form_data->{pollen},
            leaves => $form_data->{leaves},
            flowers => $form_data->{flowers},
            fruit => $form_data->{fruit},
            taste => $form_data->{taste},
            odour => $form_data->{odour},
            distribution => $form_data->{distribution},
            url => $form_data->{url},
            root => $form_data->{root},
            constituents => $form_data->{constituents},
            solvents => $form_data->{solvents},
            chinese => $form_data->{chinese},
            culinary => $form_data->{culinary},
            contra_indications => $form_data->{contra_indications},
            dosage => $form_data->{dosage},
            administration => $form_data->{administration},
            formulas => $form_data->{formulas},
            vetrinary => $form_data->{vetrinary},
            cultivation => $form_data->{cultivation},
            sister_plants => $form_data->{sister_plants},
            harvest => $form_data->{harvest},
            non_med => $form_data->{non_med},
            history => $form_data->{history},
            reference => $form_data->{reference},
            username_of_poster => $c->session->{username},
            group_of_poster => $c->session->{group},
            date_time_posted => \'NOW()',  # Assuming you want to set this to the current timestamp
            share => $form_data->{share} // 0,
            should_display => $form_data->{should_display} // 0,
            preperation => $form_data->{preperation},
            pollennotes => $form_data->{pollennotes},
            nectarnotes => $form_data->{nectarnotes},
            apis => $form_data->{apis},
        };

        # Save the new herb using the ENCYModel
        $c->model('ENCYModel')->add_herb($new_herb);

        # Redirect or display a success message
        $c->flash->{success_message} = 'Herb added successfully';
        $c->res->redirect($c->uri_for($self->action_for('index')));
    } else {
        # Display the form
        $c->stash(
            template => 'ENCY/add_herb_form.tt',
            user_role => $c->session->{roles}  # Pass user role to the template
        );
    }
}
</code></pre>
<p><a href="#encyctop">Return to top</a></p>
<p><a href="#encyctop">Return to top</a></p>

<p>Each of these subroutines relies on the ENCY model to perform its tasks. The ENCY model is loaded in the ENCY controller with the <code>use Comserv::Model::ENCY;</code> statement. The ENCY model is defined in the 'Comserv::Model::ENCY' package, which is located in the 'lib/Comserv/Model' directory.</p>
<p><a href="#encyctop">Return to top</a></p>

<h2>Future Development</h2>
<p>To evolve the ENCY application, consider the following enhancements:</p>
<ul>
    <li><strong>Improved Data Validation:</strong> Implement stricter data validation and error handling in all subroutines to ensure data integrity and provide better user feedback.</li>
    <li><strong>Enhanced User Interface:</strong> Develop more interactive and user-friendly templates, possibly integrating JavaScript frameworks for a better user experience.</li>
    <li><strong>API Integration:</strong> Create RESTful API endpoints to allow external applications to interact with the ENCY data, enabling wider access and integration.</li>
    <li><strong>Search and Filtering:</strong> Add advanced search and filtering capabilities to allow users to find specific information more efficiently.</li>
    <li><strong>Automated Data Updates:</strong> Implement automation for data updates from trusted sources to keep the information current and accurate.</li>
    <li><strong>User Contributions:</strong> Develop features that allow users to contribute data and corrections, with moderation workflows to ensure quality.</li>
</ul>

