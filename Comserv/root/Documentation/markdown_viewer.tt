[% PageVersion = 'Documentation/markdown_viewer.tt,v 0.04 2025/04/02 shanta Exp shanta ' %]
[% IF c.session.debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% META title = 'Documentation' %]

<!-- Include Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<!-- Include documentation CSS -->
<link rel="stylesheet" href="/static/css/documentation.css">

<div class="markdown-viewer">
    <div class="markdown-header">
        <h1>[% page_title %]</h1>
        
        <div class="user-context">
            <div class="site-info">
                <span class="label">Current Site:</span>
                <span class="value">[% site_name %]</span>
            </div>
            <div class="role-info">
                <span class="label">User Role:</span>
                <span class="value">[% user_role %]</span>
            </div>
        </div>
        
        <div class="document-info">
            <div class="last-updated">
                <span class="label">Last Updated:</span>
                <span class="value">[% last_updated %]</span>
            </div>
            
            <div class="actions">
                <a href="[% c.uri_for('/Documentation') %]" class="action-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    Documentation Home
                </a>
                
                [% IF user_role == 'admin' || user_role == 'developer' || user_role == 'editor' %]
                <a href="[% c.uri_for('/Documentation/suggest_edit', page_name) %]" class="action-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 20h9"></path>
                        <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                    </svg>
                    Suggest Edit
                </a>
                [% END %]
                
                <button id="expand-all-button" class="action-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="7 13 12 18 17 13"></polyline>
                        <polyline points="7 6 12 11 17 6"></polyline>
                    </svg>
                    Expand All
                </button>

                <button id="print-button" class="action-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="6 9 6 2 18 2 18 9"></polyline>
                        <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                        <rect x="6" y="14" width="12" height="8"></rect>
                    </svg>
                    Print
                </button>
            </div>
        </div>
    </div>
    
    <div class="markdown-content">
        <!-- Display the markdown content with basic formatting -->
        <div class="markdown-fallback" id="markdown-content">
            [% markdown_content | html | html_line_break %]
        </div>
    </div>

    <script>
        // Enhanced client-side markdown formatting with collapsible sections
        document.addEventListener('DOMContentLoaded', function() {
            const content = document.getElementById('markdown-content');
            if (!content) return;

            let html = content.innerHTML;

            // Process the content line by line for block-level elements
            const lines = html.split('<br>');
            let inList = false;
            let listItems = [];
            let listType = 'ul'; // Default to unordered list
            let processedLines = [];
            let sectionId = 0;
            let inSection = false;
            let sectionContent = [];

            function endCurrentList() {
                if (inList && listItems.length > 0) {
                    const listHtml = '<' + listType + ' class="markdown-list">' + listItems.join('') + '</' + listType + '>';
                    if (inSection) {
                        sectionContent.push(listHtml);
                    } else {
                        processedLines.push(listHtml);
                    }
                    listItems = [];
                    inList = false;
                }
            }

            function processInlineFormatting(text) {
                // Bold
                text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                text = text.replace(/__(.*?)__/g, '<strong>$1</strong>');
                // Italic
                text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
                text = text.replace(/_(.*?)_/g, '<em>$1</em>');
                // Links
                text = text.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');
                // Code
                text = text.replace(/`(.*?)`/g, '<code>$1</code>');
                return text;
            }

            for (let i = 0; i < lines.length; i++) {
                let line = lines[i].trim();

                // Skip empty lines
                if (line === '') {
                    endCurrentList();
                    if (inSection) {
                        sectionContent.push('<br>');
                    } else {
                        processedLines.push('<br>');
                    }
                    continue;
                }

                // Main heading (h1) - not collapsible
                if (line.startsWith('# ')) {
                    endCurrentList();

                    // Close any open section
                    if (inSection) {
                        processedLines.push('<div class="section-content" id="section-' + sectionId + '">' + sectionContent.join('') + '</div>');
                        inSection = false;
                        sectionContent = [];
                    }

                    processedLines.push('<h1>' + processInlineFormatting(line.substring(2)) + '</h1>');
                    continue;
                }

                // Section heading (h2) - collapsible
                if (line.startsWith('## ')) {
                    endCurrentList();

                    // Close any open section
                    if (inSection) {
                        processedLines.push('<div class="section-content" id="section-' + sectionId + '">' + sectionContent.join('') + '</div>');
                    }

                    // Start a new section
                    sectionId++;
                    inSection = true;
                    sectionContent = [];

                    const sectionTitle = processInlineFormatting(line.substring(3));
                    processedLines.push('<h2 class="section-toggle" data-target="section-' + sectionId + '">' +
                                       sectionTitle +
                                       '<i class="fas fa-chevron-down toggle-icon"></i></h2>');
                    continue;
                }

                // Subsection heading (h3)
                if (line.startsWith('### ')) {
                    endCurrentList();

                    if (inSection) {
                        sectionContent.push('<h3>' + processInlineFormatting(line.substring(4)) + '</h3>');
                    } else {
                        processedLines.push('<h3>' + processInlineFormatting(line.substring(4)) + '</h3>');
                    }
                    continue;
                }

                // Subsection heading (h4)
                if (line.startsWith('#### ')) {
                    endCurrentList();

                    if (inSection) {
                        sectionContent.push('<h4>' + processInlineFormatting(line.substring(5)) + '</h4>');
                    } else {
                        processedLines.push('<h4>' + processInlineFormatting(line.substring(5)) + '</h4>');
                    }
                    continue;
                }

                // Unordered Lists
                if (line.startsWith('- ') || line.startsWith('* ')) {
                    // If we're switching from ordered to unordered, end the current list
                    if (inList && listType === 'ol') {
                        endCurrentList();
                    }

                    inList = true;
                    listType = 'ul';
                    listItems.push('<li>' + processInlineFormatting(line.substring(2)) + '</li>');
                    continue;
                }

                // Ordered Lists
                if (line.match(/^\d+\. /)) {
                    // If we're switching from unordered to ordered, end the current list
                    if (inList && listType === 'ul') {
                        endCurrentList();
                    }

                    inList = true;
                    listType = 'ol';
                    listItems.push('<li>' + processInlineFormatting(line.substring(line.indexOf('. ') + 2)) + '</li>');
                    continue;
                }

                // Regular paragraph
                endCurrentList();

                if (inSection) {
                    sectionContent.push('<p>' + processInlineFormatting(line) + '</p>');
                } else {
                    processedLines.push('<p>' + processInlineFormatting(line) + '</p>');
                }
            }

            // End any open list
            endCurrentList();

            // Close any open section
            if (inSection) {
                processedLines.push('<div class="section-content" id="section-' + sectionId + '">' + sectionContent.join('') + '</div>');
            }

            // Join the processed lines
            html = processedLines.join('');

            // Set the processed HTML
            content.innerHTML = html;

            // Remove empty paragraphs
            const emptyParagraphs = content.querySelectorAll('p:empty');
            emptyParagraphs.forEach(p => p.remove());

            // Add click handlers for collapsible sections
            const toggles = document.querySelectorAll('.section-toggle');
            toggles.forEach(toggle => {
                const targetId = toggle.getAttribute('data-target');
                const targetSection = document.getElementById(targetId);

                // Initially hide all sections
                if (targetSection) {
                    targetSection.style.display = 'none';
                }

                toggle.addEventListener('click', function() {
                    const icon = this.querySelector('.toggle-icon');
                    if (targetSection) {
                        if (targetSection.style.display === 'none') {
                            targetSection.style.display = 'block';
                            targetSection.classList.add('open');
                            icon.classList.add('open');
                        } else {
                            targetSection.style.display = 'none';
                            targetSection.classList.remove('open');
                            icon.classList.remove('open');
                        }
                    }
                });
            });
        });
    </script>
    
    <div class="markdown-footer">
        <div class="navigation">
            <a href="[% c.uri_for('/Documentation') %]" class="nav-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
                Documentation Home
            </a>
            
            <a href="javascript:history.back()" class="nav-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
                Go Back
            </a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add copy buttons to code blocks
        const codeBlocks = document.querySelectorAll('pre code');
        codeBlocks.forEach(function(codeBlock) {
            const container = codeBlock.parentNode;
            const copyButton = document.createElement('button');
            copyButton.className = 'copy-button';
            copyButton.textContent = 'Copy';

            copyButton.addEventListener('click', function() {
                const code = codeBlock.textContent;
                navigator.clipboard.writeText(code).then(function() {
                    copyButton.textContent = 'Copied!';
                    setTimeout(function() {
                        copyButton.textContent = 'Copy';
                    }, 2000);
                }).catch(function(err) {
                    console.error('Could not copy text: ', err);
                    copyButton.textContent = 'Error!';
                    setTimeout(function() {
                        copyButton.textContent = 'Copy';
                    }, 2000);
                });
            });

            container.style.position = 'relative';
            container.appendChild(copyButton);
        });

        // Print functionality
        document.getElementById('print-button').addEventListener('click', function() {
            window.print();
        });

        // Expand All functionality
        document.getElementById('expand-all-button').addEventListener('click', function() {
            const expandButton = this;
            const allSections = document.querySelectorAll('.section-content');
            const allToggles = document.querySelectorAll('.section-toggle');
            const allIcons = document.querySelectorAll('.toggle-icon');

            // Check if all sections are already expanded
            let allExpanded = true;
            allSections.forEach(section => {
                if (section.style.display === 'none') {
                    allExpanded = false;
                }
            });

            if (allExpanded) {
                // Collapse all sections
                allSections.forEach(section => {
                    section.style.display = 'none';
                    section.classList.remove('open');
                });
                allIcons.forEach(icon => {
                    icon.classList.remove('open');
                });
                expandButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="7 13 12 18 17 13"></polyline><polyline points="7 6 12 11 17 6"></polyline></svg> Expand All';
            } else {
                // Expand all sections
                allSections.forEach(section => {
                    section.style.display = 'block';
                    section.classList.add('open');
                });
                allIcons.forEach(icon => {
                    icon.classList.add('open');
                });
                expandButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="17 11 12 6 7 11"></polyline><polyline points="17 18 12 13 7 18"></polyline></svg> Collapse All';
            }
        });
    });
</script>

<style>
    /* Additional styles for collapsible sections */
    .section-toggle {
        cursor: pointer;
        position: relative;
        padding-right: 30px;
        background-color: #f0f7ff;
        padding: 10px 15px;
        border-radius: 5px;
        margin-top: 20px;
        transition: background-color 0.2s;
    }

    .section-toggle:hover {
        background-color: #e0f0ff;
    }

    .toggle-icon {
        position: absolute;
        right: 15px;
        transition: transform 0.3s;
    }

    .toggle-icon.open {
        transform: rotate(180deg);
    }

    .section-content {
        padding: 0 15px;
        margin-top: 10px;
        margin-bottom: 20px;
        border-left: 3px solid #0066cc;
    }

    /* Ensure lists are properly displayed */
    .markdown-list {
        display: block !important;
        list-style-position: outside !important;
        padding-left: 2em !important;
        margin: 1em 0 !important;
    }

    .markdown-list li {
        display: list-item !important;
        margin-bottom: 0.5em !important;
    }

    ul.markdown-list {
        list-style-type: disc !important;
    }

    ol.markdown-list {
        list-style-type: decimal !important;
    }

    /* Ensure section content is properly displayed */
    .section-content {
        display: none;
    }

    .section-content.open {
        display: block;
    }

    /* Fix for links in markdown */
    .markdown-content a {
        color: #0066cc;
        text-decoration: none;
    }

    .markdown-content a:hover {
        text-decoration: underline;
    }
</style>