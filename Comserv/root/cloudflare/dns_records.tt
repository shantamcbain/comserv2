[% PageVersion = 'cloudflare/dns_records.tt,v 0.02 2025/06/15 shanta Exp shanta ' %]
[% IF debug_mode == 1 %]
    [% PageVersion %]
[% END %]

<style>
    .dns-records-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }
    
    .actions-bar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }
    
    .record-form {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 15px;
    }
    
    .form-group {
        flex: 1;
        min-width: 200px;
        margin-right: 15px;
        margin-bottom: 10px;
    }
    
    .form-group:last-child {
        margin-right: 0;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .checkbox-group {
        display: flex;
        align-items: center;
    }
    
    .checkbox-group input {
        width: auto;
        margin-right: 8px;
    }
    
    .checkbox-group.disabled {
        opacity: 0.5;
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
    }
    
    .form-actions button {
        margin-left: 10px;
    }
    
    .records-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    
    .records-table th,
    .records-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    
    .records-table th {
        background-color: #f2f2f2;
        font-weight: bold;
    }
    
    .records-table tr:hover {
        background-color: #f5f5f5;
    }
    
    .btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s;
    }
    
    .btn-primary {
        background-color: #007bff;
        color: white;
    }
    
    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }
    
    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }
    
    .btn-sm {
        padding: 5px 10px;
        font-size: 12px;
    }
    
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }
    
    .alert-info {
        color: #0c5460;
        background-color: #d1ecf1;
        border-color: #bee5eb;
    }
    
    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .loading-row td,
    .empty-row td {
        text-align: center;
        padding: 30px;
        color: #666;
    }
    
    .icon-back:before {
        content: "←";
        margin-right: 5px;
    }
    
    .icon-add:before {
        content: "+";
        margin-right: 5px;
    }
    
    .icon-refresh:before {
        content: "↻";
        margin-right: 5px;
    }
</style>

<div class="dns-records-container">
    <h1>DNS Records for [% domain %]</h1>
    
    [% IF mock_data %]
    <div class="alert alert-info">
        <strong>Development Mode:</strong> Using mock DNS records. Changes will not affect the actual domain.
    </div>
    [% END %]
    
    <div class="actions-bar">
        <a href="[% c.uri_for('/cloudflareapi') %]" class="btn btn-secondary">
            <i class="icon-back"></i> Back to Domains
        </a>
        <button id="add-record-btn" class="btn btn-primary">
            <i class="icon-add"></i> Add DNS Record
        </button>
        <button id="purge-cache-btn" class="btn btn-warning">
            <i class="icon-refresh"></i> Purge Cache
        </button>
    </div>
    
    <div id="add-record-form" class="record-form" style="display: none;">
        <h2>Add DNS Record</h2>
        <form id="dns-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="record-type">Type:</label>
                    <select id="record-type" name="type" required>
                        <option value="A">A</option>
                        <option value="AAAA">AAAA</option>
                        <option value="CNAME">CNAME</option>
                        <option value="TXT">TXT</option>
                        <option value="MX">MX</option>
                        <option value="NS">NS</option>
                        <option value="SRV">SRV</option>
                        <option value="CAA">CAA</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="record-name">Name:</label>
                    <input type="text" id="record-name" name="name" placeholder="e.g., www" required>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="record-content">Content:</label>
                    <input type="text" id="record-content" name="content" placeholder="e.g., 192.168.1.1" required>
                </div>
                <div class="form-group" style="display: none;">
                    <label for="record-priority">Priority:</label>
                    <input type="number" id="record-priority" name="priority" min="0" max="65535" value="10" placeholder="e.g., 10">
                </div>
                <div class="form-group">
                    <label for="record-ttl">TTL:</label>
                    <select id="record-ttl" name="ttl">
                        <option value="1">Automatic</option>
                        <option value="60">1 minute</option>
                        <option value="300">5 minutes</option>
                        <option value="1800">30 minutes</option>
                        <option value="3600">1 hour</option>
                        <option value="86400">1 day</option>
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group checkbox-group">
                    <input type="checkbox" id="record-proxied" name="proxied">
                    <label for="record-proxied">Proxied</label>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" id="cancel-add" class="btn btn-secondary">Cancel</button>
                <button type="submit" class="btn btn-primary">Add Record</button>
            </div>
        </form>
    </div>
    
    <div id="edit-record-form" class="record-form" style="display: none;">
        <h2>Edit DNS Record</h2>
        <form id="edit-dns-form">
            <input type="hidden" id="edit-record-id" name="record_id">
            <div class="form-row">
                <div class="form-group">
                    <label for="edit-record-type">Type:</label>
                    <select id="edit-record-type" name="type" required>
                        <option value="A">A</option>
                        <option value="AAAA">AAAA</option>
                        <option value="CNAME">CNAME</option>
                        <option value="TXT">TXT</option>
                        <option value="MX">MX</option>
                        <option value="NS">NS</option>
                        <option value="SRV">SRV</option>
                        <option value="CAA">CAA</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="edit-record-name">Name:</label>
                    <input type="text" id="edit-record-name" name="name" required>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="edit-record-content">Content:</label>
                    <input type="text" id="edit-record-content" name="content" required>
                </div>
                <div class="form-group" style="display: none;">
                    <label for="edit-record-priority">Priority:</label>
                    <input type="number" id="edit-record-priority" name="priority" min="0" max="65535" value="10">
                </div>
                <div class="form-group">
                    <label for="edit-record-ttl">TTL:</label>
                    <select id="edit-record-ttl" name="ttl">
                        <option value="1">Automatic</option>
                        <option value="60">1 minute</option>
                        <option value="300">5 minutes</option>
                        <option value="1800">30 minutes</option>
                        <option value="3600">1 hour</option>
                        <option value="86400">1 day</option>
                    </select>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group checkbox-group">
                    <input type="checkbox" id="edit-record-proxied" name="proxied">
                    <label for="edit-record-proxied">Proxied</label>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" id="cancel-edit" class="btn btn-secondary">Cancel</button>
                <button type="submit" class="btn btn-primary">Update Record</button>
            </div>
        </form>
    </div>
    
    <div class="records-table-container">
        <table id="dns-records-table" class="records-table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Content</th>
                    <th>TTL</th>
                    <th>Proxied</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="records-body">
                <!-- Records will be loaded here via JavaScript -->
                <tr class="loading-row">
                    <td colspan="6">Loading DNS records...</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
    // Domain from the server
    const domain = "[% domain %]";
    
    // API endpoints
    const apiEndpoints = {
        list: "/cloudflareapi/dns/" + domain,
        create: "/cloudflareapi/dns/create",
        update: "/cloudflareapi/dns/update",
        delete: "/cloudflareapi/dns/delete",
        purge: "/cloudflareapi/cache/purge"
    };
    
    // DOM elements
    const recordsTable = document.getElementById("records-body");
    const addRecordBtn = document.getElementById("add-record-btn");
    const addRecordForm = document.getElementById("add-record-form");
    const editRecordForm = document.getElementById("edit-record-form");
    const cancelAddBtn = document.getElementById("cancel-add");
    const cancelEditBtn = document.getElementById("cancel-edit");
    const purgeBtn = document.getElementById("purge-cache-btn");
    
    // Event listeners
    document.addEventListener("DOMContentLoaded", loadRecords);
    addRecordBtn.addEventListener("click", showAddForm);
    cancelAddBtn.addEventListener("click", hideAddForm);
    cancelEditBtn.addEventListener("click", hideEditForm);
    purgeBtn.addEventListener("click", purgeCache);
    
    // Add event listeners for record type changes
    document.getElementById("record-type").addEventListener("change", function() {
        updateFormFields(this, '');
    });
    
    document.getElementById("edit-record-type").addEventListener("change", function() {
        updateFormFields(this, 'edit-');
    });
    
    document.getElementById("dns-form").addEventListener("submit", function(e) {
        e.preventDefault();
        addRecord();
    });
    
    document.getElementById("edit-dns-form").addEventListener("submit", function(e) {
        e.preventDefault();
        updateRecord();
    });
    
    // Functions
    function loadRecords() {
        // Show loading indicator
        recordsTable.innerHTML = `
            <tr class="loading-row">
                <td colspan="6">Loading DNS records...</td>
            </tr>
        `;
        
        fetch(apiEndpoints.list, {
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                // Get the content type
                const contentType = response.headers.get('content-type');
                
                // Check if the response is JSON
                if (contentType && contentType.includes('application/json')) {
                    // Parse as JSON and include the status in the result
                    return response.json().then(data => {
                        return { 
                            status: response.status,
                            ok: response.ok,
                            data: data
                        };
                    });
                } else {
                    // If not JSON, try to get text
                    return response.text().then(text => {
                        try {
                            // Try to parse as JSON
                            const data = JSON.parse(text);
                            return { 
                                status: response.status,
                                ok: response.ok,
                                data: data
                            };
                        } catch (e) {
                            // If parsing fails, return the text
                            return { 
                                status: response.status,
                                ok: response.ok,
                                text: text,
                                parseError: true
                            };
                        }
                    });
                }
            })
            .then(result => {
                // Check if response was OK
                if (!result.ok) {
                    // Handle HTTP error
                    if (result.parseError) {
                        throw new Error(`HTTP error! Status: ${result.status}. Response was not valid JSON.`);
                    } else if (result.data) {
                        // If we have JSON data with error details
                        const errorMsg = result.data.error || result.data.message || `HTTP error! Status: ${result.status}`;
                        throw new Error(errorMsg);
                    } else {
                        throw new Error(`HTTP error! Status: ${result.status}`);
                    }
                }
                
                // Process the successful response
                const data = result.data;
                if (data.success) {
                    displayRecords(data.records);
                    
                    // Show a message if using mock data
                    if (data.mock_data) {
                        const mockDataAlert = document.createElement('div');
                        mockDataAlert.className = 'alert alert-info';
                        mockDataAlert.innerHTML = '<strong>Development Mode:</strong> Using mock DNS records. Changes will not affect the actual domain.';
                        
                        // Insert after the h1 element
                        const h1 = document.querySelector('.dns-records-container h1');
                        if (h1 && h1.nextElementSibling) {
                            h1.parentNode.insertBefore(mockDataAlert, h1.nextElementSibling);
                        }
                    }
                } else {
                    showError("Failed to load DNS records: " + (data.message || data.error || "Unknown error"));
                }
            })
            .catch(error => {
                showError("Error loading DNS records: " + error.message);
                console.error("API Error:", error);
                
                // Disable buttons that won't work without records
                document.querySelectorAll('.btn-edit, .btn-delete').forEach(btn => {
                    btn.disabled = true;
                });
                
                // Also disable the add record button if this is an authentication error
                if (error.message.includes("401") || error.message.includes("Authentication")) {
                    addRecordBtn.disabled = true;
                    purgeBtn.disabled = true;
                }
            });
    }
    
    function displayRecords(records) {
        if (!records || records.length === 0) {
            recordsTable.innerHTML = `
                <tr class="empty-row">
                    <td colspan="6">No DNS records found for this domain.</td>
                </tr>
            `;
            return;
        }
        
        let html = "";
        records.forEach(record => {
            // Format the content field based on record type
            let content = record.content;
            
            // For MX records, show priority
            if (record.type === 'MX' && record.priority !== undefined) {
                content = `<span class="priority">${record.priority}</span> ${content}`;
            }
            
            // For TXT records, wrap long content
            if ((record.type === 'TXT' || record.type === 'CAA') && content.length > 40) {
                content = `<span class="txt-content" title="${content}">${content.substring(0, 40)}...</span>`;
            }
            
            // Add special formatting for CAA records
            if (record.type === 'CAA') {
                const parts = content.split(' ');
                if (parts.length >= 3) {
                    const flags = parts[0];
                    const tag = parts[1];
                    const value = parts.slice(2).join(' ');
                    content = `<span class="caa-flags">${flags}</span> <span class="caa-tag">${tag}</span> <span class="caa-value">${value}</span>`;
                }
            }
            
            html += `
                <tr data-id="${record.id}" data-record='${JSON.stringify(record)}'>
                    <td class="record-type">${record.type}</td>
                    <td class="record-name">${record.name}</td>
                    <td class="record-content">${content}</td>
                    <td class="record-ttl">${formatTTL(record.ttl)}</td>
                    <td class="record-proxied">${record.proxied ? "Yes" : "No"}</td>
                    <td class="record-actions">
                        <button class="btn btn-sm btn-edit" onclick="editRecord('${record.id}')">Edit</button>
                        <button class="btn btn-sm btn-delete" onclick="deleteRecord('${record.id}')">Delete</button>
                    </td>
                </tr>
            `;
        });
        
        recordsTable.innerHTML = html;
        
        // Add CSS for priority, TXT content, and CAA records
        const style = document.createElement('style');
        style.textContent = `
            .priority {
                display: inline-block;
                background-color: #f0f0f0;
                border-radius: 3px;
                padding: 0 5px;
                margin-right: 5px;
                font-weight: bold;
            }
            .txt-content {
                cursor: help;
                border-bottom: 1px dotted #999;
            }
            .caa-flags {
                display: inline-block;
                background-color: #e6f7ff;
                border-radius: 3px;
                padding: 0 5px;
                margin-right: 5px;
                font-family: monospace;
            }
            .caa-tag {
                display: inline-block;
                background-color: #fff7e6;
                border-radius: 3px;
                padding: 0 5px;
                margin-right: 5px;
                font-weight: bold;
            }
            .caa-value {
                display: inline-block;
                font-family: monospace;
            }
            .record-type {
                font-weight: bold;
            }
            .record-actions {
                white-space: nowrap;
            }
            .btn-edit, .btn-delete {
                margin: 0 2px;
            }
            .btn-edit {
                background-color: #4CAF50;
                color: white;
            }
            .btn-delete {
                background-color: #f44336;
                color: white;
            }
        `;
        document.head.appendChild(style);
    }
    
    function formatTTL(ttl) {
        if (ttl === 1) return "Auto";
        if (ttl < 60) return ttl + " seconds";
        if (ttl < 3600) return Math.floor(ttl / 60) + " minutes";
        if (ttl < 86400) return Math.floor(ttl / 3600) + " hours";
        return Math.floor(ttl / 86400) + " days";
    }
    
    function showAddForm() {
        // Reset the form
        document.getElementById("dns-form").reset();
        
        // Initialize form fields based on the default record type
        const typeSelect = document.getElementById("record-type");
        updateFormFields(typeSelect, '');
        
        // Show the form
        addRecordForm.style.display = "block";
        document.getElementById("record-name").focus();
    }
    
    function hideAddForm() {
        addRecordForm.style.display = "none";
        document.getElementById("dns-form").reset();
    }
    
    function hideEditForm() {
        editRecordForm.style.display = "none";
        document.getElementById("edit-dns-form").reset();
    }
    
    function addRecord() {
        const form = document.getElementById("dns-form");
        const formData = new FormData(form);
        formData.append("domain", domain);
        
        // Get the record type
        const recordType = document.getElementById("record-type").value;
        
        // Convert to JSON
        const data = {};
        formData.forEach((value, key) => {
            // Handle proxied checkbox
            if (key === "proxied") {
                data[key] = true;
            } 
            // Only include priority for MX records
            else if (key === "priority") {
                if (recordType === 'MX') {
                    data[key] = parseInt(value, 10);
                }
            } 
            // Handle all other fields
            else {
                data[key] = value;
            }
        });
        
        // Set proxied to false if not checked
        if (!formData.has("proxied")) {
            data.proxied = false;
        }
        
        fetch(apiEndpoints.create, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess("DNS record added successfully");
                hideAddForm();
                loadRecords();
            } else {
                showError("Failed to add DNS record: " + (data.message || data.error || "Unknown error"));
            }
        })
        .catch(error => {
            showError("Error adding DNS record: " + error.message);
        });
    }
    
    function editRecord(recordId) {
        const recordRow = document.querySelector(`tr[data-id="${recordId}"]`);
        const record = JSON.parse(recordRow.getAttribute("data-record"));
        
        document.getElementById("edit-record-id").value = record.id;
        document.getElementById("edit-record-type").value = record.type;
        document.getElementById("edit-record-name").value = record.name;
        document.getElementById("edit-record-content").value = record.content;
        document.getElementById("edit-record-ttl").value = record.ttl;
        document.getElementById("edit-record-proxied").checked = record.proxied;
        
        // Handle MX priority field
        const priorityField = document.getElementById("edit-record-priority");
        if (priorityField) {
            if (record.type === 'MX' && record.priority !== undefined) {
                priorityField.value = record.priority;
                priorityField.parentElement.style.display = 'block';
            } else {
                priorityField.value = '';
                priorityField.parentElement.style.display = 'none';
            }
        }
        
        // Show/hide fields based on record type
        const typeSelect = document.getElementById("edit-record-type");
        updateFormFields(typeSelect, 'edit-');
        
        editRecordForm.style.display = "block";
        document.getElementById("edit-record-name").focus();
    }
    
    // Function to update form fields based on record type
    function updateFormFields(selectElement, prefix = '') {
        const recordType = selectElement.value;
        const priorityField = document.getElementById(prefix + "record-priority");
        
        if (priorityField) {
            if (recordType === 'MX') {
                priorityField.parentElement.style.display = 'block';
                priorityField.required = true;
            } else {
                priorityField.parentElement.style.display = 'none';
                priorityField.required = false;
            }
        }
        
        // Proxied checkbox should be disabled for certain record types
        const proxiedField = document.getElementById(prefix + "record-proxied");
        if (proxiedField) {
            if (['MX', 'NS', 'TXT', 'SRV', 'CAA'].includes(recordType)) {
                proxiedField.checked = false;
                proxiedField.disabled = true;
                proxiedField.parentElement.classList.add('disabled');
            } else {
                proxiedField.disabled = false;
                proxiedField.parentElement.classList.remove('disabled');
            }
        }
        
        // Update content placeholder based on record type
        const contentField = document.getElementById(prefix + "record-content");
        if (contentField) {
            switch (recordType) {
                case 'A':
                    contentField.placeholder = 'e.g., 192.168.1.1';
                    break;
                case 'AAAA':
                    contentField.placeholder = 'e.g., 2001:db8::1';
                    break;
                case 'CNAME':
                    contentField.placeholder = 'e.g., example.com';
                    break;
                case 'TXT':
                    contentField.placeholder = 'e.g., v=spf1 include:_spf.example.com ~all';
                    break;
                case 'MX':
                    contentField.placeholder = 'e.g., mail.example.com';
                    break;
                case 'NS':
                    contentField.placeholder = 'e.g., ns1.example.com';
                    break;
                case 'SRV':
                    contentField.placeholder = 'e.g., 0 5 5060 sip.example.com';
                    break;
                case 'CAA':
                    contentField.placeholder = 'e.g., 0 issue letsencrypt.org';
                    break;
                default:
                    contentField.placeholder = '';
            }
        }
    }
    
    function updateRecord() {
        const form = document.getElementById("edit-dns-form");
        const formData = new FormData(form);
        formData.append("domain", domain);
        
        // Get the record type
        const recordType = document.getElementById("edit-record-type").value;
        
        // Convert to JSON
        const data = {};
        formData.forEach((value, key) => {
            // Handle proxied checkbox
            if (key === "proxied") {
                data[key] = true;
            } 
            // Only include priority for MX records
            else if (key === "priority") {
                if (recordType === 'MX') {
                    data[key] = parseInt(value, 10);
                }
            } 
            // Handle all other fields
            else {
                data[key] = value;
            }
        });
        
        // Set proxied to false if not checked
        if (!formData.has("proxied")) {
            data.proxied = false;
        }
        
        fetch(apiEndpoints.update, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess("DNS record updated successfully");
                hideEditForm();
                loadRecords();
            } else {
                showError("Failed to update DNS record: " + (data.message || data.error || "Unknown error"));
            }
        })
        .catch(error => {
            showError("Error updating DNS record: " + error.message);
        });
    }
    
    function deleteRecord(recordId) {
        if (!confirm("Are you sure you want to delete this DNS record?")) {
            return;
        }
        
        fetch(apiEndpoints.delete, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                domain: domain,
                record_id: recordId
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess("DNS record deleted successfully");
                loadRecords();
            } else {
                showError("Failed to delete DNS record: " + (data.message || data.error || "Unknown error"));
            }
        })
        .catch(error => {
            showError("Error deleting DNS record: " + error.message);
        });
    }
    
    function purgeCache() {
        if (!confirm("Are you sure you want to purge the cache for this domain?")) {
            return;
        }
        
        fetch(apiEndpoints.purge, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                domain: domain
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess("Cache purged successfully");
            } else {
                showError("Failed to purge cache: " + (data.message || data.error || "Unknown error"));
            }
        })
        .catch(error => {
            showError("Error purging cache: " + error.message);
        });
    }
    

    
    function showError(message) {
        console.error("Error:", message);
        
        // Create or update error message element
        let errorElement = document.getElementById('error-message');
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.id = 'error-message';
            errorElement.className = 'error-message';
            document.querySelector('.dns-records-container').prepend(errorElement);
        }
        
        // Check for specific error types to provide more helpful information
        let helpText = '';
        if (message.includes('401') || message.includes('Authentication')) {
            helpText = `
                <p>This could be due to one of the following reasons:</p>
                <ul>
                    <li>The API token is invalid or has expired</li>
                    <li>The API token doesn't have the required permissions</li>
                    <li>Your session has expired</li>
                </ul>
                <p>Please try refreshing the page or contact your administrator.</p>
            `;
        } else if (message.includes('404') || message.includes('not found')) {
            helpText = `
                <p>This could be due to one of the following reasons:</p>
                <ul>
                    <li>The domain is not registered in Cloudflare</li>
                    <li>The zone ID for this domain is incorrect</li>
                    <li>The domain has been removed from your Cloudflare account</li>
                </ul>
            `;
        } else if (message.includes('403') || message.includes('Permission')) {
            helpText = `
                <p>This could be due to one of the following reasons:</p>
                <ul>
                    <li>Your account doesn't have permission to manage this domain</li>
                    <li>The API token doesn't have the required permissions for this domain</li>
                </ul>
            `;
        }
        
        errorElement.innerHTML = `
            <div class="alert alert-danger">
                <strong>Error:</strong> ${message}
                ${helpText}
                <button type="button" class="close" onclick="this.parentElement.style.display='none'">&times;</button>
            </div>
        `;
    }
    
    function showSuccess(message) {
        console.log("Success:", message);
        
        // Create or update success message element
        let successElement = document.getElementById('success-message');
        if (!successElement) {
            successElement = document.createElement('div');
            successElement.id = 'success-message';
            successElement.className = 'success-message';
            document.querySelector('.dns-records-container').prepend(successElement);
        }
        
        successElement.innerHTML = `
            <div class="alert alert-success">
                <strong>Success:</strong> ${message}
                <button type="button" class="close" onclick="this.parentElement.style.display='none'">&times;</button>
            </div>
        `;
    }
</script>

<style>
    .dns-records-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .error-message,
    .success-message {
        margin-bottom: 20px;
    }
    
    .alert {
        padding: 15px;
        border-radius: 4px;
        position: relative;
    }
    
    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    
    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    
    .alert .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
        background: none;
        border: none;
        font-size: 1.5rem;
        font-weight: bold;
        color: inherit;
        opacity: 0.7;
    }
    
    .alert .close:hover {
        opacity: 1;
    }
    
    .actions-bar {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .btn {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        font-weight: 500;
        text-align: center;
    }
    
    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }
    
    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }
    
    .btn-warning {
        background-color: #ffc107;
        color: #212529;
        border: none;
    }
    
    .btn-sm {
        padding: 4px 8px;
        font-size: 0.875rem;
    }
    
    .btn-edit {
        background-color: #17a2b8;
        color: white;
    }
    
    .btn-delete {
        background-color: #dc3545;
        color: white;
    }
    
    .record-form {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 5px;
        margin-bottom: 20px;
        border: 1px solid #dee2e6;
    }
    
    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 15px;
    }
    
    .form-group {
        flex: 1;
        min-width: 200px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
    }
    
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }
    
    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .checkbox-group input {
        width: auto;
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    
    .records-table-container {
        overflow-x: auto;
    }
    
    .records-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    
    .records-table th,
    .records-table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }
    
    .records-table th {
        background-color: #f8f9fa;
        font-weight: 600;
    }
    
    .records-table tr:hover {
        background-color: #f8f9fa;
    }
    
    .loading-row td,
    .empty-row td {
        text-align: center;
        padding: 30px;
        color: #6c757d;
    }
    
    .record-actions {
        display: flex;
        gap: 5px;
    }
    
    @media (max-width: 768px) {
        .form-row {
            flex-direction: column;
        }
        
        .form-group {
            min-width: 100%;
        }
    }
</style>