[% PageVersion = 'admin/schema_compare.tt,v 4.1 2025/01/15 shanta Exp shanta - Added access control schema status' %]

<head>
    <link rel="stylesheet" href="[% c.uri_for('/static/css/themes/schema_compare.css') %]">
</head>

<div class="apiary-container">
    <header class="apiary-header">
        <h1><i class="fas fa-database"></i> Database Schema Comparison</h1>
        <div class="apiary-context">
            <span class="context-item"><strong>Site:</strong> [% site_name || 'Comserv' %]</span>
            <span class="context-item"><strong>Status:</strong> Active</span>
            <button type="button" class="refresh-btn" onclick="refreshComparison()">
                <i class="fas fa-sync-alt"></i> Refresh Comparison
            </button>
        </div>
    </header>
    <p class="intro">Compare database table schemas with their corresponding Result files to ensure synchronization during development.</p>

    <!-- Summary Statistics -->
    <div class="dashboard-stats">
        <div class="stat-card databases">
            <div class="stat-icon"><i class="fas fa-database"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.total_databases %]</div>
                <div class="stat-label">Total Databases</div>
            </div>
        </div>
        <div class="stat-card connected">
            <div class="stat-icon"><i class="fas fa-check-circle"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.connected_databases %]</div>
                <div class="stat-label">Connected</div>
            </div>
        </div>
        <div class="stat-card backends">
            <div class="stat-icon"><i class="fas fa-server"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.total_backends %]</div>
                <div class="stat-label">Total Backends</div>
            </div>
        </div>
        <div class="stat-card available">
            <div class="stat-icon"><i class="fas fa-plug"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.available_backends %]</div>
                <div class="stat-label">Available</div>
            </div>
        </div>
        <div class="stat-card tables">
            <div class="stat-icon"><i class="fas fa-table"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.total_tables %]</div>
                <div class="stat-label">Total Tables</div>
            </div>
        </div>
        <div class="stat-card results">
            <div class="stat-icon"><i class="fas fa-check-circle"></i></div>
            <div class="stat-content">
                <div class="stat-number">[% database_comparison.summary.tables_with_results %]</div>
                <div class="stat-label">With Results</div>
            </div>
        </div>
    </div>

    <!-- Access Control Schema Status -->
    [% IF access_control_status %]
        <div class="access-control-status">
            <h3><i class="fas fa-shield-alt"></i> Access Control Schema Status</h3>
            
            [% IF access_control_status.overall_status == 'ok' %]
                <div class="status-card status-ok">
                    <i class="fas fa-check-circle"></i>
                    <strong>Schema Status: OK</strong>
                    <p>Access control schema is up to date and fully functional.</p>
                </div>
            [% ELSIF access_control_status.overall_status == 'migration_available' %]
                <div class="status-card status-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Enhanced Features Available</strong>
                    <p>Optional schema enhancements are available for advanced access control features.</p>
                    <p><em>Current system continues to work normally using backward compatibility.</em></p>
                </div>
            [% ELSIF access_control_status.overall_status == 'error' %]
                <div class="status-card status-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Schema Compatibility Mode</strong>
                    <p>System is running in compatibility mode due to schema differences.</p>
                    <p><em>All functionality continues to work normally.</em></p>
                </div>
            [% END %]
            
            <!-- Detailed Status -->
            <div class="schema-details">
                <div class="table-status-grid">
                    <!-- Users Table Status -->
                    <div class="table-status-card">
                        <h4><i class="fas fa-users"></i> Users Table</h4>
                        [% IF access_control_status.users_table.exists %]
                            <div class="status-ok"><i class="fas fa-check"></i> Table exists</div>
                            [% IF access_control_status.users_table.missing_columns.size > 0 %]
                                <div class="missing-features">
                                    <strong>Optional enhancements available:</strong>
                                    <ul>
                                        [% FOREACH col IN access_control_status.users_table.missing_columns %]
                                            <li>[% col %] column</li>
                                        [% END %]
                                    </ul>
                                </div>
                            [% END %]
                        [% ELSE %]
                            <div class="status-error"><i class="fas fa-times"></i> Table not found</div>
                        [% END %]
                        
                        [% IF access_control_status.users_table.errors.size > 0 %]
                            <div class="table-errors">
                                <strong>Issues:</strong>
                                <ul>
                                    [% FOREACH error IN access_control_status.users_table.errors %]
                                        <li>[% error %]</li>
                                    [% END %]
                                </ul>
                            </div>
                        [% END %]
                    </div>
                    
                    <!-- User Site Roles Table Status -->
                    <div class="table-status-card">
                        <h4><i class="fas fa-key"></i> Site Roles Table</h4>
                        [% IF access_control_status.user_site_roles_table.exists %]
                            <div class="status-ok"><i class="fas fa-check"></i> Table exists</div>
                        [% ELSE %]
                            [% IF access_control_status.user_site_roles_table.missing_columns.0 == 'entire_table' %]
                                <div class="status-info"><i class="fas fa-info"></i> Optional table (advanced features)</div>
                            [% ELSE %]
                                <div class="status-error"><i class="fas fa-times"></i> Table not found</div>
                            [% END %]
                        [% END %]
                        
                        [% IF access_control_status.user_site_roles_table.errors.size > 0 %]
                            <div class="table-errors">
                                <strong>Issues:</strong>
                                <ul>
                                    [% FOREACH error IN access_control_status.user_site_roles_table.errors %]
                                        <li>[% error %]</li>
                                    [% END %]
                                </ul>
                            </div>
                        [% END %]
                    </div>
                </div>
                
                <!-- Recommendations -->
                [% IF access_control_status.recommendations.size > 0 %]
                    <div class="recommendations">
                        <h4><i class="fas fa-lightbulb"></i> Recommendations</h4>
                        <ul>
                            [% FOREACH rec IN access_control_status.recommendations %]
                                <li>[% rec %]</li>
                            [% END %]
                        </ul>
                    </div>
                [% END %]
                
                <!-- Migration Information -->
                [% IF access_control_status.migration_needed %]
                    <div class="migration-info">
                        <h4><i class="fas fa-arrow-up"></i> Optional Schema Enhancements</h4>
                        <p>The following enhancements can be applied to enable advanced features:</p>
                        <ul>
                            [% IF access_control_status.users_table.missing_columns.size > 0 %]
                                [% FOREACH col IN access_control_status.users_table.missing_columns %]
                                    <li>Add '[% col %]' column to users table</li>
                                [% END %]
                            [% END %]
                            [% IF access_control_status.user_site_roles_table.missing_columns.0 == 'entire_table' %]
                                <li>Create user_site_roles table for site-specific permissions</li>
                            [% END %]
                        </ul>
                        <p><strong>Note:</strong> Migration is completely optional. Current system works perfectly without these enhancements.</p>
                    </div>
                [% END %]
            </div>
        </div>
    [% END %]

    <!-- Debug Information -->
    [% IF c.session.debug_mode %]
        <div class="debug-info">
            <h5>Debug Information:</h5>
            <p><strong>Ency Status:</strong> [% database_comparison.ency.connection_status %]</p>
            <p><strong>Ency Tables:</strong> [% database_comparison.ency.table_count %]</p>
            <p><strong>Forager Status:</strong> [% database_comparison.forager.connection_status %]</p>
            <p><strong>Forager Tables:</strong> [% database_comparison.forager.table_count %]</p>
            <p><strong>Tables with Results:</strong> [% database_comparison.summary.tables_with_results %]</p>
            <p><strong>Tables without Results:</strong> [% database_comparison.summary.tables_without_results %]</p>
        </div>
    [% END %]

    <!-- Instructions -->
    <div class="instructions-info">
        <i class="fas fa-info-circle"></i>
        <strong>Instructions:</strong> 
        <ol>
            <li>Each database is compared with its corresponding Result files</li>
            <li>Click on table comparison cards to view detailed field comparisons between database and Result file</li>
            <li>Fields with differences are highlighted with <i class="fas fa-exclamation-triangle"></i> warning icons</li>
            <li>Use "To Result" buttons to sync table values to result files</li>
            <li>Use "To Table" buttons to sync result values to database tables (caution: modifies database)</li>
            <li>Use "Create" buttons for missing Result files or tables</li>
        </ol>
        
        <div class="legend" style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 4px;">
            <strong>Legend:</strong>
            <div style="display: flex; gap: 20px; margin-top: 8px; flex-wrap: wrap;">
                <div style="display: flex; align-items: center; gap: 5px;">
                    <div style="width: 20px; height: 15px; background: #007bff; border-radius: 2px;"></div>
                    <span>Table Data</span>
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    <div style="width: 20px; height: 15px; background: #6f42c1; border-radius: 2px;"></div>
                    <span>Result File Data</span>
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    <div style="width: 20px; height: 15px; background: #ffecb3; border-radius: 2px; position: relative;">
                        <i class="fas fa-exclamation-triangle" style="position: absolute; left: 2px; top: 1px; font-size: 10px; color: #ff9800;"></i>
                    </div>
                    <span>Different Values</span>
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    <div style="width: 20px; height: 15px; background: #fff3cd; border-radius: 2px;"></div>
                    <span>Missing Fields</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Multi-Backend Database Sections (only show if different from main databases) -->
    [% unique_backends = [] %]
    [% FOREACH backend_name IN database_comparison.backends.keys.sort %]
        [% backend = database_comparison.backends.$backend_name %]
        [% IF backend.available AND backend.name != 'ency' AND backend.name != 'forager' %]
            [% unique_backends.push(backend_name) %]
        [% END %]
    [% END %]
    
    [% IF unique_backends.size > 0 %]
        <div class="multi-backend-section">
            <h2><i class="fas fa-server"></i> Additional Database Backends</h2>
            <p class="section-intro">Additional database connections beyond the main ency/forager databases.</p>
            
            [% FOREACH backend_name IN unique_backends %]
                [% backend = database_comparison.backends.$backend_name %]
                [% IF backend.available AND backend.name != 'ency' AND backend.name != 'forager' %]
                <div class="schema-section backend-section">
                    <button class="section-toggle" onclick="toggleSection(this)">
                        <span>
                            <i class="fas fa-[% backend.type == 'mysql' ? 'database' : 'file-alt' %]"></i> 
                            [% backend.display_name %]
                            [% IF backend.available %]
                                <span class="status-badge connected">Connected</span>
                            [% ELSE %]
                                <span class="status-badge disconnected">Disconnected</span>
                            [% END %]
                            <span class="backend-type">[% backend.type.upper %]</span>
                            <span class="table-count">[% backend.table_count %] tables</span>
                            [% IF backend.priority < 999 %]
                                <span class="priority-badge">Priority: [% backend.priority %]</span>
                            [% END %]
                        </span>
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <div class="section-content">
                        [% IF backend.available AND backend.table_comparisons.size > 0 %]
                            <!-- Group tables by result file availability -->
                            [% tables_with_results = [] %]
                            [% tables_without_results = [] %]
                            [% FOREACH table_comparison IN backend.table_comparisons %]
                                [% IF table_comparison.has_result_file %]
                                    [% tables_with_results.push(table_comparison) %]
                                [% ELSE %]
                                    [% tables_without_results.push(table_comparison) %]
                                [% END %]
                            [% END %]
                            
                            [% IF tables_with_results.size > 0 %]
                            <div class="table-group">
                                <div class="table-group-header" onclick="toggleTableGroup(this)">
                                    <span>
                                        <i class="fas fa-check-circle"></i> Tables with Result Files
                                        <span class="group-count">[% tables_with_results.size %]</span>
                                    </span>
                                    <i class="fas fa-chevron-right group-toggle-icon"></i>
                                </div>
                                <div class="table-group-content">
                                    <div class="table-comparison-grid">
                                        [% FOREACH table_comparison IN tables_with_results %]
                                            <div class="table-comparison-card" onclick="toggleTableDetails(this)">
                                                <div class="table-card-header">
                                                    <h4>
                                                        <i class="fas fa-table"></i> [% table_comparison.table_name %]
                                                        <span class="backend-indicator">[% backend.type.upper %]</span>
                                                    </h4>
                                                    <div class="table-status">
                                                        [% field_count = table_comparison.fields.keys.size %]
                                                        [% differences_count = 0 %]
                                                        [% FOREACH field_name IN table_comparison.fields.keys %]
                                                            [% field_data = table_comparison.fields.$field_name %]
                                                            [% IF field_data.differences.size > 0 %]
                                                                [% differences_count = differences_count + 1 %]
                                                            [% END %]
                                                        [% END %]
                                                        
                                                        [% IF differences_count == 0 %]
                                                            <span class="status-ok"><i class="fas fa-check-circle"></i> Synchronized</span>
                                                        [% ELSE %]
                                                            <span class="status-warning"><i class="fas fa-exclamation-triangle"></i> [% differences_count %] differences</span>
                                                        [% END %]
                                                        <span class="field-count">[% field_count %] fields</span>
                                                    </div>
                                                    <i class="fas fa-chevron-down toggle-icon"></i>
                                                </div>
                                                
                                                <div class="table-details">
                                                    <div class="field-comparison-table">
                                                        [% IF table_comparison.has_result_file %]
                                                            <div class="result-file-info">
                                                                <strong>Result File:</strong> [% table_comparison.result_file_path.replace('^.*/', '') %]
                                                            </div>
                                                            
                                                            [% # Get field list from the fields hash %]
                                                            [% all_fields = table_comparison.fields || {} %]
                                                            
                                                            <table class="field-comparison-table">
                                                                <thead>
                                                                    <tr>
                                                                        <th class="source-column">Source</th>
                                                                        <th class="field-name-column">Field Name</th>
                                                                        <th class="data-type-column">Data Type</th>
                                                                        <th class="size-column">Size</th>
                                                                        <th class="nullable-column">Nullable</th>
                                                                        <th class="auto-increment-column">Auto Inc</th>
                                                                        <th class="default-column">Default</th>
                                                                        <th class="status-column">Status</th>
                                                                        <th class="actions-column">Actions</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    [% FOREACH field_name IN all_fields.keys.sort %]
                                                                        [% field_data = all_fields.$field_name %]
                                                                        [% db_field = field_data.table %]
                                                                        [% result_field = field_data.result %]
                                                                        [% field_has_differences = field_data.differences.size > 0 ? 1 : 0 %]
                                                                        [% field_differences = field_data.differences || [] %]
                                                                        
                                                                        [% # Field header row (spans all columns) %]
                                                                        <tr class="field-header-row">
                                                                            <td colspan="9" class="field-header">
                                                                                <strong>[% field_name %]</strong>
                                                                                [% IF !db_field %]
                                                                                    <span class="missing-indicator">(Missing in Table)</span>
                                                                                [% ELSIF !result_field %]
                                                                                    <span class="missing-indicator">(Missing in Result)</span>
                                                                                [% END %]
                                                                            </td>
                                                                        </tr>
                                                                        
                                                                        [% # Table row %]
                                                                        [% IF db_field %]
                                                                            [% # Check for differences %]
                                                                            [% data_type_diff = result_field AND (db_field.data_type != result_field.data_type) %]
                                                                            [% size_diff = result_field AND (db_field.size != result_field.size) %]
                                                                            [% nullable_diff = result_field AND (db_field.is_nullable != result_field.is_nullable) %]
                                                                            [% auto_inc_diff = result_field AND (db_field.is_auto_increment != result_field.is_auto_increment) %]
                                                                            [% default_diff = result_field AND (db_field.default_value != result_field.default_value) %]
                                                                            [% has_differences = !result_field OR data_type_diff OR size_diff OR nullable_diff OR auto_inc_diff OR default_diff %]
                                                                            
                                                                            <tr class="table-row[% has_differences ? ' has-differences' : '' %]">
                                                                                <td class="source-column"><strong>Table</strong></td>
                                                                                <td class="field-name-column">[% field_name %]</td>
                                                                                <td class="data-type-column[% data_type_diff ? ' field-different' : '' %]">[% db_field.data_type || '' %]</td>
                                                                                <td class="size-column[% size_diff ? ' field-different' : '' %]">[% db_field.size || '' %]</td>
                                                                                <td class="nullable-column[% nullable_diff ? ' field-different' : '' %]">[% db_field.is_nullable ? 'YES' : 'NO' %]</td>
                                                                                <td class="auto-increment-column[% auto_inc_diff ? ' field-different' : '' %]">[% db_field.is_auto_increment ? 'YES' : 'NO' %]</td>
                                                                                <td class="default-column[% default_diff ? ' field-different' : '' %]">[% db_field.default_value || '' %]</td>
                                                                                <td class="status-column">
                                                                                    [% IF !result_field %]
                                                                                        <span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing in Result</span>
                                                                                    [% ELSIF has_differences %]
                                                                                        <span class="status-different"><i class="fas fa-exclamation-circle"></i> Different</span>
                                                                                    [% ELSE %]
                                                                                        <span class="status-same"><i class="fas fa-check-circle"></i> Match</span>
                                                                                    [% END %]
                                                                                </td>
                                                                                <td class="actions-column">
                                                                                    [% IF !result_field %]
                                                                                        <button class="add-to-result-btn" onclick="addFieldToResult('[% table_comparison.table_name | html %]', '[% backend.name %]', '[% field_name | html %]');" title="Add field to result file">
                                                                                            <i class="fas fa-plus"></i> Add to Result
                                                                                        </button>
                                                                                    [% ELSIF has_differences %]
                                                                                        <button class="sync-to-result-btn" onclick="syncFieldToResult('[% table_comparison.table_name | html %]', '[% backend.name %]', '[% field_name | html %]');" title="Sync database field to result file">
                                                                                            <i class="fas fa-arrow-right"></i> To Result
                                                                                        </button>
                                                                                    [% END %]
                                                                                </td>
                                                                            </tr>
                                                                        [% END %]
                                                                        
                                                                        [% # Result row %]
                                                                        [% IF result_field %]
                                                                            [% # Check for differences %]
                                                                            [% data_type_diff = db_field AND (result_field.data_type != db_field.data_type) %]
                                                                            [% size_diff = db_field AND (result_field.size != db_field.size) %]
                                                                            [% nullable_diff = db_field AND (result_field.is_nullable != db_field.is_nullable) %]
                                                                            [% auto_inc_diff = db_field AND (result_field.is_auto_increment != db_field.is_auto_increment) %]
                                                                            [% default_diff = db_field AND (result_field.default_value != db_field.default_value) %]
                                                                            [% has_differences = !db_field OR data_type_diff OR size_diff OR nullable_diff OR auto_inc_diff OR default_diff %]
                                                                            
                                                                            <tr class="result-row[% has_differences ? ' has-differences' : '' %]">
                                                                                <td class="source-column"><strong>Result</strong></td>
                                                                                <td class="field-name-column">[% field_name %]</td>
                                                                                <td class="data-type-column[% data_type_diff ? ' field-different' : '' %]">[% result_field.data_type || '' %]</td>
                                                                                <td class="size-column[% size_diff ? ' field-different' : '' %]">[% result_field.size || '' %]</td>
                                                                                <td class="nullable-column[% nullable_diff ? ' field-different' : '' %]">[% result_field.is_nullable ? 'YES' : 'NO' %]</td>
                                                                                <td class="auto-increment-column[% auto_inc_diff ? ' field-different' : '' %]">[% result_field.is_auto_increment ? 'YES' : 'NO' %]</td>
                                                                                <td class="default-column[% default_diff ? ' field-different' : '' %]">[% result_field.default_value || '' %]</td>
                                                                                <td class="status-column">
                                                                                    [% IF !db_field %]
                                                                                        <span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing in Table</span>
                                                                                    [% ELSIF has_differences %]
                                                                                        <span class="status-different"><i class="fas fa-exclamation-circle"></i> Different</span>
                                                                                    [% ELSE %]
                                                                                        <span class="status-same"><i class="fas fa-check-circle"></i> Match</span>
                                                                                    [% END %]
                                                                                </td>
                                                                                <td class="actions-column">
                                                                                    [% IF !db_field %]
                                                                                        <button class="add-to-table-btn" onclick="addFieldToTable('[% table_comparison.table_name | html %]', '[% backend.name %]', '[% field_name | html %]');" title="Add field to database table">
                                                                                            <i class="fas fa-plus"></i> Add to Table
                                                                                        </button>
                                                                                    [% ELSIF has_differences %]
                                                                                        <button class="sync-to-table-btn" onclick="syncFieldToTable('[% table_comparison.table_name | html %]', '[% backend.name %]', '[% field_name | html %]');" title="Sync result field to database table">
                                                                                            <i class="fas fa-arrow-left"></i> To Table
                                                                                        </button>
                                                                                    [% END %]
                                                                                </td>
                                                                            </tr>
                                                                        [% END %]
                                                                        
                                                                        [% # Spacer row %]
                                                                        <tr class="field-spacer">
                                                                            <td colspan="9"></td>
                                                                        </tr>
                                                                    [% END %]
                                                                    [% # Debug: Show if no fields were found %]
                                                                    [% IF all_fields.keys.size == 0 %]
                                                                        <tr>
                                                                            <td colspan="9" class="no-fields-message">
                                                                                <em>No fields found. Debug: Fields hash size = [% all_fields.keys.size || 0 %], Has result file = [% table_comparison.has_result_file ? 'YES' : 'NO' %]</em>
                                                                            </td>
                                                                        </tr>
                                                                    [% END %]
                                                                </tbody>
                                                            </table>
                                                            
                                                            [% IF differences_count > 0 %]
                                                                <div class="bulk-sync-actions">
                                                                    <button class="sync-all-to-result-btn" onclick="syncAllToResult('[% table_comparison.table_name | html %]', '[% backend.name %]');">
                                                                        <i class="fas fa-arrow-right"></i> Sync All to Result
                                                                    </button>
                                                                    <button class="sync-all-to-table-btn" onclick="syncAllToTable('[% table_comparison.table_name | html %]', '[% backend.name %]');">
                                                                        <i class="fas fa-arrow-left"></i> Sync All to Table
                                                                    </button>
                                                                </div>
                                                            [% END %]
                                                            
                                                        [% ELSE %]
                                                            <div class="no-result-file">
                                                                <p><i class="fas fa-exclamation-triangle"></i> No Result file found for this table.</p>
                                                                <button class="create-result-btn" onclick="createResultFromTable('[% table_comparison.table_name | html %]', '[% backend.name %]');">
                                                                    <i class="fas fa-plus"></i> Create Result File
                                                                </button>
                                                            </div>
                                                        [% END %]
                                                    </div>
                                                </div>
                                            </div>
                                        [% END %]
                                    </div>
                                </div>
                            </div>
                            [% END %]
                            
                            [% IF tables_without_results.size > 0 %]
                            <div class="table-group">
                                <div class="table-group-header" onclick="toggleTableGroup(this)">
                                    <span>
                                        <i class="fas fa-exclamation-triangle"></i> Tables without Result Files
                                        <span class="group-count">[% tables_without_results.size %]</span>
                                    </span>
                                    <i class="fas fa-chevron-right group-toggle-icon"></i>
                                </div>
                                <div class="table-group-content">
                                    <div class="table-comparison-grid">
                                        [% FOREACH table_comparison IN tables_without_results %]
                                            <div class="table-comparison-card missing-result">
                                                <div class="table-card-header">
                                                    <h4>
                                                        <i class="fas fa-table"></i> [% table_comparison.table_name %]
                                                        <span class="backend-indicator">[% backend.type.upper %]</span>
                                                    </h4>
                                                    <div class="table-status">
                                                        <span class="status-missing"><i class="fas fa-times"></i> No Result File</span>
                                                    </div>
                                                </div>
                                            </div>
                                        [% END %]
                                    </div>
                                </div>
                            </div>
                            [% END %]
                            
                        [% ELSIF backend.available %]
                            <div class="no-tables-message">
                                <i class="fas fa-info-circle"></i>
                                <p>No tables found in this backend.</p>
                            </div>
                        [% ELSE %]
                            <div class="backend-error-message">
                                <i class="fas fa-exclamation-triangle"></i>
                                <p><strong>Backend Unavailable:</strong> [% backend.error || 'Connection failed' %]</p>
                            </div>
                        [% END %]
                    </div>
                </div>
                [% END %]
            [% END %]
        </div>
    [% END %]

    <!-- Database Sections -->
    [% IF database_comparison.ency.connection_status == 'connected' OR database_comparison.forager.connection_status == 'connected' %]
        
        <!-- Ency Database Section -->
        [% IF database_comparison.ency.connection_status == 'connected' %]
        <div class="schema-section">
            <button class="section-toggle" onclick="toggleSection(this)">
                <span>
                    <i class="fas fa-database"></i> [% database_comparison.ency.display_name %]
                    <span class="status-badge connected">Connected</span>
                    <span class="table-count">[% database_comparison.ency.table_count %] tables</span>
                </span>
                <i class="fas fa-chevron-right"></i>
            </button>
            <div class="section-content">
                <!-- All Tables -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-table"></i> All Tables
                            <span class="group-count">[% database_comparison.ency.table_comparisons.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% FOREACH table_comparison IN database_comparison.ency.table_comparisons %]
                        <div class="table-comparison-card" data-table="[% table_comparison.table_name | html %]" data-database="ency">
                            <div class="table-comparison-header" onclick="toggleTableComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-table"></i>
                                    <h4>[% table_comparison.table_name | html %]</h4>
                                    [% IF table_comparison.sync_status == 'synchronized' %]
                                        <span class="difference-indicator same" title="Synchronized"></span>
                                    [% ELSE %]
                                        <span class="difference-indicator different" title="Needs sync"></span>
                                    [% END %]
                                </div>
                                <div class="table-comparison-actions">
                                    [% IF table_comparison.sync_status == 'needs_sync' %]
                                        <button class="update-table-btn" onclick="updateTableSchema('[% table_comparison.table_name | html %]', 'ency'); event.stopPropagation();" title="Update table to match result file">
                                            <i class="fas fa-database"></i> Update Table
                                        </button>
                                        <button class="update-result-btn" onclick="updateResultFile('[% table_comparison.table_name | html %]', 'ency'); event.stopPropagation();" title="Update result file to match table">
                                            <i class="fas fa-file-code"></i> Update Result
                                        </button>
                                    [% END %]
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading field comparison...</span>
                                </div>
                            </div>
                        </div>
                    [% END %]
                    </div>
                </div>
                
                <!-- Group 2: Result files without Tables -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-file-alt"></i> Result Files without Tables
                            <span class="group-count">[% database_comparison.ency.results_without_tables.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% IF database_comparison.ency.results_without_tables.size > 0 %]
                        [% FOREACH result_file IN database_comparison.ency.results_without_tables %]
                        <div class="table-comparison-card" data-result="[% result_file.result_name | html %]" data-database="ency">
                            <div class="table-comparison-header" onclick="toggleResultComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-file-alt"></i>
                                    <h4>[% result_file.result_name | html %] (Result only)</h4>
                                    <span class="difference-indicator missing" title="No corresponding table"></span>
                                </div>
                                <div class="table-comparison-actions">
                                    <button class="create-btn" onclick="createTableFromResult('[% result_file.result_name | html %]', 'ency'); event.stopPropagation();">
                                        <i class="fas fa-plus"></i> Create Table
                                    </button>
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading result file fields...</span>
                                </div>
                            </div>
                        </div>
                        [% END %]
                    [% ELSE %]
                        <div class="empty-message">
                            <i class="fas fa-info-circle"></i>
                            <p>No result files found without corresponding database tables.</p>
                        </div>
                    [% END %]
                    </div>
                </div>
                
                <!-- Group 3: Tables without Result files -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-plus-square"></i> Tables without Result Files
                            <span class="group-count">[% tables_without_results.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% IF tables_without_results.size > 0 %]
                        [% FOREACH table_comparison IN tables_without_results %]
                        <div class="table-comparison-card" data-table="[% table_comparison.table_name | html %]" data-database="ency">
                            <div class="table-comparison-header" onclick="toggleTableComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-table"></i>
                                    <h4>[% table_comparison.table_name | html %] (Table only)</h4>
                                    <span class="difference-indicator missing" title="No result file"></span>
                                </div>
                                <div class="table-comparison-actions">
                                    <button class="create-btn" onclick="createResultFromTable('[% table_comparison.table_name | html %]', 'ency'); event.stopPropagation();">
                                        <i class="fas fa-plus"></i> Create Result
                                    </button>
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading table schema...</span>
                                </div>
                            </div>
                        </div>
                        [% END %]
                    [% ELSE %]
                        <div class="empty-message">
                            <i class="fas fa-info-circle"></i>
                            <p>All database tables have corresponding result files.</p>
                        </div>
                    [% END %]
                    </div>
                </div>
            </div>
        </div>
        [% END %]
        
        <!-- Forager Database Section -->
        [% IF database_comparison.forager.connection_status == 'connected' %]
        <div class="schema-section">
            <button class="section-toggle" onclick="toggleSection(this)">
                <span>
                    <i class="fas fa-database"></i> [% database_comparison.forager.display_name %]
                    <span class="status-badge connected">Connected</span>
                    <span class="table-count">[% database_comparison.forager.table_count %] tables</span>
                </span>
                <i class="fas fa-chevron-right"></i>
            </button>
            <div class="section-content">
                <!-- All Tables -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-table"></i> All Tables
                            <span class="group-count">[% database_comparison.forager.table_comparisons.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% FOREACH table_comparison IN database_comparison.forager.table_comparisons %]
                        <div class="table-comparison-card" data-table="[% table_comparison.table_name | html %]" data-database="forager">
                            <div class="table-comparison-header" onclick="toggleTableComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-table"></i>
                                    <h4>[% table_comparison.table_name | html %]</h4>
                                    [% IF table_comparison.sync_status == 'synchronized' %]
                                        <span class="difference-indicator same" title="Synchronized"></span>
                                    [% ELSE %]
                                        <span class="difference-indicator different" title="Needs sync"></span>
                                    [% END %]
                                </div>
                                <div class="table-comparison-actions">
                                    [% IF table_comparison.sync_status == 'needs_sync' %]
                                        <button class="update-table-btn" onclick="updateTableSchema('[% table_comparison.table_name | html %]', 'forager'); event.stopPropagation();" title="Update table to match result file">
                                            <i class="fas fa-database"></i> Update Table
                                        </button>
                                        <button class="update-result-btn" onclick="updateResultFile('[% table_comparison.table_name | html %]', 'forager'); event.stopPropagation();" title="Update result file to match table">
                                            <i class="fas fa-file-code"></i> Update Result
                                        </button>
                                    [% END %]
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading field comparison...</span>
                                </div>
                            </div>
                        </div>
                    [% END %]
                    </div>
                </div>
                
                <!-- Group 2: Result files without Tables -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-file-alt"></i> Result Files without Tables
                            <span class="group-count">[% database_comparison.forager.results_without_tables.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% IF database_comparison.forager.results_without_tables.size > 0 %]
                        [% FOREACH result_file IN database_comparison.forager.results_without_tables %]
                        <div class="table-comparison-card" data-result="[% result_file.result_name | html %]" data-database="forager">
                            <div class="table-comparison-header" onclick="toggleResultComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-file-alt"></i>
                                    <h4>[% result_file.result_name | html %] (Result only)</h4>
                                    <span class="difference-indicator missing" title="No corresponding table"></span>
                                </div>
                                <div class="table-comparison-actions">
                                    <button class="create-btn" onclick="createTableFromResult('[% result_file.result_name | html %]', 'forager'); event.stopPropagation();">
                                        <i class="fas fa-plus"></i> Create Table
                                    </button>
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading result file fields...</span>
                                </div>
                            </div>
                        </div>
                        [% END %]
                    [% ELSE %]
                        <div class="empty-message">
                            <i class="fas fa-info-circle"></i>
                            <p>No result files found without corresponding database tables.</p>
                        </div>
                    [% END %]
                    </div>
                </div>
                
                <!-- Group 3: Tables without Result files -->
                <div class="table-group">
                    <div class="table-group-header" onclick="toggleTableGroup(this)">
                        <span>
                            <i class="fas fa-plus-square"></i> Tables without Result Files
                            <span class="group-count">[% tables_without_results.size %]</span>
                        </span>
                        <i class="fas fa-chevron-right group-toggle-icon"></i>
                    </div>
                    <div class="table-group-content">
                    [% IF tables_without_results.size > 0 %]
                        [% FOREACH table_comparison IN tables_without_results %]
                        <div class="table-comparison-card" data-table="[% table_comparison.table_name | html %]" data-database="forager">
                            <div class="table-comparison-header" onclick="toggleTableComparison(this)">
                                <div class="table-comparison-title">
                                    <i class="fas fa-table"></i>
                                    <h4>[% table_comparison.table_name | html %] (Table only)</h4>
                                    <span class="difference-indicator missing" title="No result file"></span>
                                </div>
                                <div class="table-comparison-actions">
                                    <button class="create-btn" onclick="createResultFromTable('[% table_comparison.table_name | html %]', 'forager'); event.stopPropagation();">
                                        <i class="fas fa-plus"></i> Create Result
                                    </button>
                                    <i class="fas fa-chevron-right expand-icon"></i>
                                </div>
                            </div>
                            <div class="field-comparison-content">
                                <div class="loading-indicator">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading table schema...</span>
                                </div>
                            </div>
                        </div>
                        [% END %]
                    [% ELSE %]
                        <div class="empty-message">
                            <i class="fas fa-info-circle"></i>
                            <p>All database tables have corresponding result files.</p>
                        </div>
                    [% END %]
                    </div>
                </div>
            </div>
        </div>
        [% END %]

    [% ELSE %]
        <!-- Connection Error Display -->
        <div class="error-message">
            <i class="fas fa-exclamation-triangle"></i>
            <h4>Database Connection Required</h4>
            <p>Both Ency and Forager databases must be connected to perform schema comparison.</p>
            [% IF database_comparison.ency.connection_status != 'connected' %]
                <p><strong>Ency Status:</strong> [% database_comparison.ency.connection_status %]</p>
                [% IF database_comparison.ency.error %]
                    <p><strong>Ency Error:</strong> [% database_comparison.ency.error | html %]</p>
                [% END %]
            [% END %]
            [% IF database_comparison.forager.connection_status != 'connected' %]
                <p><strong>Forager Status:</strong> [% database_comparison.forager.connection_status %]</p>
                [% IF database_comparison.forager.error %]
                    <p><strong>Forager Error:</strong> [% database_comparison.forager.error | html %]</p>
                [% END %]
            [% END %]
            <small><strong>Note:</strong> Please ensure db_config.json exists and contains valid database connection settings.</small>
        </div>
    [% END %]
</div>

<script>
// Function to refresh the comparison data
function refreshComparison() {
    location.reload();
}

// Function to toggle database sections
function toggleSection(button) {
    const section = button.closest('.schema-section');
    const content = section.querySelector('.section-content');
    const icon = button.querySelector('.fas.fa-chevron-down, .fas.fa-chevron-right');
    
    if (content.classList.contains('expanded')) {
        content.classList.remove('expanded');
        content.style.display = 'none';
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-right');
    } else {
        content.classList.add('expanded');
        content.style.display = 'block';
        icon.classList.remove('fa-chevron-right');
        icon.classList.add('fa-chevron-down');
    }
}

// Function to toggle table groups (Tables with Results, Result Files without Tables, etc.)
function toggleTableGroup(header) {
    const group = header.closest('.table-group');
    const content = group.querySelector('.table-group-content');
    const icon = header.querySelector('.group-toggle-icon');
    
    if (content.classList.contains('expanded')) {
        content.classList.remove('expanded');
        content.style.display = 'none';
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-right');
    } else {
        content.classList.add('expanded');
        content.style.display = 'block';
        icon.classList.remove('fa-chevron-right');
        icon.classList.add('fa-chevron-down');
    }
}

// Function to toggle table comparison details
function toggleTableComparison(header) {
    const card = header.closest('.table-comparison-card');
    const content = card.querySelector('.field-comparison-content');
    const icon = header.querySelector('.expand-icon');
    
    if (content.classList.contains('expanded')) {
        content.classList.remove('expanded');
        content.style.display = 'none';
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-right');
        card.classList.remove('expanded');
    } else {
        content.classList.add('expanded');
        content.style.display = 'block';
        icon.classList.remove('fa-chevron-right');
        icon.classList.add('fa-chevron-down');
        card.classList.add('expanded');
        
        // Load field comparison if not already loaded
        const tableName = card.dataset.table;
        const database = card.dataset.database;
        if (content.querySelector('.loading-indicator')) {
            loadFieldComparison(content, tableName, database);
        }
    }
}

// Function to toggle result-only comparison details
function toggleResultComparison(header) {
    const card = header.closest('.table-comparison-card');
    const content = card.querySelector('.field-comparison-content');
    const icon = header.querySelector('.expand-icon');
    
    if (content.classList.contains('expanded')) {
        content.classList.remove('expanded');
        content.style.display = 'none';
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-right');
        card.classList.remove('expanded');
    } else {
        content.classList.add('expanded');
        content.style.display = 'block';
        icon.classList.remove('fa-chevron-right');
        icon.classList.add('fa-chevron-down');
        card.classList.add('expanded');
        
        // Load result file fields if not already loaded
        const resultName = card.dataset.result;
        const database = card.dataset.database;
        if (content.querySelector('.loading-indicator')) {
            loadResultFileFields(content, resultName, database);
        }
    }
}

// Load field comparison data via AJAX
function loadFieldComparison(container, tableName, database) {
    // First try to get the basic table schema (this was working)
    fetch('[% c.uri_for("/admin/get_table_schema") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + '&database=' + encodeURIComponent(database)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Check if this table has a result file by looking at the card's structure
            const card = container.closest('.table-comparison-card') || container.closest('.feature-card');
            let titleElement = null;
            let hasResultFile = false;
            
            if (card) {
                // For tables with result files (feature-card structure)
                titleElement = card.querySelector('.feature-header h4');
                if (titleElement) {
                    hasResultFile = true; // feature-card means it has a result file
                } else {
                    // For tables without result files (table-comparison-card structure)
                    titleElement = card.querySelector('.table-comparison-title h4');
                    hasResultFile = titleElement ? !titleElement.textContent.includes('(Table only)') : false;
                }
            }
            
            const titleText = titleElement ? titleElement.textContent : 'NO TITLE FOUND';
            
            console.log('Card found:', card ? card.className : 'NO CARD FOUND');
            console.log('Title element found:', titleElement ? 'YES' : 'NO');
            console.log('Title text:', titleText);
            console.log('Has result file:', hasResultFile);
            
            if (hasResultFile) {
                // Try to get detailed field comparison for tables with result files
                console.log('Table has result file, calling loadDetailedFieldComparison for:', tableName, database);
                loadDetailedFieldComparison(container, tableName, database, data.schema);
            } else {
                // For tables without result files, just show the table schema
                console.log('Table has no result file, showing basic schema for:', tableName, database);
                container.innerHTML = buildTableSchemaHTML(data.schema, tableName, database);
            }
        } else {
            container.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-triangle"></i> Error loading table schema: ' + (data.error || 'Unknown error') + '</div>';
        }
    })
    .catch(error => {
        container.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-triangle"></i> Failed to load table schema. Please try again.</div>';
    });
}

// Load detailed field comparison (new functionality)
function loadDetailedFieldComparison(container, tableName, database, tableSchema) {
    console.log('loadDetailedFieldComparison called with:', { tableName, database });
    
    fetch('[% c.uri_for("/admin/get_field_comparison") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + '&database=' + encodeURIComponent(database)
    })
    .then(response => {
        console.log('Field comparison response status:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Field comparison response data:', data);
        if (data.success) {
            // Log debug information
            if (data.debug) {
                console.log('Field comparison debug:', data.debug);
            }
            console.log('Building field comparison HTML...');
            container.innerHTML = buildFieldComparisonHTML(data.comparison, tableName, database, data.debug_mode);
        } else {
            // Fallback to basic table schema display if field comparison fails
            console.log('Field comparison failed, falling back to basic schema display:', data.error);
            container.innerHTML = buildTableSchemaHTML(tableSchema, tableName, database);
        }
    })
    .catch(error => {
        // Fallback to basic table schema display if field comparison fails
        console.log('Field comparison request failed, falling back to basic schema display:', error);
        container.innerHTML = buildTableSchemaHTML(tableSchema, tableName, database);
    });
}

// Load result file fields data via AJAX
function loadResultFileFields(container, resultName, database) {
    fetch('[% c.uri_for("/admin/get_result_file_fields") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'result_name=' + encodeURIComponent(resultName) + '&database=' + encodeURIComponent(database)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            container.innerHTML = buildResultFileFieldsHTML(data.fields, resultName, database);
        } else {
            container.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-triangle"></i> Error loading result file fields: ' + (data.error || 'Unknown error') + '</div>';
        }
    })
    .catch(error => {
        container.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-triangle"></i> Failed to load result file fields. Please try again.</div>';
    });
}

// Build HTML for result file fields display
function buildResultFileFieldsHTML(fields, resultName, database) {
    let html = '<div class="result-file-fields-display">';
    html += '<h5>Result File Fields: ' + resultName + ' (' + database + ')</h5>';
    
    if (fields && Object.keys(fields).length > 0) {
        html += '<table class="result-fields-table">';
        html += '<thead>';
        html += '<tr>';
        html += '<th>Field Name</th>';
        html += '<th>Data Type</th>';
        html += '<th>Size</th>';
        html += '<th>Nullable</th>';
        html += '<th>Auto Increment</th>';
        html += '<th>Default</th>';
        html += '<th>Actions</th>';
        html += '</tr>';
        html += '</thead>';
        html += '<tbody>';
        
        for (const [fieldName, fieldData] of Object.entries(fields)) {
            html += '<tr>';
            html += '<td><strong>' + fieldName + '</strong></td>';
            html += '<td>' + formatDataType(fieldData.data_type) + '</td>';
            html += '<td>' + formatSize(fieldData.data_type, fieldData.size) + '</td>';
            html += '<td>' + formatFieldValue(fieldData.is_nullable) + '</td>';
            html += '<td>' + formatFieldValue(fieldData.is_auto_increment) + '</td>';
            html += '<td>' + formatFieldValue(fieldData.default_value) + '</td>';
            html += '<td>';
            html += '<span class="field-info">Field from Result</span>';
            html += '</td>';
            html += '</tr>';
        }
        
        html += '</tbody>';
        html += '</table>';
        
        // Add action buttons
        html += '<div class="field-actions">';
        html += '<button class="create-btn" onclick="createTableFromResult(\'' + resultName + '\', \'' + database + '\');">';
        html += '<i class="fas fa-plus"></i> Create Table with All Fields</button>';
        html += '</div>';
        
    } else {
        html += '<p>No field information available in this result file.</p>';
    }
    
    html += '</div>';
    return html;
}

// Build HTML for field comparison display
function buildFieldComparisonHTML(comparison, tableName, database, debugMode) {
    console.log('buildFieldComparisonHTML called with:', { tableName, database, debugMode });
    console.log('Comparison data:', comparison);
    console.log('Has result file:', comparison.has_result_file);
    console.log('Fields count:', comparison.fields ? Object.keys(comparison.fields).length : 0);
    
    let html = '<div class="field-comparison-display">';
    html += '<h5>Field Comparison: ' + tableName + ' (' + database + ')</h5>';
    
    // Add debug information only if debug mode is enabled
    if (debugMode) {
        html += '<div class="debug-info" style="background: #f0f0f0; padding: 10px; margin: 10px 0; font-size: 12px;">';
        html += '<strong>Debug Info:</strong><br>';
        html += 'Has Result File: ' + (comparison.has_result_file ? 'YES' : 'NO') + '<br>';
        html += 'Result File Path: ' + (comparison.result_file_path || 'NOT FOUND') + '<br>';
        html += 'Fields Count: ' + (comparison.fields ? Object.keys(comparison.fields).length : 0) + '<br>';
        
        // Add detailed field debugging
        if (comparison.fields) {
            html += '<strong>Field Details:</strong><br>';
            for (const [fieldName, fieldData] of Object.entries(comparison.fields)) {
                html += '&nbsp;&nbsp;Field: ' + fieldName + '<br>';
                html += '&nbsp;&nbsp;&nbsp;&nbsp;Has Table Data: ' + (fieldData.table ? 'YES' : 'NO') + '<br>';
                html += '&nbsp;&nbsp;&nbsp;&nbsp;Has Result Data: ' + (fieldData.result ? 'YES' : 'NO') + '<br>';
                if (fieldData.table) {
                    html += '&nbsp;&nbsp;&nbsp;&nbsp;Table Type: ' + (fieldData.table.data_type || 'undefined') + '<br>';
                }
                if (fieldData.result) {
                    html += '&nbsp;&nbsp;&nbsp;&nbsp;Result Type: ' + (fieldData.result.data_type || 'undefined') + '<br>';
                }
                html += '<br>';
            }
        }
        
        html += '</div>';
    }
    
    if (!comparison.has_result_file) {
        html += '<div class="no-result-file">';
        html += '<p><i class="fas fa-exclamation-triangle"></i> No Result file found for this table.</p>';
        html += '<button class="create-btn" onclick="createResultFromTable(\'' + tableName + '\', \'' + database + '\');">';
        html += '<i class="fas fa-plus"></i> Create Result File</button>';
        html += '</div>';
        html += '</div>';
        return html;
    }
    
    if (comparison.fields && Object.keys(comparison.fields).length > 0) {
        html += '<table class="field-comparison-table">';
        html += '<thead>';
        html += '<tr>';
        html += '<th class="source-column">Source</th>';
        html += '<th class="field-name-column">Field Name</th>';
        html += '<th class="data-type-column">Data Type</th>';
        html += '<th class="size-column">Size</th>';
        html += '<th class="nullable-column">Nullable</th>';
        html += '<th class="auto-increment-column">Auto Inc</th>';
        html += '<th class="default-column">Default</th>';
        html += '<th class="status-column">Status</th>';
        html += '<th class="actions-column">Actions</th>';
        html += '</tr>';
        html += '</thead>';
        html += '<tbody>';
        
        for (const [fieldName, fieldData] of Object.entries(comparison.fields)) {
            const tableField = fieldData.table;
            const resultField = fieldData.result;
            const tableMissing = !tableField;
            const resultMissing = !resultField;
            
            // Field header row (spans all columns)
            html += '<tr class="field-header-row">';
            html += '<td colspan="9" class="field-header">';
            html += '<strong>' + fieldName + '</strong>';
            if (tableMissing) {
                html += ' <span class="missing-indicator">(Missing in Table)</span>';
            } else if (resultMissing) {
                html += ' <span class="missing-indicator">(Missing in Result)</span>';
            }
            html += '</td>';
            html += '</tr>';
            
            // Table row
            if (!tableMissing) {
                const hasDifferences = !resultMissing && (
                    formatDataType(tableField.data_type) !== formatDataType(resultField.data_type) ||
                    formatSize(tableField.data_type, tableField.size) !== formatSize(resultField.data_type, resultField.size) ||
                    tableField.is_nullable !== resultField.is_nullable ||
                    tableField.is_auto_increment !== resultField.is_auto_increment ||
                    tableField.default_value !== resultField.default_value
                );
                
                html += '<tr class="table-row' + (hasDifferences ? ' has-differences' : '') + '">';
                html += '<td class="source-column"><strong>Table</strong></td>';
                html += '<td class="field-name-column">' + fieldName + '</td>';
                
                // Add difference highlighting to individual cells
                const dataTypeDiff = !resultMissing && formatDataType(tableField.data_type) !== formatDataType(resultField.data_type);
                const sizeDiff = !resultMissing && formatSize(tableField.data_type, tableField.size) !== formatSize(resultField.data_type, resultField.size);
                const nullableDiff = !resultMissing && tableField.is_nullable !== resultField.is_nullable;
                const autoIncDiff = !resultMissing && tableField.is_auto_increment !== resultField.is_auto_increment;
                const defaultDiff = !resultMissing && tableField.default_value !== resultField.default_value;
                
                html += '<td class="data-type-column' + (dataTypeDiff ? ' field-different' : '') + '">' + formatDataType(tableField.data_type) + '</td>';
                html += '<td class="size-column' + (sizeDiff ? ' field-different' : '') + '">' + formatSize(tableField.data_type, tableField.size) + '</td>';
                html += '<td class="nullable-column' + (nullableDiff ? ' field-different' : '') + '">' + formatFieldValue(tableField.is_nullable) + '</td>';
                html += '<td class="auto-increment-column' + (autoIncDiff ? ' field-different' : '') + '">' + formatFieldValue(tableField.is_auto_increment) + '</td>';
                html += '<td class="default-column' + (defaultDiff ? ' field-different' : '') + '">' + formatFieldValue(tableField.default_value) + '</td>';
                html += '<td class="status-column">';
                if (resultMissing) {
                    html += '<span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing in Result</span>';
                } else if (hasDifferences) {
                    html += '<span class="status-different"><i class="fas fa-exclamation-circle"></i> Different</span>';
                } else {
                    html += '<span class="status-match"><i class="fas fa-check-circle"></i> Match</span>';
                }
                html += '</td>';
                html += '<td class="actions-column">';
                // Add sync to result button if there are differences and result exists
                if (hasDifferences) {
                    html += '<button class="sync-to-result-btn" onclick="syncTableToResult(\'' + tableName + '\', \'' + database + '\', \'' + fieldName + '\');">';
                    html += '<i class="fas fa-arrow-right"></i> To Result</button>';
                }
                html += '</td>';
                html += '</tr>';
            } else {
                html += '<tr class="table-row missing-row">';
                html += '<td class="source-column"><strong>Table</strong></td>';
                html += '<td colspan="6" class="missing-field">Field not found in table</td>';
                html += '<td class="status-column"><span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing</span></td>';
                html += '<td class="actions-column">';
                if (!resultMissing) {
                    html += '<button class="create-field-btn" onclick="createFieldInTable(\'' + tableName + '\', \'' + database + '\', \'' + fieldName + '\');">';
                    html += '<i class="fas fa-plus"></i> Add to Table</button>';
                }
                html += '</td>';
                html += '</tr>';
            }
            
            // Result row
            if (!resultMissing) {
                const hasDifferences = !tableMissing && (
                    formatDataType(tableField.data_type) !== formatDataType(resultField.data_type) ||
                    formatSize(tableField.data_type, tableField.size) !== formatSize(resultField.data_type, resultField.size) ||
                    tableField.is_nullable !== resultField.is_nullable ||
                    tableField.is_auto_increment !== resultField.is_auto_increment ||
                    tableField.default_value !== resultField.default_value
                );
                
                html += '<tr class="result-row' + (hasDifferences ? ' has-differences' : '') + '">';
                html += '<td class="source-column"><strong>Result</strong></td>';
                html += '<td class="field-name-column">' + fieldName + '</td>';
                
                // Add difference highlighting to individual cells
                const dataTypeDiff = !tableMissing && formatDataType(tableField.data_type) !== formatDataType(resultField.data_type);
                const sizeDiff = !tableMissing && formatSize(tableField.data_type, tableField.size) !== formatSize(resultField.data_type, resultField.size);
                const nullableDiff = !tableMissing && tableField.is_nullable !== resultField.is_nullable;
                const autoIncDiff = !tableMissing && tableField.is_auto_increment !== resultField.is_auto_increment;
                const defaultDiff = !tableMissing && tableField.default_value !== resultField.default_value;
                
                html += '<td class="data-type-column' + (dataTypeDiff ? ' field-different' : '') + '">' + formatDataType(resultField.data_type) + '</td>';
                html += '<td class="size-column' + (sizeDiff ? ' field-different' : '') + '">' + formatSize(resultField.data_type, resultField.size) + '</td>';
                html += '<td class="nullable-column' + (nullableDiff ? ' field-different' : '') + '">' + formatFieldValue(resultField.is_nullable) + '</td>';
                html += '<td class="auto-increment-column' + (autoIncDiff ? ' field-different' : '') + '">' + formatFieldValue(resultField.is_auto_increment) + '</td>';
                html += '<td class="default-column' + (defaultDiff ? ' field-different' : '') + '">' + formatFieldValue(resultField.default_value) + '</td>';
                html += '<td class="status-column">';
                if (tableMissing) {
                    html += '<span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing in Table</span>';
                } else if (hasDifferences) {
                    html += '<span class="status-different"><i class="fas fa-exclamation-circle"></i> Different</span>';
                } else {
                    html += '<span class="status-match"><i class="fas fa-check-circle"></i> Match</span>';
                }
                html += '</td>';
                html += '<td class="actions-column">';
                // Add sync to table button if there are differences
                if (hasDifferences) {
                    html += '<button class="sync-to-table-btn" onclick="syncResultToTable(\'' + tableName + '\', \'' + database + '\', \'' + fieldName + '\');">';
                    html += '<i class="fas fa-arrow-left"></i> To Table</button>';
                }
                html += '</td>';
                html += '</tr>';
            } else {
                html += '<tr class="result-row missing-row">';
                html += '<td class="source-column"><strong>Result</strong></td>';
                html += '<td colspan="6" class="missing-field">Field not found in result file</td>';
                html += '<td class="status-column"><span class="status-missing"><i class="fas fa-exclamation-triangle"></i> Missing</span></td>';
                html += '<td class="actions-column">';
                if (!tableMissing) {
                    html += '<button class="create-field-btn" onclick="createFieldInResult(\'' + tableName + '\', \'' + database + '\', \'' + fieldName + '\');">';
                    html += '<i class="fas fa-plus"></i> Add to Result</button>';
                }
                html += '</td>';
                html += '</tr>';
            }
            
            // Add spacing row between fields
            html += '<tr class="field-spacer"><td colspan="9"></td></tr>';
        }
        
        html += '</tbody>';
        html += '</table>';
        
        // Add action buttons
        html += '<div class="field-actions">';
        html += '<button class="sync-all-btn" onclick="syncAllFields(\'' + tableName + '\', \'' + database + '\');">';
        html += '<i class="fas fa-sync"></i> Sync All Selected Fields</button>';
        html += '<button class="refresh-btn" onclick="refreshFieldComparison(\'' + tableName + '\', \'' + database + '\');">';
        html += '<i class="fas fa-refresh"></i> Refresh</button>';
        html += '</div>';
        
    } else {
        html += '<p>No field information available.</p>';
    }
    
    html += '</div>';
    return html;
}

// Build HTML for basic table schema display (fallback)
function buildTableSchemaHTML(schema, tableName, database) {
    let html = '<div class="table-schema-display">';
    html += '<h5>Table Schema: ' + tableName + ' (' + database + ')</h5>';
    
    if (schema && schema.columns && Object.keys(schema.columns).length > 0) {
        html += '<table class="schema-table">';
        html += '<thead>';
        html += '<tr>';
        html += '<th>Column Name</th>';
        html += '<th>Data Type</th>';
        html += '<th>Size</th>';
        html += '<th>Nullable</th>';
        html += '<th>Default</th>';
        html += '<th>Auto Increment</th>';
        html += '</tr>';
        html += '</thead>';
        html += '<tbody>';
        
        for (const [columnName, columnInfo] of Object.entries(schema.columns)) {
            html += '<tr>';
            html += '<td><strong>' + columnName + '</strong></td>';
            html += '<td>' + (columnInfo.data_type || 'N/A') + '</td>';
            html += '<td>' + (columnInfo.size || 'N/A') + '</td>';
            html += '<td>' + (columnInfo.is_nullable ? 'YES' : 'NO') + '</td>';
            html += '<td>' + (columnInfo.default_value || 'NULL') + '</td>';
            html += '<td>' + (columnInfo.is_auto_increment ? 'YES' : 'NO') + '</td>';
            html += '</tr>';
        }
        
        html += '</tbody>';
        html += '</table>';
        
        // Show primary keys if available
        if (schema.primary_keys && schema.primary_keys.length > 0) {
            html += '<div class="primary-keys">';
            html += '<strong>Primary Keys:</strong> ' + schema.primary_keys.join(', ');
            html += '</div>';
        }
        
        // Show relationships if available
        if (schema.relationships && schema.relationships.length > 0) {
            html += '<div class="relationships">';
            html += '<strong>Relationships:</strong>';
            html += '<ul>';
            for (const rel of schema.relationships) {
                html += '<li>' + rel.type + ': ' + rel.accessor + ' -> ' + rel.related_class + '</li>';
            }
            html += '</ul>';
            html += '</div>';
        }
    } else {
        html += '<p>No schema information available.</p>';
    }
    
    html += '</div>';
    return html;
}

// Format property names for display
function formatPropertyName(prop) {
    const names = {
        'data_type': 'Data Type',
        'size': 'Size',
        'is_nullable': 'Nullable',
        'default_value': 'Default Value',
        'is_auto_increment': 'Auto Increment',
        'is_primary_key': 'Primary Key'
    };
    return names[prop] || prop;
}

// Format field values for display
function formatFieldValue(value) {
    if (value === null || value === undefined) {
        return '<em>NULL</em>';
    }
    if (typeof value === 'boolean') {
        return value ? 'YES' : 'NO';
    }
    if (value === '') {
        return '<em>Empty</em>';
    }
    return String(value);
}

// Sync all selected fields for a table
function syncAllFields(tableName, database) {
    const selectedFields = {};
    const radios = document.querySelectorAll('input[type="radio"]:checked');
    
    radios.forEach(radio => {
        const [fieldName, property] = radio.name.split('_');
        if (!selectedFields[fieldName]) {
            selectedFields[fieldName] = {};
        }
        selectedFields[fieldName][property] = radio.value;
    });
    
    if (Object.keys(selectedFields).length === 0) {
        alert('No fields selected for synchronization.');
        return;
    }
    
    if (!confirm('Are you sure you want to sync the selected fields for table "' + tableName + '"?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Syncing...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_fields") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database,
            selected_fields: selectedFields
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Fields synchronized successfully!');
            // Reload the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error synchronizing fields: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize fields. Please try again.');
    });
}

// Sync a single field property
function syncSingleField(tableName, database, fieldName, property) {
    const radio = document.querySelector('input[name="' + fieldName + '_' + property + '"]:checked');
    if (!radio) {
        alert('No value selected for this field property.');
        return;
    }
    
    const selectedFields = {};
    selectedFields[fieldName] = {};
    selectedFields[fieldName][property] = radio.value;
    
    if (!confirm('Are you sure you want to sync ' + property + ' for field "' + fieldName + '"?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_fields") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database,
            selected_fields: selectedFields
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field synchronized successfully!');
            // Reload the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error synchronizing field: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize field. Please try again.');
    });
}

// Refresh field comparison for a specific table
function refreshFieldComparison(tableName, database) {
    const card = document.querySelector('.table-comparison-card[data-table="' + tableName + '"][data-database="' + database + '"]');
    if (card) {
        const content = card.querySelector('.field-comparison-content');
        content.innerHTML = '<div class="loading-indicator"><i class="fas fa-spinner fa-spin"></i><span>Loading field comparison...</span></div>';
        loadFieldComparison(content, tableName, database);
    }
}

// Batch sync all fields for a table
function batchSyncTable(tableName) {
    if (!confirm('Are you sure you want to batch sync all fields for table "' + tableName + '"? This will use the table structure as the source.')) {
        return;
    }
    
    fetch('[% c.uri_for("/admin/batch_sync_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Table synchronized successfully!');
            refreshComparison();
        } else {
            alert('Error synchronizing table: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        alert('Failed to synchronize table. Please try again.');
    });
}

// Create table from result
function createTableFromResult(resultName) {
    if (!confirm('Are you sure you want to create a table from result "' + resultName + '"?')) {
        return;
    }
    
    fetch('[% c.uri_for("/admin/create_table_from_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            result_name: resultName
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Table created successfully!');
            refreshComparison();
        } else {
            alert('Error creating table: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        alert('Failed to create table. Please try again.');
    });
}

// Create result from table
function createResultFromTable(tableName, database) {
    console.log('createResultFromTable called with:', { tableName, database });
    
    if (!confirm('Are you sure you want to create a result from table "' + tableName + '" in database "' + database + '"?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
    button.disabled = true;
    
    const requestData = {
        table_name: tableName,
        database: database
    };
    
    console.log('Sending request data:', requestData);
    
    fetch('[% c.uri_for("/admin/create_result_from_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => {
        return response.json();
    })
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Result file created successfully!\n\nFile: ' + data.result_file_path + '\n\nThe application will restart to load the new file. Please refresh the page in a moment.');
            // Wait for the app to restart, then refresh the page
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        } else {
            alert('Error creating result: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Request failed:', error);
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to create result. Please try again.');
    });
}

// Sync table field to result file
function syncTableToResult(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to sync table field "' + fieldName + '" to the result file?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_table_to_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field synchronized successfully from table to result!');
            // Refresh the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error synchronizing field: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize field. Please try again.');
    });
}

// Sync result field to table
function syncResultToTable(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to sync result field "' + fieldName + '" to the table? This will modify the database schema.')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_result_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field synchronized successfully from result to table!');
            // Refresh the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error synchronizing field: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize field. Please try again.');
    });
}

// Sync individual field to result
function syncFieldToResult(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to sync database field "' + fieldName + '" to the result file?')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_field_to_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field synchronized successfully to result file!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            if (data.error_type === 'result_file_not_found') {
                const createFile = confirm('Result file not found for this table.\n\n' + data.suggestion + '\n\nWould you like to create the result file now?');
                if (createFile) {
                    createResultFromTable(data.table_name, data.database);
                }
            } else {
                alert('Error synchronizing field: ' + (data.error || 'Unknown error'));
            }
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize field. Please try again.');
    });
}

// Sync individual field to table
function syncFieldToTable(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to sync result field "' + fieldName + '" to the database table? This will modify the database schema.')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_field_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field synchronized successfully to database table!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            if (data.error_type === 'result_file_not_found') {
                const createFile = confirm('Result file not found for this table.\n\n' + data.suggestion + '\n\nWould you like to create the result file now?');
                if (createFile) {
                    createResultFromTable(data.table_name, data.database);
                }
            } else {
                alert('Error synchronizing field: ' + (data.error || 'Unknown error'));
            }
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize field. Please try again.');
    });
}

// Add field to result file
function addFieldToResult(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to add field "' + fieldName + '" to the result file?')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/add_field_to_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field added successfully to result file!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            alert('Error adding field: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to add field. Please try again.');
    });
}

// Add field to database table
function addFieldToTable(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to add field "' + fieldName + '" to the database table? This will modify the database schema.')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/add_field_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            field_name: fieldName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field added successfully to database table!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            alert('Error adding field: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to add field. Please try again.');
    });
}

// Sync all fields to result
function syncAllToResult(tableName, database) {
    if (!confirm('Are you sure you want to sync all different fields from the database table to the result file?')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Syncing...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_all_to_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('All fields synchronized successfully to result file!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            alert('Error synchronizing fields: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize fields. Please try again.');
    });
}

// Sync all fields to table
function syncAllToTable(tableName, database) {
    if (!confirm('Are you sure you want to sync all different fields from the result file to the database table? This will modify the database schema.')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Syncing...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_all_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('All fields synchronized successfully to database table!');
            location.reload(); // Refresh the page to show updated comparison
        } else {
            alert('Error synchronizing fields: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to synchronize fields. Please try again.');
    });
}

// Parse data type to extract base type and size
function parseDataType(dataType) {
    if (!dataType) return { baseType: 'N/A', size: null };
    
    // Handle cases like varchar(255), int(11), etc.
    const match = dataType.match(/^(\w+)(?:\((\d+)\))?/);
    if (match) {
        return {
            baseType: match[1],
            size: match[2] ? parseInt(match[2]) : null
        };
    }
    
    return { baseType: dataType, size: null };
}

// Format data type for display (base type only)
function formatDataType(dataType) {
    const parsed = parseDataType(dataType);
    return parsed.baseType;
}

// Format size for display, combining explicit size with parsed size
function formatSize(dataType, explicitSize) {
    const parsed = parseDataType(dataType);
    
    // If we have a size from parsing the data type, use that
    if (parsed.size) {
        return parsed.size.toString();
    }
    
    // Otherwise use the explicit size if available
    if (explicitSize && explicitSize !== null && explicitSize !== undefined) {
        return explicitSize.toString();
    }
    
    return '<em>N/A</em>';
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Add event listeners for radio button changes
    document.addEventListener('change', function(e) {
        if (e.target.type === 'radio' && e.target.classList.contains('field-checkbox')) {
            // Update visual state when radio buttons change
            const container = e.target.closest('.field-value-container');
            const fieldValue = container.querySelector('.field-value');
            
            // Remove checked state from all values in this row
            const row = e.target.closest('tr');
            row.querySelectorAll('.field-value').forEach(val => {
                val.classList.remove('selected');
            });
            
            // Add checked state to selected value
            if (e.target.checked) {
                fieldValue.classList.add('selected');
            }
        }
    });
});

// Sync table functionality
function syncTable(tableName, database) {
    if (!confirm('Are you sure you want to sync table "' + tableName + '" with its Result file? This will update the database schema.')) {
        return;
    }
    
    // Show loading indicator
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = 'Syncing...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/sync_result_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database,
            sync_all: true
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Successfully synced table: ' + data.message);
            // Refresh the comparison to show updated data
            location.reload();
        } else {
            alert('Sync failed: ' + data.error);
        }
    })
    .catch(error => {
        alert('Sync request failed: ' + error);
    })
    .finally(() => {
        button.textContent = originalText;
        button.disabled = false;
    });
}

function createTableFromResult(resultName, database) {
    if (!confirm('Are you sure you want to create table "' + resultName + '" from the Result file? This will modify the database schema.')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/create_table_from_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            result_name: resultName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Table "' + resultName + '" created successfully!');
            // Refresh the comparison to show the new table
            refreshComparison();
        } else {
            alert('Error creating table: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to create table. Please try again.');
        console.error('Error:', error);
    });
}

function createResultFromTable(tableName, database) {
    if (!confirm('Are you sure you want to create a Result file for table "' + tableName + '"? This will create a new .pm file.')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/create_result_from_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            table_name: tableName,
            database: database
        })
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Result file for table "' + tableName + '" created successfully!');
            // Refresh the comparison to show the new result file
            refreshComparison();
        } else {
            alert('Error creating result file: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to create result file. Please try again.');
        console.error('Error:', error);
    });
}

// Create field in result file (add missing field from table to result)
function createFieldInResult(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to add field "' + fieldName + '" from table "' + tableName + '" to the result file?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/add_field_to_result") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + 
              '&database=' + encodeURIComponent(database) + 
              '&field_name=' + encodeURIComponent(fieldName)
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field "' + fieldName + '" added to result file successfully!');
            // Refresh the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error adding field to result: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to add field to result. Please try again.');
    });
}

// Create field in table (add missing field from result to table)
function createFieldInTable(tableName, database, fieldName) {
    if (!confirm('Are you sure you want to add field "' + fieldName + '" from result file to table "' + tableName + '"? This will modify the database schema.')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/add_field_to_table") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + 
              '&database=' + encodeURIComponent(database) + 
              '&field_name=' + encodeURIComponent(fieldName)
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            alert('Field "' + fieldName + '" added to table successfully!');
            // Refresh the field comparison
            refreshFieldComparison(tableName, database);
        } else {
            alert('Error adding field to table: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to add field to table. Please try again.');
    });
}

// Update table schema to match result file
function updateTableSchema(tableName, database) {
    if (!confirm('Are you sure you want to update table "' + tableName + '" to match its result file? This will modify the database schema.')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/update_table_schema") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + '&database_name=' + encodeURIComponent(database)
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            let message = 'Table schema update prepared successfully!\n\n';
            message += 'Generated ' + data.alter_statements.length + ' ALTER statements:\n\n';
            data.alter_statements.forEach((stmt, index) => {
                message += (index + 1) + '. ' + stmt + '\n';
            });
            message += '\nWould you like to execute these statements?';
            
            if (confirm(message)) {
                executeAlterStatements(tableName, database, data.alter_statements);
            }
        } else {
            alert('Error preparing table update: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to prepare table update. Please try again.');
    });
}

// Update result file to match table schema
function updateResultFile(tableName, database) {
    if (!confirm('Are you sure you want to update the result file for "' + tableName + '" to match the table schema?')) {
        return;
    }
    
    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
    button.disabled = true;
    
    fetch('[% c.uri_for("/admin/update_result_file") %]', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'table_name=' + encodeURIComponent(tableName) + '&database_name=' + encodeURIComponent(database)
    })
    .then(response => response.json())
    .then(data => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        if (data.success) {
            // Show the generated result file content in a modal or new window
            const newWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
            newWindow.document.write('<html><head><title>Generated Result File: ' + tableName + '</title></head><body>');
            newWindow.document.write('<h2>Generated Result File Content</h2>');
            newWindow.document.write('<p><strong>Table:</strong> ' + tableName + ' (' + database + ')</p>');
            newWindow.document.write('<pre style="background: #f5f5f5; padding: 10px; border: 1px solid #ddd; overflow: auto;">' + 
                                   data.result_file_content.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</pre>');
            newWindow.document.write('<p><em>Copy this content to your result file manually.</em></p>');
            newWindow.document.write('</body></html>');
            newWindow.document.close();
            
            alert('Result file content generated successfully! Check the new window for the content.');
        } else {
            alert('Error generating result file: ' + (data.error || 'Unknown error'));
        }
    })
    .catch(error => {
        button.innerHTML = originalText;
        button.disabled = false;
        alert('Failed to generate result file. Please try again.');
    });
}

// Show detailed field comparison
function showFieldDetails(tableName, database) {
    // Toggle the field comparison content
    const card = document.querySelector('.table-comparison-card[data-table="' + tableName + '"][data-database="' + database + '"]') ||
                 document.querySelector('.feature-card[data-table="' + tableName + '"][data-database="' + database + '"]');
    
    if (card) {
        const header = card.querySelector('.feature-header') || card.querySelector('.table-comparison-header');
        if (header) {
            toggleTableComparison(header);
        }
    }
}

// Execute ALTER statements (helper function)
function executeAlterStatements(tableName, database, statements) {
    // This would need a separate endpoint to actually execute the statements
    // For now, just show them to the user
    let message = 'Execute these ALTER statements manually in your database:\n\n';
    statements.forEach((stmt, index) => {
        message += (index + 1) + '. ' + stmt + ';\n';
    });
    
    // Create a modal or new window to show the statements
    const newWindow = window.open('', '_blank', 'width=800,height=400,scrollbars=yes');
    newWindow.document.write('<html><head><title>ALTER Statements for ' + tableName + '</title></head><body>');
    newWindow.document.write('<h2>ALTER Statements for Table: ' + tableName + '</h2>');
    newWindow.document.write('<p><strong>Database:</strong> ' + database + '</p>');
    newWindow.document.write('<p><strong>Instructions:</strong> Execute these statements in your MySQL client:</p>');
    newWindow.document.write('<pre style="background: #f5f5f5; padding: 10px; border: 1px solid #ddd; overflow: auto;">');
    statements.forEach((stmt, index) => {
        newWindow.document.write((index + 1) + '. ' + stmt + ';\n');
    });
    newWindow.document.write('</pre>');
    newWindow.document.write('<p><em>After executing these statements, refresh the schema comparison page.</em></p>');
    newWindow.document.write('</body></html>');
    newWindow.document.close();
}

// Build HTML for detailed field comparison display
function buildFieldComparisonHTML(fields, tableName, database, resultFilePath) {
    let html = '<div class="field-comparison-display">';
    html += '<div class="comparison-header">';
    html += '<h5>Field Comparison: ' + tableName + ' (' + database + ')</h5>';
    if (resultFilePath) {
        html += '<p class="result-file-path"><i class="fas fa-file-code"></i> ' + resultFilePath + '</p>';
    }
    html += '</div>';
    
    if (!fields || Object.keys(fields).length === 0) {
        html += '<div class="no-fields"><i class="fas fa-info-circle"></i> No fields found for comparison.</div>';
        html += '</div>';
        return html;
    }
    
    html += '<div class="fields-container">';
    
    // Sort fields by name
    const sortedFields = Object.keys(fields).sort();
    
    for (const fieldName of sortedFields) {
        const field = fields[fieldName];
        const hasDifferences = field.differences && field.differences.length > 0;
        
        html += '<div class="field-comparison-item ' + (hasDifferences ? 'has-differences' : 'synchronized') + '">';
        html += '<div class="field-header">';
        html += '<h6><i class="fas fa-columns"></i> ' + fieldName;
        
        if (hasDifferences) {
            html += ' <span class="difference-count">(' + field.differences.length + ' difference' + (field.differences.length > 1 ? 's' : '') + ')</span>';
        } else {
            html += ' <span class="synchronized-badge"><i class="fas fa-check"></i> Synchronized</span>';
        }
        
        html += '</h6>';
        html += '</div>';
        
        if (hasDifferences) {
            html += '<div class="field-differences">';
            
            for (const diff of field.differences) {
                html += '<div class="difference-item">';
                html += '<div class="difference-attribute"><strong>' + formatPropertyName(diff.attribute) + '</strong></div>';
                html += '<div class="difference-values">';
                html += '<div class="table-value">Table: <code>' + diff.table_value + '</code></div>';
                html += '<div class="result-value">Result: <code>' + diff.result_value + '</code></div>';
                html += '</div>';
                html += '</div>';
            }
            
            html += '</div>';
        }
        
        html += '</div>';
    }
    
    html += '</div>';
    html += '</div>';
    
    return html;
}
</script>
