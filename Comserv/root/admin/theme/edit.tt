[% META title = 'Edit Theme' %]

<h1>Edit Theme: [% theme.name %]</h1>

[% IF message %]
<div class="success">
    [% message %]
</div>
[% END %]

[% IF error %]
<div class="warning">
    [% error %]
</div>
[% END %]

<div class="theme-editor-container">
    <div class="theme-form">
        <form action="/themeeditor/update_theme" method="post">
            <input type="hidden" name="theme_name" value="[% theme_name %]">
            
            <div class="form-group">
                <label for="theme_display_name">Theme Display Name:</label>
                <input type="text" id="theme_display_name" name="theme_display_name" value="[% theme.name %]" required>
            </div>
            
            <div class="form-group">
                <label for="theme_description">Theme Description:</label>
                <textarea id="theme_description" name="theme_description" rows="3" required>[% theme.description %]</textarea>
            </div>
            
            <h2>Theme Variables</h2>
            
            <div class="variables-grid">
                [% FOREACH var IN theme.variables.keys.sort %]
                <div class="form-group">
                    <label for="var_[% var %]">[% var %]:</label>
                    [% IF var.match('color') || var.match('-bg$') || var.match('-border$') %]
                    <div class="color-input-group">
                        <input type="color" id="color_picker_[% var %]"
                               value="[%
                                   SET color_value = theme.variables.item(var);
                                   IF color_value.match('^#');
                                       color_value;
                                   ELSIF color_value == 'black';
                                       '#000000';
                                   ELSIF color_value == 'white';
                                       '#ffffff';
                                   ELSIF color_value == 'red';
                                       '#ff0000';
                                   ELSIF color_value == 'green';
                                       '#008000';
                                   ELSIF color_value == 'blue';
                                       '#0000ff';
                                   ELSE;
                                       '#cccccc';
                                   END;
                               %]"
                               onchange="updateColorInput('[% var %]', this.value)">
                        <input type="text" id="var_[% var %]" name="var_[% var %]" value="[% theme.variables.item(var) %]">
                    </div>
                    [% ELSE %]
                    <input type="text" id="var_[% var %]" name="var_[% var %]" value="[% theme.variables.item(var) %]">
                    [% END %]
                </div>
                [% END %]
            </div>

            <h2>Common Elements</h2>

            <div class="common-elements-section">
                <div class="element-tabs">
                    <button type="button" class="tab-button active" data-tab="background">Background</button>
                    <button type="button" class="tab-button" data-tab="menu">Menu</button>
                    <button type="button" class="tab-button" data-tab="buttons">Buttons</button>
                    <button type="button" class="tab-button" data-tab="text">Text</button>
                </div>

                <div class="tab-content" id="background-tab" style="display: block;">
                    <h3>Background Settings</h3>
                    <div class="form-group">
                        <label for="background_image">Background Image:</label>
                        <div class="file-input-group">
                            <input type="text" id="background_image" name="special_style_body_background_image"
                               value="[%
                                   SET bg_image = '';
                                   IF theme.special_styles.defined && theme.special_styles.item('body').defined;
                                       IF theme.special_styles.item('body').match('background-image:\\s*url\\((.+?)\\)');
                                           SET bg_image = theme.special_styles.item('body').replace('.*background-image:\\s*url\\((.+?)\\).*', '$1');
                                           # Remove quotes if present
                                           SET bg_image = bg_image.replace('^[\'"]', '').replace('[\'"]$', '');
                                       END;
                                   END;
                                   bg_image;
                               %]"
                               placeholder="e.g., ../images/BMaster/honey2.jpg">
                        <button type="button" id="browse_images" class="button button-secondary">Browse Images</button>
                    </div>
                    <p class="help-text">Enter the path to the background image relative to the CSS file.</p>

                    <div id="image_preview" class="image-preview">
                        <h4>Image Preview</h4>
                        <div id="image_preview_container" class="image-preview-container">
                            [% IF bg_image && bg_image != '' %]
                            <img src="/static/[% bg_image.replace('^\.\./', '') %]" alt="Background Image Preview" id="preview_image">
                            [% ELSE %]
                            <p>No image selected</p>
                            [% END %]
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="additional_body_styles">Additional Background Styles:</label>
                    <textarea id="additional_body_styles" name="special_style_body_additional" rows="3"
                              placeholder="e.g., background-repeat: no-repeat; background-size: cover;">[% theme.special_styles.defined && theme.special_styles.item('body').defined ? theme.special_styles.item('body').replace('background-image: url\\(.+?\\);', '') : '' %]</textarea>
                    <p class="help-text">Enter additional CSS styles for the background.</p>
                </div>
                </div>

                <div class="tab-content" id="menu-tab" style="display: none;">
                    <h3>Menu Settings</h3>
                    <div class="form-group">
                        <label for="menu_background">Menu Background Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-bg"
                                   value="[% theme.variables.item('nav-bg').match('^#') ? theme.variables.item('nav-bg') : '#cccccc' %]"
                                   onchange="updateColorInput('nav-bg', this.value)">
                            <input type="text" id="var_nav-bg" name="var_nav-bg" value="[% theme.variables.item('nav-bg') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="menu_text">Menu Text Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-text"
                                   value="[% theme.variables.item('nav-text').match('^#') ? theme.variables.item('nav-text') : '#000000' %]"
                                   onchange="updateColorInput('nav-text', this.value)">
                            <input type="text" id="var_nav-text" name="var_nav-text" value="[% theme.variables.item('nav-text') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="menu_hover">Menu Hover Background:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-hover-bg"
                                   value="[% theme.variables.item('nav-hover-bg').match('^#') ? theme.variables.item('nav-hover-bg') : '#e0e0e0' %]"
                                   onchange="updateColorInput('nav-hover-bg', this.value)">
                            <input type="text" id="var_nav-hover-bg" name="var_nav-hover-bg" value="[% theme.variables.item('nav-hover-bg') %]">
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="buttons-tab" style="display: none;">
                    <h3>Button Settings</h3>
                    <div class="form-group">
                        <label for="button_bg">Button Background Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-bg"
                                   value="[% theme.variables.item('button-bg').match('^#') ? theme.variables.item('button-bg') : '#cccccc' %]"
                                   onchange="updateColorInput('button-bg', this.value)">
                            <input type="text" id="var_button-bg" name="var_button-bg" value="[% theme.variables.item('button-bg') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_text">Button Text Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-text"
                                   value="[% theme.variables.item('button-text').match('^#') ? theme.variables.item('button-text') : '#000000' %]"
                                   onchange="updateColorInput('button-text', this.value)">
                            <input type="text" id="var_button-text" name="var_button-text" value="[% theme.variables.item('button-text') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_border">Button Border Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-border"
                                   value="[% theme.variables.item('button-border').match('^#') ? theme.variables.item('button-border') : '#cccccc' %]"
                                   onchange="updateColorInput('button-border', this.value)">
                            <input type="text" id="var_button-border" name="var_button-border" value="[% theme.variables.item('button-border') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_hover_bg">Button Hover Background:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-hover-bg"
                                   value="[% theme.variables.item('button-hover-bg').match('^#') ? theme.variables.item('button-hover-bg') : '#e0e0e0' %]"
                                   onchange="updateColorInput('button-hover-bg', this.value)">
                            <input type="text" id="var_button-hover-bg" name="var_button-hover-bg" value="[% theme.variables.item('button-hover-bg') %]">
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="text-tab" style="display: none;">
                    <h3>Text Settings</h3>

                    <div class="text-settings-section">
                        <h4>General Text</h4>
                        <div class="form-group">
                            <label for="text_color">Text Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_text-color"
                                       value="[% theme.variables.item('text-color').match('^#') ? theme.variables.item('text-color') : '#000000' %]"
                                       onchange="updateColorInput('text-color', this.value)">
                                <input type="text" id="var_text-color" name="var_text-color" value="[% theme.variables.item('text-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="body_font">Body Font:</label>
                            <select id="var_body-font" name="var_body-font" onchange="updateLivePreview()" class="font-select">
                                <option value="Arial, sans-serif" style="font-family: Arial, sans-serif" [% IF theme.variables.item('body-font') == 'Arial, sans-serif' %]selected[% END %]>Arial</option>
                                <option value="'Helvetica Neue', Helvetica, Arial, sans-serif" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif" [% IF theme.variables.item('body-font') == "'Helvetica Neue', Helvetica, Arial, sans-serif" %]selected[% END %]>Helvetica</option>
                                <option value="'Times New Roman', Times, serif" style="font-family: 'Times New Roman', Times, serif" [% IF theme.variables.item('body-font') == "'Times New Roman', Times, serif" %]selected[% END %]>Times New Roman</option>
                                <option value="Georgia, serif" style="font-family: Georgia, serif" [% IF theme.variables.item('body-font') == "Georgia, serif" %]selected[% END %]>Georgia</option>
                                <option value="'Courier New', Courier, monospace" style="font-family: 'Courier New', Courier, monospace" [% IF theme.variables.item('body-font') == "'Courier New', Courier, monospace" %]selected[% END %]>Courier New</option>
                                <option value="Verdana, Geneva, sans-serif" style="font-family: Verdana, Geneva, sans-serif" [% IF theme.variables.item('body-font') == "Verdana, Geneva, sans-serif" %]selected[% END %]>Verdana</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="font_size_base">Base Font Size:</label>
                            <select id="var_font-size-base" name="var_font-size-base" onchange="updateLivePreview()">
                                <option value="12px" [% IF theme.variables.item('font-size-base') == '12px' %]selected[% END %]>Small (12px)</option>
                                <option value="14px" [% IF theme.variables.item('font-size-base') == '14px' %]selected[% END %]>Medium (14px)</option>
                                <option value="16px" [% IF theme.variables.item('font-size-base') == '16px' %]selected[% END %]>Large (16px)</option>
                                <option value="18px" [% IF theme.variables.item('font-size-base') == '18px' %]selected[% END %]>Extra Large (18px)</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-settings-section">
                        <h4>Site Name</h4>
                        <div class="form-group">
                            <label for="site_name_color">Site Name Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_site-name-color"
                                       value="[% theme.variables.item('site-name-color').match('^#') ? theme.variables.item('site-name-color') : theme.variables.item('text-color') %]"
                                       onchange="updateColorInput('site-name-color', this.value)">
                                <input type="text" id="var_site-name-color" name="var_site-name-color"
                                       value="[% theme.variables.item('site-name-color') || theme.variables.item('text-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="site_name_font">Site Name Font:</label>
                            <select id="var_site-name-font" name="var_site-name-font" onchange="updateLivePreview()" class="font-select">
                                <option value="Arial, sans-serif" style="font-family: Arial, sans-serif" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == 'Arial, sans-serif' %]selected[% END %]>Arial</option>
                                <option value="'Helvetica Neue', Helvetica, Arial, sans-serif" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == "'Helvetica Neue', Helvetica, Arial, sans-serif" %]selected[% END %]>Helvetica</option>
                                <option value="'Times New Roman', Times, serif" style="font-family: 'Times New Roman', Times, serif" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == "'Times New Roman', Times, serif" %]selected[% END %]>Times New Roman</option>
                                <option value="Georgia, serif" style="font-family: Georgia, serif" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == "Georgia, serif" %]selected[% END %]>Georgia</option>
                                <option value="'Courier New', Courier, monospace" style="font-family: 'Courier New', Courier, monospace" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == "'Courier New', Courier, monospace" %]selected[% END %]>Courier New</option>
                                <option value="Verdana, Geneva, sans-serif" style="font-family: Verdana, Geneva, sans-serif" [% IF (theme.variables.item('site-name-font') || theme.variables.item('header-font')) == "Verdana, Geneva, sans-serif" %]selected[% END %]>Verdana</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="site_name_size">Site Name Size:</label>
                            <select id="var_site-name-size" name="var_site-name-size" onchange="updateLivePreview()">
                                <option value="24px" [% IF theme.variables.item('site-name-size') == '24px' %]selected[% END %]>Small (24px)</option>
                                <option value="28px" [% IF theme.variables.item('site-name-size') == '28px' %]selected[% END %]>Medium (28px)</option>
                                <option value="32px" [% IF theme.variables.item('site-name-size') == '32px' %]selected[% END %]>Large (32px)</option>
                                <option value="36px" [% IF theme.variables.item('site-name-size') == '36px' %]selected[% END %]>Extra Large (36px)</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="site_name_weight">Site Name Weight:</label>
                            <select id="var_site-name-weight" name="var_site-name-weight" onchange="updateLivePreview()">
                                <option value="normal" [% IF theme.variables.item('site-name-weight') == 'normal' %]selected[% END %]>Normal</option>
                                <option value="bold" [% IF theme.variables.item('site-name-weight') == 'bold' %]selected[% END %]>Bold</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-settings-section">
                        <h4>Headers</h4>
                        <div class="form-group">
                            <label for="header_font">Header Font:</label>
                            <select id="var_header-font" name="var_header-font" onchange="updateLivePreview()" class="font-select">
                                <option value="Arial, sans-serif" style="font-family: Arial, sans-serif" [% IF theme.variables.item('header-font') == 'Arial, sans-serif' %]selected[% END %]>Arial</option>
                                <option value="'Helvetica Neue', Helvetica, Arial, sans-serif" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif" [% IF theme.variables.item('header-font') == "'Helvetica Neue', Helvetica, Arial, sans-serif" %]selected[% END %]>Helvetica</option>
                                <option value="'Times New Roman', Times, serif" style="font-family: 'Times New Roman', Times, serif" [% IF theme.variables.item('header-font') == "'Times New Roman', Times, serif" %]selected[% END %]>Times New Roman</option>
                                <option value="Georgia, serif" style="font-family: Georgia, serif" [% IF theme.variables.item('header-font') == "Georgia, serif" %]selected[% END %]>Georgia</option>
                                <option value="'Courier New', Courier, monospace" style="font-family: 'Courier New', Courier, monospace" [% IF theme.variables.item('header-font') == "'Courier New', Courier, monospace" %]selected[% END %]>Courier New</option>
                                <option value="Verdana, Geneva, sans-serif" style="font-family: Verdana, Geneva, sans-serif" [% IF theme.variables.item('header-font') == "Verdana, Geneva, sans-serif" %]selected[% END %]>Verdana</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="header_color">Header Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_header-color"
                                       value="[% theme.variables.item('header-color').match('^#') ? theme.variables.item('header-color') : theme.variables.item('text-color') %]"
                                       onchange="updateColorInput('header-color', this.value)">
                                <input type="text" id="var_header-color" name="var_header-color"
                                       value="[% theme.variables.item('header-color') || theme.variables.item('text-color') %]">
                            </div>
                        </div>
                    </div>

                    <div class="text-settings-section">
                        <h4>Links</h4>
                        <div class="form-group">
                            <label for="link_color">Link Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_link-color"
                                       value="[% theme.variables.item('link-color').match('^#') ? theme.variables.item('link-color') : '#0000ff' %]"
                                       onchange="updateColorInput('link-color', this.value)">
                                <input type="text" id="var_link-color" name="var_link-color" value="[% theme.variables.item('link-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="link_hover_color">Link Hover Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_link-hover-color"
                                       value="[% theme.variables.item('link-hover-color').match('^#') ? theme.variables.item('link-hover-color') : '#000099' %]"
                                       onchange="updateColorInput('link-hover-color', this.value)">
                                <input type="text" id="var_link-hover-color" name="var_link-hover-color" value="[% theme.variables.item('link-hover-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="link_decoration">Link Decoration:</label>
                            <select id="var_link-decoration" name="var_link-decoration" onchange="updateLivePreview()">
                                <option value="none" [% IF theme.variables.item('link-decoration') == 'none' %]selected[% END %]>None</option>
                                <option value="underline" [% IF theme.variables.item('link-decoration') == 'underline' %]selected[% END %]>Underline</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="button">Update Theme</button>
                <a href="[% c.uri_for('/themeeditor') %]" class="button button-secondary">Cancel</a>
                <!-- Direct link for testing -->
                <a href="/themeeditor" class="button button-secondary" style="margin-left: 10px;">Direct Cancel Link</a>
            </div>
        </form>
    </div>
    
    <div class="theme-preview sticky-preview">
        <h2>Live Preview</h2>
        <div id="live-preview" class="preview-box"
             style="background-color: [% theme.variables.item('background-color') %];
                    color: [% theme.variables.item('text-color') %];
                    [% IF theme.special_styles.defined && theme.special_styles.item('body').defined %]
                    [% theme.special_styles.item('body') %]
                    [% END %]">
            <!-- Layout matching the actual site structure -->
            <div class="preview-layout">
                <!-- Header -->
                <header class="preview-header">
                    <h1 class="preview-element preview-site-name" id="preview-site-name" data-tab="text" title="Click to edit site name settings">
                        Welcome to Site Name
                    </h1>

                    <!-- Navigation Menu -->
                    <nav class="preview-element" id="preview-menu" data-tab="menu" title="Click to edit menu settings">
                        <ul class="preview-horizontal-menu">
                            <li><span>Home</span></li>
                            <li><span>About</span></li>
                            <li><span>Services</span></li>
                            <li><span>Contact</span></li>
                            <li><a href="#" class="preview-element" data-tab="text" title="Click to edit link settings">Login</a></li>
                        </ul>
                    </nav>
                </header>

                <!-- Main Content Area -->
                <main class="preview-content">
                    <h2 class="preview-element preview-page-title" data-tab="text" title="Click to edit header settings">
                        Page Title
                    </h2>

                    <div class="preview-element" id="preview-text" data-tab="text" title="Click to edit text settings">
                        <p>This is sample content text. The background color and image can be edited in the Background tab.</p>
                        <p>Click on any element to edit its properties.</p>
                    </div>

                    <div class="preview-element preview-background" id="preview-background" data-tab="background" title="Click to edit background settings">
                        <div class="preview-panel">
                            <h3>Background Preview</h3>
                            <p>Click here to edit background color and image</p>
                        </div>
                    </div>

                    <div class="preview-links">
                        <p>
                            <a href="#" id="preview-link" class="preview-element" data-tab="text" title="Click to edit link settings">
                                This is a sample link
                            </a>
                        </p>
                    </div>

                    <div class="preview-buttons">
                        <button id="preview-button" class="preview-element" data-tab="buttons" title="Click to edit button settings">
                            Primary Button
                        </button>

                        <button class="preview-element secondary-button" data-tab="buttons" title="Click to edit button settings">
                            Secondary Button
                        </button>
                    </div>
                </main>

                <!-- Footer -->
                <footer class="preview-footer preview-element" data-tab="text" title="Click to edit text settings">
                    <p>© 2024 Site Name - All rights reserved</p>
                </footer>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to update color input field when color picker changes
    function updateColorInput(varName, value) {
        document.getElementById('var_' + varName).value = value;
        updateLivePreview();
    }
    
    // Function to update the live preview
    function updateLivePreview() {
        var preview = document.getElementById('live-preview');
        var previewText = document.getElementById('preview-text');
        var previewLink = document.getElementById('preview-link');
        var previewButton = document.getElementById('preview-button');
        var previewMenu = document.getElementById('preview-menu');
        var previewSiteName = document.getElementById('preview-site-name');
        var previewPageTitle = document.querySelector('.preview-page-title');

        // Get all the variable values
        var getVarValue = function(name) {
            var input = document.getElementById('var_' + name);
            return input ? input.value : '';
        };

        // Update background and text colors
        var bgColor = getVarValue('background-color');
        var textColor = getVarValue('text-color');

        // Apply background color to the main preview - force it with !important
        preview.setAttribute('style', 'background-color: ' + bgColor + ' !important');

        // Apply text color to all text elements
        preview.style.color = textColor;
        previewText.style.color = textColor;

        // Log the values for debugging
        console.log("Background color:", bgColor);
        console.log("Text color:", textColor);

        // Update background image if provided
        var bgImage = document.getElementById('background_image').value;
        if (bgImage && bgImage.trim() !== '') {
            // Convert relative path to absolute for display
            var fixedBgUrl = bgImage.replace(/^\.\.\//, '/static/');
            console.log("Background image URL:", fixedBgUrl);

            // Apply background image to the preview box - force it with !important
            var currentStyle = preview.getAttribute('style') || '';
            var newStyle = currentStyle + '; background-image: url("' + fixedBgUrl + '") !important; background-size: cover !important; background-repeat: no-repeat !important; background-attachment: fixed !important;';
            preview.setAttribute('style', newStyle);

            // Log the applied style
            console.log("Applied style:", newStyle);

            // Also show the image in the background preview element
            var previewBg = document.getElementById('preview-background');
            if (previewBg) {
                previewBg.style.backgroundImage = 'url("' + fixedBgUrl + '")';
                previewBg.style.backgroundSize = 'cover';
                previewBg.style.backgroundPosition = 'center';
                previewBg.style.color = 'white'; // Make text visible on dark backgrounds
                previewBg.style.textShadow = '1px 1px 2px rgba(0,0,0,0.7)'; // Add text shadow for readability
                previewBg.style.minHeight = '100px'; // Make it taller to show more of the image
            }
        } else {
            // If no background image, ensure we're not showing one
            var currentStyle = preview.getAttribute('style') || '';
            var newStyle = currentStyle + '; background-image: none !important;';
            preview.setAttribute('style', newStyle);

            // Reset the background preview element
            var previewBg = document.getElementById('preview-background');
            if (previewBg) {
                previewBg.style.backgroundImage = 'none';
                previewBg.style.color = 'inherit';
                previewBg.style.textShadow = 'none';
            }
        }

        // Update additional body styles if provided
        var additionalStyles = document.getElementById('additional_body_styles').value;
        if (additionalStyles) {
            // Parse the additional styles and apply them
            var styleProps = additionalStyles.split(';');
            for (var i = 0; i < styleProps.length; i++) {
                var prop = styleProps[i].trim();
                if (prop) {
                    var parts = prop.split(':');
                    if (parts.length === 2) {
                        var propName = parts[0].trim();
                        var propValue = parts[1].trim();

                        // Convert CSS property name to camelCase for JavaScript
                        propName = propName.replace(/-([a-z])/g, function(g) { return g[1].toUpperCase(); });

                        // Apply the style
                        preview.style[propName] = propValue;
                    }
                }
            }
        }

        // Update site name styles
        var siteNameColor = getVarValue('site-name-color') || textColor;
        var siteNameFont = getVarValue('site-name-font') || getVarValue('header-font') || 'Arial, sans-serif';
        var siteNameSize = getVarValue('site-name-size') || '28px';
        var siteNameWeight = getVarValue('site-name-weight') || 'bold';

        if (previewSiteName) {
            previewSiteName.style.color = siteNameColor;
            previewSiteName.style.fontFamily = siteNameFont;
            previewSiteName.style.fontSize = siteNameSize;
            previewSiteName.style.fontWeight = siteNameWeight;
        }

        // Update header styles
        var headerColor = getVarValue('header-color') || textColor;
        var headerFont = getVarValue('header-font') || 'Arial, sans-serif';

        if (previewPageTitle) {
            previewPageTitle.style.color = headerColor;
            previewPageTitle.style.fontFamily = headerFont;
        }

        // Update body font
        var bodyFont = getVarValue('body-font') || 'Arial, sans-serif';
        var fontSize = getVarValue('font-size-base') || '14px';

        preview.style.fontFamily = bodyFont;
        preview.style.fontSize = fontSize;

        // Update link colors and decoration
        var linkColor = getVarValue('link-color');
        var linkHoverColor = getVarValue('link-hover-color');
        var linkDecoration = getVarValue('link-decoration') || 'underline';

        previewLink.style.color = linkColor;
        previewLink.style.textDecoration = linkDecoration;

        // Add hover effect using CSS
        var styleElement = document.getElementById('preview-styles');
        if (!styleElement) {
            styleElement = document.createElement('style');
            styleElement.id = 'preview-styles';
            document.head.appendChild(styleElement);
        }

        styleElement.textContent = `
            #preview-link:hover {
                color: ${linkHoverColor} !important;
            }
        `;

        // Update menu styles - using CSS variables
        var menuElement = document.querySelector('.preview-horizontal-menu');
        if (menuElement) {
            menuElement.style.backgroundColor = getVarValue('nav-bg');

            // Update menu items
            var menuItems = menuElement.querySelectorAll('span, a');
            menuItems.forEach(function(item) {
                item.style.color = getVarValue('nav-text');
            });
        }

        // Add hover effect for menu items
        styleElement.textContent += `
            .preview-horizontal-menu li span:hover,
            .preview-horizontal-menu li a:hover {
                background-color: ${getVarValue('nav-hover-bg')} !important;
            }
        `;

        // Update button styles
        var buttonBg = getVarValue('button-bg');
        var buttonText = getVarValue('button-text');
        var buttonBorder = getVarValue('button-border');
        var buttonHoverBg = getVarValue('button-hover-bg');

        // Update all primary buttons
        var buttons = document.querySelectorAll('.preview-buttons button:not(.secondary-button)');
        buttons.forEach(function(button) {
            button.style.backgroundColor = buttonBg;
            button.style.color = buttonText;
            button.style.borderColor = buttonBorder;
        });

        // Add hover effect for buttons
        styleElement.textContent += `
            .preview-buttons button:hover:not(.secondary-button) {
                background-color: ${buttonHoverBg} !important;
            }
        `;
    }
    
    // Function to update the image preview
    function updateImagePreview() {
        var imageUrl = document.getElementById('background_image').value;
        var previewContainer = document.getElementById('image_preview_container');

        if (imageUrl) {
            // Create or update the image element
            var img = document.getElementById('preview_image');
            if (!img) {
                img = document.createElement('img');
                img.id = 'preview_image';
                img.alt = 'Background Image Preview';

                // Clear the container
                previewContainer.innerHTML = '';
                previewContainer.appendChild(img);
            }

            // Set the image source - convert relative path to absolute
            var fixedUrl = imageUrl.replace(/^\.\.\//, '/static/');
            img.src = fixedUrl;

            // Handle image load errors
            img.onerror = function() {
                // Use a placeholder image instead of showing an error
                img.src = 'https://via.placeholder.com/300x200?text=' + encodeURIComponent('Image not found: ' + imageUrl);
                img.alt = 'Placeholder for ' + imageUrl;

                // Add a warning message
                var warning = document.createElement('p');
                warning.className = 'warning';
                warning.textContent = 'The image could not be loaded. Using a placeholder instead.';
                previewContainer.appendChild(warning);
            };
        } else {
            previewContainer.innerHTML = '<p>No image selected</p>';
        }
    }

    // Function to open the file browser
    function openFileBrowser() {
        // Create a modal dialog for browsing images
        var modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Select an Image</h3>
                    <span class="close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="image-browser">
                        <div class="folder-navigation">
                            <h4>Common Image Locations:</h4>
                            <ul>
                                <li><a href="#" data-path="../images/BMaster/">BMaster Images</a></li>
                                <li><a href="#" data-path="../images/CSC/">CSC Images</a></li>
                                <li><a href="#" data-path="../images/USBM/">USBM Images</a></li>
                                <li><a href="#" data-path="../images/Apis/">Apis Images</a></li>
                            </ul>
                        </div>
                        <div class="image-grid" id="image_grid">
                            <p>Select a folder to view images</p>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // Close the modal when clicking the close button
        var closeBtn = modal.querySelector('.close');
        closeBtn.onclick = function() {
            document.body.removeChild(modal);
        };

        // Close the modal when clicking outside the content
        window.onclick = function(event) {
            if (event.target == modal) {
                document.body.removeChild(modal);
            }
        };

        // Handle folder navigation
        var folderLinks = modal.querySelectorAll('.folder-navigation a');
        folderLinks.forEach(function(link) {
            link.onclick = function(e) {
                e.preventDefault();
                var path = this.getAttribute('data-path');

                // For demonstration, we'll just show some sample images
                // In a real implementation, this would make an AJAX call to get the images
                var imageGrid = document.getElementById('image_grid');
                imageGrid.innerHTML = '';

                // In a real implementation, we would fetch the actual images from the server
                // For now, we'll simulate this with a server request by showing a loading message
                imageGrid.innerHTML = '<p>Loading images...</p>';

                // Simulate a server request delay
                setTimeout(function() {
                    // Sample images for each folder
                    var images = [];
                    if (path === '../images/BMaster/') {
                        images = ['honey2.jpg', 'background.jpg', 'header.jpg'];
                    } else if (path === '../images/CSC/') {
                        images = ['logo.png', 'banner.jpg', 'background.png'];
                    } else if (path === '../images/USBM/') {
                        images = ['logo.png', 'header.jpg', 'background.jpg'];
                    } else if (path === '../images/Apis/') {
                        images = ['bee.jpg', 'honeycomb.jpg', 'apiary.jpg'];
                    }

                    // Clear the loading message
                    imageGrid.innerHTML = '';

                    // Create image thumbnails
                    images.forEach(function(image) {
                        var imgPath = path + image;
                        var imgDiv = document.createElement('div');
                        imgDiv.className = 'image-item';

                        // Convert relative path to absolute for display
                        // For testing, we'll use placeholder images since the actual images might not exist
                        var displayPath = 'https://via.placeholder.com/150?text=' + encodeURIComponent(image);

                        imgDiv.innerHTML = `
                            <img src="${displayPath}" alt="${image}">
                            <div class="image-name">${image}</div>
                        `;

                        // Select the image when clicked
                        imgDiv.onclick = function() {
                            document.getElementById('background_image').value = imgPath;
                            updateImagePreview();
                            updateLivePreview();
                            document.body.removeChild(modal);
                        };

                        imageGrid.appendChild(imgDiv);
                    });
                }, 500);
            };
        });
    }

    // Add event listeners to all variable inputs
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the live preview
        updateLivePreview();
        updateImagePreview();

        // Add event listeners to all variable inputs
        var inputs = document.querySelectorAll('input[id^="var_"]');
        inputs.forEach(function(input) {
            input.addEventListener('input', updateLivePreview);
        });

        // Add event listeners to background image and additional styles inputs
        var bgImageInput = document.getElementById('background_image');
        bgImageInput.addEventListener('input', function() {
            updateImagePreview();
            updateLivePreview();
        });

        document.getElementById('additional_body_styles').addEventListener('input', updateLivePreview);

        // Add event listener to the browse button
        document.getElementById('browse_images').addEventListener('click', openFileBrowser);

        // Function to switch to a specific tab
        function switchToTab(tabName) {
            // Hide all tab content
            var tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(function(content) {
                content.style.display = 'none';
            });

            // Remove active class from all buttons
            var tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(function(btn) {
                btn.classList.remove('active');
            });

            // Show the selected tab content
            document.getElementById(tabName + '-tab').style.display = 'block';

            // Add active class to the corresponding button
            var activeButton = document.querySelector('.tab-button[data-tab="' + tabName + '"]');
            if (activeButton) {
                activeButton.classList.add('active');
            }

            // Scroll to the tab content
            document.getElementById(tabName + '-tab').scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // Add event listeners to tab buttons
        var tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                var tabName = this.getAttribute('data-tab');
                switchToTab(tabName);
            });
        });

        // Add event listeners to preview elements
        var previewElements = document.querySelectorAll('.preview-element');
        previewElements.forEach(function(element) {
            element.addEventListener('click', function() {
                var tabName = this.getAttribute('data-tab');
                switchToTab(tabName);
            });
        });
    });
</script>

<style>
    .theme-editor-container {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        margin-bottom: 30px;
    }
    
    .theme-form {
        flex: 1;
        min-width: 400px;
    }
    
    .theme-preview {
        flex: 1;
        min-width: 300px;
    }

    .sticky-preview {
        position: sticky;
        top: 20px;
        max-height: calc(100vh - 40px);
        overflow-y: auto;
    }

    .preview-box {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 20px;
        min-height: 300px;
        background-position: center;
        background-size: cover;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .preview-element {
        cursor: pointer;
        padding: 10px;
        border: 1px solid transparent;
        transition: all 0.2s;
        border-radius: 4px;
    }

    .preview-element:hover {
        border-color: #0066cc;
        box-shadow: 0 0 5px rgba(0, 102, 204, 0.3);
    }

    /* Preview Layout */
    .preview-layout {
        display: flex;
        flex-direction: column;
        min-height: 100%;
    }

    /* Header */
    .preview-header {
        padding: 15px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .preview-site-name {
        margin: 0 0 15px 0;
        font-size: 24px;
        font-weight: bold;
    }

    /* Navigation Menu */
    .preview-horizontal-menu {
        display: flex;
        list-style: none;
        padding: 0;
        margin: 0;
        background-color: var(--nav-bg, #333);
        border-radius: 4px;
    }

    .preview-horizontal-menu li {
        margin: 0;
        padding: 0;
    }

    .preview-horizontal-menu li span,
    .preview-horizontal-menu li a {
        display: block;
        padding: 10px 15px;
        color: var(--nav-text, white);
        text-decoration: none;
        cursor: pointer;
    }

    .preview-horizontal-menu li span:hover,
    .preview-horizontal-menu li a:hover {
        background-color: var(--nav-hover-bg, #444);
    }

    /* Main Content */
    .preview-content {
        flex: 1;
        padding: 15px;
        margin-bottom: 20px;
    }

    .preview-page-title {
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 22px;
        color: var(--header-color, inherit);
        font-family: var(--header-font, inherit);
    }

    .preview-background {
        background-color: rgba(0, 0, 0, 0.05);
        padding: 15px;
        margin: 20px 0;
        border-radius: 4px;
    }

    .preview-panel {
        background-color: rgba(255, 255, 255, 0.7);
        padding: 15px;
        border-radius: 4px;
        text-align: center;
    }

    .preview-panel h3 {
        margin-top: 0;
        margin-bottom: 10px;
    }

    .preview-links {
        margin: 20px 0;
    }

    .preview-links a {
        color: var(--link-color, blue);
        text-decoration: var(--link-decoration, underline);
    }

    .preview-links a:hover {
        color: var(--link-hover-color, darkblue);
    }

    .preview-buttons {
        margin: 20px 0;
        display: flex;
        gap: 15px;
    }

    .preview-buttons button {
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        background-color: var(--button-bg, #007bff);
        color: var(--button-text, white);
        border: 1px solid var(--button-border, #007bff);
    }

    .preview-buttons button:hover {
        background-color: var(--button-hover-bg, #0069d9);
    }

    .preview-buttons .secondary-button {
        background-color: #f8f8f8;
    }

    /* Footer */
    .preview-footer {
        margin-top: auto;
        padding: 15px;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        text-align: center;
        font-size: 14px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .help-text {
        font-size: 0.9em;
        color: #666;
        margin-top: 5px;
        font-style: italic;
    }
    
    .form-group input[type="text"],
    .form-group textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    
    .variables-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .color-input-group,
    .file-input-group {
        display: flex;
        align-items: center;
    }

    .color-input-group input[type="color"] {
        width: 50px;
        height: 36px;
        margin-right: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .file-input-group input[type="text"] {
        flex: 1;
        margin-right: 10px;
    }

    .image-preview {
        margin-top: 15px;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

    .image-preview h4 {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 16px;
    }

    .image-preview-container {
        max-width: 100%;
        overflow: hidden;
        text-align: center;
    }

    .image-preview-container img {
        max-width: 100%;
        max-height: 200px;
        border: 1px solid #ddd;
    }
    
    .preview-box {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        min-height: 200px;
    }
    
    .preview-controls {
        margin-top: 20px;
        display: flex;
        gap: 15px;
        align-items: center;
    }
    
    .form-actions {
        margin-top: 30px;
        display: flex;
        gap: 15px;
    }
    
    .button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }
    
    .button:hover {
        background-color: #45a049;
    }
    
    .button-secondary {
        background-color: #f2f2f2;
        color: #333;
        border: 1px solid #ccc;
    }
    
    .button-secondary:hover {
        background-color: #e0e0e0;
    }

    /* Modal styles */
    .modal {
        display: block;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 0;
        border: 1px solid #888;
        width: 80%;
        max-width: 900px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        border-radius: 5px;
    }

    .modal-header {
        padding: 15px;
        border-bottom: 1px solid #e5e5e5;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h3 {
        margin: 0;
    }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover {
        color: black;
    }

    .modal-body {
        padding: 15px;
    }

    /* Image browser styles */
    .image-browser {
        display: flex;
        gap: 20px;
    }

    .folder-navigation {
        flex: 0 0 200px;
        border-right: 1px solid #e5e5e5;
        padding-right: 15px;
    }

    .folder-navigation h4 {
        margin-top: 0;
    }

    .folder-navigation ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .folder-navigation li {
        margin-bottom: 10px;
    }

    .folder-navigation a {
        text-decoration: none;
        color: #0066cc;
    }

    .folder-navigation a:hover {
        text-decoration: underline;
    }

    .image-grid {
        flex: 1;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
    }

    .image-item {
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .image-item:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .image-item img {
        width: 100%;
        height: 100px;
        object-fit: cover;
        border-radius: 2px;
    }

    .image-name {
        margin-top: 5px;
        text-align: center;
        font-size: 12px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .error {
        color: #ff0000;
        font-weight: bold;
    }

    .warning {
        color: #ff8c00;
        font-style: italic;
        margin-top: 10px;
    }

    /* Tab styles */
    .element-tabs {
        display: flex;
        border-bottom: 1px solid #ccc;
        margin-bottom: 20px;
    }

    .tab-button {
        background-color: #f1f1f1;
        border: 1px solid #ccc;
        border-bottom: none;
        padding: 10px 20px;
        cursor: pointer;
        margin-right: 5px;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    .tab-button:hover {
        background-color: #ddd;
    }

    .tab-button.active {
        background-color: white;
        border-bottom: 1px solid white;
        margin-bottom: -1px;
    }

    .tab-content {
        padding: 15px;
        border: 1px solid #ccc;
        border-top: none;
        margin-top: -1px;
    }

    .tab-content h3 {
        margin-top: 0;
    }

    .text-settings-section {
        margin-bottom: 25px;
        padding: 15px;
        border: 1px solid #e5e5e5;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

    .text-settings-section h4 {
        margin-top: 0;
        margin-bottom: 15px;
        padding-bottom: 8px;
        border-bottom: 1px solid #e5e5e5;
        font-size: 16px;
        color: #333;
    }

    .font-select {
        font-size: 14px;
        padding: 8px;
        width: 100%;
    }

    .font-select option {
        padding: 8px;
        font-size: 14px;
    }
</style>