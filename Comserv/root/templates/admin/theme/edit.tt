[% META title = 'Edit Theme' %]

<h1>Edit Theme: [% theme.name %]</h1>

[% IF message %]
<div class="success">
    [% message %]
</div>
[% END %]

[% IF error %]
<div class="warning">
    [% error %]
</div>
[% END %]

<div class="theme-editor-container">
    <div class="theme-form">
        <form action="/themeeditor/update_theme" method="post">
            <input type="hidden" name="theme_name" value="[% theme_name %]">
            
            <div class="form-group">
                <label for="theme_display_name">Theme Display Name:</label>
                <input type="text" id="theme_display_name" name="theme_display_name" value="[% theme.name %]" required>
            </div>
            
            <div class="form-group">
                <label for="theme_description">Theme Description:</label>
                <textarea id="theme_description" name="theme_description" rows="3" required>[% theme.description %]</textarea>
            </div>
            
            <h2>Theme Variables</h2>
            
            <div class="variables-grid">
                [% FOREACH var IN theme.variables.keys.sort %]
                <div class="form-group">
                    <label for="var_[% var %]">[% var %]:</label>
                    [% IF var.match('color') || var.match('-bg$') || var.match('-border$') %]
                    <div class="color-input-group">
                        <input type="color" id="color_picker_[% var %]"
                               value="[%
                                   SET color_value = theme.variables.item(var);
                                   IF color_value.match('^#');
                                       color_value;
                                   ELSIF color_value == 'black';
                                       '#000000';
                                   ELSIF color_value == 'white';
                                       '#ffffff';
                                   ELSIF color_value == 'red';
                                       '#ff0000';
                                   ELSIF color_value == 'green';
                                       '#008000';
                                   ELSIF color_value == 'blue';
                                       '#0000ff';
                                   ELSE;
                                       '#cccccc';
                                   END;
                               %]"
                               onchange="updateColorInput('[% var %]', this.value)">
                        <input type="text" id="var_[% var %]" name="var_[% var %]" value="[% theme.variables.item(var) %]">
                    </div>
                    [% ELSE %]
                    <input type="text" id="var_[% var %]" name="var_[% var %]" value="[% theme.variables.item(var) %]">
                    [% END %]
                </div>
                [% END %]
            </div>

            <h2>Common Elements</h2>

            <div class="common-elements-section">
                <div class="element-tabs">
                    <button type="button" class="tab-button active" data-tab="background">Background</button>
                    <button type="button" class="tab-button" data-tab="menu">Menu</button>
                    <button type="button" class="tab-button" data-tab="buttons">Buttons</button>
                    <button type="button" class="tab-button" data-tab="text">Text</button>
                </div>

                <div class="tab-content" id="background-tab" style="display: block;">
                    <h3>Background Settings</h3>
                    <div class="form-group">
                        <label for="background_image">Background Image:</label>
                        <div class="file-input-group">
                            <input type="text" id="background_image" name="special_style_body_background_image"
                               value="[%
                                   SET bg_image = '';
                                   IF theme.special_styles.defined && theme.special_styles.item('body').defined;
                                       IF theme.special_styles.item('body').match('background-image:\\s*url\\((.+?)\\)');
                                           SET bg_image = theme.special_styles.item('body').replace('.*background-image:\\s*url\\((.+?)\\).*', '$1');
                                           # Remove quotes if present
                                           SET bg_image = bg_image.replace('^[\'"]', '').replace('[\'"]$', '');
                                       END;
                                   END;
                                   bg_image;
                               %]"
                               placeholder="e.g., ../images/BMaster/honey2.jpg">
                        <button type="button" id="browse_images" class="button button-secondary">Browse Images</button>
                    </div>
                    <p class="help-text">Enter the path to the background image relative to the CSS file.</p>

                    <div id="image_preview" class="image-preview">
                        <h4>Image Preview</h4>
                        <div id="image_preview_container" class="image-preview-container">
                            [% IF bg_image && bg_image != '' %]
                            <img src="/static/[% bg_image.replace('^\.\./', '') %]" alt="Background Image Preview" id="preview_image">
                            [% ELSE %]
                            <p>No image selected</p>
                            [% END %]
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="additional_body_styles">Additional Background Styles:</label>
                    <textarea id="additional_body_styles" name="special_style_body_additional" rows="3"
                              placeholder="e.g., background-repeat: no-repeat; background-size: cover;">[% theme.special_styles.defined && theme.special_styles.item('body').defined ? theme.special_styles.item('body').replace('background-image: url\\(.+?\\);', '') : '' %]</textarea>
                    <p class="help-text">Enter additional CSS styles for the background.</p>
                </div>
                </div>

                <div class="tab-content" id="menu-tab" style="display: none;">
                    <h3>Menu Settings</h3>
                    <div class="form-group">
                        <label for="menu_background">Menu Background Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-bg"
                                   value="[% theme.variables.item('nav-bg').match('^#') ? theme.variables.item('nav-bg') : '#cccccc' %]"
                                   onchange="updateColorInput('nav-bg', this.value)">
                            <input type="text" id="var_nav-bg" name="var_nav-bg" value="[% theme.variables.item('nav-bg') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="menu_text">Menu Text Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-text"
                                   value="[% theme.variables.item('nav-text').match('^#') ? theme.variables.item('nav-text') : '#000000' %]"
                                   onchange="updateColorInput('nav-text', this.value)">
                            <input type="text" id="var_nav-text" name="var_nav-text" value="[% theme.variables.item('nav-text') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="menu_hover">Menu Hover Background:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_nav-hover-bg"
                                   value="[% theme.variables.item('nav-hover-bg').match('^#') ? theme.variables.item('nav-hover-bg') : '#e0e0e0' %]"
                                   onchange="updateColorInput('nav-hover-bg', this.value)">
                            <input type="text" id="var_nav-hover-bg" name="var_nav-hover-bg" value="[% theme.variables.item('nav-hover-bg') %]">
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="buttons-tab" style="display: none;">
                    <h3>Button Settings</h3>
                    <div class="form-group">
                        <label for="button_bg">Button Background Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-bg"
                                   value="[% theme.variables.item('button-bg').match('^#') ? theme.variables.item('button-bg') : '#cccccc' %]"
                                   onchange="updateColorInput('button-bg', this.value)">
                            <input type="text" id="var_button-bg" name="var_button-bg" value="[% theme.variables.item('button-bg') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_text">Button Text Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-text"
                                   value="[% theme.variables.item('button-text').match('^#') ? theme.variables.item('button-text') : '#000000' %]"
                                   onchange="updateColorInput('button-text', this.value)">
                            <input type="text" id="var_button-text" name="var_button-text" value="[% theme.variables.item('button-text') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_border">Button Border Color:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-border"
                                   value="[% theme.variables.item('button-border').match('^#') ? theme.variables.item('button-border') : '#cccccc' %]"
                                   onchange="updateColorInput('button-border', this.value)">
                            <input type="text" id="var_button-border" name="var_button-border" value="[% theme.variables.item('button-border') %]">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="button_hover_bg">Button Hover Background:</label>
                        <div class="color-input-group">
                            <input type="color" id="color_picker_button-hover-bg"
                                   value="[% theme.variables.item('button-hover-bg').match('^#') ? theme.variables.item('button-hover-bg') : '#e0e0e0' %]"
                                   onchange="updateColorInput('button-hover-bg', this.value)">
                            <input type="text" id="var_button-hover-bg" name="var_button-hover-bg" value="[% theme.variables.item('button-hover-bg') %]">
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="text-tab" style="display: none;">
                    <h3>Text Settings</h3>

                    <div class="text-settings-section">
                        <h4>General Text</h4>
                        <div class="form-group">
                            <label for="text_color">Text Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_text-color"
                                       value="[% theme.variables.item('text-color').match('^#') ? theme.variables.item('text-color') : '#000000' %]"
                                       onchange="updateColorInput('text-color', this.value)">
                                <input type="text" id="var_text-color" name="var_text-color" value="[% theme.variables.item('text-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="body_font">Body Font:</label>
                            <select id="var_body-font" name="var_body-font" onchange="updateLivePreview()" class="font-select">
                                <option value="Arial, sans-serif" style="font-family: Arial, sans-serif" [% IF theme.variables.item('body-font') == 'Arial, sans-serif' %]selected[% END %]>Arial</option>
                                <option value="'Helvetica Neue', Helvetica, Arial, sans-serif" style="font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif" [% IF theme.variables.item('body-font') == "'Helvetica Neue', Helvetica, Arial, sans-serif" %]selected[% END %]>Helvetica</option>
                                <option value="'Times New Roman', Times, serif" style="font-family: 'Times New Roman', Times, serif" [% IF theme.variables.item('body-font') == "'Times New Roman', Times, serif" %]selected[% END %]>Times New Roman</option>
                                <option value="Georgia, serif" style="font-family: Georgia, serif" [% IF theme.variables.item('body-font') == "Georgia, serif" %]selected[% END %]>Georgia</option>
                                <option value="'Courier New', Courier, monospace" style="font-family: 'Courier New', Courier, monospace" [% IF theme.variables.item('body-font') == "'Courier New', Courier, monospace" %]selected[% END %]>Courier New</option>
                                <option value="Verdana, Geneva, sans-serif" style="font-family: Verdana, Geneva, sans-serif" [% IF theme.variables.item('body-font') == "Verdana, Geneva, sans-serif" %]selected[% END %]>Verdana</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="font_size_base">Base Font Size:</label>
                            <select id="var_font-size-base" name="var_font-size-base" onchange="updateLivePreview()">
                                <option value="12px" [% IF theme.variables.item('font-size-base') == '12px' %]selected[% END %]>Small (12px)</option>
                                <option value="14px" [% IF theme.variables.item('font-size-base') == '14px' %]selected[% END %]>Medium (14px)</option>
                                <option value="16px" [% IF theme.variables.item('font-size-base') == '16px' %]selected[% END %]>Large (16px)</option>
                                <option value="18px" [% IF theme.variables.item('font-size-base') == '18px' %]selected[% END %]>Extra Large (18px)</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-settings-section">
                        <h4>Links</h4>
                        <div class="form-group">
                            <label for="link_color">Link Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_link-color"
                                       value="[% theme.variables.item('link-color').match('^#') ? theme.variables.item('link-color') : '#0000ff' %]"
                                       onchange="updateColorInput('link-color', this.value)">
                                <input type="text" id="var_link-color" name="var_link-color" value="[% theme.variables.item('link-color') %]">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="link_hover_color">Link Hover Color:</label>
                            <div class="color-input-group">
                                <input type="color" id="color_picker_link-hover-color"
                                       value="[% theme.variables.item('link-hover-color').match('^#') ? theme.variables.item('link-hover-color') : '#0000ff' %]"
                                       onchange="updateColorInput('link-hover-color', this.value)">
                                <input type="text" id="var_link-hover-color" name="var_link-hover-color" value="[% theme.variables.item('link-hover-color') %]">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="button button-primary">Save Theme</button>
                <a href="[% c.uri_for('/themeeditor/wysiwyg', theme_name) %]" class="button">WYSIWYG Editor</a>
                <a href="[% c.uri_for('/themeeditor') %]" class="button">Cancel</a>
            </div>
        </form>
    </div>
</div>

<style>
    .theme-editor-container {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .theme-form {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 20px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .form-group input[type="text"],
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 3px;
    }
    
    .variables-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .color-input-group {
        display: flex;
        align-items: center;
    }
    
    .color-input-group input[type="color"] {
        width: 40px;
        height: 40px;
        margin-right: 10px;
        border: 1px solid #ddd;
        padding: 0;
    }
    
    .element-tabs {
        display: flex;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }
    
    .tab-button {
        padding: 10px 15px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        border-bottom: none;
        border-radius: 5px 5px 0 0;
        margin-right: 5px;
        cursor: pointer;
    }
    
    .tab-button.active {
        background-color: #fff;
        border-bottom: 1px solid #fff;
        margin-bottom: -1px;
    }
    
    .tab-content {
        padding: 15px;
        border: 1px solid #ddd;
        border-top: none;
        background-color: #fff;
    }
    
    .file-input-group {
        display: flex;
        gap: 10px;
    }
    
    .image-preview {
        margin-top: 15px;
        border: 1px solid #ddd;
        padding: 10px;
        background-color: #fff;
    }
    
    .image-preview-container {
        max-width: 300px;
        max-height: 200px;
        overflow: hidden;
        margin-top: 10px;
    }
    
    .image-preview-container img {
        max-width: 100%;
    }
    
    .help-text {
        font-size: 0.9em;
        color: #666;
        margin-top: 5px;
    }
    
    .form-actions {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #ddd;
        display: flex;
        gap: 10px;
    }
    
    .button {
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 3px;
        background-color: #f0f0f0;
        color: #333;
        text-decoration: none;
        cursor: pointer;
        font-size: 14px;
    }
    
    .button-primary {
        background-color: #3366cc;
        color: white;
        border-color: #2255bb;
    }
    
    .button-secondary {
        background-color: #f9f9f9;
    }
</style>

<script>
    // Function to update color input text when color picker changes
    function updateColorInput(varName, value) {
        document.getElementById('var_' + varName).value = value;
    }
    
    // Function to update image preview when background image URL changes
    document.getElementById('background_image').addEventListener('change', function() {
        const imageUrl = this.value;
        const previewContainer = document.getElementById('image_preview_container');
        
        if (imageUrl) {
            // Convert relative path to absolute path for preview
            let absoluteUrl = imageUrl;
            if (imageUrl.startsWith('../')) {
                absoluteUrl = '/static/' + imageUrl.replace(/^\.\.\//, '');
            } else if (!imageUrl.startsWith('/')) {
                absoluteUrl = '/static/' + imageUrl;
            }
            
            previewContainer.innerHTML = `<img src="${absoluteUrl}" alt="Background Image Preview" id="preview_image">`;
        } else {
            previewContainer.innerHTML = '<p>No image selected</p>';
        }
    });
    
    // Tab switching functionality
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all tabs
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Hide all tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.style.display = 'none';
            });
            
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Show corresponding tab content
            const tabId = this.getAttribute('data-tab') + '-tab';
            document.getElementById(tabId).style.display = 'block';
        });
    });
    
    // Function to update live preview (placeholder for future implementation)
    function updateLivePreview() {
        // This will be implemented in the WYSIWYG editor
        console.log('Live preview update triggered');
    }
</script>