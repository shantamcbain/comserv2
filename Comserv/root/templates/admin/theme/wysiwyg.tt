[% META title = 'Interactive Theme Editor' %]
[% PageVersion = 'admin/theme/wysiwyg.tt,v 0.01  2025/03/10  Shanta Exp Shanta' %]

<h1>Interactive Theme Editor: [% theme.name %]</h1>

[% IF debug_mode == 1 %]
    [% PageVersion %]
[% END %]

[% IF message %]
<div class="success">
    [% message %]
</div>
[% END %]

[% IF error %]
<div class="warning">
    [% error %]
</div>
[% END %]

<div class="interactive-editor-container">
    <!-- Left panel: Preview area -->
    <div class="preview-panel">
        <h2>Live Preview</h2>
        <div class="preview-area" id="preview_area">
            <!-- Header section -->
            <div class="preview-header editable" data-element="header" data-properties="background-color,color,padding">
                <div class="preview-site-name editable" data-element="site-name" data-properties="color,font-family,font-size,font-weight">
                    [% site_name %]
                </div>
                <!-- Navigation menu -->
                <div class="preview-menu editable" data-element="menu" data-properties="background-color,color,padding">
                    <ul>
                        <li class="editable" data-element="menu-item" data-properties="color,background-color,padding">Home</li>
                        <li class="editable" data-element="menu-item" data-properties="color,background-color,padding">About</li>
                        <li class="editable" data-element="menu-item" data-properties="color,background-color,padding">Services</li>
                        <li class="editable" data-element="menu-item" data-properties="color,background-color,padding">Contact</li>
                    </ul>
                </div>
            </div>
            
            <!-- Main content area -->
            <div class="preview-content editable" data-element="content" data-properties="background-color,color,padding">
                <h1 class="preview-heading editable" data-element="heading" data-properties="color,font-family,font-size,font-weight">Welcome to [% site_name %]</h1>
                
                <p class="preview-paragraph editable" data-element="paragraph" data-properties="color,font-family,font-size,line-height">
                    This is a sample paragraph to demonstrate text styling. Click on any element to edit its properties.
                </p>
                
                <a href="#" class="preview-link editable" data-element="link" data-properties="color,text-decoration,font-weight">This is a sample link</a>
                
                <div class="preview-buttons">
                    <button class="preview-button editable" data-element="button" data-properties="background-color,color,border,padding,font-weight">Primary Button</button>
                    <button class="preview-button secondary-button editable" data-element="secondary-button" data-properties="background-color,color,border,padding,font-weight">Secondary Button</button>
                </div>
                
                <div class="preview-table-container">
                    <table class="preview-table editable" data-element="table" data-properties="border,border-collapse">
                        <thead>
                            <tr>
                                <th class="editable" data-element="table-header" data-properties="background-color,color,padding">Header 1</th>
                                <th class="editable" data-element="table-header" data-properties="background-color,color,padding">Header 2</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="editable" data-element="table-cell" data-properties="background-color,color,padding">Cell 1</td>
                                <td class="editable" data-element="table-cell" data-properties="background-color,color,padding">Cell 2</td>
                            </tr>
                            <tr>
                                <td class="editable" data-element="table-cell" data-properties="background-color,color,padding">Cell 3</td>
                                <td class="editable" data-element="table-cell" data-properties="background-color,color,padding">Cell 4</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Footer section -->
            <div class="preview-footer editable" data-element="footer" data-properties="background-color,color,padding">
                <p>&copy; 2024 [% site_name %]. All rights reserved.</p>
            </div>
        </div>
    </div>
    
    <!-- Right panel: Property editor -->
    <div class="property-panel" id="property_panel">
        <h2>Element Properties</h2>
        <div id="no_selection_message">
            <p>Click on any element in the preview to edit its properties.</p>
        </div>
        
        <div id="property_editor" style="display: none;">
            <h3 id="selected_element_name">Element Name</h3>
            
            <form id="property_form">
                <input type="hidden" id="element_type" name="element_type" value="">
                <div id="property_fields">
                    <!-- Property fields will be dynamically added here -->
                </div>
                
                <div class="form-actions">
                    <button type="button" id="apply_changes" class="button">Apply Changes</button>
                    <button type="button" id="reset_element" class="button button-secondary">Reset Element</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="editor-actions">
    <form action="/themeeditor/update_theme" method="post" id="save_theme_form">
        <input type="hidden" name="theme_name" value="[% theme_name %]">
        <input type="hidden" name="theme_display_name" value="[% theme.name %]">
        <input type="hidden" name="theme_description" value="[% theme.description %]">
        
        <!-- Hidden inputs for theme variables will be added dynamically -->
        [% FOREACH var IN theme.variables.keys %]
        <input type="hidden" name="var_[% var %]" id="hidden_var_[% var %]" value="[% theme.variables.item(var) %]">
        [% END %]
        
        <button type="submit" class="button button-primary">Save Theme</button>
        <a href="[% c.uri_for('/themeadmin') %]" class="button button-secondary">Cancel</a>
    </form>
</div>

<style>
    .interactive-editor-container {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .preview-panel {
        flex: 2;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 15px;
    }
    
    .property-panel {
        flex: 1;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 15px;
    }
    
    .preview-area {
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
        margin-top: 15px;
    }
    
    .preview-header {
        background-color: var(--primary-color, #ccffff);
        padding: 15px;
        color: var(--text-color, #000000);
    }
    
    .preview-site-name {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        color: var(--site-name-color, var(--text-color, #000000));
        font-family: var(--site-name-font, var(--header-font, Arial, sans-serif));
    }
    
    .preview-menu {
        background-color: var(--nav-bg, var(--primary-color, #ccffff));
        padding: 10px 0;
    }
    
    .preview-menu ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
    }
    
    .preview-menu li {
        padding: 8px 15px;
        color: var(--nav-text, var(--text-color, #000000));
        cursor: pointer;
    }
    
    .preview-menu li:hover {
        background-color: var(--nav-hover-bg, rgba(0, 0, 0, 0.1));
    }
    
    .preview-content {
        padding: 20px;
        background-color: var(--background-color, #ffffff);
        color: var(--text-color, #000000);
        font-family: var(--body-font, Arial, sans-serif);
        font-size: var(--font-size-base, 16px);
    }
    
    .preview-heading {
        color: var(--header-color, var(--text-color, #000000));
        font-family: var(--header-font, Arial, sans-serif);
        margin-bottom: 15px;
    }
    
    .preview-paragraph {
        margin-bottom: 15px;
        line-height: 1.5;
    }
    
    .preview-link {
        color: var(--link-color, #0000FF);
        text-decoration: var(--link-decoration, underline);
    }
    
    .preview-link:hover {
        color: var(--link-hover-color, #000099);
    }
    
    .preview-buttons {
        margin: 20px 0;
        display: flex;
        gap: 10px;
    }
    
    .preview-button {
        padding: 8px 15px;
        background-color: var(--button-bg, #f2f2f2);
        color: var(--button-text, #000000);
        border: 1px solid var(--button-border, #cccccc);
        cursor: pointer;
    }
    
    .preview-button:hover {
        background-color: var(--button-hover-bg, #e0e0e0);
    }
    
    .preview-button.secondary-button {
        background-color: var(--secondary-color, #f9f9f9);
        color: var(--text-color, #000000);
        border: 1px solid var(--border-color, #cccccc);
    }
    
    .preview-table-container {
        margin: 20px 0;
    }
    
    .preview-table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid var(--border-color, #cccccc);
    }
    
    .preview-table th {
        background-color: var(--table-header-bg, #f2f2f2);
        color: var(--text-color, #000000);
        padding: 8px;
        text-align: left;
        border: 1px solid var(--border-color, #cccccc);
    }
    
    .preview-table td {
        padding: 8px;
        border: 1px solid var(--border-color, #cccccc);
    }
    
    .preview-footer {
        background-color: var(--secondary-color, #f9f9f9);
        padding: 15px;
        text-align: center;
        color: var(--text-color, #000000);
    }
    
    .editable {
        cursor: pointer;
        transition: outline 0.2s;
    }
    
    .editable:hover {
        outline: 2px dashed #999;
    }
    
    .editable.selected {
        outline: 2px solid #0066cc;
    }
    
    /* Property editor styles */
    #property_editor {
        margin-top: 15px;
    }
    
    .property-field {
        margin-bottom: 15px;
    }
    
    .property-field label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .property-field input[type="text"],
    .property-field input[type="number"],
    .property-field select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    
    .color-input-group {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .color-input-group input[type="color"] {
        width: 40px;
        height: 40px;
        padding: 0;
        border: 1px solid #ccc;
    }
    
    .form-actions {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }
    
    .button {
        padding: 8px 15px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }
    
    .button:hover {
        background-color: #45a049;
    }
    
    .button-secondary {
        background-color: #f2f2f2;
        color: #333;
        border: 1px solid #ccc;
    }
    
    .button-secondary:hover {
        background-color: #e0e0e0;
    }
    
    .button-primary {
        background-color: #2196F3;
    }
    
    .button-primary:hover {
        background-color: #0b7dda;
    }
    
    .editor-actions {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #ccc;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Store the original styles for each editable element
        const originalStyles = {};
        const editableElements = document.querySelectorAll('.editable');
        
        // Initialize the original styles
        editableElements.forEach(element => {
            const elementType = element.getAttribute('data-element');
            originalStyles[elementType] = {};
            
            // Get the computed style of the element
            const computedStyle = window.getComputedStyle(element);
            
            // Get the properties that can be edited for this element
            const properties = element.getAttribute('data-properties').split(',');
            
            // Store the original value of each property
            properties.forEach(property => {
                originalStyles[elementType][property] = computedStyle.getPropertyValue(property);
            });
        });
        
        // Add click event listeners to all editable elements
        editableElements.forEach(element => {
            element.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent event bubbling
                
                // Remove selected class from all elements
                editableElements.forEach(el => el.classList.remove('selected'));
                
                // Add selected class to the clicked element
                this.classList.add('selected');
                
                // Get the element type and properties
                const elementType = this.getAttribute('data-element');
                const properties = this.getAttribute('data-properties').split(',');
                
                // Update the property editor
                updatePropertyEditor(elementType, properties, this);
            });
        });
        
        // Function to update the property editor
        function updatePropertyEditor(elementType, properties, element) {
            // Show the property editor and hide the no selection message
            document.getElementById('property_editor').style.display = 'block';
            document.getElementById('no_selection_message').style.display = 'none';
            
            // Set the element name
            document.getElementById('selected_element_name').textContent = formatElementName(elementType);
            
            // Set the element type in the hidden input
            document.getElementById('element_type').value = elementType;
            
            // Clear existing property fields
            const propertyFields = document.getElementById('property_fields');
            propertyFields.innerHTML = '';
            
            // Get the computed style of the element
            const computedStyle = window.getComputedStyle(element);
            
            // Add a field for each property
            properties.forEach(property => {
                const propertyValue = computedStyle.getPropertyValue(property);
                
                // Create a property field
                const fieldDiv = document.createElement('div');
                fieldDiv.className = 'property-field';
                
                // Create a label
                const label = document.createElement('label');
                label.textContent = formatPropertyName(property);
                label.setAttribute('for', `property_${property}`);
                
                // Create an input field based on the property type
                let input;
                
                if (property.includes('color')) {
                    // Create a color input group
                    const inputGroup = document.createElement('div');
                    inputGroup.className = 'color-input-group';
                    
                    // Create a color picker
                    const colorPicker = document.createElement('input');
                    colorPicker.type = 'color';
                    colorPicker.id = `color_picker_${property}`;
                    colorPicker.value = rgbToHex(propertyValue);
                    
                    // Create a text input
                    input = document.createElement('input');
                    input.type = 'text';
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    input.value = propertyValue;
                    
                    // Add event listener to the color picker
                    colorPicker.addEventListener('input', function() {
                        input.value = this.value;
                        applyPropertyChange(element, property, this.value);
                    });
                    
                    // Add event listener to the text input
                    input.addEventListener('input', function() {
                        applyPropertyChange(element, property, this.value);
                    });
                    
                    // Add the color picker and text input to the input group
                    inputGroup.appendChild(colorPicker);
                    inputGroup.appendChild(input);
                    
                    // Add the label and input group to the field div
                    fieldDiv.appendChild(label);
                    fieldDiv.appendChild(inputGroup);
                    
                    // Add the field div to the property fields
                    propertyFields.appendChild(fieldDiv);
                    return;
                }
                
                if (property === 'font-family') {
                    // Create a select element for font family
                    input = document.createElement('select');
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    
                    // Add common font options
                    const fontOptions = [
                        'Arial, sans-serif',
                        'Helvetica, Arial, sans-serif',
                        'Times New Roman, Times, serif',
                        'Georgia, serif',
                        'Courier New, Courier, monospace',
                        'Verdana, Geneva, sans-serif'
                    ];
                    
                    fontOptions.forEach(font => {
                        const option = document.createElement('option');
                        option.value = font;
                        option.textContent = font.split(',')[0];
                        option.style.fontFamily = font;
                        
                        // Check if this is the current font
                        if (propertyValue.includes(font.split(',')[0])) {
                            option.selected = true;
                        }
                        
                        input.appendChild(option);
                    });
                } else if (property === 'font-weight') {
                    // Create a select element for font weight
                    input = document.createElement('select');
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    
                    // Add font weight options
                    const weightOptions = [
                        { value: 'normal', text: 'Normal' },
                        { value: 'bold', text: 'Bold' },
                        { value: '100', text: 'Thin (100)' },
                        { value: '200', text: 'Extra Light (200)' },
                        { value: '300', text: 'Light (300)' },
                        { value: '400', text: 'Normal (400)' },
                        { value: '500', text: 'Medium (500)' },
                        { value: '600', text: 'Semi Bold (600)' },
                        { value: '700', text: 'Bold (700)' },
                        { value: '800', text: 'Extra Bold (800)' },
                        { value: '900', text: 'Black (900)' }
                    ];
                    
                    weightOptions.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option.value;
                        optionElement.textContent = option.text;
                        
                        // Check if this is the current weight
                        if (propertyValue === option.value) {
                            optionElement.selected = true;
                        }
                        
                        input.appendChild(optionElement);
                    });
                } else if (property === 'text-decoration') {
                    // Create a select element for text decoration
                    input = document.createElement('select');
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    
                    // Add text decoration options
                    const decorationOptions = [
                        { value: 'none', text: 'None' },
                        { value: 'underline', text: 'Underline' },
                        { value: 'overline', text: 'Overline' },
                        { value: 'line-through', text: 'Line Through' }
                    ];
                    
                    decorationOptions.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option.value;
                        optionElement.textContent = option.text;
                        
                        // Check if this is the current decoration
                        if (propertyValue === option.value) {
                            optionElement.selected = true;
                        }
                        
                        input.appendChild(optionElement);
                    });
                } else if (property === 'font-size' || property === 'padding' || property === 'line-height') {
                    // Create a text input for size properties
                    input = document.createElement('input');
                    input.type = 'text';
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    input.value = propertyValue;
                } else {
                    // Create a text input for other properties
                    input = document.createElement('input');
                    input.type = 'text';
                    input.id = `property_${property}`;
                    input.name = `property_${property}`;
                    input.value = propertyValue;
                }
                
                // Add event listener to the input
                input.addEventListener('change', function() {
                    applyPropertyChange(element, property, this.value);
                });
                
                // Add the label and input to the field div
                fieldDiv.appendChild(label);
                fieldDiv.appendChild(input);
                
                // Add the field div to the property fields
                propertyFields.appendChild(fieldDiv);
            });
            
            // Add event listener to the Apply Changes button
            document.getElementById('apply_changes').onclick = function() {
                applyAllChanges(element, properties);
            };
            
            // Add event listener to the Reset Element button
            document.getElementById('reset_element').onclick = function() {
                resetElement(element, elementType, properties);
            };
        }
        
        // Function to apply a property change to an element
        function applyPropertyChange(element, property, value) {
            element.style[property] = value;
            
            // Update the corresponding CSS variable if applicable
            updateCssVariable(property, value);
        }
        
        // Function to apply all changes to an element
        function applyAllChanges(element, properties) {
            properties.forEach(property => {
                const input = document.getElementById(`property_${property}`);
                if (input) {
                    applyPropertyChange(element, property, input.value);
                }
            });
        }
        
        // Function to reset an element to its original style
        function resetElement(element, elementType, properties) {
            properties.forEach(property => {
                const originalValue = originalStyles[elementType][property];
                element.style[property] = originalValue;
                
                // Update the input field
                const input = document.getElementById(`property_${property}`);
                if (input) {
                    input.value = originalValue;
                }
                
                // Update the color picker if applicable
                if (property.includes('color')) {
                    const colorPicker = document.getElementById(`color_picker_${property}`);
                    if (colorPicker) {
                        colorPicker.value = rgbToHex(originalValue);
                    }
                }
            });
        }
        
        // Function to update a CSS variable
        function updateCssVariable(property, value) {
            // Map of CSS properties to CSS variables
            const propertyToVariable = {
                'background-color': '--background-color',
                'color': '--text-color',
                'font-family': '--body-font',
                'font-size': '--font-size-base'
                // Add more mappings as needed
            };
            
            // Check if this property maps to a CSS variable
            const variable = propertyToVariable[property];
            if (variable) {
                // Update the CSS variable
                document.documentElement.style.setProperty(variable, value);
                
                // Update the hidden input for the theme variable
                const hiddenInput = document.getElementById(`hidden_var_${variable.substring(2)}`);
                if (hiddenInput) {
                    hiddenInput.value = value;
                }
            }
        }
        
        // Helper function to format element names for display
        function formatElementName(elementType) {
            return elementType
                .split('-')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
        }
        
        // Helper function to format property names for display
        function formatPropertyName(property) {
            return property
                .split('-')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
        }
        
        // Helper function to convert RGB color to HEX
        function rgbToHex(rgb) {
            // Check if the color is already in hex format
            if (rgb.startsWith('#')) {
                return rgb;
            }
            
            // Extract the RGB values
            const rgbMatch = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            if (!rgbMatch) {
                return '#000000'; // Default to black if the format is not recognized
            }
            
            // Convert RGB to HEX
            const r = parseInt(rgbMatch[1]);
            const g = parseInt(rgbMatch[2]);
            const b = parseInt(rgbMatch[3]);
            
            return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        }
    });
</script>