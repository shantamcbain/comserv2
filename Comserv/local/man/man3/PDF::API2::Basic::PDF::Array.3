.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::Array 3"
.TH PDF::API2::Basic::PDF::Array 3 2024-05-18 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::API2::Basic::PDF::Array \- Low\-level PDF array object
.SH METHODS
.IX Header "METHODS"
.ie n .SS "PDF::Array\->new($parent, @values)"
.el .SS "PDF::Array\->new($parent, \f(CW@values\fP)"
.IX Subsection "PDF::Array->new($parent, @values)"
Creates an array with the given storage parent and an optional list of values to
initialise the array with.
.ie n .SS "$a\->outobjdeep($fh, $pdf)"
.el .SS "\f(CW$a\fP\->outobjdeep($fh, \f(CW$pdf\fP)"
.IX Subsection "$a->outobjdeep($fh, $pdf)"
Outputs an array as a PDF array to the given filehandle.
.ie n .SS $a\->\fBelements()\fP
.el .SS \f(CW$a\fP\->\fBelements()\fP
.IX Subsection "$a->elements()"
Returns the contents of the array.
.ie n .SS $a\->add_elements(@elements)
.el .SS \f(CW$a\fP\->add_elements(@elements)
.IX Subsection "$a->add_elements(@elements)"
Appends the given elements to the array. An element is only added if it
is defined.
.ie n .SS $a\->remove_element($element)
.el .SS \f(CW$a\fP\->remove_element($element)
.IX Subsection "$a->remove_element($element)"
Removes all occurrences of an element from an array.
.ie n .SS $a\->\fBval()\fP
.el .SS \f(CW$a\fP\->\fBval()\fP
.IX Subsection "$a->val()"
Returns a reference to the contents of the array.
.ie n .SS $a\->copy($pdf)
.el .SS \f(CW$a\fP\->copy($pdf)
.IX Subsection "$a->copy($pdf)"
Copies the array with deep-copy on elements which are not full PDF objects
with respect to a particular \f(CW$pdf\fR output context
