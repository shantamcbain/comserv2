.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Resource::XObject::Form 3"
.TH PDF::API2::Resource::XObject::Form 3 2024-05-18 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::API2::Resource::XObject::Form \- Base class for external form objects
.SH METHODS
.IX Header "METHODS"
.ie n .IP "$form = PDF::API2::Resource::XObject::Form\->new($pdf)" 4
.el .IP "\f(CW$form\fR = PDF::API2::Resource::XObject::Form\->new($pdf)" 4
.IX Item "$form = PDF::API2::Resource::XObject::Form->new($pdf)"
Creates a form resource.
.ie n .IP "($llx, $lly, $urx, $ury) = $form\->bbox($llx, $lly, $urx, $ury)" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$form\fR\->bbox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "($llx, $lly, $urx, $ury) = $form->bbox($llx, $lly, $urx, $ury)"
Get or set the coordinates of the form object's bounding box
.ie n .IP "$resource = $form\->resource($type, $key)" 4
.el .IP "\f(CW$resource\fR = \f(CW$form\fR\->resource($type, \f(CW$key\fR)" 4
.IX Item "$resource = $form->resource($type, $key)"
.PD 0
.ie n .IP "$form\->resource($type, $key, $object, $force)" 4
.el .IP "\f(CW$form\fR\->resource($type, \f(CW$key\fR, \f(CW$object\fR, \f(CW$force\fR)" 4
.IX Item "$form->resource($type, $key, $object, $force)"
.PD
Get or add a resource required by the form's contents, such as a Font, XObject, ColorSpace, etc.
.Sp
By default, an existing \f(CW$key\fR will not be overwritten.  Set \f(CW$force\fR to override this behavior.
