.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Resource::XObject::Form::BarCode::qrcode 3"
.TH PDF::API2::Resource::XObject::Form::BarCode::qrcode 3 2024-05-18 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::API2::Resource::XObject::Form::BarCode::qrcode \- Generate QR codes
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use PDF::API2;
\&
\&    my $pdf = PDF::API2\->new();
\&    my $page = $pdf\->page();
\&
\&    # Create a QR Code object
\&    my $barcode = $pdf\->barcode(\*(Aqqr\*(Aq, \*(AqThis is a test\*(Aq);
\&
\&    # Calculate the scale needed for a desired size (72pt / inch)
\&    my $desired_inches = 2;
\&    my $scale = $desired_inches * 72 / $barcode\->width();
\&
\&    # Place the QR Code one inch (72pt) from the bottom left corner
\&    $page\->object($barcode, 72, 72, $scale);
\&
\&    $pdf\->save(\*(Aqqr_test.pdf\*(Aq);
.Ve
.SH REQUIREMENTS
.IX Header "REQUIREMENTS"
Text::QRCode is used to encode QR codes.
.SH OPTIONS
.IX Header "OPTIONS"
.Vb 1
\&    my $barcode = $pdf\->barcode(\*(Aqqr\*(Aq, $value, %options);
.Ve
.PP
The following standard barcode options are supported, as described in
"barcode" in PDF::API2:
.IP \(bu 4
bar_width (default: 1; unit is points)
.IP \(bu 4
bar_height (default: bar width)
.IP \(bu 4
quiet_zone (default: 4x bar width)
.IP \(bu 4
color (default: black)
.PP
The following options are specific to QR codes:
.IP \(bu 4
error_correction (default: L)
.Sp
The QR Code Error Correction Level.  Higher levels of error correction generate
larger bar codes but remain scannable when parts of the code are damaged or
obscured.
.Sp
In increasing order of error correction, the possible values are:
.RS 4
.IP \(bu 4
L (7%)
.IP \(bu 4
M (15%)
.IP \(bu 4
Q (25%)
.IP \(bu 4
H (30%)
.RE
.RS 4
.RE
.IP \(bu 4
version (default: 0)
.Sp
If you need a specific version of QR Code, enter it here.  Otherwise, the
minimum version will be used that can support the encoded value.
.IP \(bu 4
mode (default: 8\-bit)
.Sp
You can generate smaller QR codes if you're using a restricted character set:
.RS 4
.IP \(bu 4
8\-bit (typically the ISO\-8859\-1 character set)
.IP \(bu 4
kanji
.IP \(bu 4
alphanumeric (digits, uppercase letters, space, or \f(CW\*(C`$ % * + \- . / :\*(C'\fR)
.IP \(bu 4
numeric (digits)
.RE
.RS 4
.RE
.IP \(bu 4
case_sensitive (default: 1)
.Sp
Whether 8\-bit characters should be treated in a case-sensitive manner.
