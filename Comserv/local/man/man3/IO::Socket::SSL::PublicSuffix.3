.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::PublicSuffix 3"
.TH IO::Socket::SSL::PublicSuffix 3 2025-06-03 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
IO::Socket::SSL::PublicSuffix \- provide access to Mozilla's list of effective TLD names
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    # use builtin default
\&    use IO::Socket::SSL::PublicSuffix;
\&    $ps = IO::Socket::SSL::PublicSuffix\->default;
\&
\&    # load from string
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_string("*.uk\en*");
\&
\&    # load from file or file handle
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_file($filename);
\&    $ps = IO::Socket::SSL::PublicSuffix\->from_file(\e*STDIN);
\&
\&
\&    # \-\-\- string in \-> string out
\&    # $rest \-> whatever.host
\&    # $tld  \-> co.uk
\&    my ($rest,$tld) = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq);
\&    my $tld = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq);
\&
\&    # $root_domain \-> host.co.uk
\&    my $root_domain = $ps\->public_suffix(\*(Aqwhatever.host.co.uk\*(Aq, 1);
\&
\&    # \-\-\- array in \-> array out
\&    # $rest \-> [qw(whatever host)]
\&    # $tld  \-> [qw(co uk)]
\&    my ($rest,$tld) = $ps\->public_suffix([qw(whatever host co uk)]);
\&
\& \-\-\-\-
\&
\&    # To update this file with the current list:
\&    perl \-MIO::Socket::SSL::PublicSuffix \-e \*(AqIO::Socket::SSL::PublicSuffix::update_self_from_url()\*(Aq
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module uses the list of effective top level domain names from the mozilla
project to determine the public top level domain for a given hostname.
.SS Method
.IX Subsection "Method"
.IP class\->default(%args) 4
.IX Item "class->default(%args)"
Returns object with builtin default.
\&\f(CW\*(C`min_suffix\*(C'\fR can be given in \f(CW%args\fR to specify the minimal suffix, default
is 1.
.IP class\->from_string(string,%args) 4
.IX Item "class->from_string(string,%args)"
Returns object with configuration from string.
See method \f(CW\*(C`default\*(C'\fR for \f(CW%args\fR.
.ie n .IP "class\->from_file( file name| file handle, %args )" 4
.el .IP "class\->from_file( file name| file handle, \f(CW%args\fR )" 4
.IX Item "class->from_file( file name| file handle, %args )"
Returns object with configuration from file or file handle.
See method \f(CW\*(C`default\*(C'\fR for \f(CW%args\fR.
.ie n .IP "$self\->public_suffix( $host|\e@host, [ $add ] )" 4
.el .IP "\f(CW$self\fR\->public_suffix( \f(CW$host\fR|\e@host, [ \f(CW$add\fR ] )" 4
.IX Item "$self->public_suffix( $host|@host, [ $add ] )"
In array context the function returns the non-tld part and the tld part of the
given hostname, in scalar context only the tld part.
It adds \f(CW$add\fR parts of the non-tld part to the tld, e.g. with \f(CW\*(C`$add=1\*(C'\fR it
will return the root domain.
.Sp
If there were no explicit matches against the public suffix configuration it
will fall back to a suffix of length 1.
.Sp
The function accepts a string or an array-ref (e.g. host split by \f(CW\*(C`.\*(C'\fR). In the
first case it will return string(s), in the latter case array\-ref(s).
.Sp
International hostnames or labels can be in ASCII (IDNA form starting with
\&\f(CW\*(C`xn\-\-\*(C'\fR) or unicode. In the latter case an IDNA handling library needs to be
available.  URI is preferred, but Net::IDN:::Encode, Net::LibIDN are
still supported.
.IP ($self|class)\->can_idn 4
.IX Item "($self|class)->can_idn"
Returns true if IDN support is available.
.SH FILES
.IX Header "FILES"
http://publicsuffix.org/list/effective_tld_names.dat
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Domain::PublicSuffix, Mozilla::PublicSuffix
.SH BUGS
.IX Header "BUGS"
.Vb 5
\& Q: Why yet another module, we already have L<Domain::PublicSuffix> and
\&    L<Mozilla::PublicSuffix>.
\& A: Because the public suffix data change more often than these modules do,
\&    IO::Socket::SSL needs this list and it is more easy this way to keep it
\&    up\-to\-date.
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Steffen Ullrich
