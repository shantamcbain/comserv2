.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::TextBlock 3"
.TH PDF::TextBlock 3 2021-01-11 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::TextBlock \- Easier creation of text blocks when using PDF::API2
or PDF::Builder
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use PDF::API2;   # PDF::Builder also works
\&  use PDF::TextBlock;
\&
\&  my $pdf = PDF::API2\->new( \-file => "40\-demo.pdf" );
\&  my $tb  = PDF::TextBlock\->new({
\&     pdf       => $pdf,
\&     fonts     => {
\&        b => PDF::TextBlock::Font\->new({
\&           pdf  => $pdf,
\&           font => $pdf\->corefont( \*(AqHelvetica\-Bold\*(Aq, \-encoding => \*(Aqlatin1\*(Aq ),
\&        }),
\&     },
\&  });
\&  $tb\->text(
\&     $tb\->garbledy_gook .
\&     \*(Aq <b>This fairly lengthy</b>, rather verbose sentence <b>is tagged</b> to appear \*(Aq .
\&     \*(Aqin a <b>different font, specifically the one we tagged b for "bold".</b> \*(Aq .
\&     $tb\->garbledy_gook .
\&     \*(Aq <href="http://www.omnihotels.com">Click here to visit Omni Hotels.</href> \*(Aq .
\&     $tb\->garbledy_gook . "\en\en" .
\&     "New paragraph.\en\en" .
\&     "Another paragraph."
\&  );
\&  $tb\->apply;
\&  $pdf\->save;
\&  $pdf\->end;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Neither Rick Measham's excellent PDF::API2 tutorial nor PDF::FromHTML are able to cope with
wanting some words inside a text block to be bold. This module makes that task trivial.
.PP
Simply define whatever tags you want PDF::TextBlock to honor inside the fonts hashref, and
then you are free to use HTML-like markup in the text attribute and we'll render those fonts
for you.
.PP
We also honor the HTML-like tag <href>. This means that we add annotation to the PDF for you
which makes the word(s) you wrap in <href> clickable, and we underline those words.
.PP
Note this markup syntax is very rudimentary. We do not support HTML.
Tags cannot overlap each other. There is no way to escape tags inside \fBtext()\fR.
.PP
The tests in t/ generate .pdf files. You might find those examples helpful.
Watch out for 20\-demo.pdf. It spits.  :)
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Our attributes are listed below. They can be set when you call \fBnew()\fR, 
and/or added/changed individually at any time before you call \fBapply()\fR.
.IP pdf 4
.IX Item "pdf"
A PDF::API2 or PDF::Builder object. You must provide this.
.IP text 4
.IX Item "text"
The text of your TextBlock. Defaults to \fBgarbledy_gook()\fR.
.IP x 4
.IX Item "x"
X position from the left of the document. Default is 20/mm.
.IP y 4
.IX Item "y"
Y position from the bottom of the document. Default is 238/mm.
.IP w 4
.IX Item "w"
Width of this text block. Default is 175/mm.
.IP h 4
.IX Item "h"
Height of this text block. Default is 220/mm.
.IP align 4
.IX Item "align"
Alignment of words in the text block. Default is 'justify'. Legal values:
.RS 4
.IP justify 4
.IX Item "justify"
Spreads words out evenly in the text block so that each line ends in the same spot
on the right side of the text block. The last line in a paragraph (too short to fill
the entire line) will be set to 'left'.
.IP fulljustify 4
.IX Item "fulljustify"
Like justify, except that the last line is also spread across the page. The last
line can look very odd with very large gaps.
.IP left 4
.IX Item "left"
Aligns each line to the left.
.IP right 4
.IX Item "right"
Aligns each line to the right.
.RE
.RS 4
.RE
.IP page 4
.IX Item "page"
A PDF::API2::Page or PDF::Builder::Page object. If you don't set this 
manually then we create a new page for you when you call \fBapply()\fR.
.Sp
If you want multiple PDF::TextBlock objects to all render onto the same 
page, you could create a PDF::API2 or PDF::Builder page yourself, and pass 
it in to each PDF::TextBlock object:
.Sp
.Vb 2
\&  my $pdf = PDF::API2\->new( \-file => "mytest.pdf" );
\&  my $page = $pdf\->page();
\&
\&  my $tb  = PDF::TextBlock\->new({
\&     pdf  => $pdf,
\&     page => $page,     # <\-\-\-
\&     ...
.Ve
.Sp
Or after your first \fBapply()\fR you could grab \f(CW$page\fR off of \f(CW$tb\fR.
.Sp
.Vb 7
\&  my $pdf = PDF::API2\->new( \-file => "mytest.pdf" );
\&  my $tb  = PDF::TextBlock\->new({
\&     pdf  => $pdf,
\&     ...
\&  });
\&  $tb\->apply;
\&  my $page = $tb\->page;   # Use the same page
\&
\&  my $tb2 = PDF::TextBlock\->new({
\&     pdf  => $pdf,
\&     page => $page,     # <\-\-\-
\&     ...
.Ve
.IP fonts 4
.IX Item "fonts"
A hashref of HTML-like markup tags and what font objects you want us to use 
when we see that tag in \fBtext()\fR.
.Sp
.Vb 11
\&  my $tb  = PDF::TextBlock\->new({
\&     pdf       => $pdf,
\&     fonts     => {
\&        # font is a PDF::API2::Resource::Font::CoreFont
\&        b => PDF::TextBlock::Font\->new({
\&           pdf  => $pdf,
\&           font => $pdf\->corefont( \*(AqHelvetica\-Bold\*(Aq, \-encoding => \*(Aqlatin1\*(Aq ),
\&           fillcolor => \*(Aq#ff0000\*(Aq,  # red
\&        }),
\&     },
\&  });
.Ve
.PP
The attributes below came from Rick's \fBtext_block()\fR. They do things, 
but I don't really understand them. POD patches welcome.  :)
.PP
<http://rick.measham.id.au/pdf\-api2/>
.IP lead 4
.IX Item "lead"
Leading distance (baseline to baseline spacing). Default is 15/pt.
.IP parspace 4
.IX Item "parspace"
Extra gap between paragraphs. Default is 0/pt.
.IP hang 4
.IX Item "hang"
.PD 0
.IP flindent 4
.IX Item "flindent"
.IP fpindent 4
.IX Item "fpindent"
.IP indent 4
.IX Item "indent"
.PD
.SS apply
.IX Subsection "apply"
This is where we do all the PDF::API2 or PDF::Builder heavy lifting 
for you.
.PP
Returns \f(CW$endw\fR, \f(CW$ypos\fR, \f(CW$overflow\fR.
.PP
I'm not sure what \f(CW$endw\fR is good for, it's straight from Ricks' code.  :)
.PP
\&\f(CW$ypos\fR is useful when you have multiple TextBlock objects and you want to start
the next one wherever the previous one left off.
.PP
.Vb 4
\&  my ($endw, $ypos) = $tb\->apply();
\&  $tb\->y($ypos);
\&  $tb\->text("a bunch more text");
\&  $tb\->apply();
.Ve
.PP
\&\f(CW$overflow\fR is whatever \fBtext()\fR didn't fit inside your TextBlock. 
(Too much text? Your font was too big? You set w and h too small?)
.PP
The original version of this method was \fBtext_block()\fR, which is (c) Rick Measham, 2004\-2007. 
The latest version of \fBtext_block()\fR can be found in the tutorial located at <http://rick.measham.id.au/pdf\-api2/>.
\&\fBtext_block()\fR is released under the LGPL v2.1.
.SS garbledy_gook
.IX Subsection "garbledy_gook"
Returns a scalar containing a paragraph of jibberish. Used by test scripts for 
demonstrations.
.PP
.Vb 1
\&  my $jibberish = $tb\->garbledy_gook(50);
.Ve
.PP
The integer is the numer of jibberish words you want returned. Default is 100.
.SH AUTHOR
.IX Header "AUTHOR"
Jay Hannah, \f(CW\*(C`<jay at jays.net>\*(C'\fR
.SH SUPPORT
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc PDF::TextBlock
.Ve
.PP
Source code and bug reports on github: <http://github.com/jhannah/pdf\-textblock>
.SH ACKNOWLEDGEMENTS
.IX Header "ACKNOWLEDGEMENTS"
This module started from, and has grown on top of, Rick Measham's (aka Woosta) 
"Using PDF::API2" tutorial: http://rick.measham.id.au/pdf\-api2/
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009\-2021 Jay Hannah, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
