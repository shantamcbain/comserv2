.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Page 3"
.TH PDF::API2::Page 3 2024-05-18 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::API2::Page \- Methods to interact with individual pages
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    my $pdf = PDF::API2\->new();
\&
\&    # Add a page to a new or existing PDF
\&    my $page = $pdf\->page();
\&
\&    # Set the page size
\&    $page\->size(\*(Aqletter\*(Aq);
\&
\&    # Set prepress page boundaries
\&    $page\->boundaries(media => \*(Aq12x18\*(Aq, trim => 0.5 * 72);
\&
\&    # Add an image
\&    my $image = $pdf\->image(\*(Aq/path/to/file.jpg\*(Aq);
\&    $page\->object($image, $x, $y, $w, $h);
\&
\&    # Add textual content
\&    my $text = $page\->text();
\&
\&    # Add graphical content (paths and shapes)
\&    my $canvas = $page\->graphics();
.Ve
.SH METHODS
.IX Header "METHODS"
.SS size
.IX Subsection "size"
.Vb 2
\&    # Set the page size using a common name
\&    $page\->size(\*(Aqletter\*(Aq);
\&
\&    # Set the page size using coordinates in points (X1, Y1, X2, Y2)
\&    $page\->size([0, 0, 612, 792]);
\&
\&    # Get the page coordinates in points
\&    my @rectangle = $page\->size();
.Ve
.PP
Set the physical page size (a.k.a. media box) when called with an argument.
See "Page Sizes" below for possible values.  Returns the \f(CW$page\fR object.
.PP
Returns the coordinates of the rectangle enclosing the physical page size when
called without arguments.
.PP
The size method is a convenient shortcut for setting the PDF's media box when
print-related page boundaries aren't required.  It's equivalent to the
following:
.PP
.Vb 2
\&    # Set
\&    $page = $page\->boundaries(media => $size);
\&
\&    # Get
\&    @rectangle = $page\->boundaries\->{\*(Aqmedia\*(Aq}\->@*;
.Ve
.SS boundaries
.IX Subsection "boundaries"
.Vb 6
\&    # Set
\&    $page\->boundaries(
\&        media => \*(Aq13x19\*(Aq,
\&        bleed => [0.75 * 72, 0.75 * 72, 12.25 * 72, 18.25 * 72],
\&        trim  => 0.25 * 72,
\&    );
\&
\&    # Get
\&    %boundaries = $page\->boundaries();
\&    ($x1, $y1, $x2, $y2) = $page\->boundaries(\*(Aqtrim\*(Aq);
.Ve
.PP
Set or replace all prepress page boundaries when called with a hash containing
one or more page boundary definitions.  Returns the \f(CW$page\fR object.
.PP
Returns the current page boundaries if called without arguments.  Returns the
coordinates for the specified page boundary if called with one argument.
.PP
\fIPage Boundaries\fR
.IX Subsection "Page Boundaries"
.PP
PDF defines five page boundaries.  When creating PDFs for print shops, you'll
most commonly use just the media box and trim box.  Traditional print shops may
also use the bleed box when adding printer's marks and other information.
.IP \(bu 4
media
.Sp
The media box defines the boundaries of the physical medium on which the page is
to be printed.  It may include any extended area surrounding the finished page
for bleed, printing marks, or other such purposes.  The default value is a US
letter page (8.5" x 11").
.IP \(bu 4
crop
.Sp
The crop box defines the region to which the contents of the page shall be
clipped (cropped) when displayed or printed.  The default value is the page's
media box.
.Sp
This is a historical page boundary.  You'll likely want to set the bleed and/or
trim boxes instead.
.IP \(bu 4
bleed
.Sp
The bleed box defines the region to which the contents of the page shall be
clipped when output in a production environment.  This may include any extra
bleed area needed to accommodate the physical limitations of cutting, folding,
and trimming equipment.  The actual printed page (media box) may include
printing marks that fall outside the bleed box.  The default value is the page's
crop box.
.IP \(bu 4
trim
.Sp
The trim box defines the intended dimensions of the finished page after
trimming.  It may be smaller than the media box to allow for production-related
content, such as printing instructions, cut marks, or color bars.  The default
value is the page's crop box.
.IP \(bu 4
art
.Sp
The art box defines the extent of the page's meaningful content (including
potential white space) as intended by the page's creator.  The default value is
the page's crop box.
.PP
\fIPage Sizes\fR
.IX Subsection "Page Sizes"
.PP
PDF page sizes are stored as rectangle coordinates.  For convenience, PDF::API2
also supports a number of aliases and shortcuts that are more human-friendly.
.PP
The following formats are available:
.IP \(bu 4
a standard paper size
.Sp
.Vb 1
\&    $page\->boundaries(media => \*(AqA4\*(Aq);
.Ve
.Sp
Aliases for the most common paper sizes are built in (case-insensitive).
.Sp
US: Letter, Legal, Ledger, Tabloid
.Sp
Metric: 4A0, 2A0, A0 \- A6, 4B0, 2B0, and B0 \- B6
.IP \(bu 4
a "WxH" string in inches
.Sp
.Vb 1
\&    $page\->boundaries(media => \*(Aq8.5x11\*(Aq);
.Ve
.Sp
Many US paper sizes are commonly identified by their size in inches rather than
by a particular name.  These can be passed as strings with the width and height
separated by an \f(CW\*(C`x\*(C'\fR.
.Sp
Examples: \f(CW\*(C`4x6\*(C'\fR, \f(CW\*(C`12x18\*(C'\fR, \f(CW\*(C`8.5x11\*(C'\fR
.IP \(bu 4
a number (in points) representing a reduction from the next-larger box
.Sp
.Vb 2
\&    # Note: There are 72 points per inch
\&    $page\->boundaries(media => \*(Aq12x18\*(Aq, trim => 0.5 * 72);
\&
\&    # Equivalent
\&    $page\->boundaries(media => [0,        0,        12   * 72, 18   * 72],
\&                      trim  => [0.5 * 72, 0.5 * 72, 11.5 * 72, 17.5 * 72]);
.Ve
.Sp
This example shows a 12" x 18" physical sheet that will be reduced to a final
size of 11" x 17" by trimming 0.5" from each edge.  The smaller boundary is
assumed to be centered on the larger one.
.Sp
The "next-larger box" follows this order, stopping at the first defined value:
.Sp
.Vb 1
\&    art \-> trim \-> bleed \-> media
\&
\&    crop \-> media
.Ve
.Sp
This option isn't available for the media box since it is by definition the
largest boundary.
.IP \(bu 4
[$width, \f(CW$height\fR] in points
.Sp
.Vb 1
\&    $page\->boundaries(media => [8.5 * 72, 11 * 7.2]);
.Ve
.Sp
For other page or boundary sizes, the width and height (in points) can be given
directly as an array.
.IP \(bu 4
[$x1, \f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR] in points
.Sp
.Vb 1
\&    $page\->boundaries(media => [0, 0, 8.5 * 72, 11 * 72]);
.Ve
.Sp
Finally, the raw coordinates of the bottom-left and top-right corners of a
rectangle can be specified.
.SS rotation
.IX Subsection "rotation"
.Vb 1
\&    $page = $page\->rotation($degrees);
.Ve
.PP
Rotates the page clockwise when displayed or printed.  \f(CW$degrees\fR must be a
multiple of 90 and may be negative for counter-clockwise rotation.
.PP
The coordinate system follows the page rotation.  In other words, after rotating
the page 180 degrees, [0, 0] will be in the top right corner of the page rather
than the bottom left, X will increase to the right, and Y will increase
downward.
.PP
To create a landscape page without moving the origin, use "size".
.SS graphics
.IX Subsection "graphics"
.Vb 1
\&    my $canvas = $page\->graphics(%options);
.Ve
.PP
Returns a PDF::API2::Content object for drawing paths and shapes.
.PP
The following options are available:
.IP \(bu 4
prepend (boolean)
.Sp
If true, place the drawing at the beginning of the page's content stream instead
of the end.
.IP \(bu 4
compress (boolean)
.Sp
Manually specify whether the drawing instructions should be compressed.  If
unspecified, the PDF's compression setting will be used, which is on by default.
.SS text
.IX Subsection "text"
.Vb 1
\&    my $text = $page\->text(%options);
.Ve
.PP
Returns a PDF::API2::Content object for including textual content.
.PP
The options are the same as the "graphics" method.
.SS object
.IX Subsection "object"
.Vb 1
\&    $page = $page\->object($object, $x, $y, $scale_x, $scale_y);
.Ve
.PP
Places an image or other external object (a.k.a. XObject) on the page in the
specified location.
.PP
If \f(CW$x\fR and \f(CW$y\fR are omitted, the object will be placed at \f(CW\*(C`[0, 0]\*(C'\fR.
.PP
For images, \f(CW$scale_x\fR and \f(CW$scale_y\fR represent the width and height of the
image on the page in points.  If \f(CW$scale_x\fR is omitted, it will default to 72
pixels per inch.  If \f(CW$scale_y\fR is omitted, the image will be scaled
proportionally based on the image dimensions.
.PP
For other external objects, the scale is a multiplier, where 1 (the default)
represents 100% (i.e. no change).
.PP
If the object to be placed depends on a coordinate transformation (e.g. rotation
or skew), first create a content object using "graphics", then call
"object" in PDF::API2::Content after making the appropriate transformations.
.SS annotation
.IX Subsection "annotation"
.Vb 1
\&    my $annotation = $page\->annotation();
.Ve
.PP
Returns a new PDF::API2::Annotation object.
.SH MIGRATION
.IX Header "MIGRATION"
See "MIGRATION" in PDF::API2 for an overview.
.IP gfx 4
.IX Item "gfx"
Replace with "graphics".
.IP rotate 4
.IX Item "rotate"
Replace with "rotation".
.IP mediabox 4
.IX Item "mediabox"
.PD 0
.IP get_mediabox 4
.IX Item "get_mediabox"
.PD
Replace with "size" if not in a print shop environment or "boundaries"
if more complex page boundaries are needed.
.Sp
If using page size aliases (e.g. "letter" or "A4"), check the Page Sizes section
to ensure that the alias you're using is still supported (you'll get an error if
it isn't).
.IP cropbox 4
.IX Item "cropbox"
.PD 0
.IP bleedbox 4
.IX Item "bleedbox"
.IP trimbox 4
.IX Item "trimbox"
.IP artbox 4
.IX Item "artbox"
.IP get_cropbox 4
.IX Item "get_cropbox"
.IP get_bleedbox 4
.IX Item "get_bleedbox"
.IP get_trimbox 4
.IX Item "get_trimbox"
.IP get_artbox 4
.IX Item "get_artbox"
.PD
Replace with "boundaries".
