.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Moose::Meta::Class 3"
.TH Moose::Meta::Class 3 2025-07-04 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Moose::Meta::Class \- The Moose metaclass
.SH VERSION
.IX Header "VERSION"
version 2.4000
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class is a subclass of Class::MOP::Class that provides
additional Moose-specific functionality.
.PP
To really understand this class, you will need to start with the
Class::MOP::Class documentation. This class can be understood as a
set of additional features on top of the basic feature provided by
that parent class.
.SH INHERITANCE
.IX Header "INHERITANCE"
\&\f(CW\*(C`Moose::Meta::Class\*(C'\fR is a subclass of Class::MOP::Class.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "\fBMoose::Meta::Class\->initialize($package_name, \fR\fB%options\fR\fB)\fR" 4
.el .IP "\fBMoose::Meta::Class\->initialize($package_name, \fR\f(CB%options\fR\fB)\fR" 4
.IX Item "Moose::Meta::Class->initialize($package_name, %options)"
This overrides the parent's method in order to provide its own
defaults for the \f(CW\*(C`attribute_metaclass\*(C'\fR, \f(CW\*(C`instance_metaclass\*(C'\fR, and
\&\f(CW\*(C`method_metaclass\*(C'\fR options.
.Sp
These all default to the appropriate Moose class.
.ie n .IP "\fBMoose::Meta::Class\->create($package_name, \fR\fB%options\fR\fB)\fR" 4
.el .IP "\fBMoose::Meta::Class\->create($package_name, \fR\f(CB%options\fR\fB)\fR" 4
.IX Item "Moose::Meta::Class->create($package_name, %options)"
This overrides the parent's method in order to accept a \f(CW\*(C`roles\*(C'\fR
option. This should be an array reference containing roles
that the class does, each optionally followed by a hashref of options
(\f(CW\*(C`\-excludes\*(C'\fR and \f(CW\*(C`\-alias\*(C'\fR).
.Sp
.Vb 1
\&  my $metaclass = Moose::Meta::Class\->create( \*(AqNew::Class\*(Aq, roles => [...] );
.Ve
.IP \fBMoose::Meta::Class\->create_anon_class\fR 4
.IX Item "Moose::Meta::Class->create_anon_class"
This overrides the parent's method to accept a \f(CW\*(C`roles\*(C'\fR option, just
as \f(CW\*(C`create\*(C'\fR does.
.Sp
It also accepts a \f(CW\*(C`cache\*(C'\fR option. If this is \f(CW\*(C`true\*(C'\fR, then the anonymous
class will be cached based on its superclasses and roles. If an
existing anonymous class in the cache has the same superclasses and
roles, it will be reused.
.Sp
.Vb 5
\&  my $metaclass = Moose::Meta::Class\->create_anon_class(
\&      superclasses => [\*(AqFoo\*(Aq],
\&      roles        => [qw/Some Roles Go Here/],
\&      cache        => 1,
\&  );
.Ve
.Sp
Each entry in both the \f(CW\*(C`superclasses\*(C'\fR and the \f(CW\*(C`roles\*(C'\fR option can be
followed by a hash reference with arguments. The \f(CW\*(C`superclasses\*(C'\fR
option can be supplied with a \-version option that ensures the loaded superclass satisfies the
required version. The \f(CW\*(C`role\*(C'\fR option also takes the \f(CW\*(C`\-version\*(C'\fR as an
argument, but the option hash reference can also contain any other
role relevant values like exclusions or parameterized role arguments.
.ie n .IP \fR\fB$metaclass\fR\fB\->new_object(%params)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->new_object(%params)\fR 4
.IX Item "$metaclass->new_object(%params)"
This overrides the parent's method in order to add support for
attribute triggers.
.ie n .IP \fR\fB$metaclass\fR\fB\->superclasses(@superclasses)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->superclasses(@superclasses)\fR 4
.IX Item "$metaclass->superclasses(@superclasses)"
This is the accessor allowing you to read or change the parents of
the class.
.Sp
Each superclass can be followed by a hash reference containing a
\&\-version value. If the version
requirement is not satisfied an error will be thrown.
.Sp
When you pass classes to this method, we will attempt to load them if they are
not already loaded.
.ie n .IP "\fR\fB$metaclass\fR\fB\->add_override_method_modifier($name, \fR\fB$sub\fR\fB)\fR" 4
.el .IP "\fR\f(CB$metaclass\fR\fB\->add_override_method_modifier($name, \fR\f(CB$sub\fR\fB)\fR" 4
.IX Item "$metaclass->add_override_method_modifier($name, $sub)"
This adds an \f(CW\*(C`override\*(C'\fR method modifier to the package.
.ie n .IP "\fR\fB$metaclass\fR\fB\->add_augment_method_modifier($name, \fR\fB$sub\fR\fB)\fR" 4
.el .IP "\fR\f(CB$metaclass\fR\fB\->add_augment_method_modifier($name, \fR\f(CB$sub\fR\fB)\fR" 4
.IX Item "$metaclass->add_augment_method_modifier($name, $sub)"
This adds an \f(CW\*(C`augment\*(C'\fR method modifier to the package.
.ie n .IP \fR\fB$metaclass\fR\fB\->calculate_all_roles\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->calculate_all_roles\fR 4
.IX Item "$metaclass->calculate_all_roles"
This will return a unique list of Moose::Meta::Role instances
which are attached to this class.
.ie n .IP \fR\fB$metaclass\fR\fB\->calculate_all_roles_with_inheritance\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->calculate_all_roles_with_inheritance\fR 4
.IX Item "$metaclass->calculate_all_roles_with_inheritance"
This will return a unique list of Moose::Meta::Role instances
which are attached to this class, and each of this class's ancestors.
.ie n .IP \fR\fB$metaclass\fR\fB\->add_role($role)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->add_role($role)\fR 4
.IX Item "$metaclass->add_role($role)"
This takes a Moose::Meta::Role object, and adds it to the class's
list of roles. This \fIdoes not\fR actually apply the role to the class.
.ie n .IP \fR\fB$metaclass\fR\fB\->role_applications\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->role_applications\fR 4
.IX Item "$metaclass->role_applications"
Returns a list of Moose::Meta::Role::Application::ToClass
objects, which contain the arguments to role application.
.ie n .IP \fR\fB$metaclass\fR\fB\->add_role_application($application)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->add_role_application($application)\fR 4
.IX Item "$metaclass->add_role_application($application)"
This takes a Moose::Meta::Role::Application::ToClass object, and
adds it to the class's list of role applications. This \fIdoes not\fR
actually apply any role to the class; it is only for tracking role
applications.
.ie n .IP \fR\fB$metaclass\fR\fB\->does_role($role)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->does_role($role)\fR 4
.IX Item "$metaclass->does_role($role)"
This returns a boolean indicating whether or not the class does the specified
role. The role provided can be either a role name or a Moose::Meta::Role
object. This tests both the class and its parents.
.ie n .IP \fR\fB$metaclass\fR\fB\->excludes_role($role_name)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->excludes_role($role_name)\fR 4
.IX Item "$metaclass->excludes_role($role_name)"
A class excludes a role if it has already composed a role which
excludes the named role. This tests both the class and its parents.
.ie n .IP "\fR\fB$metaclass\fR\fB\->add_attribute($attr_name, \fR\fB%params\fR\fB|$params)\fR" 4
.el .IP "\fR\f(CB$metaclass\fR\fB\->add_attribute($attr_name, \fR\f(CB%params\fR\fB|$params)\fR" 4
.IX Item "$metaclass->add_attribute($attr_name, %params|$params)"
This overrides the parent's method in order to allow the parameters to
be provided as a hash reference.
.ie n .IP \fR\fB$metaclass\fR\fB\->constructor_class($class_name)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->constructor_class($class_name)\fR 4
.IX Item "$metaclass->constructor_class($class_name)"
.PD 0
.ie n .IP \fR\fB$metaclass\fR\fB\->destructor_class($class_name)\fR 4
.el .IP \fR\f(CB$metaclass\fR\fB\->destructor_class($class_name)\fR 4
.IX Item "$metaclass->destructor_class($class_name)"
.PD
These are the names of classes used when making a class immutable. These
default to Moose::Meta::Method::Constructor and
Moose::Meta::Method::Destructor respectively. These accessors are
read-write, so you can use them to change the class name.
.SH BUGS
.IX Header "BUGS"
See "BUGS" in Moose for details on reporting bugs.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Stevan Little <stevan@cpan.org>
.IP \(bu 4
Dave Rolsky <autarch@urth.org>
.IP \(bu 4
Jesse Luehrs <doy@cpan.org>
.IP \(bu 4
Shawn M Moore <sartak@cpan.org>
.IP \(bu 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP \(bu 4
Karen Etheridge <ether@cpan.org>
.IP \(bu 4
Florian Ragwitz <rafl@debian.org>
.IP \(bu 4
Hans Dieter Pearcey <hdp@cpan.org>
.IP \(bu 4
Chris Prather <chris@prather.org>
.IP \(bu 4
Matt S Trout <mstrout@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
