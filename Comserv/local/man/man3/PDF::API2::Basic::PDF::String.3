.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::String 3"
.TH PDF::API2::Basic::PDF::String 3 2024-05-18 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PDF::API2::Basic::PDF::String \- Low\-level PDF string object
.SH METHODS
.IX Header "METHODS"
.SS PDF::API2::Basic::PDF::String\->from_pdf($string)
.IX Subsection "PDF::API2::Basic::PDF::String->from_pdf($string)"
Creates a new string object (not a full object yet) from a given
string.  The string is parsed according to input criteria with
escaping working.
.SS PDF::API2::Basic::PDF::String\->new($string)
.IX Subsection "PDF::API2::Basic::PDF::String->new($string)"
Creates a new string object (not a full object yet) from a given
string.  The string is parsed according to input criteria with
escaping working.
.ie n .SS $s\->convert($str)
.el .SS \f(CW$s\fP\->convert($str)
.IX Subsection "$s->convert($str)"
Returns \f(CW$str\fR converted as per criteria for input from PDF file
.ie n .SS $s\->val
.el .SS \f(CW$s\fP\->val
.IX Subsection "$s->val"
Returns the value of this string (the string itself).
.SS $\->as_pdf
.IX Subsection "$->as_pdf"
Returns the string formatted for output as PDF for PDF File object \f(CW$pdf\fR.
.ie n .SS $s\->outobjdeep
.el .SS \f(CW$s\fP\->outobjdeep
.IX Subsection "$s->outobjdeep"
Outputs the string in PDF format, complete with necessary conversions
