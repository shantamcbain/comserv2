.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Image 3pm"
.TH WWW::Mechanize::Image 3pm 2024-09-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
WWW::Mechanize::Image \- Image object for WWW::Mechanize
.SH VERSION
.IX Header "VERSION"
version 2.19
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Image object to encapsulate all the stuff that Mech needs
.SH Constructor
.IX Header "Constructor"
.SS \fBnew()\fP
.IX Subsection "new()"
Creates and returns a new \f(CW\*(C`WWW::Mechanize::Image\*(C'\fR object.
.PP
.Vb 10
\&    my $image = WWW::Mechanize::Image\->new( {
\&        url    => $url,
\&        base   => $base,
\&        tag    => $tag,
\&        name   => $name,     # From the INPUT tag
\&        height => $height,   # optional
\&        width  => $width,    # optional
\&        alt    => $alt,      # optional
\&        attrs  => $attr_ref, # optional
\&    } );
.Ve
.SH Accessors
.IX Header "Accessors"
.ie n .SS $image\->\fBurl()\fP
.el .SS \f(CW$image\fP\->\fBurl()\fP
.IX Subsection "$image->url()"
Image URL from the \f(CW\*(C`src\*(C'\fR attribute of the source tag.
.PP
May be \f(CW\*(C`undef\*(C'\fR if source tag has no \f(CW\*(C`src\*(C'\fR attribute.
.ie n .SS $image\->\fBbase()\fP
.el .SS \f(CW$image\fP\->\fBbase()\fP
.IX Subsection "$image->base()"
Base URL to which the links are relative.
.ie n .SS $image\->\fBname()\fP
.el .SS \f(CW$image\fP\->\fBname()\fP
.IX Subsection "$image->name()"
Name for the field from the NAME attribute, if any.
.ie n .SS $image\->\fBtag()\fP
.el .SS \f(CW$image\fP\->\fBtag()\fP
.IX Subsection "$image->tag()"
Tag name (either "image" or "input")
.ie n .SS $image\->\fBheight()\fP
.el .SS \f(CW$image\fP\->\fBheight()\fP
.IX Subsection "$image->height()"
Image height
.ie n .SS $image\->\fBwidth()\fP
.el .SS \f(CW$image\fP\->\fBwidth()\fP
.IX Subsection "$image->width()"
Image width
.ie n .SS $image\->\fBalt()\fP
.el .SS \f(CW$image\fP\->\fBalt()\fP
.IX Subsection "$image->alt()"
ALT attribute from the source tag, if any.
.ie n .SS $image\->\fBattrs()\fP
.el .SS \f(CW$image\fP\->\fBattrs()\fP
.IX Subsection "$image->attrs()"
Hash ref of all the attributes and attribute values in the tag.
.ie n .SS $image\->\fBURI()\fP
.el .SS \f(CW$image\fP\->\fBURI()\fP
.IX Subsection "$image->URI()"
Returns the URL as a URI::URL object.
.ie n .SS $image\->\fBurl_abs()\fP
.el .SS \f(CW$image\fP\->\fBurl_abs()\fP
.IX Subsection "$image->url_abs()"
Returns the URL as an absolute URL string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
WWW::Mechanize and WWW::Mechanize::Link
.SH AUTHOR
.IX Header "AUTHOR"
Andy Lester <andy at petdance.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Andy Lester.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
