.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::JSON 3pm"
.TH Template::Plugin::JSON 3pm 2019-03-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Template::Plugin::JSON \- Adds a .json vmethod for all TT values.
.SH VERSION
.IX Header "VERSION"
version 0.08
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&        [% USE JSON ( pretty => 1 ) %];
\&
\&        <script type="text/javascript">
\&
\&                var foo = [% foo.json %];
\&
\&        </script>
\&
\&        or read in JSON
\&
\&        [% USE JSON %]
\&        [% data = JSON.json_decode(json) %]
\&        [% data.thing %]
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This plugin provides a \f(CW\*(C`.json\*(C'\fR vmethod to all value types when loaded. You
can also decode a json string back to a data structure.
.PP
It will load the JSON::MaybeXS module, which will use Cpanel::JSON::XS
when possible and fall back to JSON::PP otherwise.
.PP
Any options on the USE line are passed through to the JSON object, much like "to_json" in Cpanel::JSON::XS.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
JSON::MaybeXS, Template::Plugin
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Template-Plugin-JSON>
(or bug\-Template\-Plugin\-JSON@rt.cpan.org <mailto:bug-Template-Plugin-JSON@rt.cpan.org>).
.SH AUTHOR
.IX Header "AUTHOR"
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Neil Bowers <neil@bowers.com>
.IP \(bu 4
Karen Etheridge <ether@cpan.org>
.IP \(bu 4
Graham Barr <gbarr@pobox.com>
.IP \(bu 4
Leo Lapworth <leo@cuckoo.org>
.IP \(bu 4
perigrin <perigrin@cpan.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is Copyright (c) 2006 by Yuval Kogman.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The MIT (X11) License
.Ve
