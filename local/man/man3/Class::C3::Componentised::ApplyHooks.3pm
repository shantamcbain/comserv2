.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Class::C3::Componentised::ApplyHooks 3pm"
.TH Class::C3::Componentised::ApplyHooks 3pm 2018-02-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Class::C3::Componentised::ApplyHooks \- Run methods before or after components are injected
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& package MyComponent;
\&
\& our %statistics;
\&
\& use Class::C3::Componentised::ApplyHooks
\&   \-before_apply => sub {
\&     my ($class, $component) = @_;
\&
\&     push @{$statistics{$class}}, \*(Aq\-before_apply\*(Aq;
\&   },
\&   \-after_apply  => sub {
\&     my ($class, $component) = @_;
\&
\&     push @{$statistics{$class}}, \*(Aq\-after_apply\*(Aq;
\&   }, qw(BEFORE_APPLY AFTER_APPLY);
\&
\& BEFORE_APPLY { push @{$statistics{$class}}, \*(AqBEFORE_APPLY\*(Aq };
\& AFTER_APPLY { push @{$statistics{$class}}, \*(AqAFTER_APPLY\*(Aq };
\& AFTER_APPLY { use Devel::Dwarn; Dwarn %statistics };
\&
\& 1;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This package allows a given component to run methods on the class that is being
injected into before or after the component is injected.  Note from the
"SYNOPSIS" that all \f(CW\*(C`Load Actions\*(C'\fR may be run more than once.
.SH "IMPORT ACTION"
.IX Header "IMPORT ACTION"
Both import actions simply run a list of coderefs that will be passed the class
that is being acted upon and the component that is being added to the class.
.SH "IMPORT OPTIONS"
.IX Header "IMPORT OPTIONS"
.SS \-before_apply
.IX Subsection "-before_apply"
Adds a before apply action for the current component without importing
any subroutines into your namespace.
.SS \-after_apply
.IX Subsection "-after_apply"
Adds an after apply action for the current component without importing
any subroutines into your namespace.
.SH "EXPORTED SUBROUTINES"
.IX Header "EXPORTED SUBROUTINES"
.SS BEFORE_APPLY
.IX Subsection "BEFORE_APPLY"
.Vb 1
\& BEFORE_APPLY { warn "about to apply $_[1] to class $_[0]"  };
.Ve
.PP
Adds a before apply action for the current component.
.SS AFTER_APPLY
.IX Subsection "AFTER_APPLY"
.Vb 1
\& AFTER_APPLY { warn "just applied $_[1] to class $_[0]"  };
.Ve
.PP
Adds an after apply action for the current component.
