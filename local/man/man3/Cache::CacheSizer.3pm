.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cache::CacheSizer 3pm"
.TH Cache::CacheSizer 3pm 2015-01-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Cache::CacheSizer \-\- component object for managing the size of caches
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The CacheSizer class is used internally in SizeAware caches such as
SizeAwareFileCache to encapsulate the logic of limiting cache size.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cache::CacheSizer;
\&
\&  my $sizer = new Cache::CacheSizer( $cache, $max_size );
\&
\&  $sizer\->limit_size( $new_size );
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .IP "\fBnew( \fR\fB$cache\fR\fB, \fR\fB$max_size\fR\fB )\fR" 4
.el .IP "\fBnew( \fR\f(CB$cache\fR\fB, \fR\f(CB$max_size\fR\fB )\fR" 4
.IX Item "new( $cache, $max_size )"
Construct a new Cache::CacheSizer object for the cache \fR\f(CI$cache\fR\fI\fR with
a maximum size of \fI\fR\f(CI$max_size\fR\fI\fR.
.ie n .IP "\fBupdate_access_time( \fR\fB$key\fR\fB )\fR" 4
.el .IP "\fBupdate_access_time( \fR\f(CB$key\fR\fB )\fR" 4
.IX Item "update_access_time( $key )"
Inform the cache that the object specified by \fR\f(CI$key\fR\fI\fR has been accessed.
.ie n .IP "\fBlimit_size( \fR\fB$new_size\fR\fB )\fR" 4
.el .IP "\fBlimit_size( \fR\f(CB$new_size\fR\fB )\fR" 4
.IX Item "limit_size( $new_size )"
Use the sizing algorithms to get the cache down under \fR\f(CI$new_size\fR\fI\fR if
possible.
.SH PROPERTIES
.IX Header "PROPERTIES"
.IP \fBget_max_size\fR 4
.IX Item "get_max_size"
The desired size limit for the cache under control.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::Cache, Cache::CacheMetaData, Cache::SizeAwareCache
.SH AUTHOR
.IX Header "AUTHOR"
Original author: DeWitt Clinton <dewitt@unto.net>
.PP
Last author:     \f(CW$Author:\fR dclinton $
.PP
Copyright (C) 2001\-2003 DeWitt Clinton
