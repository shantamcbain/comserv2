.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::Debug::PrettyTrace 3pm"
.TH DBIx::Class::Storage::Debug::PrettyTrace 3pm 2022-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::Debug::PrettyTrace \- Pretty Tracing DebugObj
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& DBIC_TRACE_PROFILE=~/dbic.json perl \-Ilib ./foo.pl
.Ve
.PP
Where dbic.json contains:
.PP
.Vb 5
\& {
\&   "profile":"console",
\&   "show_progress":1,
\&   "squash_repeats":1
\& }
.Ve
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
.Vb 9
\& my $pp = DBIx::Class::Storage::Debug::PrettyTrace\->new({
\&   show_progress  => 1,             # tries it\*(Aqs best to make it clear that a SQL
\&                                    # statement is still running
\&   executing      => \*(Aq...\*(Aq,         # the string that is added to the end of SQL
\&                                    # if show_progress is on.  You probably don\*(Aqt
\&                                    # need to set this
\&   clear_line     => \*(Aq<CR><ESC>[J\*(Aq, # the string used to erase the string added
\&                                    # to SQL if show_progress is on.  Again, the
\&                                    # default is probably good enough.
\&
\&   squash_repeats => 1,             # set to true to make repeated SQL queries
\&                                    # be ellided and only show the new bind params
\&   # any other args are passed through directly to SQL::Abstract::Tree
\& });
.Ve
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
