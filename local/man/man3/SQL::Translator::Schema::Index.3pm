.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Schema::Index 3pm"
.TH SQL::Translator::Schema::Index 3pm 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Schema::Index \- SQL::Translator index object
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 6
\&  use SQL::Translator::Schema::Index;
\&  my $index = SQL::Translator::Schema::Index\->new(
\&      name   => \*(Aqfoo\*(Aq,
\&      fields => [ id ],
\&      type   => \*(Aqunique\*(Aq,
\&  );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`SQL::Translator::Schema::Index\*(C'\fR is the index object.
.PP
Primary and unique keys are table constraints, not indices.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Object constructor.
.PP
.Vb 1
\&  my $schema = SQL::Translator::Schema::Index\->new;
.Ve
.SS fields
.IX Subsection "fields"
Gets and set the fields the index is on.  Accepts a string, list or
arrayref; returns an array or array reference.  Will unique the field
names and keep them in order by the first occurrence of a field name.
.PP
.Vb 6
\&  $index\->fields(\*(Aqid\*(Aq);
\&  $index\->fields(\*(Aqid\*(Aq, \*(Aqname\*(Aq);
\&  $index\->fields( \*(Aqid, name\*(Aq );
\&  $index\->fields( [ \*(Aqid\*(Aq, \*(Aqname\*(Aq ] );
\&  $index\->fields( qw[ id name ] );
\&  $index\->fields(id => { name => \*(Aqname\*(Aq, order_by => \*(AqASC NULLS LAST\*(Aq });
\&
\&  my @fields = $index\->fields;
.Ve
.SS is_valid
.IX Subsection "is_valid"
Determine whether the index is valid or not.
.PP
.Vb 1
\&  my $ok = $index\->is_valid;
.Ve
.SS name
.IX Subsection "name"
Get or set the index's name.
.PP
.Vb 1
\&  my $name = $index\->name(\*(Aqfoo\*(Aq);
.Ve
.SS options
.IX Subsection "options"
Get or set the index's options (e.g., "using" or "where" for PG).  Returns
an array or array reference.
.PP
.Vb 1
\&  my @options = $index\->options;
.Ve
.SS table
.IX Subsection "table"
Get or set the index's table object.
.PP
.Vb 1
\&  my $table = $index\->table;
.Ve
.SS type
.IX Subsection "type"
Get or set the index's type.
.PP
.Vb 1
\&  my $type = $index\->type(\*(Aqunique\*(Aq);
.Ve
.PP
Get or set the index's type.
.PP
Currently there are only four acceptable types: UNIQUE, NORMAL, FULL_TEXT,
and SPATIAL. The latter two might be MySQL-specific. While both lowercase
and uppercase types are acceptable input, this method returns the type in
uppercase.
.SS equals
.IX Subsection "equals"
Determines if this index is the same as another
.PP
.Vb 1
\&  my $isIdentical = $index1\->equals( $index2 );
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.
