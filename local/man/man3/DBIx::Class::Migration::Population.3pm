.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Population 3pm"
.TH DBIx::Class::Migration::Population 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Population \- Utility to populate fixture data
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use DBIx::Class::Migration::Population;
\&  use MyApp::Schema;
\&
\&  $schema = MyApp::Schema\->connect(...);
\&  (my $population = DBIx::Class::Migration::Population\->new(
\&    schema=>$schema))\->populate(\*(Aqall_tables\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Sometimes you just need to populate data for your scripts, such as during
testing and you don't want to expose a full migrations interface and let
someone accidently wipe your database with one command.  This utility is
designed to assist.  It is basically a thin wrapper on DBIx::Class::Fixtures
that is just aware of DBIx::Class::Migration conventions.
.PP
You create an instance of this similarly to DBIx::Class::Migration, except
you can't pass any arguments related to DBIx::Class::DeploymentHandler since
you don't have one :).  You can create it from an existing schema, or build it
from a schema_class and schema_args, and optional set a target directory (or
just let it use the default distribution share directory).  Afterwards we
expose a \f(CW\*(C`populate\*(C'\fR method that takes a list of fixture set names.
.PP
You don't have any control over which version we are trying to populate, we
always use the declared schema Version.  We assume you have an existing
deployed database that matches the current schema.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Manual::Example
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
