.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::PostgresqlSandbox 3pm"
.TH DBIx::Class::Migration::PostgresqlSandbox 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::PostgresqlSandbox \- Autocreate a postgresql sandbox
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use DBIx::Class::Migration;
\&
\&    my $migration = DBIx::Class::Migration\->new(
\&      schema_class=>\*(AqLocal::Schema\*(Aq,
\&      db_sandbox_class=>\*(AqDBIx::Class::Migration::PostgresqlSandbox\*(Aq),
\&
\&    $migration\->prepare;
\&    $migration\->install;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This automatically creates a postgresql sandbox in your \f(CW\*(C`target_dir\*(C'\fR that you can
use for initial prototyping, development and demonstration.  If you want to
use this, you will need to add Test::Postgresql58 to your \f(CW\*(C`Makefile.PL\*(C'\fR or your
\&\f(CW\*(C`dist.ini\*(C'\fR file, and get that installed properly.  It also requires that you
have Postgresql installed locally (although Postgresql does not need to be running, as
long as we can find in \f(CW$PATH\fR the binary installation).  If your copy of Postgresql
is not installed in a normal location, you might need to locally alter \f(CW$PATH\fR
so that we can find it. For example, on my Mac, the path to Postgresql binaries
are at \f(CW\*(C`/Library/PostgreSQL/bin\*(C'\fR so you can alter the PATH for a single command
like so:
.PP
.Vb 1
\&    PATH=Library/PostgreSQL/bin:$PATH [command]
.Ve
.PP
Or, if you are using Postgresql a lot, you can edit your \f(CW\*(C`.bashrc\*(C'\fR to make the
above permanent.
.PP
NOTE: You might find installing DBD::Pg to be easier if you edit the
\&\f(CW$PATH\fR before trying to install it.
.PP
In addition to the Postgresql sandbox, we create several helper scripts \f(CW\*(C`start\*(C'\fR,
\&\f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`use\*(C'\fR which can be used to start, stop and open shell level access
to you mysql sandbox.  \f(CW\*(C`dump\*(C'\fR lets you easily access pg_dump and \f(CW\*(C`config\*(C'\fR is
a Perl library that returns a hashref of the connection info, which is suitable
to use in DBIx::Class Schema connect.
.PP
These helper scripts will be located in a child directory of your \f(CW\*(C`target_dir\*(C'\fR
(which defaults to \f(CW\*(C`share\*(C'\fR under your project root directory).  For example:
.PP
.Vb 1
\&    [target_dir]/[schema_class]/bin/[start|stop|use]
.Ve
.PP
If your schema class is \f(CW\*(C`MyApp::Schema\*(C'\fR you should see helper scripts like
.PP
.Vb 10
\&    /MyApp\-Web
\&      /lib
\&        /MyApp
\&          Schema.pm
\&          /Schema
\&            ...
\&      /share
\&        /migrations
\&        /fixtures
\&        /myapp\-schema
\&          /bin
\&            config
\&            dump
\&            start
\&            stop
\&            use
.Ve
.PP
This give you a system for installing a sandbox locally for development,
starting and stopping it for use (for example in a web application like one you
might create with Catalyst) and for using it by opening a native \f(CW\*(C`psql\*(C'\fR
shell (such as if you wish to review the database manually, and run native SQL
queries).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBD::Pg, Test::Postgresql58.
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
