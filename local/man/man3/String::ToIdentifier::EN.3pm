.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::ToIdentifier::EN 3pm"
.TH String::ToIdentifier::EN 3pm 2018-02-26 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
String::ToIdentifier::EN \- Convert Strings to English Program Identifiers
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use utf8;
\&    use String::ToIdentifier::EN \*(Aqto_identifier\*(Aq;
\&
\&    to_identifier \*(Aqfoo\-bar\*(Aq;             # fooDashBar
\&    to_identifier \*(Aqfoo\-bar\*(Aq, \*(Aq_\*(Aq;        # foo_dash_bar
\&    to_identifier \*(Aqfoo.bar\*(Aq, \*(Aq_\*(Aq;        # foo_dot_bar
\&    to_identifier "foo\ex{4EB0}bar";      # fooJingBar
\&    to_identifier "foo\ex00bar";          # fooNullCharBar
\&    to_identifier "foo\ex00\ex00bar";      # foo2NullCharsBar
\&    to_identifier "foo\ex00\ex00bar", \*(Aq_\*(Aq; # foo_2_null_chars_bar
\&
\&    {
\&        no utf8;
\&        to_identifier "foo\exFF\exFFbar.baz";      # foo_2_0xFF_BarDotBaz
\&        to_identifier "foo\exFF\exFFbar.baz", \*(Aq_\*(Aq; # foo_2_0xFF_bar_dot_baz
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a utility method, "to_identifier" for converting an
arbitrary string into a readable representation using the ASCII subset of \f(CW\*(C`\ew\*(C'\fR
for use as an identifier in a computer program. The intent is to make unique
identifier names from which the content of the original string can be easily
inferred by a human just by reading the identifier.
.PP
If you need the full set of \f(CW\*(C`\ew\*(C'\fR including Unicode, see
the subclass String::ToIdentifier::EN::Unicode.
.PP
Currently, this process is one way only, and will likely remain this way.
.PP
The default is to create camelCase identifiers, or you may pass in a separator
char of your choice such as \f(CW\*(C`_\*(C'\fR.
.PP
Binary char groups will be separated by \f(CW\*(C`_\*(C'\fR even in camelCase identifiers to
make them easier to read, e.g.: \f(CW\*(C`foo_2_0xFF_Bar\*(C'\fR.
.SH EXPORT
.IX Header "EXPORT"
Optionally exports the "to_identifier" function.
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS to_identifier
.IX Subsection "to_identifier"
Takes the string to be converted to an identifier, and optionally a separator
char such as \f(CW\*(C`_\*(C'\fR. If a separator char is not provided, a camelCase identifier
will be returned.
.SH METHODS
.IX Header "METHODS"
.SS string_to_identifier
.IX Subsection "string_to_identifier"
The class method version of "to_identifier", if you want to use the object
oriented interface.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
String::ToIdentifier::EN::Unicode,
Text::Unidecode,
Lingua::EN::Inflect::Phrase
.SH AUTHOR
.IX Header "AUTHOR"
Rafael Kitover, \f(CW\*(C`<rkitover@gmail.com>\*(C'\fR
.SH REPOSITORY
.IX Header "REPOSITORY"
<http://github.com/rkitover/string\-toidentifier\-en>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2018 Rafael Kitover <rkitover@gmail.com>.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
