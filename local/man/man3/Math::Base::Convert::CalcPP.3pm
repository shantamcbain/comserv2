.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::Base::Convert::CalcPP 3pm"
.TH Math::Base::Convert::CalcPP 3pm 2015-10-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Math::Base::Convert::CalcPP \- standard methods used by Math::Base::Convert
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module contains the standard methods used by \fBMath::Base::Convert\fR to
convert from one base number to another base number.
.IP \(bu 4
\&\f(CW$carry\fR = addbaseno($reg32ptr,$int)
.Sp
This function adds an integer < 65536 to a long n*32 bit register and
returns the carry.
.IP \(bu 4
multiply($reg32ptr,$int)
.Sp
This function multiplies a long n*32 bit register by an integer < 65536
.IP \(bu 4
($qptr,$remainder) = dividebybase($reg32ptr,$int)
.Sp
this function divides a long n*32 bit register by an integer < 65536 and
returns a pointer to a long n*32 bit quotient and an integer remainder.
.IP \(bu 4
\&\f(CW$bc\fR\->useFROMbaseto32wide
.Sp
This method converts FROM an input base string to a long n*32 bit register using
an algorithim like:
.Sp
.Vb 6
\&        $longnum = 0;
\&        for $char ( $in_str =~ /./g ) {
\&          $longnum *= $base;
\&          $longnum += $value{$char)
\&        }
\&        return $number;
.Ve
.IP \(bu 4
\&\f(CW$output\fR = \f(CW$bc\fR\->use32wideTObase
.Sp
This method converts a long n*32 bit register TO a base number using an
algorithim like:
.Sp
.Vb 6
\&    $output = \*(Aq\*(Aq;
\&    while( $longnum > 0 ) {
\&      $output = ( $longnum % $base ) . $output;
\&      $num = int( $longnum / $base );
\&    }
\&    return $output;
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Michael Robinton, michael@bizsystems.com
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2012\-15, Michael Robinton
.PP
This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
