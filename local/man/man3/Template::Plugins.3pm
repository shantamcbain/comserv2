.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugins 3pm"
.TH Template::Plugins 3pm 2024-06-21 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Template::Plugins \- Plugin provider module
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Plugins;
\&
\&    $plugin_provider = Template::Plugins\->new(\e%options);
\&
\&    ($plugin, $error) = $plugin_provider\->fetch($name, @args);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Plugins\*(C'\fR module defines a provider class which can be used
to load and instantiate Template Toolkit plugin modules.
.SH METHODS
.IX Header "METHODS"
.SS new(\e%params)
.IX Subsection "new(%params)"
Constructor method which instantiates and returns a reference to a
\&\f(CW\*(C`Template::Plugins\*(C'\fR object.  A reference to a hash array of configuration
items may be passed as a parameter.  These are described below.
.PP
Note that the Template front-end module creates a \f(CW\*(C`Template::Plugins\*(C'\fR
provider, passing all configuration items.  Thus, the examples shown
below in the form:
.PP
.Vb 5
\&    $plugprov = Template::Plugins\->new({
\&        PLUGIN_BASE => \*(AqMyTemplate::Plugin\*(Aq,
\&        LOAD_PERL   => 1,
\&        ...
\&    });
.Ve
.PP
can also be used via the Template module as:
.PP
.Vb 5
\&    $ttengine = Template\->new({
\&        PLUGIN_BASE => \*(AqMyTemplate::Plugin\*(Aq,
\&        LOAD_PERL   => 1,
\&        ...
\&    });
.Ve
.PP
as well as the more explicit form of:
.PP
.Vb 5
\&    $plugprov = Template::Plugins\->new({
\&        PLUGIN_BASE => \*(AqMyTemplate::Plugin\*(Aq,
\&        LOAD_PERL   => 1,
\&        ...
\&    });
\&
\&    $ttengine = Template\->new({
\&        LOAD_PLUGINS => [ $plugprov ],
\&    });
.Ve
.ie n .SS "fetch($name, @args)"
.el .SS "fetch($name, \f(CW@args\fP)"
.IX Subsection "fetch($name, @args)"
Called to request that a plugin of a given name be provided. The relevant
module is first loaded (if necessary) and the
\&\fBload()\fR class method called to return the factory
class name (usually the same package name) or a factory object (a prototype).
The \fBnew()\fR method is then called as a class or object
method against the factory, passing all remaining parameters.
.PP
Returns a reference to a new plugin object or \f(CW\*(C`($error, STATUS_ERROR)\*(C'\fR
on error.  May also return \f(CW\*(C`(undef, STATUS_DECLINED)\*(C'\fR to decline to
serve the request.  If \f(CW\*(C`TOLERANT\*(C'\fR is set then all errors will be
returned as declines.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The following list summarises the configuration options that can be provided
to the \f(CW\*(C`Template::Plugins\*(C'\fR \fBnew()\fR constructor.  Please consult
Template::Manual::Config for further details and examples of each
configuration option in use.
.SS PLUGINS
.IX Subsection "PLUGINS"
The PLUGINS option can be used to provide
a reference to a hash array that maps plugin names to Perl module names.
.PP
.Vb 7
\&    my $plugins = Template::Plugins\->new({
\&        PLUGINS => {
\&            cgi => \*(AqMyOrg::Template::Plugin::CGI\*(Aq,
\&            foo => \*(AqMyOrg::Template::Plugin::Foo\*(Aq,
\&            bar => \*(AqMyOrg::Template::Plugin::Bar\*(Aq,
\&        },
\&    });
.Ve
.SS PLUGIN_BASE
.IX Subsection "PLUGIN_BASE"
If a plugin is not defined in the PLUGINS
hash then the PLUGIN_BASE is used to
attempt to construct a correct Perl module name which can be successfully
loaded.
.PP
.Vb 4
\&    # single value PLUGIN_BASE
\&    my $plugins = Template::Plugins\->new({
\&        PLUGIN_BASE => \*(AqMyOrg::Template::Plugin\*(Aq,
\&    });
\&
\&    # multiple value PLUGIN_BASE
\&    my $plugins = Template::Plugins\->new({
\&        PLUGIN_BASE => [   \*(AqMyOrg::Template::Plugin\*(Aq,
\&                           \*(AqYourOrg::Template::Plugin\*(Aq  ],
\&    });
.Ve
.SS LOAD_PERL
.IX Subsection "LOAD_PERL"
The LOAD_PERL option can be set to allow
you to load regular Perl modules (i.e. those that don't reside in the
\&\f(CW\*(C`Template::Plugin\*(C'\fR or another user-defined namespace) as plugins.
.PP
If a plugin cannot be loaded using the
PLUGINS or
PLUGIN_BASE approaches then,
if the LOAD_PERL is set, the
provider will make a final attempt to load the module without prepending any
prefix to the module path.
.PP
Unlike regular plugins, modules loaded using LOAD_PERL
do not receive a Template::Context reference as the first argument to the
\&\f(CWnew()\fR constructor method.
.SS TOLERANT
.IX Subsection "TOLERANT"
The TOLERANT flag can be set to indicate
that the \f(CW\*(C`Template::Plugins\*(C'\fR module should ignore any errors encountered while
loading a plugin and instead return \f(CW\*(C`STATUS_DECLINED\*(C'\fR.
.SS DEBUG
.IX Subsection "DEBUG"
The DEBUG option can be used to enable
debugging messages for the \f(CW\*(C`Template::Plugins\*(C'\fR module by setting it to
include the \f(CW\*(C`DEBUG_PLUGINS\*(C'\fR value.
.PP
.Vb 1
\&    use Template::Constants qw( :debug );
\&
\&    my $template = Template\->new({
\&        DEBUG => DEBUG_FILTERS | DEBUG_PLUGINS,
\&    });
.Ve
.SH "TEMPLATE TOOLKIT PLUGINS"
.IX Header "TEMPLATE TOOLKIT PLUGINS"
Please see Template::Manual::Plugins For a complete list of all the plugin
modules distributed with the Template Toolkit.
.SH AUTHOR
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Manual::Plugins, Template::Plugin, Template::Context, Template.
