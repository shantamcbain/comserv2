.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::ChangeNotify::Event 3pm"
.TH File::ChangeNotify::Event 3pm 2019-01-09 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::ChangeNotify::Event \- Class for file change events
.SH VERSION
.IX Header "VERSION"
version 0.31
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&    my $watcher = File::ChangeNotify\->instantiate_watcher(
\&        directories => [ \*(Aq/my/path\*(Aq, \*(Aq/my/other\*(Aq ],
\&        filter      => qr/\e.(?:pm|conf|yml)$/,
\&        exclude => [ \*(Aqt\*(Aq, \*(Aqroot\*(Aq, qr(/(?!\e.)[^/]+$) ],
\&    );
\&
\&    for my $event ( $watcher\->new_events ) {
\&        print $event\->path, \*(Aq \- \*(Aq, $event\->type, "\en";
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class provides information about a change to a specific file or
directory.
.SH METHODS
.IX Header "METHODS"
.SS File::ChangeNotify::Event\->new(...)
.IX Subsection "File::ChangeNotify::Event->new(...)"
This method creates a new event. It accepts the following arguments:
.IP \(bu 4
path => \f(CW$path\fR
.Sp
The full path to the file or directory that changed.
.IP \(bu 4
type => \f(CW$type\fR
.Sp
The type of event. This must be one of "create", "modify", "delete", or
"unknown".
.ie n .SS $event\->path
.el .SS \f(CW$event\fP\->path
.IX Subsection "$event->path"
Returns the path of the changed file or directory.
.ie n .SS $event\->type
.el .SS \f(CW$event\fP\->type
.IX Subsection "$event->type"
Returns the type of event.
.ie n .SS $event\->has_attributes
.el .SS \f(CW$event\fP\->has_attributes
.IX Subsection "$event->has_attributes"
This returns true for modify events which include information about a path's
attribute changes.
.ie n .SS $event\->attributes
.el .SS \f(CW$event\fP\->attributes
.IX Subsection "$event->attributes"
If the event includes information about changes to a path's attributes, then
this returns a two-element arrayref. Each element is in turn a hashref which
will contain at least one of the following keys:
.IP \(bu 4
permissions
.Sp
The permissions mask for the path.
.IP \(bu 4
uid
.Sp
The user id that owns the path.
.IP \(bu 4
gid
.Sp
The group id that owns the path.
.PP
Note that only keys which changed will be included.
.ie n .SS $event\->has_content
.el .SS \f(CW$event\fP\->has_content
.IX Subsection "$event->has_content"
This returns true for modify events which include information about a file's
content.
.ie n .SS $event\->content
.el .SS \f(CW$event\fP\->content
.IX Subsection "$event->content"
This returns a two-element arrayref where the first element is the old content
and the second is the new content.
.PP
\&\fBNote that this content is stored as bytes, not UTF\-8. You will need to
explicitly call \fR\f(CB\*(C`Encode::decode\*(C'\fR\fB on the content to make it UTF\-8.\fR This is
done because there's no reason you couldn't use this feature with file's
containing any sort of binary data.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted at <http://rt.cpan.org/Public/Dist/Display.html?Name=File\-ChangeNotify> or via email to bug\-file\-changenotify@rt.cpan.org <mailto:bug-file-changenotify@rt.cpan.org>.
.PP
I am also usually active on IRC as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for File-ChangeNotify can be found at <https://github.com/houseabsolute/File\-ChangeNotify>.
.SH AUTHOR
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2009 \- 2019 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fILICENSE\fR file included with this distribution.
