.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::ToNestedHash 3pm"
.TH Tree::Simple::Visitor::ToNestedHash 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::ToNestedHash \- A Visitor for creating nested hash trees from Tree::Simple objects.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::ToNestedHash;
\&
\&  my $visitor = Tree::Simple::Visitor::ToNestedHash\->new();
\&
\&  # given this Tree::Simple tree
\&  my $tree = Tree::Simple\->new("Root")
\&                \->addChildren(
\&                    Tree::Simple\->new("Child1")
\&                        \->addChildren(
\&                            Tree::Simple\->new("GrandChild1"),
\&                            Tree::Simple\->new("GrandChild2")
\&                        ),
\&                    Tree::Simple\->new("Child2"),
\&                );
\&
\&  $tree\->accept($visitor);
\&
\&  my $array_tree = $visitor\->getResults();
\&
\&  # this then creates the equivalent nested array tree:
\&  # {
\&  # Root => {
\&  #         Child1 => {
\&  #                 GrandChild1 => {},
\&  #                 GrandChild2 => {}
\&  #                 },
\&  #         Child2 => {}
\&  #         }
\&  # }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Given a tree constructed from a Tree::Simple hierarchy, this Visitor will create the equivalent tree of nested hashes.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR and \f(CW\*(C`includTrunk\*(C'\fR methods to customize its behavior.
.IP "\fBincludTrunk ($boolean)\fR" 4
.IX Item "includTrunk ($boolean)"
Setting the \f(CW$boolean\fR value to true (\f(CW1\fR) will cause the node value of the tree's root to be included in the nested hash output, setting it to false will do the opposite.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as its \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are placed into the hash tree. The \f(CW$filter_function\fR is passed a Tree::Simple object, and is expected to return the value desired for inclusion into the hash tree.
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by Tree::Simple's \f(CW\*(C`accept\*(C'\fR method. It can also be used on its own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple object), and will throw and exception otherwise.
.IP \fBgetResults\fR 4
.IX Item "getResults"
This method will return the hash tree constructed.
.SH Repository
.IX Header "Repository"
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory>
.SH SUPPORT
.IX Header "SUPPORT"
Bugs should be reported via the CPAN bug tracker at
.PP
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory/issues>
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the \fBTree::Simple\fR module, you should refer to that module for more information.
.SH AUTHOR
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
