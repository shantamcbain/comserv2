.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars 3pm"
.TH DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars 3pm 2019-11-06 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars \- Storage::DBI subclass for
Sybase ASE without placeholder support
.SH DESCRIPTION
.IX Header "DESCRIPTION"
If you're using this driver then your version of Sybase or the libraries you
use to connect to it do not support placeholders.
.PP
You can also enable this driver explicitly using:
.PP
.Vb 3
\&  my $schema = SchemaClass\->clone;
\&  $schema\->storage_type(\*(Aq::DBI::Sybase::ASE::NoBindVars\*(Aq);
\&  $schema\->connect($dsn, $user, $pass, \e%opts);
.Ve
.PP
See the discussion in
"Using ? Placeholders & bind parameters to \f(CW$sth\fR\->execute" in DBD::Sybase
for details on the pros and cons of using placeholders with this particular
driver.
.PP
One advantage of not using placeholders is that \f(CW\*(C`select @@identity\*(C'\fR will work
for obtaining the last insert id of an \f(CW\*(C`IDENTITY\*(C'\fR column, instead of having to
do \f(CW\*(C`select max(col)\*(C'\fR in a transaction as the base Sybase driver does.
.PP
When using this driver, bind variables will be interpolated (properly quoted of
course) into the SQL query itself, without using placeholders.
.PP
The caching of prepared statements is also explicitly disabled, as the
interpolation renders it useless.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
