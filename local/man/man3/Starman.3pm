.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Starman 3pm"
.TH Starman 3pm 2023-09-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Starman \- High\-performance preforking PSGI/Plack web server
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  # Run app.psgi with the default settings
\&  > starman
\&
\&  # run with Server::Starter
\&  > start_server \-\-port 127.0.0.1:80 \-\- starman \-\-workers 32 myapp.psgi
\&
\&  # UNIX domain sockets
\&  > starman \-\-listen /tmp/starman.sock
.Ve
.PP
Read more options and configurations by running `perldoc starman` (lower-case s).
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Starman is a PSGI perl web server that has unique features such as:
.IP "High Performance" 4
.IX Item "High Performance"
Uses the fast XS/C HTTP header parser
.IP Preforking 4
.IX Item "Preforking"
Spawns workers preforked like most high performance UNIX servers
do. Starman also reaps dead children and automatically restarts the
worker pool.
.IP Signals 4
.IX Item "Signals"
Supports \f(CW\*(C`HUP\*(C'\fR for graceful worker restarts, and \f(CW\*(C`TTIN\*(C'\fR/\f(CW\*(C`TTOU\*(C'\fR to
dynamically increase or decrease the number of worker processes, as
well as \f(CW\*(C`QUIT\*(C'\fR to gracefully shutdown the worker processes.
.IP "Superdaemon aware" 4
.IX Item "Superdaemon aware"
Supports Server::Starter for hot deploy and graceful restarts.
.IP "Multiple interfaces and UNIX Domain Socket support" 4
.IX Item "Multiple interfaces and UNIX Domain Socket support"
Able to listen on multiple interfaces including UNIX sockets.
.IP "Small memory footprint" 4
.IX Item "Small memory footprint"
Preloading the applications with \f(CW\*(C`\-\-preload\-app\*(C'\fR command line option
enables copy-on-write friendly memory management. Also, the minimum
memory usage Starman requires for the master process is 7MB and
children (workers) is less than 3.0MB.
.IP "PSGI compatible" 4
.IX Item "PSGI compatible"
Can run any PSGI applications and frameworks
.IP "HTTP/1.1 support" 4
.IX Item "HTTP/1.1 support"
Supports chunked requests and responses, keep-alive and pipeline requests.
.IP "UNIX only" 4
.IX Item "UNIX only"
This server does not support Win32.
.SH PERFORMANCE
.IX Header "PERFORMANCE"
Here's a simple benchmark using \f(CW\*(C`Hello.psgi\*(C'\fR.
.PP
.Vb 10
\&  \-\- server: Starman (workers=10)
\&  Requests per second:    6849.16 [#/sec] (mean)
\&  \-\- server: Twiggy
\&  Requests per second:    3911.78 [#/sec] (mean)
\&  \-\- server: AnyEvent::HTTPD
\&  Requests per second:    2738.49 [#/sec] (mean)
\&  \-\- server: HTTP::Server::PSGI
\&  Requests per second:    2218.16 [#/sec] (mean)
\&  \-\- server: HTTP::Server::PSGI (workers=10)
\&  Requests per second:    2792.99 [#/sec] (mean)
\&  \-\- server: HTTP::Server::Simple
\&  Requests per second:    1435.50 [#/sec] (mean)
\&  \-\- server: Corona
\&  Requests per second:    2332.00 [#/sec] (mean)
\&  \-\- server: POE
\&  Requests per second:    503.59 [#/sec] (mean)
.Ve
.PP
This benchmark was processed with \f(CW\*(C`ab \-c 10 \-t 1 \-k\*(C'\fR on MacBook Pro
13" late 2009 model on Mac OS X 10.6.2 with perl 5.10.0. YMMV.
.SH NOTES
.IX Header "NOTES"
Because Starman runs as a preforking model, it is not recommended to
serve the requests directly from the internet, especially when slow
requesting clients are taken into consideration. It is suggested to
put Starman workers behind the frontend servers such as nginx, and use
HTTP proxy with TCP or UNIX sockets.
.SH "PSGI EXTENSIONS"
.IX Header "PSGI EXTENSIONS"
.SS psgix.informational
.IX Subsection "psgix.informational"
Starman exposes a callback named \f(CW\*(C`psgix.informational\*(C'\fR that can be
used for sending an informational response. The callback accepts two
arguments, the first argument being the status code and the second
being an arrayref of the headers to be sent. Example below sends an
103 Early Hints response before processing the request to build a
final response.
.PP
.Vb 2
\&    sub {
\&        my $env = shift;
\&
\&        $env\->{\*(Aqpsgix.informational\*(Aq}\->( 103, [
\&            "Link" => "</style.css>; rel=preload"
\&        ] );
\&
\&        my $rest = ...
\&        $resp;
\&    }
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.PP
Andy Grundman wrote Catalyst::Engine::HTTP::Prefork, which this module
is heavily based on.
.PP
Kazuho Oku wrote Net::Server::SS::PreFork that makes it easy to add
Server::Starter support to this software.
.PP
The \f(CW\*(C`psgix.informational\*(C'\fR callback comes from Starlet by Kazuho Oku.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Tatsuhiko Miyagawa, 2010\-
.SH LICENSE
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack Catalyst::Engine::HTTP::Prefork Net::Server::PreFork
