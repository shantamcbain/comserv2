.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Cipher::Camellia 3pm"
.TH Crypt::Cipher::Camellia 3pm 2025-02-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::Cipher::Camellia \- Symmetric cipher Camellia, key size: 128/192/256 bits
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  ### example 1
\&  use Crypt::Mode::CBC;
\&
\&  my $key = \*(Aq...\*(Aq; # length has to be valid key size for this cipher
\&  my $iv = \*(Aq...\*(Aq;  # 16 bytes
\&  my $cbc = Crypt::Mode::CBC\->new(\*(AqCamellia\*(Aq);
\&  my $ciphertext = $cbc\->encrypt("secret data", $key, $iv);
\&
\&  ### example 2 (slower)
\&  use Crypt::CBC;
\&  use Crypt::Cipher::Camellia;
\&
\&  my $key = \*(Aq...\*(Aq; # length has to be valid key size for this cipher
\&  my $iv = \*(Aq...\*(Aq;  # 16 bytes
\&  my $cbc = Crypt::CBC\->new( \-cipher=>\*(AqCipher::Camellia\*(Aq, \-key=>$key, \-iv=>$iv );
\&  my $ciphertext = $cbc\->encrypt("secret data");
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module implements the Camellia cipher. Provided interface is compliant with Crypt::CBC module.
.PP
\&\fBBEWARE:\fR This module implements just elementary "one\-block\-(en|de)cryption" operation \- if you want to
encrypt/decrypt generic data you have to use some of the cipher block modes \- check for example
Crypt::Mode::CBC, Crypt::Mode::CTR or Crypt::CBC (which will be slower).
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
.Vb 3
\& $c = Crypt::Cipher::Camellia\->new($key);
\& #or
\& $c = Crypt::Cipher::Camellia\->new($key, $rounds);
.Ve
.SS encrypt
.IX Subsection "encrypt"
.Vb 1
\& $ciphertext = $c\->encrypt($plaintext);
.Ve
.SS decrypt
.IX Subsection "decrypt"
.Vb 1
\& $plaintext = $c\->decrypt($ciphertext);
.Ve
.SS keysize
.IX Subsection "keysize"
.Vb 5
\&  $c\->keysize;
\&  #or
\&  Crypt::Cipher::Camellia\->keysize;
\&  #or
\&  Crypt::Cipher::Camellia::keysize;
.Ve
.SS blocksize
.IX Subsection "blocksize"
.Vb 5
\&  $c\->blocksize;
\&  #or
\&  Crypt::Cipher::Camellia\->blocksize;
\&  #or
\&  Crypt::Cipher::Camellia::blocksize;
.Ve
.SS max_keysize
.IX Subsection "max_keysize"
.Vb 5
\&  $c\->max_keysize;
\&  #or
\&  Crypt::Cipher::Camellia\->max_keysize;
\&  #or
\&  Crypt::Cipher::Camellia::max_keysize;
.Ve
.SS min_keysize
.IX Subsection "min_keysize"
.Vb 5
\&  $c\->min_keysize;
\&  #or
\&  Crypt::Cipher::Camellia\->min_keysize;
\&  #or
\&  Crypt::Cipher::Camellia::min_keysize;
.Ve
.SS default_rounds
.IX Subsection "default_rounds"
.Vb 5
\&  $c\->default_rounds;
\&  #or
\&  Crypt::Cipher::Camellia\->default_rounds;
\&  #or
\&  Crypt::Cipher::Camellia::default_rounds;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
CryptX, Crypt::Cipher
.IP \(bu 4
<https://en.wikipedia.org/wiki/Camellia_(cipher)>
