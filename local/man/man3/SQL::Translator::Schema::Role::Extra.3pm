.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Schema::Role::Extra 3pm"
.TH SQL::Translator::Schema::Role::Extra 3pm 2024-10-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Schema::Role::Extra \- "extra" attribute for schema classes
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    package Foo;
\&    use Moo;
\&    with qw(SQL::Translator::Schema::Role::Extra);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This role provides methods to set and get a hashref of extra attributes
for schema objects.
.SH METHODS
.IX Header "METHODS"
.SS extra
.IX Subsection "extra"
Get or set the objects "extra" attributes (e.g., "ZEROFILL" for MySQL fields).
Call with no args to get all the extra data.
Call with a single name arg to get the value of the named extra attribute,
returned as a scalar. Call with a hash or hashref to set extra attributes.
Returns a hash or a hashref.
.PP
.Vb 1
\&  $field\->extra( qualifier => \*(AqZEROFILL\*(Aq );
\&
\&  $qualifier = $field\->extra(\*(Aqqualifier\*(Aq);
\&
\&  %extra = $field\->extra;
\&  $extra = $field\->extra;
.Ve
.SS remove_extra
.IX Subsection "remove_extra"
"extra" can only be used to get or set "extra" attributes but not to
remove some. Call with no args to remove all extra attributes that
have been set before. Call with a list of key names to remove
certain extra attributes only.
.PP
.Vb 2
\&  # remove all extra attributes
\&  $field\->remove_extra();
\&
\&  # remove timezone and locale attributes only
\&  $field\->remove_extra(qw/timezone locale/);
.Ve
