.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::MethodAttributes::Role::Meta::Role 3pm"
.TH MooseX::MethodAttributes::Role::Meta::Role 3pm 2020-08-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::MethodAttributes::Role::Meta::Role \- metarole role for storing code attributes
.SH VERSION
.IX Header "VERSION"
version 0.32
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyRole;
\&    use MooseX::MethodAttributes::Role;
\&
\&    sub foo : Bar Baz(\*(Aqcorge\*(Aq) { ... }
\&
\&    package MyClass
\&    use Moose;
\&
\&    with \*(AqMyRole\*(Aq;
\&
\&    my $attrs = MyClass\->meta\->get_method(\*(Aqfoo\*(Aq)\->attributes; # ["Bar", "Baz(\*(Aqcorge\*(Aq)"]
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is a metaclass role which is applied by MooseX::MethodAttributes::Role, allowing
you to add code attributes to methods in Moose roles.
.PP
These attributes can then be found by introspecting the role metaclass, and are automatically copied
into any classes or roles that the role is composed onto.
.SH METHODS
.IX Header "METHODS"
.SS initialize
.IX Subsection "initialize"
Ensures that the package containing the role methods does the
MooseX::MethodAttributes::Role::AttrContainer role during initialisation,
which in turn is responsible for capturing the method attributes on the class
and registering them with the metaclass.
.SS method_metaclass
.IX Subsection "method_metaclass"
Wraps the normal method and ensures that the method metaclass performs the
MooseX::MethodAttributes::Role::Meta::Method role, which allows you to
introspect the attributes from the method objects returned by the MOP when
querying the metaclass.
.SH CAVEATS
.IX Header "CAVEATS"
.IP \(bu 4
Currently roles with attributes cannot have methods excluded
or aliased, and will in turn confer this property onto any roles they
are composed onto.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-MethodAttributes>
(or bug\-MooseX\-MethodAttributes@rt.cpan.org <mailto:bug-MooseX-MethodAttributes@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Florian Ragwitz <rafl@debian.org>
.IP \(bu 4
Tomas Doran <bobtfish@bobtfish.net>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2009 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
