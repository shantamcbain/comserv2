.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::Informix 3pm"
.TH DBIx::Class::Storage::DBI::Informix 3pm 2018-04-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::Informix \- Base Storage Class for Informix Support
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class implements storage-specific support for the Informix RDBMS
.SH METHODS
.IX Header "METHODS"
.SS connect_call_datetime_setup
.IX Subsection "connect_call_datetime_setup"
Used as:
.PP
.Vb 1
\&  on_connect_call => \*(Aqdatetime_setup\*(Aq
.Ve
.PP
In connect_info to set the \f(CW\*(C`DATE\*(C'\fR and
\&\f(CW\*(C`DATETIME\*(C'\fR formats.
.PP
Sets the following environment variables:
.PP
.Vb 2
\&    GL_DATE="%m/%d/%Y"
\&    GL_DATETIME="%Y\-%m\-%d %H:%M:%S%F5"
.Ve
.PP
The \f(CW\*(C`DBDATE\*(C'\fR and \f(CW\*(C`DBCENTURY\*(C'\fR environment variables are cleared.
.PP
\&\fBNOTE:\fR setting the \f(CW\*(C`GL_DATE\*(C'\fR environment variable seems to have no effect
after the process has started, so the default format is used. The \f(CW\*(C`GL_DATETIME\*(C'\fR
setting does take effect however.
.PP
The \f(CW\*(C`DATETIME\*(C'\fR data type supports up to 5 digits after the decimal point for
second precision, depending on how you have declared your column. The full
possible precision is used.
.PP
The column declaration for a \f(CW\*(C`DATETIME\*(C'\fR with maximum precision is:
.PP
.Vb 1
\&  column_name DATETIME YEAR TO FRACTION(5)
.Ve
.PP
The \f(CW\*(C`DATE\*(C'\fR data type stores the date portion only, and it \fBMUST\fR be declared
with:
.PP
.Vb 1
\&  data_type => \*(Aqdate\*(Aq
.Ve
.PP
in your Result class.
.PP
You will need the DateTime::Format::Strptime module for inflation to work.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
