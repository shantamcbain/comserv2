.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Compile::Internal 3pm"
.TH Test::Compile::Internal 3pm 2025-03-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::Compile::Internal \- Assert that your Perl files compile OK.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&    use Test::Compile::Internal;
\&    my $test = Test::Compile::Internal\->new();
\&    $test\->all_files_ok();
\&    $test\->done_testing();
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Test::Compile::Internal\*(C'\fR is an object oriented tool for testing whether your
perl files compile.
.PP
It is primarily to provide the inner workings of \f(CW\*(C`Test::Compile\*(C'\fR, but it can
also be used directly to test a CPAN distribution.
.SH METHODS
.IX Header "METHODS"
.ie n .IP new() 4
.el .IP \f(CWnew()\fR 4
.IX Item "new()"
A basic constructor, nothing special.
.ie n .IP all_files_ok(@search) 4
.el .IP \f(CWall_files_ok(@search)\fR 4
.IX Item "all_files_ok(@search)"
Looks for perl files and tests them all for compilation errors.
.Sp
If \f(CW@search\fR is defined then it is taken as an array of files or
directories to be searched for perl files, otherwise it searches the default
locations you'd expect to find perl files in a perl module \- see
"all_pm_files" and "all_pl_files" for details.
.ie n .IP all_pm_files_ok(@search) 4
.el .IP \f(CWall_pm_files_ok(@search)\fR 4
.IX Item "all_pm_files_ok(@search)"
Checks all the perl module files it can find for compilation errors.
.Sp
If \f(CW@search\fR is defined then it is taken as an array of files or
directories to be searched for perl files, otherwise it searches the default
locations you'd expect to find perl files in a perl module \- see
"all_pm_files" for details.
.ie n .IP all_pl_files_ok(@search) 4
.el .IP \f(CWall_pl_files_ok(@search)\fR 4
.IX Item "all_pl_files_ok(@search)"
Checks all the perl program files it can find for compilation errors.
.Sp
If \f(CW@search\fR is defined then it is taken as an array of directories to
be searched for perl files, otherwise it searches some default locations
\&\- see "all_pl_files".
.ie n .IP verbose($verbose) 4
.el .IP \f(CWverbose($verbose)\fR 4
.IX Item "verbose($verbose)"
An accessor to get/set the verbosity.  The default value (undef) will suppress output
unless the compilation fails.  This is probably what you want.
.Sp
If \f(CW\*(C`verbose\*(C'\fR is set to true, you'll get the output from 'perl \-c'. If it's set to
false, all diagnostic output is suppressed.
.ie n .IP all_pm_files(@search) 4
.el .IP \f(CWall_pm_files(@search)\fR 4
.IX Item "all_pm_files(@search)"
Searches for and returns a list of perl module files \- that is, files with a
\&\fI.pm\fR extension.
.Sp
If you provide \f(CW@search\fR, it'll use that as a list of files to
process, or directories to search for perl modules.
.Sp
If you don't provide \f(CW\*(C`search\*(C'\fR, it'll search for perl modules in the \fIblib/lib\fR
directory (if that directory exists). Otherwise it'll search the \fIlib\fR directory.
.Sp
Skips any files in \fICVS\fR, \fI.svn\fR, or \fI.git\fR directories.
.ie n .IP all_pl_files(@search) 4
.el .IP \f(CWall_pl_files(@search)\fR 4
.IX Item "all_pl_files(@search)"
Searches for and returns a list of perl script files \- that is, any files that
either have a case insensitive \fI.pl\fR, \fI.psgi\fR extension, or have no extension
but have a perl shebang line.
.Sp
If you provide \f(CW@search\fR, it'll use that as a list of files to
process, or directories to search for perl scripts.
.Sp
If you don't provide \f(CW\*(C`search\*(C'\fR, it'll search for perl scripts in the
\&\fIblib/script/\fR and \fIblib/bin/\fR directories if \fIblib\fR exists, otherwise
it'll search the \fIscript/\fR and \fIbin/\fR directories
.Sp
Skips any files in \fICVS\fR, \fI.svn\fR, or \fI.git\fR directories.
.ie n .IP pl_file_compiles($file) 4
.el .IP \f(CWpl_file_compiles($file)\fR 4
.IX Item "pl_file_compiles($file)"
Returns true if \f(CW$file\fR compiles as a perl script.
.ie n .IP pm_file_compiles($file) 4
.el .IP \f(CWpm_file_compiles($file)\fR 4
.IX Item "pm_file_compiles($file)"
Returns true if \f(CW$file\fR compiles as a perl module.
.SH "TEST METHODS"
.IX Header "TEST METHODS"
\&\f(CW\*(C`Test::Compile::Internal\*(C'\fR encapsulates a \f(CW\*(C`Test::Builder\*(C'\fR object, and provides
access to some of its methods.
.ie n .IP """ok($test, $name)""" 4
.el .IP "\f(CWok($test, $name)\fR" 4
.IX Item "ok($test, $name)"
Your basic test. Pass if \f(CW$test\fR is true, fail if \f(CW$test\fR is false. Just
like \f(CW\*(C`Test::Simple\*(C'\fR's \f(CWok()\fR.
.ie n .IP done_testing() 4
.el .IP \f(CWdone_testing()\fR 4
.IX Item "done_testing()"
Declares that you got to the end of your test plan, no more tests will be run after
this point.
.ie n .IP """plan(tests => $count)""" 4
.el .IP "\f(CWplan(tests => $count)\fR" 4
.IX Item "plan(tests => $count)"
Defines how many tests you plan to run.
.ie n .IP diag(@msgs) 4
.el .IP \f(CWdiag(@msgs)\fR 4
.IX Item "diag(@msgs)"
Prints out the given \f(CW@msgs\fR. Like print, arguments are simply appended
together.
.Sp
Output will be indented and marked with a # so as not to interfere with
test output. A newline will be put on the end if there isn't one already.
.Sp
We encourage using this rather than calling print directly.
.ie n .IP skip($reason) 4
.el .IP \f(CWskip($reason)\fR 4
.IX Item "skip($reason)"
Skips the current test, reporting the \f(CW$reason\fR.
.ie n .IP skip_all($reason) 4
.el .IP \f(CWskip_all($reason)\fR 4
.IX Item "skip_all($reason)"
Skips all the tests, using the given \f(CW$reason\fR. Exits immediately with 0.
.SH AUTHORS
.IX Header "AUTHORS"
Sagar R. Shah \f(CW\*(C`<srshah@cpan.org>\*(C'\fR,
Marcel Gr√ºnauer, \f(CW\*(C`<marcel@cpan.org>\*(C'\fR,
Evan Giles, \f(CW\*(C`<egiles@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2023 by the authors.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Strict provides functions to ensure your perl files compile, with
the added bonus that it will check you have used strict in all your files.
.PP
Test::LoadAllModules just handles modules, not script files, but has more
fine-grained control.
