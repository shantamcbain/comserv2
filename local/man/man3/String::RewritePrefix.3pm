.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::RewritePrefix 3pm"
.TH String::RewritePrefix 3pm 2022-12-31 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
String::RewritePrefix \- rewrite strings based on a set of known prefixes
.SH VERSION
.IX Header "VERSION"
version 0.009
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&  use String::RewritePrefix;
\&  my @to_load = String::RewritePrefix\->rewrite(
\&    { \*(Aq\*(Aq => \*(AqMyApp::\*(Aq, \*(Aq+\*(Aq => \*(Aq\*(Aq },
\&    qw(Plugin Mixin Addon +Corporate::Thinger),
\&  );
\&
\&  # now you have:
\&  qw(MyApp::Plugin MyApp::Mixin MyApp::Addon Corporate::Thinger)
.Ve
.PP
You can also import a rewrite routine:
.PP
.Vb 4
\&  use String::RewritePrefix rewrite => {
\&    \-as => \*(Aqrewrite_dt_prefix\*(Aq,
\&    prefixes => { \*(Aq\*(Aq => \*(AqMyApp::\*(Aq, \*(Aq+\*(Aq => \*(Aq\*(Aq },
\&  };
\&
\&  my @to_load = rewrite_dt_prefix( qw(Plugin Mixin Addon +Corporate::Thinger));
\&
\&  # now you have:
\&  qw(MyApp::Plugin MyApp::Mixin MyApp::Addon Corporate::Thinger)
.Ve
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This module should work on any version of perl still receiving updates from
the Perl 5 Porters.  This means it should work on any version of perl released
in the last two to three years.  (That is, if the most recently released
version is v5.40, then this module should work on both v5.40 and v5.38.)
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to lower
the minimum required perl.
.SH METHODS
.IX Header "METHODS"
.SS rewrite
.IX Subsection "rewrite"
.Vb 1
\&  String::RewritePrefix\->rewrite(\e%prefix, @strings);
.Ve
.PP
This rewrites all the given strings using the rules in \f(CW%prefix\fR.  Its keys
are known prefixes for which its values will be substituted.  This is performed
in longest-first order, and only one prefix will be rewritten.
.PP
If the prefix value is a coderef, it will be executed with the remaining string
as its only argument.  The return value will be used as the prefix.
.SH AUTHOR
.IX Header "AUTHOR"
Ricardo Signes <cpan@semiotic.systems>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Florian Ragwitz <rafl@debian.org>
.IP \(bu 4
Olivier Mengu√© <dolmen@cpan.org>
.IP \(bu 4
Ricardo Signes <rjbs@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
