.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Lingua::EN::Inflect::Number 3pm"
.TH Lingua::EN::Inflect::Number 3pm 2015-07-04 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Lingua::EN::Inflect::Number \- Force number of words to singular or plural
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use Lingua::EN::Inflect::Number qw(
\&    number to_S to_PL # Or anything you want from Lingua::EN::Inflect
\&  );
\&
\&  print number("goat");  # "s" \- there\*(Aqs only one goat
\&  print number("goats"); # "p" \- there\*(Aqs several goats
\&  print number("sheep"); # "ambig" \- there could be one or many sheep
\&
\&  print to_S("goats");   # "goat"
\&  print to_PL("goats");  # "goats" \- it already is
\&  print to_S("goat");    # "goat" \- it already is
\&  print to_S("sheep");   # "sheep"
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module extends the functionality of Lingua::EN::Inflect with three
new functions available for export:
.SS number
.IX Subsection "number"
This takes a word, and determines its number. It returns \f(CW\*(C`s\*(C'\fR for singular,
\&\f(CW\*(C`p\*(C'\fR for plural, and \f(CW\*(C`ambig\*(C'\fR for words that can be either singular or plural.
.PP
Based on that:
.SS "to_S / to_PL"
.IX Subsection "to_S / to_PL"
These take a word and convert it forcefully either to singular or to
plural. \f(CW\*(C`Lingua::EN::Inflect\*(C'\fR does funny things if you try to pluralise
an already-plural word, but this module does the right thing.
.SH DISCLAIMER
.IX Header "DISCLAIMER"
The whole concept is based on several undocumented features and
idiosyncracies in the way Lingua::EN::Inflect works. Because of this,
the module only works reliably on nouns. It's also possible that these
idiosyncracies will be fixed at some point in the future and this module
will need to be rethought. But it works at the moment. Additionally,
any disclaimers on Lingua::EN::Inflect apply double here.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Lingua::EN::Inflect
.SH REPOSITORY
.IX Header "REPOSITORY"
<https://github.com/neilbowers/Lingua\-EN\-Inflect\-Number>
.SH AUTHOR
.IX Header "AUTHOR"
Simon Cozens, \f(CW\*(C`simon@cpan.org\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Simon Cozens \f(CW\*(C`simon@cpan.org\*(C'\fR
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
