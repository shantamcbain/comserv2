.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Fixtures::External::File 3pm"
.TH DBIx::Class::Fixtures::External::File 3pm 2017-09-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Fixtures::External::File \- save and restore external data
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&    my $fixtures = DBIx::Class::Fixtures
\&      \->new({
\&        config_dir => \*(Aqt/var/configs\*(Aq,
\&        config_attrs => { photo_dir => \*(Aq./t/var/files\*(Aq });
\&
\&    {
\&        "sets": [{
\&            "class": "Photo",
\&            "quantity": "all",
\&            "external": {
\&                "file": {
\&                    "class": "File",
\&                    "args": {"path":"_\|_ATTR(photo_dir)_\|_"}
\&                }
\&            }
\&        }]
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Sometimes your database fields are pointers to external data.  The classic
example is you are using DBIx::Class::InflateColumn::FS to manage blob
data.  In these cases it may be desirable to backup and restore the external
data via fixtures.
.PP
This module performs this function and can also serve as an example for your
possible custom needs.
.SH METHODS
.IX Header "METHODS"
This module defines the following methods
.SS backup
.IX Subsection "backup"
Accepts: Value of Database Field, \f(CW$args\fR
.PP
Given the value of a database field (which is some sort of pointer to the location
of an actual file, and a hashref of args (passed in the args key of your config
set), slurp up the file and return to to be saved in the fixure.
.SS restore
.IX Subsection "restore"
Accepts: Value of Database Field, Content, \f(CW$args\fR
.PP
Given the value of a database field, some blob content and \f(CW$args\fR, restore the
file to the filesystem
.SH AUTHOR
.IX Header "AUTHOR"
.Vb 1
\&    See L<DBIx::Class::Fixtures> for author information.
.Ve
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.Vb 1
\&    See L<DBIx::Class::Fixtures> for contributor information.
.Ve
.SH LICENSE
.IX Header "LICENSE"
.Vb 1
\&    See L<DBIx::Class::Fixtures> for license information.
.Ve
