.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::Cycle 3pm"
.TH Devel::Cycle 3pm 2014-11-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Devel::Cycle \- Find memory cycles in objects
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 12
\&  #!/usr/bin/perl
\&  use Devel::Cycle;
\&  my $test = {fred   => [qw(a b c d e)],
\&            ethel  => [qw(1 2 3 4 5)],
\&            george => {martha => 23,
\&                       agnes  => 19}
\&           };
\&  $test\->{george}{phyllis} = $test;
\&  $test\->{fred}[3]      = $test\->{george};
\&  $test\->{george}{mary} = $test\->{fred};
\&  find_cycle($test);
\&  exit 0;
\&
\&  # output:
\&
\&  Cycle (1):
\&                        $A\->{\*(Aqgeorge\*(Aq} => \e%B
\&                       $B\->{\*(Aqphyllis\*(Aq} => \e%A
\&
\&  Cycle (2):
\&                        $A\->{\*(Aqgeorge\*(Aq} => \e%B
\&                          $B\->{\*(Aqmary\*(Aq} => \e@A
\&                               $A\->[3] => \e%B
\&
\&  Cycle (3):
\&                          $A\->{\*(Aqfred\*(Aq} => \e@A
\&                               $A\->[3] => \e%B
\&                       $B\->{\*(Aqphyllis\*(Aq} => \e%A
\&
\&  Cycle (4):
\&                          $A\->{\*(Aqfred\*(Aq} => \e@A
\&                               $A\->[3] => \e%B
\&                          $B\->{\*(Aqmary\*(Aq} => \e@A
\&  
\&  # you can also check weakened references
\&  weaken($test\->{george}\->{phyllis});
\&  find_weakened_cycle($test);
\&  exit 0;
\&
\&  # output:
\&  
\&  Cycle (1):
\&                        $A\->{\*(Aqgeorge\*(Aq} => \e%B                           
\&                          $B\->{\*(Aqmary\*(Aq} => \e@C                           
\&                               $C\->[3] => \e%B                           
\&
\&  Cycle (2):
\&                        $A\->{\*(Aqgeorge\*(Aq} => \e%B                           
\&                   w\-> $B\->{\*(Aqphyllis\*(Aq} => \e%A                           
\&
\&  Cycle (3):
\&                          $A\->{\*(Aqfred\*(Aq} => \e@C                           
\&                               $C\->[3] => \e%B                           
\&                          $B\->{\*(Aqmary\*(Aq} => \e@C                           
\&
\&  Cycle (4):
\&                          $A\->{\*(Aqfred\*(Aq} => \e@C                           
\&                               $C\->[3] => \e%B                           
\&                   w\-> $B\->{\*(Aqphyllis\*(Aq} => \e%A
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a simple developer's tool for finding circular references in
objects and other types of references.  Because of Perl's
reference-count based memory management, circular references will
cause memory leaks.
.SS EXPORT
.IX Subsection "EXPORT"
The \fBfind_cycle()\fR and \fBfind_weakened_cycle()\fR subroutine are exported by default.
.IP find_cycle($object_reference,[$callback]) 4
.IX Item "find_cycle($object_reference,[$callback])"
The \fBfind_cycle()\fR function will traverse the object reference and print
a report to STDOUT identifying any memory cycles it finds.
.Sp
If an optional callback code reference is provided, then this callback
will be invoked on each cycle that is found.  The callback will be
passed an array reference pointing to a list of lists with the
following format:
.Sp
.Vb 5
\& $arg = [ [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value],
\&          [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value],
\&          [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value],
\&           ...
\&        ]
.Ve
.Sp
Each element in the array reference describes one edge in the memory
cycle.  'REFTYPE' describes the type of the reference and is one of
\&'SCALAR','ARRAY' or 'HASH'.  \f(CW$index\fR is the index affected by the
reference, and is undef for a scalar, an integer for an array
reference, or a hash key for a hash.  \f(CW$reference\fR is the memory
reference, and \f(CW$reference_value\fR is its dereferenced value.  For
example, if the edge is an ARRAY, then the following relationship
holds:
.Sp
.Vb 1
\&   $reference\->[$index] eq $reference_value
.Ve
.Sp
The first element of the array reference is the \f(CW$object_reference\fR that
you pased to \fBfind_cycle()\fR and may not be directly involved in the
cycle.
.Sp
If a reference is a weak ref produced using Scalar::Util's \fBweaken()\fR
function then it won't contribute to cycles.
.IP find_weakened_cycle($object_reference,[$callback]) 4
.IX Item "find_weakened_cycle($object_reference,[$callback])"
The \fBfind_weakened_cycle()\fR function will traverse the object reference and print
a report to STDOUT identifying any memory cycles it finds, \fIincluding\fR any weakened
cycles produced using Scalar::Util's \fBweaken()\fR.
.Sp
If an optional callback code reference is provided, then this callback
will be invoked on each cycle that is found.  The callback will be
passed an array reference pointing to a list of lists with the
following format:
.Sp
.Vb 5
\& $arg = [ [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value,$is_weakened],
\&          [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value,$is_weakened],
\&          [\*(AqREFTYPE\*(Aq,$index,$reference,$reference_value,$is_weakened],
\&           ...
\&        ]
.Ve
.Sp
Each element in the array reference describes one edge in the memory
cycle.  'REFTYPE' describes the type of the reference and is one of
\&'SCALAR','ARRAY' or 'HASH'.  \f(CW$index\fR is the index affected by the
reference, and is undef for a scalar, an integer for an array
reference, or a hash key for a hash.  \f(CW$reference\fR is the memory
reference, and \f(CW$reference_value\fR is its dereferenced value. \f(CW$is_weakened\fR
is a boolean specifying if the reference is weakened or not. For
example, if the edge is an ARRAY, then the following relationship
holds:
.Sp
.Vb 1
\&   $reference\->[$index] eq $reference_value
.Ve
.Sp
The first element of the array reference is the \f(CW$object_reference\fR that
you pased to \fBfind_cycle()\fR and may not be directly involved in the
cycle.
.SS "Cycle Report Formats"
.IX Subsection "Cycle Report Formats"
The default callback prints out a trace of each cycle it finds.  You
can control the format of the trace by setting the package variable
\&\f(CW$Devel::Cycle::FORMATTING\fR to one of "raw," "cooked," or "roasted".
.PP
The "raw" format prints out anonymous memory references using standard
Perl memory location nomenclature.  For example, a "Foo::Bar" object
that points to an ordinary hash will appear in the trace like this:
.PP
.Vb 1
\&        Foo::Bar=HASH(0x8124394)\->{\*(Aqphyllis\*(Aq} => HASH(0x81b4a90)
.Ve
.PP
The "cooked" format (the default), uses short names for anonymous
memory locations, beginning with "A" and moving upward with the magic
++ operator.  This leads to a much more readable display:
.PP
.Vb 1
\&        $Foo::Bar=B\->{\*(Aqphyllis\*(Aq} => \e%A
.Ve
.PP
The "roasted" format is similar to the "cooked" format, except that
object references are formatted slightly differently:
.PP
.Vb 1
\&        $Foo::Bar::B\->{\*(Aqphyllis\*(Aq} => \e%A
.Ve
.PP
If a reference is a weakened ref, then it will have a 'w\->' prepended to
it, like this:
.PP
.Vb 1
\&        w\-> $Foo::Bar::B\->{\*(Aqphyllis\*(Aq} => \e%A
.Ve
.PP
For your convenience, \f(CW$Devel::Cycle::FORMATTING\fR can be imported:
.PP
.Vb 2
\&       use Devel::Cycle qw(:DEFAULT $FORMATTING);
\&       $FORMATTING = \*(Aqraw\*(Aq;
.Ve
.PP
Alternatively, you can control the formatting at compile time by
passing one of the options \-raw, \-cooked, or \-roasted to "use" as
illustrated here:
.PP
.Vb 1
\&  use Devel::Cycle \-raw;
.Ve
.SS "Code references (closures)"
.IX Subsection "Code references (closures)"
If the PadWalker module is installed, Devel::Cycle will also report
cycles in code closures. If PadWalker is not installed and
Devel::Cycle detects a CODE reference in one of the data structures,
it will warn (once per data structure) that it cannot inspect the CODE
unless PadWalker is available. You can turn this warning off by
passing \-quiet to Devel::Cycle at compile time:
.PP
.Vb 1
\& use Devel::Cycle \-quiet;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Memory::Cycle
Devel::Leak
Scalar::Util
.SH DEVELOPING
.IX Header "DEVELOPING"
https://github.com/lstein/Devel\-Cycle. Please contribute to the code
base by sending pull requests. Use GitHub for bug reports and feature
requests.
.SH AUTHOR
.IX Header "AUTHOR"
Lincoln Stein, <lincoln.stein@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2014 by Lincoln Stein
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.
