.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cycle 3pm"
.TH Cycle 3pm 2016-01-28 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::Memory::Cycle \- Check for memory leaks and circular memory references
.SH VERSION
.IX Header "VERSION"
Version 1.06
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Perl's garbage collection has one big problem: Circular references
can't get cleaned up.  A circular reference can be as simple as two
references that refer to each other:
.PP
.Vb 3
\&    my $mom = {
\&        name => "Marilyn Lester",
\&    };
\&
\&    my $me = {
\&        name => "Andy Lester",
\&        mother => $mom,
\&    };
\&    $mom\->{son} = $me;
.Ve
.PP
\&\f(CW\*(C`Test::Memory::Cycle\*(C'\fR is built on top of \f(CW\*(C`Devel::Cycle\*(C'\fR to give
you an easy way to check for these circular references.
.PP
.Vb 1
\&    use Test::Memory::Cycle;
\&
\&    my $object = new MyObject;
\&    # Do stuff with the object.
\&    memory_cycle_ok( $object );
.Ve
.PP
You can also use \f(CWmemory_cycle_exists()\fR to make sure that you have a
cycle where you expect to have one.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.ie n .SS """memory_cycle_ok( \fI$reference\fP, \fI$msg\fP )"""
.el .SS "\f(CWmemory_cycle_ok( \fP\f(CI$reference\fP\f(CW, \fP\f(CI$msg\fP\f(CW )\fP"
.IX Subsection "memory_cycle_ok( $reference, $msg )"
Checks that \fR\f(CI$reference\fR\fI\fR doesn't have any circular memory references.
.ie n .SS """memory_cycle_exists( \fI$reference\fP, \fI$msg\fP )"""
.el .SS "\f(CWmemory_cycle_exists( \fP\f(CI$reference\fP\f(CW, \fP\f(CI$msg\fP\f(CW )\fP"
.IX Subsection "memory_cycle_exists( $reference, $msg )"
Checks that \fR\f(CI$reference\fR\fI\fR \fBdoes\fR have any circular memory references.
.ie n .SS """weakened_memory_cycle_ok( \fI$reference\fP, \fI$msg\fP )"""
.el .SS "\f(CWweakened_memory_cycle_ok( \fP\f(CI$reference\fP\f(CW, \fP\f(CI$msg\fP\f(CW )\fP"
.IX Subsection "weakened_memory_cycle_ok( $reference, $msg )"
Checks that \fR\f(CI$reference\fR\fI\fR doesn't have any circular memory references, but unlike 
\&\f(CW\*(C`memory_cycle_ok\*(C'\fR this will also check for weakened cycles produced with 
Scalar::Util's \f(CW\*(C`weaken\*(C'\fR.
.ie n .SS """weakened_memory_cycle_exists( \fI$reference\fP, \fI$msg\fP )"""
.el .SS "\f(CWweakened_memory_cycle_exists( \fP\f(CI$reference\fP\f(CW, \fP\f(CI$msg\fP\f(CW )\fP"
.IX Subsection "weakened_memory_cycle_exists( $reference, $msg )"
Checks that \fR\f(CI$reference\fR\fI\fR \fBdoes\fR have any circular memory references, but unlike 
\&\f(CW\*(C`memory_cycle_exists\*(C'\fR this will also check for weakened cycles produced with 
Scalar::Util's \f(CW\*(C`weaken\*(C'\fR.
.SH AUTHOR
.IX Header "AUTHOR"
Written by Andy Lester, \f(CW\*(C`<andy @ petdance.com>\*(C'\fR.
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-test\-memory\-cycle at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Memory\-Cycle>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH SUPPORT
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::Memory::Cycle
.Ve
.PP
You can also look for information at:
.IP \(bu 4
AnnoCPAN: Annotated CPAN documentation
.Sp
<http://annocpan.org/dist/Test\-Memory\-Cycle>
.IP \(bu 4
CPAN Ratings
.Sp
<http://cpanratings.perl.org/d/Test\-Memory\-Cycle>
.IP \(bu 4
RT: CPAN's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Memory\-Cycle>
.IP \(bu 4
Search CPAN
.Sp
<http://search.cpan.org/dist/Test\-Memory\-Cycle>
.SH ACKNOWLEDGEMENTS
.IX Header "ACKNOWLEDGEMENTS"
Thanks to the contributions of Stevan Little, and to Lincoln Stein for writing Devel::Cycle.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2003\-2016 Andy Lester.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the Artistic License v2.0.
.PP
See http://www.perlfoundation.org/artistic_license_2_0 or the LICENSE
file that comes with the Test::Memory::Cycle distribution.
