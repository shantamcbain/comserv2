.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Module::Install::Admin::Include 3pm"
.TH Module::Install::Admin::Include 3pm 2023-04-27 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Module::Install::Admin::Include \- include methods for Module::Install
.SS auto_include_dependent_dists
.IX Subsection "auto_include_dependent_dists"
Grabs everything in this module's build_requires and attempts to
include everything (at the whole distribution level) recursively.
.ie n .SS "include_dependent_dists $package"
.el .SS "include_dependent_dists \f(CW$package\fP"
.IX Subsection "include_dependent_dists $package"
Given a module package name, recursively include every package that
module needs.
.ie n .SS "include_one_dist $module"
.el .SS "include_one_dist \f(CW$module\fP"
.IX Subsection "include_one_dist $module"
Given a module name, \f(CW$module\fR, figures out which modules are in the
dist containing that module and copies all those files to ./inc. I bet
there's a way to harness smarter logic from PAR.
.PP
Given a module name, returns the file on CPAN containing
its latest version.
.PP
Takes the output of CPAN::Module\->cpan_file and return all the modules
that CPAN.pm knows are in that dist. There's probably a better way using CPANPLUS
