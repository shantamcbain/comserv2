.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::Valid 3pm"
.TH Email::Valid 3pm 2024-01-20 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Email::Valid \- Check validity of Internet email addresses
.SH VERSION
.IX Header "VERSION"
version 1.204
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use Email::Valid;
\&  my $address = Email::Valid\->address(\*(Aqmaurice@hevanet.com\*(Aq);
\&  print ($address ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module determines whether an email address is well-formed, and
optionally, whether a mail host exists for the domain.
.PP
Please note that there is no way to determine whether an
address is deliverable without attempting delivery
(for details, see perlfaq 9 <http://perldoc.perl.org/perlfaq9.html#How-do-I-check-a-valid-mail-address>).
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This library should run on perls released even a long time ago.  It should
work on any version of perl released in the last five years.
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to
lower the minimum required perl.
.SH PREREQUISITES
.IX Header "PREREQUISITES"
This module requires perl 5.004 or later and the Mail::Address module.
Either the Net::DNS module or the nslookup utility is required
for DNS checks.  The Net::Domain::TLD module is required to check the
validity of top level domains.
.SH METHODS
.IX Header "METHODS"
Every method which accepts an \f(CW\*(C`<ADDRESS>\*(C'\fR parameter may
be passed either a string or an instance of the Mail::Address
class.  All errors raise an exception.
.IP "new ( [PARAMS] )" 4
.IX Item "new ( [PARAMS] )"
This method is used to construct an Email::Valid object.
It accepts an optional list of named parameters to
control the behavior of the object at instantiation.
.Sp
The following named parameters are allowed.  See the
individual methods below for details.
.Sp
.Vb 6
\& \-mxcheck
\& \-tldcheck
\& \-fudge
\& \-fqdn
\& \-allow_ip
\& \-local_rules
.Ve
.IP "mx ( <ADDRESS>|<DOMAIN> )" 4
.IX Item "mx ( <ADDRESS>|<DOMAIN> )"
This method accepts an email address or domain name and determines
whether a DNS record (A or MX) exists for it.
.Sp
The method returns true if a record is found and undef if not.
.Sp
Either the Net::DNS module or the nslookup utility is required for
DNS checks.  Using Net::DNS is the preferred method since error
handling is improved.  If Net::DNS is available, you can modify
the behavior of the resolver (e.g. change the default tcp_timeout
value) by manipulating the global Net::DNS::Resolver instance stored in
\&\f(CW$Email::Valid::Resolver\fR.
.IP "rfc822 ( <ADDRESS> )" 4
.IX Item "rfc822 ( <ADDRESS> )"
This method determines whether an address conforms to the RFC822
specification (except for nested comments).  It returns true if it
conforms and undef if not.
.IP "fudge ( <TRUE>|<FALSE> )" 4
.IX Item "fudge ( <TRUE>|<FALSE> )"
Specifies whether calls to \fBaddress()\fR should attempt to correct
common addressing errors.  Currently, this results in the removal of
spaces in AOL addresses, and the conversion of commas to periods in
Compuserve addresses.  The default is false.
.IP "allow_ip ( <TRUE>|<FALSE> )" 4
.IX Item "allow_ip ( <TRUE>|<FALSE> )"
Specifies whether a "domain literal" is acceptable as the domain part.  That
means addresses like:  \f(CW\*(C`rjbs@[1.2.3.4]\*(C'\fR
.Sp
The checking for the domain literal is stricter than the RFC and looser than
checking for a valid IP address, \fIbut this is subject to change\fR.
.Sp
The default is true.
.IP "fqdn ( <TRUE>|<FALSE> )" 4
.IX Item "fqdn ( <TRUE>|<FALSE> )"
Specifies whether addresses passed to \fBaddress()\fR must contain a fully
qualified domain name (FQDN).  The default is true.
.Sp
\&\fBPlease note!\fR  FQDN checks only occur for non-domain-literals.  In other
words, if you have set \f(CW\*(C`allow_ip\*(C'\fR and the address ends in a bracketed IP
address, the FQDN check will not occur.
.IP "tld ( <ADDRESS> )" 4
.IX Item "tld ( <ADDRESS> )"
This method determines whether the domain part of an address is in a
recognized top-level domain.
.Sp
\&\fBPlease note!\fR  TLD checks only occur for non-domain-literals.  In other
words, if you have set \f(CW\*(C`allow_ip\*(C'\fR and the address ends in a bracketed IP
address, the TLD check will not occur.
.IP "local_rules ( <TRUE>|<FALSE> )" 4
.IX Item "local_rules ( <TRUE>|<FALSE> )"
Specifies whether addresses passed to \fBaddress()\fR should be tested
for domain specific restrictions.  Currently, this is limited to
certain AOL restrictions that I'm aware of.  The default is false.
.IP "mxcheck ( <TRUE>|<FALSE> )" 4
.IX Item "mxcheck ( <TRUE>|<FALSE> )"
Specifies whether addresses passed to \fBaddress()\fR should be checked
for a valid DNS entry.  The default is false.
.IP "tldcheck ( <TRUE>|<FALSE> )" 4
.IX Item "tldcheck ( <TRUE>|<FALSE> )"
Specifies whether addresses passed to \fBaddress()\fR should be checked
for a valid top level domains.  The default is false.
.IP "address ( <ADDRESS> )" 4
.IX Item "address ( <ADDRESS> )"
This is the primary method which determines whether an email
address is valid.  Its behavior is modified by the values of
\&\fBmxcheck()\fR, \fBtldcheck()\fR, \fBlocal_rules()\fR, \fBfqdn()\fR, and \fBfudge()\fR.  If the address
passes all checks, the (possibly modified) address is returned as
a string.  Otherwise, undef is returned.
In a list context, the method also returns an instance of the
Mail::Address class representing the email address.
.IP "details ()" 4
.IX Item "details ()"
If the last call to \fBaddress()\fR returned undef, you can call this
method to determine why it failed.  Possible values are:
.Sp
.Vb 6
\& rfc822
\& localpart
\& local_rules
\& fqdn
\& mxcheck
\& tldcheck
.Ve
.Sp
If the class is not instantiated, you can get the same information
from the global \f(CW$Email::Valid::Details\fR.
.SH EXAMPLES
.IX Header "EXAMPLES"
Let's see if the address 'maurice@hevanet.com' conforms to the
RFC822 specification:
.PP
.Vb 1
\&  print (Email::Valid\->address(\*(Aqmaurice@hevanet.com\*(Aq) ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq);
.Ve
.PP
Additionally, let's make sure there's a mail host for it:
.PP
.Vb 2
\&  print (Email::Valid\->address( \-address => \*(Aqmaurice@hevanet.com\*(Aq,
\&                                \-mxcheck => 1 ) ? \*(Aqyes\*(Aq : \*(Aqno\*(Aq);
.Ve
.PP
Let's see an example of how the address may be modified:
.PP
.Vb 2
\&  $addr = Email::Valid\->address(\*(AqAlfred Neuman <Neuman @ foo.bar>\*(Aq);
\&  print "$addr\en"; # prints Neuman@foo.bar
.Ve
.PP
Now let's add the check for top level domains:
.PP
.Vb 3
\&  $addr = Email::Valid\->address( \-address => \*(AqNeuman@foo.bar\*(Aq,
\&                                 \-tldcheck => 1 );
\&  print "$addr\en"; # doesn\*(Aqt print anything
.Ve
.PP
Need to determine why an address failed?
.PP
.Vb 3
\&  unless(Email::Valid\->address(\*(Aqmaurice@hevanet\*(Aq)) {
\&    print "address failed $Email::Valid::Details check.\en";
\&  }
.Ve
.PP
If an error is encountered, an exception is raised.  This is really
only possible when performing DNS queries.  Trap any exceptions by
wrapping the call in an eval block:
.PP
.Vb 5
\&  eval {
\&    $addr = Email::Valid\->address( \-address => \*(Aqmaurice@hevanet.com\*(Aq,
\&                                   \-mxcheck => 1 );
\&  };
\&  warn "an error was encountered: $@" if $@;
.Ve
.SH CREDITS
.IX Header "CREDITS"
Significant portions of this module are based on the ckaddr program
written by Tom Christiansen and the RFC822 address pattern developed
by Jeffrey Friedl.  Neither were involved in the construction of this
module; all errors are mine.
.PP
Thanks very much to the following people for their suggestions and
bug fixes:
.PP
.Vb 7
\&  Otis Gospodnetic <otis@DOMINIS.com>
\&  Kim Ryan <kimaryan@ozemail.com.au>
\&  Pete Ehlke <pde@listserv.music.sony.com>
\&  Lupe Christoph
\&  David Birnbaum
\&  Achim
\&  Elizabeth Mattijsen (liz@dijkmat.nl)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mail::Address, Net::DNS, Net::Domain::TLD, perlfaq9 <https://metacpan.org/pod/distribution/perlfaq/lib/perlfaq9.pod>
.PP
RFC822 <https://www.ietf.org/rfc/rfc0822.txt> \-
standard for the format of ARPA internet text messages.
Superseded by RFC2822 <https://www.ietf.org/rfc/rfc2822.txt>.
.SH AUTHOR
.IX Header "AUTHOR"
Maurice Aubrey <maurice@hevanet.com>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Alexandr Ciornii <alexchorny@gmail.com>
.IP \(bu 4
Arne Johannessen <ajnn@cpan.org>
.IP \(bu 4
Dan Book <grinnz@gmail.com>
.IP \(bu 4
Gene Hightower <gene@digilicious.com>
.IP \(bu 4
James E Keenan <jkeenan@cpan.org>
.IP \(bu 4
Karel Miko <karel.miko@gmail.com>
.IP \(bu 4
McA <McA@github.com>
.IP \(bu 4
Michael Schout <mschout@gkg.net>
.IP \(bu 4
Mohammad S Anwar <mohammad.anwar@yahoo.com>
.IP \(bu 4
Neil Bowers <neil@bowers.com>
.IP \(bu 4
Ricardo Signes <rjbs@semiotic.systems>
.IP \(bu 4
Steve Bertrand <steveb@cpan.org>
.IP \(bu 4
Svetlana <svetlana.wiczer@gmail.com>
.IP \(bu 4
Troy Morehouse <troymore@nbnet.nb.ca>
.IP \(bu 4
Yanick Champoux <yanick@babyl.dyndns.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 1998 by Maurice Aubrey.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
