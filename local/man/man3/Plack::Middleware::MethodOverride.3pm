.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::Middleware::MethodOverride 3pm"
.TH Plack::Middleware::MethodOverride 3pm 2018-05-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH Name
.IX Header "Name"
Plack::Middleware::MethodOverride \- Override REST methods to Plack apps via POST
.SH Version
.IX Header "Version"
version 0.20
.SH Synopsis
.IX Header "Synopsis"
In your Plack app:
.PP
.Vb 5
\&  use Plack::Builder;
\&  builder {
\&      enable MethodOverride;
\&      $app;
\&  };
.Ve
.PP
PUT via a query parameter in your POST forms:
.PP
.Vb 3
\&  <form method="POST" action="/foo?x\-tunneled\-method=PUT">
\&    <!\-\- ... \-\->
\&  </form>
.Ve
.PP
Or override it via the \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR header in a request:
.PP
.Vb 3
\&  my $req = HTTP::Request\->new(POST => \*(Aq/foo\*(Aq, [
\&      \*(AqX\-HTTP\-Method\-Override\*(Aq => \*(AqPUT\*(Aq
\&  ]);
.Ve
.SH Description
.IX Header "Description"
Writing
REST <http://en.wikipedia.org/wiki/Representational_State_Transfer>ful apps
is a good thing, but if you're also trying to support web browsers, it would
be nice not to be reduced to \f(CW\*(C`GET\*(C'\fR and \f(CW\*(C`POST\*(C'\fR for everything.
.PP
This middleware allows for \f(CW\*(C`POST\*(C'\fR requests that pretend to be something else:
by adding either a header named \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR to the request, or
a query parameter named \f(CW\*(C`x\-tunneled\-method\*(C'\fR to the URI, the client can say
what method it actually meant. That is, as long as it meant one of these:
.IP \(bu 4
GET
.IP \(bu 4
POST
.IP \(bu 4
HEAD
.IP \(bu 4
PUT
.IP \(bu 4
DELETE
.IP \(bu 4
OPTIONS
.IP \(bu 4
TRACE
.IP \(bu 4
CONNECT
.IP \(bu 4
PATCH
.PP
If so, then the \f(CW\*(C`REQUEST_METHOD\*(C'\fR in the PSGI environment will be replaced
with the client's desired value. The original request method is always stored
under the \f(CW\*(C`plack.original_request_method\*(C'\fR key.
.SH Configuration
.IX Header "Configuration"
These are the named arguments you can pass to \f(CW\*(C`new\*(C'\fR. Or, more likely, on the
\&\f(CW\*(C`enable\*(C'\fR line in your \f(CW\*(C`builder\*(C'\fR block, as in
.PP
.Vb 1
\&   enable \*(AqMethodOverride\*(Aq, header => \*(AqX\-HTTP\-Method\*(Aq, param => \*(Aqmy_method\*(Aq;
.Ve
.ie n .SS """header"""
.el .SS \f(CWheader\fP
.IX Subsection "header"
Specifies the HTTP header name which specifies the overriding HTTP method.
.PP
Defaults to \f(CW\*(C`X\-HTTP\-Method\-Override\*(C'\fR, as used by Google for its APIs.
.ie n .SS """param"""
.el .SS \f(CWparam\fP
.IX Subsection "param"
Specifies the query parameter name to specify the overriding HTTP method.
.PP
Defaults to \f(CW\*(C`x\-tunneled\-method\*(C'\fR.
.SH Acknowledgements
.IX Header "Acknowledgements"
This module gleefully steals from
Catalyst::TraitFor::Request::REST::ForBrowsers by Dave Rolsky and the
original version by Tatsuhiko Miyagawa (which in turn stole from
HTTP::Engine::Middleware::MethodOverride). Thanks to Aristotle
Pagaltzis <http://plasmasturm.org/> for the shove in this direction, to Matt
S Trout <http://www.trout.me.uk/> for suggesting that it be implemented as
middleware, and to Hans Dieter Pearcey <http://www.weftsoar.net/> for
convincing me not to parse body parameters.
.SH Authors
.IX Header "Authors"
.IP \(bu 4
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.IP \(bu 4
David E. Wheeler <david@justatheory.com>
.IP \(bu 4
Aristotle Pagaltzis <pagaltzis@gmx.de>
.SH "Copyright and License"
.IX Header "Copyright and License"
This software is copyright (c) 2015 by Tatsuhiko Miyagawa, David E. Wheeler, Aristotle Pagaltzis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
