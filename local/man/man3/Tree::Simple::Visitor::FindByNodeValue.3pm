.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::FindByNodeValue 3pm"
.TH Tree::Simple::Visitor::FindByNodeValue 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::FindByNodeValue \- A Visitor for finding an element in a Tree::Simple hierarchy by node value
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::FindByNodeValue;
\&
\&  # create a visitor object
\&  my $visitor = Tree::Simple::Visitor::FindByNodeValue\->new();
\&
\&  # set the search path for our tree
\&  $visitor\->searchForNodeValue("My Tree Node");
\&
\&  # pass the visitor to a tree
\&  $tree\->accept($visitor);
\&
\&  # fetch the result, which will
\&  # be the Tree::Simple object that
\&  # we have found, or undefined
\&  my $result = $visitor\->getResult() || die "No Tree found";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Given a node value and Tree::Simple hierarchy, this Visitor will attempt to find the node with the same node value.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR, \f(CW\*(C`setTraversalMethod\*(C'\fR, \f(CW\*(C`includeTrunk\*(C'\fR and \f(CW\*(C`searchForNodeValue\*(C'\fR methods to customize its behavior.
.IP "\fBincludeTrunk ($boolean)\fR" 4
.IX Item "includeTrunk ($boolean)"
Based upon the value of \f(CW$boolean\fR, this will tell the visitor to include the trunk of the tree in the search as well.
.IP "\fBsetTraversalMethod ($visitor)\fR" 4
.IX Item "setTraversalMethod ($visitor)"
By default we will use the Tree::Simple built in depth-first (pre-order) traverse method. If however,
you desire the tree to be search in a different ordering, this can be accomplished using a different
traversal method, you can supply a \f(CW$visitor\fR object implementing that traversal type to this method
(See  \fBTree::Simple::Visitor::BreadthFirstTraversal\fR, \fBTree::Simple::Visitor::PreOrderTraversal\fR
and \fBTree::Simple::Visitor::PostOrderTraversal\fR).
.IP "\fBsearchForNodeValue ($node_value)\fR" 4
.IX Item "searchForNodeValue ($node_value)"
This is the node value we will attempt to find within the tree.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as its \f(CW$filter_function\fR argument and throws an exception
if it is not a code reference. This code reference is used to further check the tree nodes as they
are searched and so can be used to customize search behavior. For instance, you could to check
against the node value as well as some other criteria. The filter function should accept a single
argument, which is the current Tree::Simple object and return either true (\f(CW1\fR) on success, or
false (\f(CW0\fR) on failure.
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by the Tree::Simple \f(CW\*(C`accept\*(C'\fR method. It can also be used on its
own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple
object), and will throw and exception otherwise.
.IP \fBgetResult\fR 4
.IX Item "getResult"
This method will return the tree found with the specified node value (set by the
\&\f(CW\*(C`searchForNodeValue\*(C'\fR method) or \f(CW\*(C`undef\*(C'\fR if no tree is found.
.SH Repository
.IX Header "Repository"
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory>
.SH SUPPORT
.IX Header "SUPPORT"
Bugs should be reported via the CPAN bug tracker at
.PP
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory/issues>
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the
\&\fBTree::Simple\fR module, you should refer to that module for more information.
.SH AUTHOR
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
