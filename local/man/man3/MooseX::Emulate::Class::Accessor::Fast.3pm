.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Emulate::Class::Accessor::Fast 3pm"
.TH MooseX::Emulate::Class::Accessor::Fast 3pm 2018-07-03 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::Emulate::Class::Accessor::Fast \- Emulate Class::Accessor::Fast behavior using Moose attributes
.SH SYNOPSYS
.IX Header "SYNOPSYS"
.Vb 2
\&    package MyClass;
\&    use Moose;
\&
\&    with \*(AqMooseX::Emulate::Class::Accessor::Fast\*(Aq;
\&
\&
\&    #fields with readers and writers
\&    _\|_PACKAGE_\|_\->mk_accessors(qw/field1 field2/);
\&    #fields with readers only
\&    _\|_PACKAGE_\|_\->mk_ro_accessors(qw/field3 field4/);
\&    #fields with writers only
\&    _\|_PACKAGE_\|_\->mk_wo_accessors(qw/field5 field6/);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module attempts to emulate the behavior of Class::Accessor::Fast as
accurately as possible using the Moose attribute system. The public API of
\&\f(CW\*(C`Class::Accessor::Fast\*(C'\fR is wholly supported, but the private methods are not.
If you are only using the public methods (as you should) migration should be a
matter of switching your \f(CW\*(C`use base\*(C'\fR line to a \f(CW\*(C`with\*(C'\fR line.
.PP
While I have attempted to emulate the behavior of Class::Accessor::Fast as closely
as possible bugs may still be lurking in edge-cases.
.SH BEHAVIOR
.IX Header "BEHAVIOR"
Simple documentation is provided here for your convenience, but for more thorough
documentation please see Class::Accessor::Fast and Class::Accessor.
.SS "A note about introspection"
.IX Subsection "A note about introspection"
Please note that, at this time, the \f(CW\*(C`is\*(C'\fR flag attribute is not being set. To
determine the \f(CW\*(C`reader\*(C'\fR and \f(CW\*(C`writer\*(C'\fR methods using introspection in later versions
of Class::MOP ( > 0.38) please use the \f(CW\*(C`get_read_method\*(C'\fR and \f(CW\*(C`get_write_method\*(C'\fR
methods in Class::MOP::Attribute. Example
.PP
.Vb 4
\&    # with Class::MOP <= 0.38
\&    my $attr = $self\->meta\->find_attribute_by_name($field_name);
\&    my $reader_method = $attr\->reader || $attr\->accessor;
\&    my $writer_method = $attr\->writer || $attr\->accessor;
\&
\&    # with Class::MOP > 0.38
\&    my $attr = $self\->meta\->find_attribute_by_name($field_name);
\&    my $reader_method = $attr\->get_read_method;
\&    my $writer_method = $attr\->get_write_method;
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .SS "BUILD $self %args"
.el .SS "BUILD \f(CW$self\fP \f(CW%args\fP"
.IX Subsection "BUILD $self %args"
Change the default Moose class building to emulate the behavior of C::A::F and
store arguments in the instance hashref.
.ie n .SS "mk_accessors @field_names"
.el .SS "mk_accessors \f(CW@field_names\fP"
.IX Subsection "mk_accessors @field_names"
Create read-write accessors. An attribute named \f(CW$field_name\fR will be created.
The name of the c<reader> and \f(CW\*(C`writer\*(C'\fR methods will be determined by the return
value of \f(CW\*(C`accessor_name_for\*(C'\fR and \f(CW\*(C`mutator_name_for\*(C'\fR, which by default return the
name passed unchanged. If the accessor and mutator names are equal the \f(CW\*(C`accessor\*(C'\fR
attribute will be passes to Moose, otherwise the \f(CW\*(C`reader\*(C'\fR and \f(CW\*(C`writer\*(C'\fR attributes
will be passed. Please see Class::MOP::Attribute for more information.
.ie n .SS "mk_ro_accessors @field_names"
.el .SS "mk_ro_accessors \f(CW@field_names\fP"
.IX Subsection "mk_ro_accessors @field_names"
Create read-only accessors.
.ie n .SS "mk_ro_accessors @field_names"
.el .SS "mk_ro_accessors \f(CW@field_names\fP"
.IX Subsection "mk_ro_accessors @field_names"
Create write-only accessors.
.SS follow_best_practices
.IX Subsection "follow_best_practices"
Preface readers with 'get_' and writers with 'set_'.
See original Class::Accessor documentation for more information.
.SS mutator_name_for
.IX Subsection "mutator_name_for"
.SS accessor_name_for
.IX Subsection "accessor_name_for"
See original Class::Accessor documentation for more information.
.SS set
.IX Subsection "set"
See original Class::Accessor documentation for more information.
.SS get
.IX Subsection "get"
See original Class::Accessor documentation for more information.
.SS meta
.IX Subsection "meta"
See Moose::Meta::Class.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose, Moose::Meta::Attribute, Class::Accessor, Class::Accessor::Fast,
Class::MOP::Attribute, MooseX::Adopt::Class::Accessor::Fast
.SH AUTHORS
.IX Header "AUTHORS"
Guillermo Roditi (groditi) <groditi@cpan.org>
.PP
With contributions from:
.IP "Tomas Doran (t0m) <bobtfish@bobtfish.net>" 4
.IX Item "Tomas Doran (t0m) <bobtfish@bobtfish.net>"
.PD 0
.IP "Florian Ragwitz (rafl) <rafl@debian.org>" 4
.IX Item "Florian Ragwitz (rafl) <rafl@debian.org>"
.PD
.SH LICENSE
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
