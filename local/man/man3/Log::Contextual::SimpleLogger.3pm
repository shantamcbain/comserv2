.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Contextual::SimpleLogger 3pm"
.TH Log::Contextual::SimpleLogger 3pm 2024-05-29 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Log::Contextual::SimpleLogger \- Super simple logger made for playing with Log::Contextual
.SH VERSION
.IX Header "VERSION"
version 0.009001
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  use Log::Contextual::SimpleLogger;
\&  use Log::Contextual qw( :log ),
\&    \-logger => Log::Contextual::SimpleLogger\->new({ levels => [qw( debug )]});
\&
\&  log_info { \*(Aqprogram started\*(Aq }; # no\-op because info is not in levels
\&  sub foo {
\&    log_debug { \*(Aqentered foo\*(Aq };
\&    ...
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is a simple logger made mostly for demonstration and initial
experimentation with Log::Contextual.  We recommend you use a real logger
instead.  For something more serious but not overly complicated, take a look at
Log::Dispatchouli.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Arguments: \f(CW\*(C`Dict[
  levels      => Optional[ArrayRef[Str]],
  levels_upto => Level,
  coderef     => Optional[CodeRef],
] $conf\*(C'\fR
.PP
.Vb 4
\&  my $l = Log::Contextual::SimpleLogger\->new({
\&    levels  => [qw( info warn )],
\&    coderef => sub { print @_ }, # the default prints to STDERR
\&  });
.Ve
.PP
or
.PP
.Vb 4
\&  my $l = Log::Contextual::SimpleLogger\->new({
\&    levels_upto => \*(Aqdebug\*(Aq,
\&    coderef     => sub { print @_ }, # the default prints to STDERR
\&  });
.Ve
.PP
Creates a new SimpleLogger object with the passed levels enabled and optionally
a \f(CW\*(C`CodeRef\*(C'\fR may be passed to modify how the logs are output/stored.
.PP
\&\f(CW\*(C`levels_upto\*(C'\fR enables all the levels up to and including the level passed.
.PP
Levels may contain:
.PP
.Vb 6
\&  trace
\&  debug
\&  info
\&  warn
\&  error
\&  fatal
.Ve
.ie n .SS $level
.el .SS \f(CW$level\fP
.IX Subsection "$level"
Arguments: \f(CW@anything\fR
.PP
All of the following six methods work the same.  The basic pattern is:
.PP
.Vb 2
\&  sub $level {
\&    my $self = shift;
\&
\&    print STDERR "[$level] " . join qq{\en}, @_;
\&      if $self\->is_$level;
\&  }
.Ve
.PP
\fItrace\fR
.IX Subsection "trace"
.PP
.Vb 1
\&  $l\->trace( \*(Aqentered method foo with args \*(Aq join q{,}, @args );
.Ve
.PP
\fIdebug\fR
.IX Subsection "debug"
.PP
.Vb 1
\&  $l\->debug( \*(Aqentered method foo\*(Aq );
.Ve
.PP
\fIinfo\fR
.IX Subsection "info"
.PP
.Vb 1
\&  $l\->info( \*(Aqstarted process foo\*(Aq );
.Ve
.PP
\fIwarn\fR
.IX Subsection "warn"
.PP
.Vb 1
\&  $l\->warn( \*(Aqpossible misconfiguration at line 10\*(Aq );
.Ve
.PP
\fIerror\fR
.IX Subsection "error"
.PP
.Vb 1
\&  $l\->error( \*(Aqnon\-numeric user input!\*(Aq );
.Ve
.PP
\fIfatal\fR
.IX Subsection "fatal"
.PP
.Vb 1
\&  $l\->fatal( \*(Aq1 is never equal to 0!\*(Aq );
.Ve
.PP
\&\fBNote:\fR \f(CW\*(C`fatal\*(C'\fR does not call \f(CW\*(C`die\*(C'\fR for you, see "EXCEPTIONS AND ERROR HANDLING" in Log::Contextual
.SS is_$level
.IX Subsection "is_$level"
All of the following six functions just return true if their respective
level is enabled.
.PP
\fIis_trace\fR
.IX Subsection "is_trace"
.PP
.Vb 1
\&  say \*(Aqtracing\*(Aq if $l\->is_trace;
.Ve
.PP
\fIis_debug\fR
.IX Subsection "is_debug"
.PP
.Vb 1
\&  say \*(Aqdebuging\*(Aq if $l\->is_debug;
.Ve
.PP
\fIis_info\fR
.IX Subsection "is_info"
.PP
.Vb 1
\&  say q{info\*(Aqing} if $l\->is_info;
.Ve
.PP
\fIis_warn\fR
.IX Subsection "is_warn"
.PP
.Vb 1
\&  say \*(Aqwarning\*(Aq if $l\->is_warn;
.Ve
.PP
\fIis_error\fR
.IX Subsection "is_error"
.PP
.Vb 1
\&  say \*(Aqerroring\*(Aq if $l\->is_error;
.Ve
.PP
\fIis_fatal\fR
.IX Subsection "is_fatal"
.PP
.Vb 1
\&  say q{fatal\*(Aqing} if $l\->is_fatal;
.Ve
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/haarg/Log\-Contextual/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH AUTHOR
.IX Header "AUTHOR"
Arthur Axel "fREW" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2024 by Arthur Axel "fREW" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
