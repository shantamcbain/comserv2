.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::ACCESS 3pm"
.TH DBIx::Class::Storage::DBI::ACCESS 3pm 2019-11-06 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::ACCESS \- Support specific to MS Access
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is the base class for Microsoft Access support.
.PP
This driver supports last_insert_id,
empty inserts for tables with \f(CW\*(C`AUTOINCREMENT\*(C'\fR columns, nested transactions via
auto_savepoint, \f(CW\*(C`GUID\*(C'\fR columns via
DBIx::Class::Storage::DBI::UniqueIdentifier.
.SH "SUPPORTED VERSIONS"
.IX Header "SUPPORTED VERSIONS"
This module has currently only been tested on MS Access 2010.
.PP
Information about how well it works on different version of MS Access is welcome
(write the mailing list, or submit a ticket to RT if you find bugs.)
.SH "USING GUID COLUMNS"
.IX Header "USING GUID COLUMNS"
If you have \f(CW\*(C`GUID\*(C'\fR PKs or other \f(CW\*(C`GUID\*(C'\fR columns with
auto_nextval you will need to set a
new_guid callback, like
so:
.PP
.Vb 1
\&  $schema\->storage\->new_guid(sub { Data::GUID\->new\->as_string });
.Ve
.PP
Under Catalyst you can use code similar to this in your
Catalyst::Model::DBIC::Schema \f(CW\*(C`Model.pm\*(C'\fR:
.PP
.Vb 4
\&  after BUILD => sub {
\&    my $self = shift;
\&    $self\->storage\->new_guid(sub { Data::GUID\->new\->as_string });
\&  };
.Ve
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
