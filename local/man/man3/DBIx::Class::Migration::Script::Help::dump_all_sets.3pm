.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Script::Help::dump_all_sets 3pm"
.TH DBIx::Class::Migration::Script::Help::dump_all_sets 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Script::Help::dump_all_sets \- Dump all fixture sets.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    dbic\-migration dump_all_sets
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
For the current database version, dump data sets for all fixtures in the
fixtures configuration directory for that version.  If  the database is not
versioned, we assume the version is whatever you schema class is.
.SH OPTIONS
.IX Header "OPTIONS"
This command accepts the following options.  You may learn more about each
option by typing \f(CW\*(C`dbic\-migration help OPTION\*(C'\fR.  The following is a summary.
.SH "fixture_sets (fixture_sets)"
.IX Header "fixture_sets (fixture_sets)"
Required.  The fixture configuration set names (basically these are the file
names of your fixture configurations, without the '.json' part.
.SS "includes (I,lib,libs,include)"
.IX Subsection "includes (I,lib,libs,include)"
Optional.
.PP
Adds the listed paths to \f(CW@INC\fR.  Handy during development when you want to use
a development schema class.
.SS "schema_class (S)"
.IX Subsection "schema_class (S)"
Accepts Str. Required.
.PP
This is the schema we use as the basis for creating, managing and running your
deployments.  This should be the full package namespace defining your subclass
of DBIx::Class::Schema.  For example \f(CW\*(C`MyApp::Schema\*(C'\fR.
.PP
If the "schema_class" cannot be loaded, a hard exception will be thrown.
.SS "target_dir (D)"
.IX Subsection "target_dir (D)"
Optional.
.PP
When using a \f(CW\*(C`sandbox_class\*(C'\fR for generating developer level database sandboxes,
you may wish to place the sandbox in a directory other than the default (which
is under the \f(CW\*(C`share\*(C'\fR directory off the project root).
.SS sandbox_class
.IX Subsection "sandbox_class"
Aliases: T, sb
.PP
Accepts: String (default: SqliteSandbox)
.PP
The class we use to create a developer level database sandbox.
.PP
You can change this to either 'PostgresqlSandbox' or 'MySQLSandbox', which will
create a sandbox using either DBIx::Class::Migration::MySQLSandbox or 
DBIx::Class::Migration::PostgresqlSandbox.
.SS user
.IX Subsection "user"
Aliases: U
.SS password
.IX Subsection "password"
Aliases: P
.SS dsn
.IX Subsection "dsn"
Connection information to an already created and running instance of a database.
If you don't specify this, we will assume you want a developer level sandbox (
See "sandbox_class" in DBIx::Class::Migration::Script).
.SS dbic_fixture_class
.IX Subsection "dbic_fixture_class"
Accepts: String to a Perl Class.  Defaults to DBIx::Class::Fixtures
.PP
Lets you specify a fixture class.
.SS dbic_fixtures_extra_args
.IX Subsection "dbic_fixtures_extra_args"
Accepts: HashRef.  Optional
.PP
Allows you to pass custom arguments to DBIx::Class::Fixtures.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Script,
DBIx::Class::Migration::Features, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
