.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::Store::Minimal 3pm"
.TH Catalyst::Authentication::Store::Minimal 3pm 2024-10-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Authentication::Store::Minimal \- Minimal authentication store
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    # you probably just want Store::Minimal under most cases,
\&    # but if you insist you can instantiate your own store:
\&
\&    use Catalyst::Authentication::Store::Minimal;
\&
\&    use Catalyst qw/
\&        Authentication
\&    /;
\&
\&    _\|_PACKAGE_\|_\->config( \*(AqPlugin::Authentication\*(Aq =>
\&                    {
\&                        default_realm => \*(Aqmembers\*(Aq,
\&                        realms => {
\&                            members => {
\&                                credential => {
\&                                    class => \*(AqPassword\*(Aq,
\&                                    password_field => \*(Aqpassword\*(Aq,
\&                                    password_type => \*(Aqclear\*(Aq
\&                                },
\&                                store => {
\&                                    class => \*(AqMinimal\*(Aq,
\&                                    users => {
\&                                        bob => {
\&                                            password => "s00p3r",
\&                                            editor => \*(Aqyes\*(Aq,
\&                                            roles => [qw/edit delete/],
\&                                        },
\&                                        william => {
\&                                            password => "s3cr3t",
\&                                            roles => [qw/comment/],
\&                                        }
\&                                    }
\&                                }
\&                            }
\&                        }
\&                    }
\&    );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This authentication store lets you create a very quick and dirty user
database in your application's config hash.
.PP
You will need to include the Authentication plugin, and at least one Credential
plugin to use this Store. Credential::Password is reccommended.
.PP
It's purpose is mainly for testing, and it should probably be replaced by a
more "serious" store for production.
.PP
The hash in the config, as well as the user objects/hashes are freely mutable
at runtime.
.SH CONFIGURATION
.IX Header "CONFIGURATION"
.IP class 4
.IX Item "class"
The classname used for the store. This is part of
Catalyst::Plugin::Authentication and is the method by which
Catalyst::Authentication::Store::Minimal is loaded as the
user store. For this module to be used, this must be set to
\&'Minimal'.
.IP user_class 4
.IX Item "user_class"
The class used for the user object. If you don't specify a class name, the
default Catalyst::Authentication::User::Hash will be used. If you define your
own class, it must inherit from Catalyst::Authentication::User::Hash.
.IP users 4
.IX Item "users"
This is a simple hash of users, the keys are the usenames, and the values are
hashrefs containing a password key/value pair, and optionally, a roles/list
of role-names pair. If using roles, you will also need to add the
Authorization::Roles plugin.
.Sp
See the SYNOPSIS for an example.
.SH METHODS
.IX Header "METHODS"
There are no publicly exported routines in the Minimal store (or indeed in
most authentication stores)  However, below is a description of the routines
required by Catalyst::Plugin::Authentication for all authentication stores.
.ie n .SS "new( $config, $app, $realm )"
.el .SS "new( \f(CW$config\fP, \f(CW$app\fP, \f(CW$realm\fP )"
.IX Subsection "new( $config, $app, $realm )"
Constructs a new store object, which uses the user element of the supplied config
hash ref as it's backing structure.
.ie n .SS "find_user( $authinfo, $c )"
.el .SS "find_user( \f(CW$authinfo\fP, \f(CW$c\fP )"
.IX Subsection "find_user( $authinfo, $c )"
Keys the hash by the 'id' or 'username' element in the authinfo hash and returns the user.
.PP
\&... documentation fairy stopped here. ...
.PP
If the return value is unblessed it will be blessed as
Catalyst::Authentication::User::Hash.
.ie n .SS "from_session( $id )"
.el .SS "from_session( \f(CW$id\fP )"
.IX Subsection "from_session( $id )"
Delegates to \f(CW\*(C`get_user\*(C'\fR.
.SS "user_supports( )"
.IX Subsection "user_supports( )"
Chooses a random user from the hash and delegates to it.
.SS "get_user( )"
.IX Subsection "get_user( )"
Deprecated
.SS "setup( )"
.IX Subsection "setup( )"
