.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Devel::Confess 3pm"
.TH Devel::Confess 3pm 2017-02-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Devel::Confess \- Include stack traces on all warnings and errors
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Use on the command line:
.PP
.Vb 2
\&  # Make every warning and error include a full stack trace
\&  perl \-d:Confess script.pl
\&
\&  # Also usable as a module
\&  perl \-MDevel::Confess script.pl
\&
\&  # display warnings in yellow and errors in red
\&  perl \-d:Confess=color script.pl
\&
\&  # set options by environment
\&  export DEVEL_CONFESS_OPTIONS=\*(Aqcolor dump\*(Aq
\&  perl \-d:Confess script.pl
.Ve
.PP
Can also be used inside a script:
.PP
.Vb 1
\&  use Devel::Confess;
\&
\&  use Devel::Confess \*(Aqcolor\*(Aq;
\&
\&  # disable stack traces
\&  no Devel::Confess;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is meant as a debugging aid. It can be used to make a script
complain loudly with stack backtraces when \f(CWwarn()\fRing or \f(CWdie()\fRing.
Unlike other similar modules (e.g. Carp::Always), stack traces will also be
included when exception objects are thrown.
.PP
The stack traces are generated using Carp, and will work for all types of
errors.  Carp's \f(CW\*(C`carp\*(C'\fR and \f(CW\*(C`croak\*(C'\fR functions will also be made to include
stack traces.
.PP
.Vb 5
\&  # it works for explicit die\*(Aqs and warn\*(Aqs
\&  $ perl \-d:Confess \-e \*(Aqsub f { die "arghh" }; sub g { f }; g\*(Aq
\&  arghh at \-e line 1.
\&          main::f() called at \-e line 1
\&          main::g() called at \-e line 1
\&
\&  # it works for interpreter\-thrown failures
\&  $ perl \-d:Confess \-w \-e \*(Aqsub f { $a = shift; @a = @$a };\*(Aq \e
\&                                        \-e \*(Aqsub g { f(undef) }; g\*(Aq
\&  Use of uninitialized value $a in array dereference at \-e line 1.
\&          main::f(undef) called at \-e line 2
\&          main::g() called at \-e line 2
.Ve
.PP
Internally, this is implemented with \f(CW$SIG\fR{_\|_WARN_\|_} and
\&\f(CW$SIG\fR{_\|_DIE_\|_} hooks.
.PP
Stack traces are also included if raw non-object references are thrown.
.PP
This module is compatible with all perl versions back to 5.6.2, without
additional prerequisites.  It contains workarounds for a number of bugs in the
perl interpreter, some of which effect comparatively simpler modules, like
Carp::Always.
.SH METHODS
.IX Header "METHODS"
.ie n .SS "import( @options )"
.el .SS "import( \f(CW@options\fP )"
.IX Subsection "import( @options )"
Enables stack traces and sets options.  A list of options to enable can be
passed in.  Prefixing the options with \f(CW\*(C`no_\*(C'\fR will disable them.
.ie n .IP """objects""" 4
.el .IP \f(CWobjects\fR 4
.IX Item "objects"
Enable attaching stack traces to exception objects.  Enabled by default.
.ie n .IP """builtin""" 4
.el .IP \f(CWbuiltin\fR 4
.IX Item "builtin"
Load the Devel::Confess::Builtin module to use built in
stack traces on supported exception types.  Disabled by default.
.ie n .IP """dump""" 4
.el .IP \f(CWdump\fR 4
.IX Item "dump"
Dumps the contents of references in arguments in stack trace, instead
of only showing their stringified version.  Also causes exceptions that are
non-object references and objects without string overloads to be dumped if
being displayed.  Shows up to three references deep.
Disabled by default.
.ie n .IP """dump0"", ""dump1"", ""dump2"", etc" 4
.el .IP "\f(CWdump0\fR, \f(CWdump1\fR, \f(CWdump2\fR, etc" 4
.IX Item "dump0, dump1, dump2, etc"
The same as the dump option, but with a different max depth to dump.  A depth
of 0 is treated as infinite.
.ie n .IP """color""" 4
.el .IP \f(CWcolor\fR 4
.IX Item "color"
Colorizes error messages in red and warnings in yellow.  Disabled by default.
.ie n .IP """source""" 4
.el .IP \f(CWsource\fR 4
.IX Item "source"
Includes a snippet of the source for each level of the stack trace. Disabled
by default.
.ie n .IP """source0"", ""source1"", ""source2"", etc" 4
.el .IP "\f(CWsource0\fR, \f(CWsource1\fR, \f(CWsource2\fR, etc" 4
.IX Item "source0, source1, source2, etc"
Enables source display, but with a specified number of lines of context to show.
Context of 0 will show the entire source of the files.
.ie n .IP """evalsource""" 4
.el .IP \f(CWevalsource\fR 4
.IX Item "evalsource"
Similar to the source option, but only shows includes source for string evals.
Useful for seeing the results of code generation.  Disabled by default.
Overrides the source option.
.ie n .IP """evalsource0"", ""evalsource1"", ""evalsource2"", etc" 4
.el .IP "\f(CWevalsource0\fR, \f(CWevalsource1\fR, \f(CWevalsource2\fR, etc" 4
.IX Item "evalsource0, evalsource1, evalsource2, etc"
Enables eval source display, but with a specified number of lines of context to
show.  Context of 0 will show the entire source of the evals.
.ie n .IP """better_names""" 4
.el .IP \f(CWbetter_names\fR 4
.IX Item "better_names"
Use more informative names to string evals and anonymous subs in stack
traces.  Enabled by default.
.ie n .IP """errors""" 4
.el .IP \f(CWerrors\fR 4
.IX Item "errors"
Add stack traces to errors.  Enabled by default.
.ie n .IP """warnings""" 4
.el .IP \f(CWwarnings\fR 4
.IX Item "warnings"
Add stack traces to warnings.  Enabled by default.
.PP
The default options can be changed by setting the \f(CW\*(C`DEVEL_CONFESS_OPTIONS\*(C'\fR
environment variable to a space separated list of options.
.SH CONFIGURATION
.IX Header "CONFIGURATION"
.ie n .SS %Devel::Confess::NoTrace
.el .SS \f(CW%Devel::Confess::NoTrace\fP
.IX Subsection "%Devel::Confess::NoTrace"
Classes or roles added to this hash will not have stack traces
attached to them.  This is useful for exception classes that provide
their own stack traces, or classes that don't cope well with being
re-blessed.  If Devel::Confess::Builtin is loaded, it will
automatically add its supported exception types to this hash.
.PP
Default Entries:
.IP Throwable::Error 4
.IX Item "Throwable::Error"
Provides a stack trace
.IP Moose::Error::Default 4
.IX Item "Moose::Error::Default"
Provides a stack trace
.SH ACKNOWLEDGMENTS
.IX Header "ACKNOWLEDGMENTS"
The idea and parts of the code and documentation are taken from Carp::Always.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
Carp::Always
.IP \(bu 4
Carp
.IP \(bu 4
Acme::JavaTrace and Devel::SimpleTrace
.IP \(bu 4
Carp::Always::Color
.IP \(bu 4
Carp::Source::Always
.IP \(bu 4
Carp::Always::Dump
.SH CAVEATS
.IX Header "CAVEATS"
This module uses several ugly tricks to do its work and surely has bugs.
.IP \(bu 4
This module uses \f(CW$SIG{_\|_WARN_\|_}\fR and \f(CW$SIG{_\|_DIE_\|_}\fR to accomplish its goal,
and thus may not play well with other modules that try to use these hooks.
Significant effort has gone into making this work as well as possible, but
global variables like these can never be fully encapsulated.
.IP \(bu 4
To provide stack traces on exception objects, this module re-blesses the
exception objects into a generated class.  While it tries to have the smallest
effect it can, some things cannot be worked around.  In particular,
\&\f(CWref($exception)\fR will return a different value than may be expected.  Any
module that relies on the specific return value from \f(CW\*(C`ref\*(C'\fR like already has
bugs though.
.SH SUPPORT
.IX Header "SUPPORT"
Please report bugs via
CPAN RT <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Devel-Confess>.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Graham Knop <haarg@haarg.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Adriano Ferreira <ferreira@cpan.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2005\-2013 the "AUTHORS" and "CONTRIBUTORS"
as listed above.
.SH LICENSE
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself. See <http://dev.perl.org/licenses/>.
