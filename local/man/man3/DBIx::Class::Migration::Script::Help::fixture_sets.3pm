.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Script::Help::fixture_sets 3pm"
.TH DBIx::Class::Migration::Script::Help::fixture_sets 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Script::Help::fixture_sets \- fixture sets to dump or load
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&     dbic\-migration dump \-\-fixture_set roles \-\-fixture_set core
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.IP Aliases 4
.IX Item "Aliases"
fixture_set
.IP Value 4
.IX Item "Value"
Str or Array of String. Defaults to 'all_tables'.
.PP
When dumping or populating fixture sets, you use this to set which sets.
.PP
Please note that if you manually describe your sets as in the above example,
you don't automatically get the \f(CW\*(C`all_tables\*(C'\fR set, which is a fixture set of all
database information and not 'all' the sets.
.PP
We automatically create the \f(CW\*(C`all_tables\*(C'\fR fixture set description file for you when
you prepare a new migration of the schema.  You can use this set for early
testing but I recommend you study DBIx::Class::Fixtures and learn the set
configuration rules, and create limited fixture sets for given purposes, rather
than just dump / populate everything, since that is like to get big pretty fast
.PP
My recommendation is to create a core 'seed' set, of default database values,
such as role types, default users, lists of countries, etc. and then create a
\&'demo' or 'dev' set that contains extra information useful to populate a
database so that you can run test cases and develop against.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Script,
DBIx::Class::Migration::Features, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
