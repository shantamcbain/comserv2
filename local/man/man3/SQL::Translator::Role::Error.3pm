.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Role::Error 3pm"
.TH SQL::Translator::Role::Error 3pm 2024-10-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Role::Error \- Error setter/getter for objects and classes
.SH SYNOPSIS
.IX Header "SYNOPSIS"
In the class consuming the role:
.PP
.Vb 3
\&    package Foo;
\&    use Moo;
\&    with qw(SQL::Translator::Role::Error);
\&
\&    sub foo {
\&        ...
\&        return $self\->error("Something failed")
\&            unless $some_condition;
\&        ...
\&    }
.Ve
.PP
In code using the class:
.PP
.Vb 3
\&    Foo\->foo or die Foo\->error;
\&    # or
\&    $foo\->foo or die $foo\->error;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This Moo::Role provides a method for getting and setting error on a
class or object.
.SH METHODS
.IX Header "METHODS"
.ie n .SS $object_or_class\->error([$message])
.el .SS \f(CW$object_or_class\fP\->error([$message])
.IX Subsection "$object_or_class->error([$message])"
If called with an argument, sets the error message and returns undef,
otherwise returns the message.
.PP
As an implementation detail, for compatibility with Class::Base, the
message is stored in \f(CW\*(C`$object\->{_ERROR}\*(C'\fR or \f(CW$Class::ERROR\fR,
depending on whether the invocant is an object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
"Error Handling" in Class::Base
