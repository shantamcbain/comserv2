.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::EncodedColumn::Crypt::OpenPGP 3pm"
.TH DBIx::Class::EncodedColumn::Crypt::OpenPGP 3pm 2019-09-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::EncodedColumn::Crypt::OpenPGP \- Encrypt columns using Crypt::OpenPGP
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 10
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqsecret_data\*(Aq => {
\&        data_type => \*(AqTEXT\*(Aq,
\&        encode_column => 1,
\&        encode_class  => \*(AqCrypt::OpenPGP\*(Aq,
\&        encode_args   => { 
\&            recipient => \*(Aq7BEF6294\*(Aq,
\&        },
\&        encode_check_method => \*(Aqdecrypt_data\*(Aq,
\& };
\&
\& my $row = $schema\->resultset(\*(AqEncryptedClass\*(Aq)
\&                \->create({ secret_data => \*(AqThis is secret\*(Aq });
\&
\& is(
\&    $row\->decrypt_data(\*(AqPrivate Key Passphrase\*(Aq),
\&        \*(AqThis is secret\*(Aq,
\&        \*(AqPGP/GPG Encryption works!\*(Aq
\& );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a conduit to working with Crypt::OpenPGP, so that you can encrypt 
data in your database using gpg.  Currently this module only handles encrypting
but it may add signing of columns in the future
.SH CONFIGURATION
.IX Header "CONFIGURATION"
In the column definition, specify the \f(CW\*(C`encode_args\*(C'\fR hash as listed in the
synopsis.  The \f(CW\*(C`recipient\*(C'\fR is required if doing key exchange encryption, or
if you want to use symmetric key encryption using a passphrase you can
specify a \f(CW\*(C`passphrase\*(C'\fR option:
.PP
.Vb 1
\& encode_args => { passphrase => "Shared Secret" }
.Ve
.PP
If you have a separate path to your public and private key ring file, or if you
have alternative Crypt::OpenPGP configuration, you can specify the
constructor args using the \f(CW\*(C`pgp_args\*(C'\fR configuration key:
.PP
.Vb 6
\&    encode_args => {
\&        pgp_args => {
\&            SecRing => "$FindBin::Bin/var/secring.gpg",
\&            PubRing => "$FindBin::Bin/var/pubring.gpg",
\&        }
\&    }
.Ve
.PP
The included tests cover good usage, and it is advised to briefly browse through
them.
.PP
Also, remember to keep your private keys secure!
.SH AUTHOR
.IX Header "AUTHOR"
J. Shirley <cpan@coldhardcode.com>
.SH LICENSE
.IX Header "LICENSE"
This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.
