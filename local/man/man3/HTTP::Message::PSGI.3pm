.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::Message::PSGI 3pm"
.TH HTTP::Message::PSGI 3pm 2024-01-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
HTTP::Message::PSGI \- Converts HTTP::Request and HTTP::Response from/to PSGI env and response
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTTP::Message::PSGI;
\&
\&  # $req is HTTP::Request, $res is HTTP::Response
\&  my $env = req_to_psgi($req);
\&  my $res = res_from_psgi([ $status, $headers, $body ]);
\&
\&  # Adds methods to HTTP::Request/Response class as well
\&  my $env = $req\->to_psgi;
\&  my $res = HTTP::Response\->from_psgi([ $status, $headers, $body ]);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
HTTP::Message::PSGI gives you convenient methods to convert an HTTP::Request
object to a PSGI env hash and convert a PSGI response arrayref to
a HTTP::Response object.
.PP
If you want the other way around, see Plack::Request and
Plack::Response.
.SH METHODS
.IX Header "METHODS"
.IP req_to_psgi 4
.IX Item "req_to_psgi"
.Vb 1
\&  my $env = req_to_psgi($req [, $key => $val ... ]);
.Ve
.Sp
Converts a HTTP::Request object into a PSGI env hash reference.
.IP HTTP::Request::to_psgi 4
.IX Item "HTTP::Request::to_psgi"
.Vb 1
\&  my $env = $req\->to_psgi;
.Ve
.Sp
Same as \f(CW\*(C`req_to_psgi\*(C'\fR but an instance method in HTTP::Request.
.IP res_from_psgi 4
.IX Item "res_from_psgi"
.Vb 1
\&  my $res = res_from_psgi([ $status, $headers, $body ]);
.Ve
.Sp
Creates a HTTP::Response object from a PSGI response array ref.
.IP HTTP::Response\->from_psgi 4
.IX Item "HTTP::Response->from_psgi"
.Vb 1
\&  my $res = HTTP::Response\->from_psgi([ $status, $headers, $body ]);
.Ve
.Sp
Same as \f(CW\*(C`res_from_psgi\*(C'\fR, but is a class method in HTTP::Response.
.SH AUTHOR
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Request::AsCGI HTTP::Message Plack::Test
