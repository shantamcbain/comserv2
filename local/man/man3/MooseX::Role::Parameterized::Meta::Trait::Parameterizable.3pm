.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Role::Parameterized::Meta::Trait::Parameterizable 3pm"
.TH MooseX::Role::Parameterized::Meta::Trait::Parameterizable 3pm 2019-07-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::Role::Parameterized::Meta::Trait::Parameterizable \- trait for parameterizable roles
.SH VERSION
.IX Header "VERSION"
version 1.11
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is the trait that is applied to the metaclass for parameterizable roles,
roles that have their parameters currently unbound. These are the roles that
you use "with" in Moose, but instead of composing the parameterizable role, we
construct a new parameterized role
(MooseX::Role::Parameterized::Meta::Role::Parameterized) and use that new
parameterized role instead.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.SS parameterized_role_metaclass
.IX Subsection "parameterized_role_metaclass"
The name of the class that will be used to construct the parameterized role.
.SS parameters_class
.IX Subsection "parameters_class"
The name of the class that will be used to construct the parameters object.
.SS parameters_metaclass
.IX Subsection "parameters_metaclass"
A metaclass representing this role's parameters. It will be an anonymous
subclass of "parameters_class". Each call to
"parameter" in MooseX::Role::Parameters adds an attribute to this metaclass.
.PP
When this role is consumed, the parameters object will be instantiated using
this metaclass.
.SS role_generator
.IX Subsection "role_generator"
A code reference that is used to generate a role based on the parameters
provided by the consumer. The user usually specifies it using the
"role" in MooseX::Role::Parameterized keyword.
.SH METHODS
.IX Header "METHODS"
.ie n .SS "add_parameter $name, %options"
.el .SS "add_parameter \f(CW$name\fP, \f(CW%options\fP"
.IX Subsection "add_parameter $name, %options"
Delegates to "add_attribute" in Moose::Meta::Class on the
"parameters_metaclass" object.
.ie n .SS "construct_parameters %arguments"
.el .SS "construct_parameters \f(CW%arguments\fP"
.IX Subsection "construct_parameters %arguments"
Creates a new MooseX::Role::Parameterized::Parameters object using metaclass
"parameters_metaclass".
.PP
The arguments are those specified by the consumer as parameter values.
.ie n .SS "generate_role %arguments"
.el .SS "generate_role \f(CW%arguments\fP"
.IX Subsection "generate_role %arguments"
This method generates and returns a new instance of
"parameterized_role_metaclass". It can take any combination of
three named arguments:
.IP parameters 4
.IX Item "parameters"
A hashref of parameters for the role, same as would be passed in at a "with"
statement.
.IP package 4
.IX Item "package"
A package name that, if present, we will use for the generated role; if not,
we generate an anonymous role.
.IP consumer 4
.IX Item "consumer"
A consumer metaobject, if available.
.SS apply
.IX Subsection "apply"
Overrides "apply" in Moose::Meta::Role to automatically generate the
parameterized role.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Role-Parameterized>
(or bug\-MooseX\-Role\-Parameterized@rt.cpan.org <mailto:bug-MooseX-Role-Parameterized@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH AUTHOR
.IX Header "AUTHOR"
Shawn M Moore <code@sartak.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Shawn M Moore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
