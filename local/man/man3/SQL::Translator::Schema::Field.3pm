.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Schema::Field 3pm"
.TH SQL::Translator::Schema::Field 3pm 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Schema::Field \- SQL::Translator field object
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&  use SQL::Translator::Schema::Field;
\&  my $field = SQL::Translator::Schema::Field\->new(
\&      name  => \*(Aqfoo\*(Aq,
\&      table => $table,
\&  );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`SQL::Translator::Schema::Field\*(C'\fR is the field object.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Object constructor.
.PP
.Vb 4
\&  my $field = SQL::Translator::Schema::Field\->new(
\&      name  => \*(Aqfoo\*(Aq,
\&      table => $table,
\&  );
.Ve
.SS comments
.IX Subsection "comments"
Get or set the comments on a field.  May be called several times to
set and it will accumulate the comments.  Called in an array context,
returns each comment individually; called in a scalar context, returns
all the comments joined on newlines.
.PP
.Vb 3
\&  $field\->comments(\*(Aqfoo\*(Aq);
\&  $field\->comments(\*(Aqbar\*(Aq);
\&  print join( \*(Aq, \*(Aq, $field\->comments ); # prints "foo, bar"
.Ve
.SS data_type
.IX Subsection "data_type"
Get or set the field's data type.
.PP
.Vb 1
\&  my $data_type = $field\->data_type(\*(Aqinteger\*(Aq);
.Ve
.SS sql_data_type
.IX Subsection "sql_data_type"
Constant from DBI package representing this data type. See "DBI Constants" in DBI
for more details.
.SS default_value
.IX Subsection "default_value"
Get or set the field's default value.  Will return undef if not defined
and could return the empty string (it's a valid default value), so don't
assume an error like other methods.
.PP
.Vb 1
\&  my $default = $field\->default_value(\*(Aqfoo\*(Aq);
.Ve
.SS foreign_key_reference
.IX Subsection "foreign_key_reference"
Get or set the field's foreign key reference;
.PP
.Vb 1
\&  my $constraint = $field\->foreign_key_reference( $constraint );
.Ve
.SS is_auto_increment
.IX Subsection "is_auto_increment"
Get or set the field's \f(CW\*(C`is_auto_increment\*(C'\fR attribute.
.PP
.Vb 1
\&  my $is_auto = $field\->is_auto_increment(1);
.Ve
.SS is_foreign_key
.IX Subsection "is_foreign_key"
Returns whether or not the field is a foreign key.
.PP
.Vb 1
\&  my $is_fk = $field\->is_foreign_key;
.Ve
.SS is_nullable
.IX Subsection "is_nullable"
Get or set whether the field can be null.  If not defined, then
returns "1" (assumes the field can be null).  The argument is evaluated
by Perl for True or False, so the following are equivalent:
.PP
.Vb 3
\&  $is_nullable = $field\->is_nullable(0);
\&  $is_nullable = $field\->is_nullable(\*(Aq\*(Aq);
\&  $is_nullable = $field\->is_nullable(\*(Aq0\*(Aq);
.Ve
.PP
While this is technically a field constraint, it's probably easier to
represent this as an attribute of the field.  In order keep things
consistent, any other constraint on the field (unique, primary, and
foreign keys; checks) are represented as table constraints.
.SS is_primary_key
.IX Subsection "is_primary_key"
Get or set the field's \f(CW\*(C`is_primary_key\*(C'\fR attribute.  Does not create
a table constraint (should it?).
.PP
.Vb 1
\&  my $is_pk = $field\->is_primary_key(1);
.Ve
.SS is_unique
.IX Subsection "is_unique"
Determine whether the field has a UNIQUE constraint or not.
.PP
.Vb 1
\&  my $is_unique = $field\->is_unique;
.Ve
.SS is_valid
.IX Subsection "is_valid"
Determine whether the field is valid or not.
.PP
.Vb 1
\&  my $ok = $field\->is_valid;
.Ve
.SS name
.IX Subsection "name"
Get or set the field's name.
.PP
.Vb 1
\& my $name = $field\->name(\*(Aqfoo\*(Aq);
.Ve
.PP
The field object will also stringify to its name.
.PP
.Vb 1
\& my $setter_name = "set_$field";
.Ve
.PP
Errors ("No field name") if you try to set a blank name.
.SS full_name
.IX Subsection "full_name"
Read only method to return the fields name with its table name pre-pended.
e.g. "person.foo".
.SS order
.IX Subsection "order"
Get or set the field's order.
.PP
.Vb 1
\&  my $order = $field\->order(3);
.Ve
.SS schema
.IX Subsection "schema"
Shortcut to get the fields schema ($field\->table\->schema) or undef if it
doesn't have one.
.PP
.Vb 1
\&  my $schema = $field\->schema;
.Ve
.SS size
.IX Subsection "size"
Get or set the field's size.  Accepts a string, array or arrayref of
numbers and returns a string.
.PP
.Vb 4
\&  $field\->size( 30 );
\&  $field\->size( [ 255 ] );
\&  $size = $field\->size( 10, 2 );
\&  print $size; # prints "10,2"
\&
\&  $size = $field\->size( \*(Aq10, 2\*(Aq );
\&  print $size; # prints "10,2"
.Ve
.SS table
.IX Subsection "table"
Get or set the field's table object. As the table object stringifies this can
also be used to get the table name.
.PP
.Vb 2
\&  my $table = $field\->table;
\&  print "Table name: $table";
.Ve
.SS parsed_field
.IX Subsection "parsed_field"
Returns the field exactly as the parser found it
.SS equals
.IX Subsection "equals"
Determines if this field is the same as another
.PP
.Vb 1
\&  my $isIdentical = $field1\->equals( $field2 );
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.
