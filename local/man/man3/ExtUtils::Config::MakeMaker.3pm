.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ExtUtils::Config::MakeMaker 3pm"
.TH ExtUtils::Config::MakeMaker 3pm 2024-08-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
ExtUtils::Config::MakeMaker \- A ExtUtils::Config compatible wrapper for ExtUtils::MakeMaker's configuration.
.SH VERSION
.IX Header "VERSION"
version 0.010
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& my $config = ExtUtils::Config::MakeMaker\->new($makemaker);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This object wraps ExtUtils::MakeMaker's idea of configuration in an ExtUtils::Config compatible interface. That means that if you pass a configuration argument to or in Makefile.PL (e.g. \f(CW\*(C`OPTIMIZE=\-O3\*(C'\fR) it will show up in the config object (e.g. \f(CW\*(C`$config\-\*(C'\fRget('optimize')>.
.SH METHODS
.IX Header "METHODS"
.SS new($makemaker)
.IX Subsection "new($makemaker)"
This creates a new \f(CW\*(C`ExtUtils::Config::MakeMaker\*(C'\fR object from a MakeMaker object.
.SS get($key)
.IX Subsection "get($key)"
Get the value of \f(CW$key\fR. If not overridden it will return the value in \f(CW%Config\fR.
.SS exists($key)
.IX Subsection "exists($key)"
Tests for the existence of \f(CW$key\fR.
.SS \fBvalues_set()\fP
.IX Subsection "values_set()"
Get a hashref of all overridden values.
.SS \fBall_config()\fP
.IX Subsection "all_config()"
Get a hashref of the complete configuration, including overrides.
.SS \fBserialize()\fP
.IX Subsection "serialize()"
This method serializes the object to some kind of string. This can be useful for various caching purposes.
.SS \fBmaterialize()\fP
.IX Subsection "materialize()"
This turns this object into an actual \f(CW\*(C`ExtUtils::Config\*(C'\fR object.
.SS but(%config)
.IX Subsection "but(%config)"
This returns a \f(CW\*(C`ExtUtils::Config\*(C'\fR object based on the current one but with the given entries overriden. If any value is \f(CW\*(C`undef\*(C'\fR it will revert to the official \f(CW%Config\fR value instead.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Ken Williams <kwilliams@cpan.org>
.IP \(bu 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
