.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Types::Util 3pm"
.TH MooseX::Types::Util 3pm 2017-02-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::Types::Util \- Common utility functions for the distribution
.SH VERSION
.IX Header "VERSION"
version 0.50
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This package the exportable functions that many parts in
MooseX::Types might need.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS filter_tags
.IX Subsection "filter_tags"
Takes a list and returns two references. The first is a hash reference
containing the tags as keys and the number of their appearance as values.
The second is an array reference containing all other elements.
.SS has_available_type_export
.IX Subsection "has_available_type_export"
.Vb 1
\&  TypeConstraint | Undef = has_available_type_export($package, $name);
.Ve
.PP
This function allows you to introspect if a given type export is available
\&\fIat this point in time\fR. This means that the \f(CW$package\fR must have imported
a type constraint with the name \f(CW$name\fR, and it must be still in its symbol
table.
.PP
Two arguments are expected:
.ie n .IP $package 4
.el .IP \f(CW$package\fR 4
.IX Item "$package"
The name of the package to introspect.
.ie n .IP $name 4
.el .IP \f(CW$name\fR 4
.IX Item "$name"
The name of the type export to introspect.
.PP
\&\fBNote\fR that the \f(CW$name\fR is the \fIexported\fR name of the type, not the declared
one. This means that if you use Sub::Exporters functionality to rename an import
like this:
.PP
.Vb 1
\&  use MyTypes Str => { \-as => \*(AqMyStr\*(Aq };
.Ve
.PP
you would have to introspect this type like this:
.PP
.Vb 1
\&  has_available_type_export $package, \*(AqMyStr\*(Aq;
.Ve
.PP
The return value will be either the type constraint that belongs to the export
or an undefined value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Types::Moose, Exporter
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Types>
(or bug\-MooseX\-Types@rt.cpan.org <mailto:bug-MooseX-Types@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH AUTHOR
.IX Header "AUTHOR"
Robert "phaylon" Sedlacek <rs@474.at>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2007 by Robert "phaylon" Sedlacek.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
