.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Format::MySQL 3pm"
.TH DateTime::Format::MySQL 3pm 2025-03-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DateTime::Format::MySQL \- Parse and format MySQL dates and times
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use DateTime::Format::MySQL;
\&
\&  my $dt = DateTime::Format::MySQL\->parse_datetime( \*(Aq2003\-01\-16 23:12:01\*(Aq );
\&
\&  # 2003\-01\-16 23:12:01
\&  DateTime::Format::MySQL\->format_datetime($dt);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module understands the formats used by MySQL for its DATE,
DATETIME, TIME, and TIMESTAMP data types.  It can be used to parse
these formats in order to create DateTime objects, and it can take a
DateTime object and produce a string representing it in the MySQL
format.
.SH METHODS
.IX Header "METHODS"
This class offers the following methods.  All of the parsing methods
set the returned DateTime object's time zone to the floating time
zone, because MySQL does not provide time zone information.
.IP \(bu 4
parse_datetime($string)
.IP \(bu 4
parse_date($string)
.IP \(bu 4
parse_timestamp($string)
.Sp
Given a value of the appropriate type, this method will return a new
\&\f(CW\*(C`DateTime\*(C'\fR object.  The time zone for this object will always be the
floating time zone, because by MySQL stores the local datetime, not
UTC.
.Sp
If given an improperly formatted string, this method may die.
.IP \(bu 4
format_date($datetime)
.IP \(bu 4
format_time($datetime)
.IP \(bu 4
format_datetime($datetime)
.Sp
Given a \f(CW\*(C`DateTime\*(C'\fR object, this methods returns an appropriately
formatted string.
.SH SUPPORT
.IX Header "SUPPORT"
Support for this module is provided via the datetime@perl.org email
list.  See http://lists.perl.org/ for more details.
.SH AUTHOR
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2014 David Rolsky.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.
.PP
The full text of the license can be found in the LICENSE file included
with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
datetime@perl.org mailing list
.PP
http://datetime.perl.org/
