.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Script::Help::prepare 3pm"
.TH DBIx::Class::Migration::Script::Help::prepare 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Script::Help::prepare \- Create migration files.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&  dbic\-migration prepare \e
\&    \-\-lib=lib \e
\&    \-\-schema_class=MyApp::Schema
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Creates a \f(CW\*(C`fixtures\*(C'\fR and \f(CW\*(C`migrations\*(C'\fR directory under "target_dir" (if they
don't already exist) and makes deployment files for the current schema.  If
deployment files exist, will fail unless you "overwrite_migrations".
.PP
The \f(CW\*(C`migrations\*(C'\fR directory reflects a directory structure as documented in
DBIx::Class::DeploymentHandler.
.PP
If this is the first version, we create directories and initial DLL, etc.  For
versions greater than 1, we will also generate diffs and copy any fixture
configs etc (as well as generating a fresh 'all_table.json' fixture config). For
safety reasons, we never overwrite any fixture configs (even if
\&\f(CW\*(C`overwrite_migrations\*(C'\fR is true.)
.SH OPTIONS
.IX Header "OPTIONS"
This command accepts the following options.  You may learn more about each
option by typing \f(CW\*(C`dbic\-migration help OPTION\*(C'\fR.  The following is a summary.
.SS includes
.IX Subsection "includes"
Aliases: I,lib,libs,include
.PP
Accepts String, Optional.
.PP
Adds the listed paths to \f(CW@INC\fR.  Handy during development when you want to use
a development schema class.
.SS "schema_class (S)"
.IX Subsection "schema_class (S)"
Accepts Str. Required.
.PP
This is the schema we use as the basis for creating, managing and running your
deployments.  This should be the full package namespace defining your subclass
of DBIx::Class::Schema.  For example \f(CW\*(C`MyApp::Schema\*(C'\fR.
.PP
If the "schema_class" cannot be loaded, a hard exception will be thrown.
.SS "force_overwrite (O)"
.IX Subsection "force_overwrite (O)"
Optional. Bool.
.PP
Usually if you've already prepared migration files for the current version as
specified in your "schema_class" we don't write out files even if you call
\&\f(CW\*(C`prepare\*(C'\fR.  If you want to force overwrite previously prepared files (and lose
all your customizations) you can do so with this option.
.PP
This option won't overwrite previously existing fixture configuration files.
.SS "target_dir (D)"
.IX Subsection "target_dir (D)"
Optional. String (Path to directory).
.PP
When using a \f(CW\*(C`sandbox_class\*(C'\fR for generating developer level database sandboxes,
you may wish to place the sandbox in a directory other than the default (which
is under the \f(CW\*(C`share\*(C'\fR directory off the project root).
.SS databases
.IX Subsection "databases"
Aliases: database
.PP
Value: Str or Array of Str (default: SQLite).  Optional.
.PP
By default we create migrations for SQLite.  You can use this option to change
that default, or to write our migrations for more than one database
.PP
You can prepare deployment for any database type that SQL::Translator understands.
.PP
.Vb 1
\&    dbic\-migration prepare \-\-database SQLite \-\-database MySQL \-\-PostgreSQL
.Ve
.PP
Please note if you choose to manually set this value, you won't automatically
get the default or inferred type.
.SS sandbox_class
.IX Subsection "sandbox_class"
Aliases: T, sb
.PP
Accepts: String (default: SqliteSandbox)
.PP
The class we use to create a developer level database sandbox.
.PP
You can change this to either 'PostgresqlSandbox' or 'MySQLSandbox', which will
create a sandbox using either DBIx::Class::Migration::MySQLSandbox or 
DBIx::Class::Migration::PostgresqlSandbox.
.SS user
.IX Subsection "user"
Aliases: U
.SS password
.IX Subsection "password"
Aliases: P
.SS dsn
.IX Subsection "dsn"
Connection information to an already created and running instance of a database.
If you don't specify this, we will assume you want a developer level sandbox (
See "sandbox").
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Script,
DBIx::Class::Migration::Features, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
