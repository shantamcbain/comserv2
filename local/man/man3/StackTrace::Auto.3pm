.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "StackTrace::Auto 3pm"
.TH StackTrace::Auto 3pm 2023-01-01 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
StackTrace::Auto \- a role for generating stack traces during instantiation
.SH VERSION
.IX Header "VERSION"
version 1.001
.SH SYNOPSIS
.IX Header "SYNOPSIS"
First, include StackTrace::Auto in a Moose or Mooclass...
.PP
.Vb 4
\&  package Some::Class;
\&  # NOTE: Moo can also be used here instead of Moose
\&  use Moose;
\&  with \*(AqStackTrace::Auto\*(Aq;
.Ve
.PP
\&...then create an object of that class...
.PP
.Vb 1
\&  my $obj = Some::Class\->new;
.Ve
.PP
\&...and now you have a stack trace for the object's creation.
.PP
.Vb 1
\&  print $obj\->stack_trace\->as_string;
.Ve
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This library should run on perls released even a long time ago.  It should work
on any version of perl released in the last five years.
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to lower
the minimum required perl.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.SS stack_trace
.IX Subsection "stack_trace"
This attribute will contain an object representing the stack at the point when
the error was generated and thrown.  It must be an object performing the
\&\f(CW\*(C`as_string\*(C'\fR method.
.SS stack_trace_class
.IX Subsection "stack_trace_class"
This attribute may be provided to use an alternate class for stack traces.  The
default is Devel::StackTrace.
.PP
In general, you will not need to think about this attribute.
.SS stack_trace_args
.IX Subsection "stack_trace_args"
This attribute is an arrayref of arguments to pass when building the stack
trace.  In general, you will not need to think about it.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Ricardo SIGNES <cpan@semiotic.systems>
.IP \(bu 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2022 by Ricardo SIGNES.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
