.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "HTTP::Entity::Parser 3pm"
.TH HTTP::Entity::Parser 3pm 2020-11-28 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
HTTP::Entity::Parser \- PSGI compliant HTTP Entity Parser
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTTP::Entity::Parser;
\&
\&    my $parser = HTTP::Entity::Parser\->new;
\&    $parser\->register(\*(Aqapplication/x\-www\-form\-urlencoded\*(Aq,\*(AqHTTP::Entity::Parser::UrlEncoded\*(Aq);
\&    $parser\->register(\*(Aqmultipart/form\-data\*(Aq,\*(AqHTTP::Entity::Parser::MultiPart\*(Aq);
\&    $parser\->register(\*(Aqapplication/json\*(Aq,\*(AqHTTP::Entity::Parser::JSON\*(Aq);
\&
\&    sub app {
\&        my $env = shift;
\&        my ( $params, $uploads) = $parser\->parse($env);
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
HTTP::Entity::Parser is a PSGI-compliant HTTP Entity parser. This module also is compatible
with HTTP::Body. Unlike HTTP::Body, HTTP::Entity::Parser reads HTTP entities from
PSGI's environment \f(CW\*(C`$env\->{\*(Aqpsgi.input\*(Aq}\*(C'\fR and parses it.
This module supports application/x\-www\-form\-urlencoded, multipart/form\-data and application/json.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "new( buffer_length => $length:Intger)" 4
.el .IP "new( buffer_length => \f(CW$length:Intger\fR)" 4
.IX Item "new( buffer_length => $length:Intger)"
Create the instance.
.RS 4
.IP buffer_length 4
.IX Item "buffer_length"
The buffer length that HTTP::Entity::Parser reads from psgi.input. 16384 by default.
.RE
.RS 4
.RE
.ie n .IP "register($content_type:String, $class:String, $opts:HashRef)" 4
.el .IP "register($content_type:String, \f(CW$class:String\fR, \f(CW$opts:HashRef\fR)" 4
.IX Item "register($content_type:String, $class:String, $opts:HashRef)"
Register parser class.
.Sp
.Vb 3
\&  $parser\->register(\*(Aqapplication/x\-www\-form\-urlencoded\*(Aq,\*(AqHTTP::Entity::Parser::UrlEncoded\*(Aq);
\&  $parser\->register(\*(Aqmultipart/form\-data\*(Aq,\*(AqHTTP::Entity::Parser::MultiPart\*(Aq);
\&  $parser\->register(\*(Aqapplication/json\*(Aq,\*(AqHTTP::Entity::Parser::JSON\*(Aq);
.Ve
.Sp
If the request content_type matches the registered type, HTTP::Entity::Parser uses the registered
parser class. If content_type does not match any registered type, HTTP::Entity::Parser::OctetStream is used.
.IP parse($env:HashRef) 4
.IX Item "parse($env:HashRef)"
parse HTTP entities from PSGI's env.
.Sp
.Vb 1
\&  my ( $params:ArrayRef, $uploads:ArrayRef) = $parser\->parse($env);
.Ve
.Sp
\&\f(CW$param\fR is a key-value pair list.
.Sp
.Vb 2
\&   my ( $params, $uploads) = $parser\->parse($env);
\&   my $body_parameters = Hash::MultiValue\->new(@$params);
.Ve
.Sp
\&\f(CW$uploads\fR is an ArrayRef of HashRef.
.Sp
.Vb 12
\&   my ( $params, $uploads) = $parser\->parse($env);
\&   warn Dumper($uploads\->[0]);
\&   {
\&       "name" => "upload", #field name
\&       "headers" => [
\&           "Content\-Type" => "application/octet\-stream",
\&           "Content\-Disposition" => "form\-data; name=\e"upload\e"; filename=\e"hello.pl\e""
\&       ],
\&       "size" => 78, #size of upload content
\&       "filename" => "hello.png", #original filename in the client
\&       "tempname" => "/tmp/XXXXX", # path to the temporary file where uploaded file is saved
\&   }
.Ve
.Sp
When used with Plack::Request::Upload:
.Sp
.Vb 7
\&   my ( $params, $uploads) = $parser\->parse($env);
\&    my $upload_hmv = Hash::MultiValue\->new();
\&    while ( my ($k,$v) = splice @$uploads, 0, 2 ) {
\&        my %copy = %$v;
\&        $copy{headers} = HTTP::Headers::Fast\->new(@{$v\->{headers}});
\&        $upload_hmv\->add($k, Plack::Request::Upload\->new(%copy));
\&    }
.Ve
.SH PARSERS
.IX Header "PARSERS"
.IP OctetStream 4
.IX Item "OctetStream"
Default parser, This parser does not parse entity, always return empty list.
.IP UrlEncoded 4
.IX Item "UrlEncoded"
For \f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR. It is used for HTTP POST without file upload
.IP MultiPart 4
.IX Item "MultiPart"
For \f(CW\*(C`multipart/form\-data\*(C'\fR. It is used for HTTP POST contains file upload.
.Sp
MultiPart parser use HTTP::MultiPartParser.
.IP JSON 4
.IX Item "JSON"
For \f(CW\*(C`application/json\*(C'\fR. This parser decodes JSON body automatically.
.Sp
It is convenient to use with Ajax forms.
.SH "WHAT'S DIFFERENT FROM HTTP::Body"
.IX Header "WHAT'S DIFFERENT FROM HTTP::Body"
HTTP::Entity::Parser accept PSGI's env and read body from it.
.PP
HTTP::Entity::Parser is able to choose parsers by the instance, HTTP::Body requires to modify global variables.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP HTTP::Body 4
.IX Item "HTTP::Body"
.PD 0
.IP HTTP::MultiPartParser 4
.IX Item "HTTP::MultiPartParser"
.IP Plack::Request 4
.IX Item "Plack::Request"
.IP WWW::Form::UrlEncoded 4
.IX Item "WWW::Form::UrlEncoded"
.PD
HTTP::Entity::Parser uses this for parse application/x\-www\-form\-urlencoded
.SH LICENSE
.IX Header "LICENSE"
Copyright (C) Masahiro Nagano.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH AUTHOR
.IX Header "AUTHOR"
Masahiro Nagano <kazeburo@gmail.com>
.PP
Tokuhiro Matsuno <tokuhirom@gmail.com>
.PP
This module is based on tokuhirom's code, see <https://github.com/plack/Plack/pull/434>
