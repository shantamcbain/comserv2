.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vector 3pm"
.TH Vector 3pm 2013-09-03 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Bit::Vector \- Efficient bit vector, set of integers and "big int" math library
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SS "OVERLOADED OPERATORS"
.IX Subsection "OVERLOADED OPERATORS"
See \fBBit::Vector::Overload\fR\|(3).
.SS "MORE STRING IMPORT/EXPORT"
.IX Subsection "MORE STRING IMPORT/EXPORT"
See \fBBit::Vector::String\fR\|(3).
.SS "CLASS METHODS"
.IX Subsection "CLASS METHODS"
.Vb 2
\&  Version
\&      $version = Bit::Vector\->Version();
\&
\&  Word_Bits
\&      $bits = Bit::Vector\->Word_Bits();  #  bits in a machine word
\&
\&  Long_Bits
\&      $bits = Bit::Vector\->Long_Bits();  #  bits in an unsigned long
\&
\&  new
\&      $vector = Bit::Vector\->new($bits);  #  bit vector constructor
\&
\&      @veclist = Bit::Vector\->new($bits,$count);
\&
\&  new_Hex
\&      $vector = Bit::Vector\->new_Hex($bits,$string);
\&
\&  new_Bin
\&      $vector = Bit::Vector\->new_Bin($bits,$string);
\&
\&  new_Dec
\&      $vector = Bit::Vector\->new_Dec($bits,$string);
\&
\&  new_Enum
\&      $vector = Bit::Vector\->new_Enum($bits,$string);
\&
\&  Concat_List
\&      $vector = Bit::Vector\->Concat_List(@vectors);
.Ve
.SS "OBJECT METHODS"
.IX Subsection "OBJECT METHODS"
.Vb 2
\&  new
\&      $vec2 = $vec1\->new($bits);  #  alternative call of constructor
\&
\&      @veclist = $vec\->new($bits,$count);
\&
\&  Shadow
\&      $vec2 = $vec1\->Shadow();  #  new vector, same size but empty
\&
\&  Clone
\&      $vec2 = $vec1\->Clone();  #  new vector, exact duplicate
\&
\&  Concat
\&      $vector = $vec1\->Concat($vec2);
\&
\&  Concat_List
\&      $vector = $vec1\->Concat_List($vec2,$vec3,...);
\&
\&  Size
\&      $bits = $vector\->Size();
\&
\&  Resize
\&      $vector\->Resize($bits);
\&      $vector\->Resize($vector\->Size()+5);
\&      $vector\->Resize($vector\->Size()\-5);
\&
\&  Copy
\&      $vec2\->Copy($vec1);
\&
\&  Empty
\&      $vector\->Empty();
\&
\&  Fill
\&      $vector\->Fill();
\&
\&  Flip
\&      $vector\->Flip();
\&
\&  Primes
\&      $vector\->Primes();  #  Sieve of Erathostenes
\&
\&  Reverse
\&      $vec2\->Reverse($vec1);
\&
\&  Interval_Empty
\&      $vector\->Interval_Empty($min,$max);
\&
\&  Interval_Fill
\&      $vector\->Interval_Fill($min,$max);
\&
\&  Interval_Flip
\&      $vector\->Interval_Flip($min,$max);
\&
\&  Interval_Reverse
\&      $vector\->Interval_Reverse($min,$max);
\&
\&  Interval_Scan_inc
\&      if (($min,$max) = $vector\->Interval_Scan_inc($start))
\&
\&  Interval_Scan_dec
\&      if (($min,$max) = $vector\->Interval_Scan_dec($start))
\&
\&  Interval_Copy
\&      $vec2\->Interval_Copy($vec1,$offset2,$offset1,$length);
\&
\&  Interval_Substitute
\&      $vec2\->Interval_Substitute($vec1,$off2,$len2,$off1,$len1);
\&
\&  is_empty
\&      if ($vector\->is_empty())
\&
\&  is_full
\&      if ($vector\->is_full())
\&
\&  equal
\&      if ($vec1\->equal($vec2))
\&
\&  Lexicompare (unsigned)
\&      if ($vec1\->Lexicompare($vec2) == 0)
\&      if ($vec1\->Lexicompare($vec2) != 0)
\&      if ($vec1\->Lexicompare($vec2) <  0)
\&      if ($vec1\->Lexicompare($vec2) <= 0)
\&      if ($vec1\->Lexicompare($vec2) >  0)
\&      if ($vec1\->Lexicompare($vec2) >= 0)
\&
\&  Compare (signed)
\&      if ($vec1\->Compare($vec2) == 0)
\&      if ($vec1\->Compare($vec2) != 0)
\&      if ($vec1\->Compare($vec2) <  0)
\&      if ($vec1\->Compare($vec2) <= 0)
\&      if ($vec1\->Compare($vec2) >  0)
\&      if ($vec1\->Compare($vec2) >= 0)
\&
\&  to_Hex
\&      $string = $vector\->to_Hex();
\&
\&  from_Hex
\&      $vector\->from_Hex($string);
\&
\&  to_Bin
\&      $string = $vector\->to_Bin();
\&
\&  from_Bin
\&      $vector\->from_Bin($string);
\&
\&  to_Dec
\&      $string = $vector\->to_Dec();
\&
\&  from_Dec
\&      $vector\->from_Dec($string);
\&
\&  to_Enum
\&      $string = $vector\->to_Enum();  #  e.g. "2,3,5\-7,11,13\-19"
\&
\&  from_Enum
\&      $vector\->from_Enum($string);
\&
\&  Bit_Off
\&      $vector\->Bit_Off($index);
\&
\&  Bit_On
\&      $vector\->Bit_On($index);
\&
\&  bit_flip
\&      $bit = $vector\->bit_flip($index);
\&
\&  bit_test
\&  contains
\&      $bit = $vector\->bit_test($index);
\&      $bit = $vector\->contains($index);
\&      if ($vector\->bit_test($index))
\&      if ($vector\->contains($index))
\&
\&  Bit_Copy
\&      $vector\->Bit_Copy($index,$bit);
\&
\&  LSB (least significant bit)
\&      $vector\->LSB($bit);
\&
\&  MSB (most significant bit)
\&      $vector\->MSB($bit);
\&
\&  lsb (least significant bit)
\&      $bit = $vector\->lsb();
\&
\&  msb (most significant bit)
\&      $bit = $vector\->msb();
\&
\&  rotate_left
\&      $carry = $vector\->rotate_left();
\&
\&  rotate_right
\&      $carry = $vector\->rotate_right();
\&
\&  shift_left
\&      $carry = $vector\->shift_left($carry);
\&
\&  shift_right
\&      $carry = $vector\->shift_right($carry);
\&
\&  Move_Left
\&      $vector\->Move_Left($bits);  #  shift left "$bits" positions
\&
\&  Move_Right
\&      $vector\->Move_Right($bits);  #  shift right "$bits" positions
\&
\&  Insert
\&      $vector\->Insert($offset,$bits);
\&
\&  Delete
\&      $vector\->Delete($offset,$bits);
\&
\&  increment
\&      $carry = $vector\->increment();
\&
\&  decrement
\&      $carry = $vector\->decrement();
\&
\&  inc
\&      $overflow = $vec2\->inc($vec1);
\&
\&  dec
\&      $overflow = $vec2\->dec($vec1);
\&
\&  add
\&      $carry = $vec3\->add($vec1,$vec2,$carry);
\&      ($carry,$overflow) = $vec3\->add($vec1,$vec2,$carry);
\&
\&  subtract
\&      $carry = $vec3\->subtract($vec1,$vec2,$carry);
\&      ($carry,$overflow) = $vec3\->subtract($vec1,$vec2,$carry);
\&
\&  Neg
\&  Negate
\&      $vec2\->Neg($vec1);
\&      $vec2\->Negate($vec1);
\&
\&  Abs
\&  Absolute
\&      $vec2\->Abs($vec1);
\&      $vec2\->Absolute($vec1);
\&
\&  Sign
\&      if ($vector\->Sign() == 0)
\&      if ($vector\->Sign() != 0)
\&      if ($vector\->Sign() <  0)
\&      if ($vector\->Sign() <= 0)
\&      if ($vector\->Sign() >  0)
\&      if ($vector\->Sign() >= 0)
\&
\&  Multiply
\&      $vec3\->Multiply($vec1,$vec2);
\&
\&  Divide
\&      $quot\->Divide($vec1,$vec2,$rest);
\&
\&  GCD (Greatest Common Divisor)
\&      $vecgcd\->GCD($veca,$vecb);
\&      $vecgcd\->GCD($vecx,$vecy,$veca,$vecb);
\&
\&  Power
\&      $vec3\->Power($vec1,$vec2);
\&
\&  Block_Store
\&      $vector\->Block_Store($buffer);
\&
\&  Block_Read
\&      $buffer = $vector\->Block_Read();
\&
\&  Word_Size
\&      $size = $vector\->Word_Size();  #  number of words in "$vector"
\&
\&  Word_Store
\&      $vector\->Word_Store($offset,$word);
\&
\&  Word_Read
\&      $word = $vector\->Word_Read($offset);
\&
\&  Word_List_Store
\&      $vector\->Word_List_Store(@words);
\&
\&  Word_List_Read
\&      @words = $vector\->Word_List_Read();
\&
\&  Word_Insert
\&      $vector\->Word_Insert($offset,$count);
\&
\&  Word_Delete
\&      $vector\->Word_Delete($offset,$count);
\&
\&  Chunk_Store
\&      $vector\->Chunk_Store($chunksize,$offset,$chunk);
\&
\&  Chunk_Read
\&      $chunk = $vector\->Chunk_Read($chunksize,$offset);
\&
\&  Chunk_List_Store
\&      $vector\->Chunk_List_Store($chunksize,@chunks);
\&
\&  Chunk_List_Read
\&      @chunks = $vector\->Chunk_List_Read($chunksize);
\&
\&  Index_List_Remove
\&      $vector\->Index_List_Remove(@indices);
\&
\&  Index_List_Store
\&      $vector\->Index_List_Store(@indices);
\&
\&  Index_List_Read
\&      @indices = $vector\->Index_List_Read();
\&
\&  Or
\&  Union
\&      $vec3\->Or($vec1,$vec2);
\&      $set3\->Union($set1,$set2);
\&
\&  And
\&  Intersection
\&      $vec3\->And($vec1,$vec2);
\&      $set3\->Intersection($set1,$set2);
\&
\&  AndNot
\&  Difference
\&      $vec3\->AndNot($vec1,$vec2);
\&      $set3\->Difference($set1,$set2);
\&
\&  Xor
\&  ExclusiveOr
\&      $vec3\->Xor($vec1,$vec2);
\&      $set3\->ExclusiveOr($set1,$set2);
\&
\&  Not
\&  Complement
\&      $vec2\->Not($vec1);
\&      $set2\->Complement($set1);
\&
\&  subset
\&      if ($set1\->subset($set2))  #  true if $set1 is subset of $set2
\&
\&  Norm
\&      $norm = $set\->Norm();
\&      $norm = $set\->Norm2();
\&      $norm = $set\->Norm3();
\&
\&  Min
\&      $min = $set\->Min();
\&
\&  Max
\&      $max = $set\->Max();
\&
\&  Multiplication
\&      $matrix3\->Multiplication($rows3,$cols3,
\&                      $matrix1,$rows1,$cols1,
\&                      $matrix2,$rows2,$cols2);
\&
\&  Product
\&      $matrix3\->Product($rows3,$cols3,
\&               $matrix1,$rows1,$cols1,
\&               $matrix2,$rows2,$cols2);
\&
\&  Closure
\&      $matrix\->Closure($rows,$cols);
\&
\&  Transpose
\&      $matrix2\->Transpose($rows2,$cols2,$matrix1,$rows1,$cols1);
.Ve
.SH "IMPORTANT NOTES"
.IX Header "IMPORTANT NOTES"
.IP \(bu 2
Method naming conventions
.Sp
Method names completely in lower case indicate a boolean return value.
.Sp
(Except for the bit vector constructor method "\f(CWnew()\fR", of course.)
.IP \(bu 2
Boolean values
.Sp
Boolean values in this module are always a numeric zero ("\f(CW0\fR") for
"false" and a numeric one ("\f(CW1\fR") for "true".
.IP \(bu 2
Negative numbers
.Sp
All numeric input parameters passed to any of the methods in this module
are regarded as being \fBUNSIGNED\fR (as opposed to the contents of the
bit vectors themselves, which are usually considered to be \fBSIGNED\fR).
.Sp
As a consequence, whenever you pass a negative number as an argument to
some method of this module, it will be treated as a (usually very large)
positive number due to its internal two's complement binary representation,
usually resulting in an "index out of range" error message and program
abortion.
.IP \(bu 2
Bit order
.Sp
Note that bit vectors are stored least order bit and least order word first
internally.
.Sp
I.e., bit #0 of any given bit vector corresponds to bit #0 of word #0 in the
array of machine words representing the bit vector.
.Sp
(Where word #0 comes first in memory, i.e., it is stored at the least memory
address in the allocated block of memory holding the given bit vector.)
.Sp
Note however that machine words can be stored least order byte first or last,
depending on your system's implementation.
.Sp
When you are exporting or importing a whole bit vector at once using the
methods "\f(CWBlock_Read()\fR" and "\f(CWBlock_Store()\fR" (the only time in this
module where this could make any difference), however, a conversion to and
from "least order byte first" order is automatically supplied.
.Sp
In other words, what "\f(CWBlock_Read()\fR" provides and what "\f(CWBlock_Store()\fR"
expects is always in "least order byte first" order, regardless of the order
in which words are stored internally on your machine.
.Sp
This is to make sure that what you export on one machine using "\f(CWBlock_Read()\fR"
can always be read in correctly with "\f(CWBlock_Store()\fR" on a different machine.
.Sp
Note further that whenever bit vectors are converted to and from (binary or
hexadecimal) strings, the \fBRIGHTMOST\fR bit is always the \fBLEAST SIGNIFICANT\fR
one, and the \fBLEFTMOST\fR bit is always the \fBMOST SIGNIFICANT\fR bit.
.Sp
This is because in our western culture, numbers are always represented in this
way (least significant to most significant digits go from right to left).
.Sp
Of course this requires an internal reversion of order, which the corresponding
conversion methods perform automatically (without any additional overhead, it's
just a matter of starting the internal loop at the bottom or the top end).
.IP \(bu 2
"Word" related methods
.Sp
Note that all methods whose names begin with "\f(CW\*(C`Word_\*(C'\fR" are
\&\fBMACHINE-DEPENDENT\fR!
.Sp
They depend on the size (number of bits) of an "unsigned int" (C type) on
your machine.
.Sp
Therefore, you should only use these methods if you are \fBABSOLUTELY CERTAIN\fR
that portability of your code is not an issue!
.Sp
Note that you can use arbitrarily large chunks (i.e., fragments of bit vectors)
of up to 32 bits \fBIN A PORTABLE WAY\fR using the methods whose names begin with
"\f(CW\*(C`Chunk_\*(C'\fR".
.IP \(bu 2
Chunk sizes
.Sp
Note that legal chunk sizes for all methods whose names begin with "\f(CW\*(C`Chunk_\*(C'\fR"
range from "\f(CW1\fR" to "\f(CW\*(C`Bit::Vector\->Long_Bits();\*(C'\fR" bits ("\f(CW0\fR" is \fBNOT\fR
allowed!).
.Sp
In order to make your programs portable, however, you shouldn't use chunk sizes
larger than 32 bits, since this is the minimum size of an "unsigned long"
(C type) on all systems, as prescribed by ANSI\ C.
.IP \(bu 2
Matching sizes
.Sp
In general, for methods involving several bit vectors at the same time, all
bit vector arguments must have identical sizes (number of bits), or a fatal
"size mismatch" error will occur.
.Sp
Exceptions from this rule are the methods "\f(CWConcat()\fR", "\f(CWConcat_List()\fR",
"\f(CWCopy()\fR", "\f(CWInterval_Copy()\fR" and "\f(CWInterval_Substitute()\fR", where no
conditions at all are imposed on the size of their bit vector arguments.
.Sp
In method "\f(CWMultiply()\fR", all three bit vector arguments must in principle
obey the rule of matching sizes, but the bit vector in which the result of
the multiplication is to be stored may be larger than the two bit vector
arguments containing the factors for the multiplication.
.Sp
In method "\f(CWPower()\fR", the bit vector for the result must be the same
size or greater than the base of the exponentiation term. The exponent
can be any size.
.IP \(bu 2
Index ranges
.Sp
All indices for any given bits must lie between "\f(CW0\fR" and
"\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "index out of range"
error will occur.
.IP \(bu 2
Object persistence
.Sp
Since version 6.5, "Bit::Vector" objects can be serialized
and de-serialized automatically with "Storable", out-of-the-box,
without requiring any further user action for this to work.
.Sp
This is also true for nested data structures (since version 6.8).
.Sp
See the \fBStorable\fR\|(3) documentation for more details.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SS "OVERLOADED OPERATORS"
.IX Subsection "OVERLOADED OPERATORS"
See \fBBit::Vector::Overload\fR\|(3).
.SS "MORE STRING IMPORT/EXPORT"
.IX Subsection "MORE STRING IMPORT/EXPORT"
See \fBBit::Vector::String\fR\|(3).
.SS "CLASS METHODS"
.IX Subsection "CLASS METHODS"
.IP \(bu 2
\&\f(CW\*(C`$version = Bit::Vector\->Version();\*(C'\fR
.Sp
Returns the current version number of this module.
.IP \(bu 2
\&\f(CW\*(C`$bits = Bit::Vector\->Word_Bits();\*(C'\fR
.Sp
Returns the number of bits of an "unsigned int" (C type)
on your machine.
.Sp
(An "unsigned int" is also called a "machine word",
hence the name of this method.)
.IP \(bu 2
\&\f(CW\*(C`$bits = Bit::Vector\->Long_Bits();\*(C'\fR
.Sp
Returns the number of bits of an "unsigned long" (C type)
on your machine.
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->new($bits);\*(C'\fR
.Sp
This is the bit vector constructor method.
.Sp
Call this method to create a new bit vector containing "\f(CW$bits\fR"
bits (with indices ranging from "\f(CW0\fR" to "\f(CW\*(C`$bits\-1\*(C'\fR").
.Sp
Note that \- in contrast to previous versions \- bit vectors
of length zero (i.e., with \f(CW\*(C`$bits = 0\*(C'\fR) are permitted now.
.Sp
The method returns a reference to the newly created bit vector.
.Sp
A new bit vector is always initialized so that all bits are cleared
(turned off).
.Sp
An exception will be raised if the method is unable to allocate the
necessary memory.
.Sp
Note that if you specify a negative number for "\f(CW$bits\fR" it will be
interpreted as a large positive number due to its internal two's
complement binary representation.
.Sp
In such a case, the bit vector constructor method will obediently attempt
to create a bit vector of that size, probably resulting in an exception,
as explained above.
.IP \(bu 2
\&\f(CW\*(C`@veclist = Bit::Vector\->new($bits,$count);\*(C'\fR
.Sp
You can also create more than one bit vector at a time if you specify the
optional second parameter "\f(CW$count\fR".
.Sp
The method returns a list of "\f(CW$count\fR" bit vectors which all have the
same number of bits "\f(CW$bits\fR" (and which are all initialized, i.e.,
all bits are cleared).
.Sp
If "\f(CW$count\fR" is zero, an empty list is returned.
.Sp
If "\f(CW$bits\fR" is zero, a list of null-sized bit vectors is returned.
.Sp
Note again that if you specify a negative number for "\f(CW$count\fR" it will
be interpreted as a large positive number due to its internal two's
complement binary representation.
.Sp
In such a case, the bit vector constructor method will obediently attempt
to create that many bit vectors, probably resulting in an exception ("out
of memory").
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->new_Hex($bits,$string);\*(C'\fR
.Sp
This method is an alternative constructor which allows you to create
a new bit vector object (with "\f(CW$bits\fR" bits) and to initialize it
all in one go.
.Sp
The method internally first calls the bit vector constructor method
"\f(CWnew()\fR" and then passes the given string to the method "\f(CWfrom_Hex()\fR".
.Sp
However, this method is more efficient than performing these two steps
separately: First because in this method, the memory area occupied by
the new bit vector is not initialized to zeros (which is pointless in
this case), and second because it saves you from the associated overhead
of one additional method invocation.
.Sp
An exception will be raised if the necessary memory cannot be allocated
(see the description of the method "\f(CWnew()\fR" immediately above for
possible causes) or if the given string cannot be converted successfully
(see the description of the method "\f(CWfrom_Hex()\fR" further below for
details).
.Sp
In the latter case, the memory occupied by the new bit vector is
released first (i.e., "free"d) before the exception is actually
raised.
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->new_Bin($bits,$string);\*(C'\fR
.Sp
This method is an alternative constructor which allows you to create
a new bit vector object (with "\f(CW$bits\fR" bits) and to initialize it
all in one go.
.Sp
The method internally first calls the bit vector constructor method
"\f(CWnew()\fR" and then passes the given string to the method "\f(CWfrom_Bin()\fR".
.Sp
However, this method is more efficient than performing these two steps
separately: First because in this method, the memory area occupied by
the new bit vector is not initialized to zeros (which is pointless in
this case), and second because it saves you from the associated overhead
of one additional method invocation.
.Sp
An exception will be raised if the necessary memory cannot be allocated
(see the description of the method "\f(CWnew()\fR" above for possible causes)
or if the given string cannot be converted successfully (see the
description of the method "\f(CWfrom_Bin()\fR" further below for details).
.Sp
In the latter case, the memory occupied by the new bit vector is
released first (i.e., "free"d) before the exception is actually
raised.
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->new_Dec($bits,$string);\*(C'\fR
.Sp
This method is an alternative constructor which allows you to create
a new bit vector object (with "\f(CW$bits\fR" bits) and to initialize it
all in one go.
.Sp
The method internally first calls the bit vector constructor method
"\f(CWnew()\fR" and then passes the given string to the method "\f(CWfrom_Dec()\fR".
.Sp
However, this method is more efficient than performing these two steps
separately: First because in this method, "\f(CWnew()\fR" does not initialize
the memory area occupied by the new bit vector with zeros (which is
pointless in this case, because "\f(CWfrom_Dec()\fR" will do it anyway),
and second because it saves you from the associated overhead of one
additional method invocation.
.Sp
An exception will be raised if the necessary memory cannot be allocated
(see the description of the method "\f(CWnew()\fR" above for possible causes)
or if the given string cannot be converted successfully (see the
description of the method "\f(CWfrom_Dec()\fR" further below for details).
.Sp
In the latter case, the memory occupied by the new bit vector is
released first (i.e., "free"d) before the exception is actually
raised.
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->new_Enum($bits,$string);\*(C'\fR
.Sp
This method is an alternative constructor which allows you to create
a new bit vector object (with "\f(CW$bits\fR" bits) and to initialize it
all in one go.
.Sp
The method internally first calls the bit vector constructor method
"\f(CWnew()\fR" and then passes the given string to the method "\f(CWfrom_Enum()\fR".
.Sp
However, this method is more efficient than performing these two steps
separately: First because in this method, "\f(CWnew()\fR" does not initialize
the memory area occupied by the new bit vector with zeros (which is
pointless in this case, because "\f(CWfrom_Enum()\fR" will do it anyway),
and second because it saves you from the associated overhead of one
additional method invocation.
.Sp
An exception will be raised if the necessary memory cannot be allocated
(see the description of the method "\f(CWnew()\fR" above for possible causes)
or if the given string cannot be converted successfully (see the
description of the method "\f(CWfrom_Enum()\fR" further below for details).
.Sp
In the latter case, the memory occupied by the new bit vector is
released first (i.e., "free"d) before the exception is actually
raised.
.IP \(bu 2
\&\f(CW\*(C`$vector = Bit::Vector\->Concat_List(@vectors);\*(C'\fR
.Sp
This method creates a new vector containing all bit vectors from the
argument list in concatenated form.
.Sp
The argument list may contain any number of arguments (including
zero); the only condition is that all arguments must be bit vectors.
.Sp
There is no condition concerning the length (in number of bits) of
these arguments.
.Sp
The vectors from the argument list are not changed in any way.
.Sp
If the argument list is empty or if all arguments have length zero,
the resulting bit vector will also have length zero.
.Sp
Note that the \fBRIGHTMOST\fR bit vector from the argument list will
become the \fBLEAST\fR significant part of the resulting bit vector,
and the \fBLEFTMOST\fR bit vector from the argument list will
become the \fBMOST\fR significant part of the resulting bit vector.
.SS "OBJECT METHODS"
.IX Subsection "OBJECT METHODS"
.IP \(bu 2
\&\f(CW\*(C`$vec2 = $vec1\->new($bits);\*(C'\fR
.Sp
\&\f(CW\*(C`@veclist = $vec\->new($bits);\*(C'\fR
.Sp
This is an alternative way of calling the bit vector constructor method.
.Sp
Vector "\f(CW$vec1\fR" (or "\f(CW$vec\fR") is not affected by this, it just serves
as an anchor for the method invocation mechanism.
.Sp
In fact \fBALL\fR class methods in this module can be called this way,
even though this is probably considered to be "politically incorrect"
by OO ("object-orientation") aficionados. ;\-)
.Sp
So even if you are too lazy to type "\f(CW\*(C`Bit::Vector\->\*(C'\fR" instead of
"\f(CW\*(C`$vec1\->\*(C'\fR" (and even though laziness is \- allegedly \- a programmer's
virtue \f(CW\*(C`:\-)\*(C'\fR), maybe it is better not to use this feature if you don't
want to get booed at. ;\-)
.IP \(bu 2
\&\f(CW\*(C`$vec2 = $vec1\->Shadow();\*(C'\fR
.Sp
Creates a \fBNEW\fR bit vector "\f(CW$vec2\fR" of the \fBSAME SIZE\fR as "\f(CW$vec1\fR"
but which is \fBEMPTY\fR.
.Sp
Just like a shadow that has the same shape as the object it
originates from, but is flat and has no volume, i.e., contains
nothing.
.IP \(bu 2
\&\f(CW\*(C`$vec2 = $vec1\->Clone();\*(C'\fR
.Sp
Creates a \fBNEW\fR bit vector "\f(CW$vec2\fR" of the \fBSAME SIZE\fR as "\f(CW$vec1\fR"
which is an \fBEXACT COPY\fR of "\f(CW$vec1\fR".
.IP \(bu 2
\&\f(CW\*(C`$vector = $vec1\->Concat($vec2);\*(C'\fR
.Sp
This method returns a new bit vector object which is the result of the
concatenation of the contents of "\f(CW$vec1\fR" and "\f(CW$vec2\fR".
.Sp
Note that the contents of "\f(CW$vec1\fR" become the \fBMOST\fR significant part
of the resulting bit vector, and "\f(CW$vec2\fR" the \fBLEAST\fR significant part.
.Sp
If both bit vector arguments have length zero, the resulting bit vector
will also have length zero.
.IP \(bu 2
\&\f(CW\*(C`$vector = $vec1\->Concat_List($vec2,$vec3,...);\*(C'\fR
.Sp
This is an alternative way of calling this (class) method as an
object method.
.Sp
The method returns a new bit vector object which is the result of
the concatenation of the contents of \f(CW\*(C`$vec1 . $vec2 . $vec3 . ...\*(C'\fR
.Sp
See the section "class methods" above for a detailed description of
this method.
.Sp
Note that the argument list may be empty and that all arguments
must be bit vectors if it isn't.
.IP \(bu 2
\&\f(CW\*(C`$bits = $vector\->Size();\*(C'\fR
.Sp
Returns the size (number of bits) the given vector was created with
(or "\f(CWResize()\fR"d to).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Resize($bits);\*(C'\fR
.Sp
Changes the size of the given vector to the specified number of bits.
.Sp
This method allows you to change the size of an existing bit vector,
preserving as many bits from the old vector as will fit into the
new one (i.e., all bits with indices smaller than the minimum of the
sizes of both vectors, old and new).
.Sp
If the number of machine words needed to store the new vector is smaller
than or equal to the number of words needed to store the old vector, the
memory allocated for the old vector is reused for the new one, and only
the relevant book-keeping information is adjusted accordingly.
.Sp
This means that even if the number of bits increases, new memory is not
necessarily being allocated (i.e., if the old and the new number of bits
fit into the same number of machine words).
.Sp
If the number of machine words needed to store the new vector is greater
than the number of words needed to store the old vector, new memory is
allocated for the new vector, the old vector is copied to the new one,
the remaining bits in the new vector are cleared (turned off) and the old
vector is deleted, i.e., the memory that was allocated for it is released.
.Sp
(An exception will be raised if the method is unable to allocate the
necessary memory for the new vector.)
.Sp
As a consequence, if you decrease the size of a given vector so that
it will use fewer machine words, and increase it again later so that it
will use more words than immediately before but still less than the
original vector, new memory will be allocated anyway because the
information about the size of the original vector is lost whenever
you resize it.
.Sp
Note also that if you specify a negative number for "\f(CW$bits\fR" it will
be interpreted as a large positive number due to its internal two's
complement binary representation.
.Sp
In such a case, "\fBResize()\fR" will obediently attempt to create a bit
vector of that size, probably resulting in an exception, as explained
above.
.Sp
Finally, note that \- in contrast to previous versions \- resizing a bit
vector to a size of zero bits (length zero) is now permitted.
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Copy($vec1);\*(C'\fR
.Sp
Copies the contents of bit vector "\f(CW$vec1\fR" to bit vector "\f(CW$vec2\fR".
.Sp
The previous contents of bit vector "\f(CW$vec2\fR" get overwritten, i.e.,
are lost.
.Sp
Both vectors must exist beforehand, i.e., this method does not \fBCREATE\fR
any new bit vector object.
.Sp
The two vectors may be of any size.
.Sp
If the source bit vector is larger than the target, this method will copy
as much of the least significant bits of the source vector as will fit into
the target vector, thereby discarding any extraneous most significant bits.
.Sp
BEWARE that this causes a brutal cutoff in the middle of your data, and it
will also leave you with an almost unpredictable sign if subsequently the
number in the target vector is going to be interpreted as a number! (You
have been warned!)
.Sp
If the target bit vector is larger than the source, this method fills up
the remaining most significant bits in the target bit vector with either
0's or 1's, depending on the sign (= the most significant bit) of the
source bit vector. This is also known as "sign extension".
.Sp
This makes it possible to copy numbers from a smaller bit vector into
a larger one while preserving the number's absolute value as well as
its sign (due to the two's complement binary representation of numbers).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Empty();\*(C'\fR
.Sp
Clears all bits in the given vector.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Fill();\*(C'\fR
.Sp
Sets all bits in the given vector.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Flip();\*(C'\fR
.Sp
Flips (i.e., complements) all bits in the given vector.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Primes();\*(C'\fR
.Sp
Clears the given bit vector and sets all bits whose
indices are prime numbers.
.Sp
This method uses the algorithm known as the "Sieve of
Erathostenes" internally.
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Reverse($vec1);\*(C'\fR
.Sp
This method copies the given vector "\f(CW$vec1\fR" to
the vector "\f(CW$vec2\fR", thereby reversing the order
of all bits.
.Sp
I.e., the least significant bit of "\f(CW$vec1\fR" becomes the
most significant bit of "\f(CW$vec2\fR", whereas the most
significant bit of "\f(CW$vec1\fR" becomes the least
significant bit of "\f(CW$vec2\fR", and so forth
for all bits in between.
.Sp
Note that in-place processing is also possible, i.e.,
"\f(CW$vec1\fR" and "\f(CW$vec2\fR" may be identical.
.Sp
(Internally, this is the same as
\&\f(CW\*(C`$vec1\->Interval_Reverse(0,$vec1\->Size()\-1);\*(C'\fR.)
.IP \(bu 2
\&\f(CW\*(C`$vector\->Interval_Empty($min,$max);\*(C'\fR
.Sp
Clears all bits in the interval \f(CW\*(C`[$min..$max]\*(C'\fR (including both limits)
in the given vector.
.Sp
"\f(CW$min\fR" and "\f(CW$max\fR" may have the same value; this is the same
as clearing a single bit with "\f(CWBit_Off()\fR" (but less efficient).
.Sp
Note that \f(CW\*(C`$vector\->Interval_Empty(0,$vector\->Size()\-1);\*(C'\fR
is the same as \f(CW\*(C`$vector\->Empty();\*(C'\fR (but less efficient).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Interval_Fill($min,$max);\*(C'\fR
.Sp
Sets all bits in the interval \f(CW\*(C`[$min..$max]\*(C'\fR (including both limits)
in the given vector.
.Sp
"\f(CW$min\fR" and "\f(CW$max\fR" may have the same value; this is the same
as setting a single bit with "\f(CWBit_On()\fR" (but less efficient).
.Sp
Note that \f(CW\*(C`$vector\->Interval_Fill(0,$vector\->Size()\-1);\*(C'\fR
is the same as \f(CW\*(C`$vector\->Fill();\*(C'\fR (but less efficient).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Interval_Flip($min,$max);\*(C'\fR
.Sp
Flips (i.e., complements) all bits in the interval \f(CW\*(C`[$min..$max]\*(C'\fR
(including both limits) in the given vector.
.Sp
"\f(CW$min\fR" and "\f(CW$max\fR" may have the same value; this is the same
as flipping a single bit with "\f(CWbit_flip()\fR" (but less efficient).
.Sp
Note that \f(CW\*(C`$vector\->Interval_Flip(0,$vector\->Size()\-1);\*(C'\fR
is the same as \f(CW\*(C`$vector\->Flip();\*(C'\fR and
\&\f(CW\*(C`$vector\->Complement($vector);\*(C'\fR
(but less efficient).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Interval_Reverse($min,$max);\*(C'\fR
.Sp
Reverses the order of all bits in the interval \f(CW\*(C`[$min..$max]\*(C'\fR
(including both limits) in the given vector.
.Sp
I.e., bits "\f(CW$min\fR" and "\f(CW$max\fR" swap places, and so forth
for all bits in between.
.Sp
"\f(CW$min\fR" and "\f(CW$max\fR" may have the same value; this has no
effect whatsoever, though.
.IP \(bu 2
\&\f(CW\*(C`if (($min,$max) = $vector\->Interval_Scan_inc($start))\*(C'\fR
.Sp
Returns the minimum and maximum indices of the next contiguous block
of set bits (i.e., bits in the "on" state).
.Sp
The search starts at index "\f(CW$start\fR" (i.e., \f(CW"$min" >= "$start"\fR)
and proceeds upwards (i.e., \f(CW"$max" >= "$min"\fR), thus repeatedly
increments the search pointer "\f(CW$start\fR" (internally).
.Sp
Note though that the contents of the variable (or scalar literal value)
"\f(CW$start\fR" is \fBNOT\fR altered. I.e., you have to set it to the desired
value yourself prior to each call to "\f(CWInterval_Scan_inc()\fR" (see also
the example given below).
.Sp
Actually, the bit vector is not searched bit by bit, but one machine
word at a time, in order to speed up execution (which means that this
method is quite efficient).
.Sp
An empty list is returned if no such block can be found.
.Sp
Note that a single set bit (surrounded by cleared bits) is a valid
block by this definition. In that case the return values for "\f(CW$min\fR"
and "\f(CW$max\fR" are the same.
.Sp
Typical use:
.Sp
.Vb 5
\&    $start = 0;
\&    while (($start < $vector\->Size()) &&
\&        (($min,$max) = $vector\->Interval_Scan_inc($start)))
\&    {
\&        $start = $max + 2;
\&
\&        # do something with $min and $max
\&    }
.Ve
.IP \(bu 2
\&\f(CW\*(C`if (($min,$max) = $vector\->Interval_Scan_dec($start))\*(C'\fR
.Sp
Returns the minimum and maximum indices of the next contiguous block
of set bits (i.e., bits in the "on" state).
.Sp
The search starts at index "\f(CW$start\fR" (i.e., \f(CW"$max" <= "$start"\fR)
and proceeds downwards (i.e., \f(CW"$min" <= "$max"\fR), thus repeatedly
decrements the search pointer "\f(CW$start\fR" (internally).
.Sp
Note though that the contents of the variable (or scalar literal value)
"\f(CW$start\fR" is \fBNOT\fR altered. I.e., you have to set it to the desired
value yourself prior to each call to "\f(CWInterval_Scan_dec()\fR" (see also
the example given below).
.Sp
Actually, the bit vector is not searched bit by bit, but one machine
word at a time, in order to speed up execution (which means that this
method is quite efficient).
.Sp
An empty list is returned if no such block can be found.
.Sp
Note that a single set bit (surrounded by cleared bits) is a valid
block by this definition. In that case the return values for "\f(CW$min\fR"
and "\f(CW$max\fR" are the same.
.Sp
Typical use:
.Sp
.Vb 5
\&    $start = $vector\->Size() \- 1;
\&    while (($start >= 0) &&
\&        (($min,$max) = $vector\->Interval_Scan_dec($start)))
\&    {
\&        $start = $min \- 2;
\&
\&        # do something with $min and $max
\&    }
.Ve
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Interval_Copy($vec1,$offset2,$offset1,$length);\*(C'\fR
.Sp
This method allows you to copy a stretch of contiguous bits (starting
at any position "\f(CW$offset1\fR" you choose, with a length of "\f(CW$length\fR"
bits) from a given "source" bit vector "\f(CW$vec1\fR" to another position
"\f(CW$offset2\fR" in a "target" bit vector "\f(CW$vec2\fR".
.Sp
Note that the two bit vectors "\f(CW$vec1\fR" and "\f(CW$vec2\fR" do \fBNOT\fR
need to have the same (matching) size!
.Sp
Consequently, any of the two terms "\f(CW\*(C`$offset1 + $length\*(C'\fR" and
"\f(CW\*(C`$offset2 + $length\*(C'\fR" (or both) may exceed the actual length
of its corresponding bit vector ("\f(CW\*(C`$vec1\->Size()\*(C'\fR" and
"\f(CW\*(C`$vec2\->Size()\*(C'\fR", respectively).
.Sp
In such a case, the "\f(CW$length\fR" parameter is automatically reduced
internally so that both terms above are bounded by the number of bits
of their corresponding bit vector.
.Sp
This may even result in a length of zero, in which case nothing is
copied at all.
.Sp
(Of course the value of the "\f(CW$length\fR" parameter, supplied by you
in the initial method call, may also be zero right from the start!)
.Sp
Note also that "\f(CW$offset1\fR" and "\f(CW$offset2\fR" must lie within the
range "\f(CW0\fR" and, respectively, "\f(CW\*(C`$vec1\->Size()\-1\*(C'\fR" or
"\f(CW\*(C`$vec2\->Size()\-1\*(C'\fR", or a fatal "offset out of range" error
will occur.
.Sp
Note further that "\f(CW$vec1\fR" and "\f(CW$vec2\fR" may be identical, i.e.,
you may copy a stretch of contiguous bits from one part of a given
bit vector to another part.
.Sp
The source and the target interval may even overlap, in which case
the copying is automatically performed in ascending or descending
order (depending on the direction of the copy \- downwards or upwards
in the bit vector, respectively) to handle this situation correctly,
i.e., so that no bits are being overwritten before they have been
copied themselves.
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Interval_Substitute($vec1,$off2,$len2,$off1,$len1);\*(C'\fR
.Sp
This method is (roughly) the same for bit vectors (i.e., arrays
of booleans) as what the "splice" function in Perl is for lists
(i.e., arrays of scalars).
.Sp
(See "splice" in perlfunc for more details about this function.)
.Sp
The method allows you to substitute a stretch of contiguous bits
(defined by a position (offset) "\f(CW$off1\fR" and a length of "\f(CW$len1\fR"
bits) from a given "source" bit vector "\f(CW$vec1\fR" for a different
stretch of contiguous bits (defined by a position (offset) "\f(CW$off2\fR"
and a length of "\f(CW$len2\fR" bits) in another, "target" bit vector
"\f(CW$vec2\fR".
.Sp
Note that the two bit vectors "\f(CW$vec1\fR" and "\f(CW$vec2\fR" do \fBNOT\fR
need to have the same (matching) size!
.Sp
Note further that "\f(CW$off1\fR" and "\f(CW$off2\fR" must lie within the
range "\f(CW0\fR" and, respectively, "\f(CW\*(C`$vec1\->Size()\*(C'\fR" or
"\f(CW\*(C`$vec2\->Size()\*(C'\fR", or a fatal "offset out of range" error
will occur.
.Sp
Alert readers will have noticed that these upper limits are \fBNOT\fR
"\f(CW\*(C`$vec1\->Size()\-1\*(C'\fR" and "\f(CW\*(C`$vec2\->Size()\-1\*(C'\fR", as they would
be for any other method in this module, but that these offsets may
actually point to one position \fBPAST THE END\fR of the corresponding
bit vector.
.Sp
This is necessary in order to make it possible to \fBAPPEND\fR a given
stretch of bits to the target bit vector instead of \fBREPLACING\fR
something in it.
.Sp
For reasons of symmetry and generality, the same applies to the offset
in the source bit vector, even though such an offset (one position past
the end of the bit vector) does not serve any practical purpose there
(but does not cause any harm either).
.Sp
(Actually this saves you from the need of testing for this special case,
in certain circumstances.)
.Sp
Note that whenever the term "\f(CW\*(C`$off1 + $len1\*(C'\fR" exceeds the size
"\f(CW\*(C`$vec1\->Size()\*(C'\fR" of bit vector "\f(CW$vec1\fR" (or if "\f(CW\*(C`$off2 + $len2\*(C'\fR"
exceeds "\f(CW\*(C`$vec2\->Size()\*(C'\fR"), the corresponding length ("\f(CW$len1\fR"
or "\f(CW$len2\fR", respectively) is automatically reduced internally
so that "\f(CW\*(C`$off1 + $len1 <= $vec1\->Size()\*(C'\fR" (and
"\f(CW\*(C`$off2 + $len2 <= $vec2\->Size()\*(C'\fR") holds.
.Sp
(Note that this does \fBNOT\fR alter the intended result, even though
this may seem counter-intuitive at first!)
.Sp
This may even result in a length ("\f(CW$len1\fR" or "\f(CW$len2\fR") of zero.
.Sp
A length of zero for the interval in the \fBSOURCE\fR bit vector
("\f(CW\*(C`$len1 == 0\*(C'\fR") means that the indicated stretch of bits in
the target bit vector (starting at position "\f(CW$off2\fR") is to
be replaced by \fBNOTHING\fR, i.e., is to be \fBDELETED\fR.
.Sp
A length of zero for the interval in the \fBTARGET\fR bit vector
("\f(CW$len2\fR == 0") means that \fBNOTHING\fR is replaced, and that the
stretch of bits from the source bit vector is simply \fBINSERTED\fR
into the target bit vector at the indicated position ("\f(CW$off2\fR").
.Sp
If both length parameters are zero, nothing is done at all.
.Sp
Note that in contrast to any other method in this module (especially
"\f(CWInterval_Copy()\fR", "\f(CWInsert()\fR" and "\f(CWDelete()\fR"), this method
\&\fBIMPLICITLY\fR and \fBAUTOMATICALLY\fR adapts the length of the resulting
bit vector as needed, as given by
.Sp
.Vb 2
\&        $size = $vec2\->Size();   #  before
\&        $size += $len1 \- $len2;  #  after
.Ve
.Sp
(The only other method in this module that changes the size of a bit
vector is the method "\f(CWResize()\fR".)
.Sp
In other words, replacing a given interval of bits in the target bit
vector with a longer or shorter stretch of bits from the source bit
vector, or simply inserting ("\f(CW\*(C`$len2 == 0\*(C'\fR") a stretch of bits into
or deleting ("\f(CW\*(C`$len1 == 0\*(C'\fR") an interval of bits from the target bit
vector will automatically increase or decrease, respectively, the size
of the target bit vector accordingly.
.Sp
For the sake of generality, this may even result in a bit vector with
a size of zero (containing no bits at all).
.Sp
This is also the reason why bit vectors of length zero are permitted
in this module in the first place, starting with version 5.0.
.Sp
Finally, note that "\f(CW$vec1\fR" and "\f(CW$vec2\fR" may be identical, i.e.,
in-place processing is possible.
.Sp
(If you think about that for a while or if you look at the code,
you will see that this is far from trivial!)
.IP \(bu 2
\&\f(CW\*(C`if ($vector\->is_empty())\*(C'\fR
.Sp
Tests whether the given bit vector is empty, i.e., whether \fBALL\fR of
its bits are cleared (in the "off" state).
.Sp
In "big integer" arithmetic, this is equivalent to testing whether
the number stored in the bit vector is zero ("\f(CW0\fR").
.Sp
Returns "true" ("\f(CW1\fR") if the bit vector is empty and "false" ("\f(CW0\fR")
otherwise.
.Sp
Note that this method also returns "true" ("\f(CW1\fR") if the given bit
vector has a length of zero, i.e., if it contains no bits at all.
.IP \(bu 2
\&\f(CW\*(C`if ($vector\->is_full())\*(C'\fR
.Sp
Tests whether the given bit vector is full, i.e., whether \fBALL\fR of
its bits are set (in the "on" state).
.Sp
In "big integer" arithmetic, this is equivalent to testing whether
the number stored in the bit vector is minus one ("\-1").
.Sp
Returns "true" ("\f(CW1\fR") if the bit vector is full and "false" ("\f(CW0\fR")
otherwise.
.Sp
If the given bit vector has a length of zero (i.e., if it contains
no bits at all), this method returns "false" ("\f(CW0\fR").
.IP \(bu 2
\&\f(CW\*(C`if ($vec1\->equal($vec2))\*(C'\fR
.Sp
Tests the two given bit vectors for equality.
.Sp
Returns "true" ("\f(CW1\fR") if the two bit vectors are exact
copies of one another and "false" ("\f(CW0\fR") otherwise.
.IP \(bu 2
\&\f(CW\*(C`$cmp = $vec1\->Lexicompare($vec2);\*(C'\fR
.Sp
Compares the two given bit vectors, which are
regarded as \fBUNSIGNED\fR numbers in binary representation.
.Sp
The method returns "\f(CW\-1\fR" if the first bit vector is smaller
than the second bit vector, "\f(CW0\fR" if the two bit vectors are
exact copies of one another and "\f(CW1\fR" if the first bit vector
is greater than the second bit vector.
.IP \(bu 2
\&\f(CW\*(C`$cmp = $vec1\->Compare($vec2);\*(C'\fR
.Sp
Compares the two given bit vectors, which are
regarded as \fBSIGNED\fR numbers in binary representation.
.Sp
The method returns "\f(CW\-1\fR" if the first bit vector is smaller
than the second bit vector, "\f(CW0\fR" if the two bit vectors are
exact copies of one another and "\f(CW1\fR" if the first bit vector
is greater than the second bit vector.
.IP \(bu 2
\&\f(CW\*(C`$string = $vector\->to_Hex();\*(C'\fR
.Sp
Returns a hexadecimal string representing the given bit vector.
.Sp
Note that this representation is quite compact, in that it only
needs at most twice the number of bytes needed to store the bit
vector itself, internally.
.Sp
Note also that since a hexadecimal digit is always worth four bits,
the length of the resulting string is always a multiple of four bits,
regardless of the true length (in bits) of the given bit vector.
.Sp
Finally, note that the \fBLEAST\fR significant hexadecimal digit is
located at the \fBRIGHT\fR end of the resulting string, and the \fBMOST\fR
significant digit at the \fBLEFT\fR end.
.IP \(bu 2
\&\f(CW\*(C`$vector\->from_Hex($string);\*(C'\fR
.Sp
Allows to read in the contents of a bit vector from a hexadecimal
string, such as returned by the method "\f(CWto_Hex()\fR" (see above).
.Sp
Remember that the least significant bits are always to the right of a
hexadecimal string, and the most significant bits to the left. Therefore,
the string is actually read in from right to left while the bit vector
is filled accordingly, 4 bits at a time, starting with the least significant
bits and going upward to the most significant bits.
.Sp
If the given string contains less hexadecimal digits than are needed
to completely fill the given bit vector, the remaining (most significant)
bits are all cleared.
.Sp
This also means that, even if the given string does not contain enough digits
to completely fill the given bit vector, the previous contents of the
bit vector are erased completely.
.Sp
If the given string is longer than it needs to fill the given bit vector,
the superfluous characters are simply ignored.
.Sp
(In fact they are ignored completely \- they are not even checked for
proper syntax. See also below for more about that.)
.Sp
This behaviour is intentional so that you may read in the string
representing one bit vector into another bit vector of different
size, i.e., as much of it as will fit.
.Sp
If during the process of reading the given string any character is
encountered which is not a hexadecimal digit, a fatal syntax error
ensues ("input string syntax error").
.IP \(bu 2
\&\f(CW\*(C`$string = $vector\->to_Bin();\*(C'\fR
.Sp
Returns a binary string representing the given bit vector.
.Sp
Example:
.Sp
.Vb 4
\&  $vector = Bit::Vector\->new(8);
\&  $vector\->Primes();
\&  $string = $vector\->to_Bin();
\&  print "\*(Aq$string\*(Aq\en";
.Ve
.Sp
This prints:
.Sp
.Vb 1
\&  \*(Aq10101100\*(Aq
.Ve
.Sp
(Bits #7, #5, #3 and #2 are set.)
.Sp
Note that the \fBLEAST\fR significant bit is located at the \fBRIGHT\fR
end of the resulting string, and the \fBMOST\fR significant bit at
the \fBLEFT\fR end.
.IP \(bu 2
\&\f(CW\*(C`$vector\->from_Bin($string);\*(C'\fR
.Sp
This method allows you to read in the contents of a bit vector from a
binary string, such as returned by the method "\f(CWto_Bin()\fR" (see above).
.Sp
Note that this method assumes that the \fBLEAST\fR significant bit is located at
the \fBRIGHT\fR end of the binary string, and the \fBMOST\fR significant bit at the
\&\fBLEFT\fR end. Therefore, the string is actually read in from right to left
while the bit vector is filled accordingly, one bit at a time, starting with
the least significant bit and going upward to the most significant bit.
.Sp
If the given string contains less binary digits ("\f(CW0\fR" and "\f(CW1\fR") than are
needed to completely fill the given bit vector, the remaining (most significant)
bits are all cleared.
.Sp
This also means that, even if the given string does not contain enough digits
to completely fill the given bit vector, the previous contents of the
bit vector are erased completely.
.Sp
If the given string is longer than it needs to fill the given bit vector,
the superfluous characters are simply ignored.
.Sp
(In fact they are ignored completely \- they are not even checked for
proper syntax. See also below for more about that.)
.Sp
This behaviour is intentional so that you may read in the string
representing one bit vector into another bit vector of different
size, i.e., as much of it as will fit.
.Sp
If during the process of reading the given string any character is
encountered which is not either "\f(CW0\fR" or "\f(CW1\fR", a fatal syntax error
ensues ("input string syntax error").
.IP \(bu 2
\&\f(CW\*(C`$string = $vector\->to_Dec();\*(C'\fR
.Sp
This method returns a string representing the contents of the given bit
vector converted to decimal (base \f(CW10\fR).
.Sp
Note that this method assumes the given bit vector to be \fBSIGNED\fR (and
to contain a number in two's complement binary representation).
.Sp
Consequently, whenever the most significant bit of the given bit vector
is set, the number stored in it is regarded as being \fBNEGATIVE\fR.
.Sp
The resulting string can be fed into "\f(CWfrom_Dec()\fR" (see below) in order
to copy the contents of this bit vector to another one (or to restore the
contents of this one). This is not advisable, though, since this would be
very inefficient (there are much more efficient methods for storing and
copying bit vectors in this module).
.Sp
Note that such conversion from binary to decimal is inherently slow
since the bit vector has to be repeatedly divided by \f(CW10\fR with remainder
until the quotient becomes \f(CW0\fR (each remainder in turn represents a single
decimal digit of the resulting string).
.Sp
This is also true for the implementation of this method in this module,
even though a considerable effort has been made to speed it up: instead of
repeatedly dividing by \f(CW10\fR, the bit vector is repeatedly divided by the
largest power of \f(CW10\fR that will fit into a machine word. The remainder is
then repeatedly divided by \f(CW10\fR using only machine word arithmetics, which
is much faster than dividing the whole bit vector ("divide and rule" principle).
.Sp
According to my own measurements, this resulted in an 8\-fold speed increase
over the straightforward approach.
.Sp
Still, conversion to decimal should be used only where absolutely necessary.
.Sp
Keep the resulting string stored in some variable if you need it again,
instead of converting the bit vector all over again.
.Sp
Beware that if you set the configuration for overloaded operators to
"output=decimal", this method will be called for every bit vector
enclosed in double quotes!
.IP \(bu 2
\&\f(CW\*(C`$vector\->from_Dec($string);\*(C'\fR
.Sp
This method allows you to convert a given decimal number, which may be
positive or negative, into two's complement binary representation, which
is then stored in the given bit vector.
.Sp
The decimal number should always be provided as a string, to avoid possible
truncation (due to the limited precision of integers in Perl) or formatting
(due to Perl's use of scientific notation for large numbers), which would
lead to errors.
.Sp
If the binary representation of the given decimal number is too big to fit
into the given bit vector (if the given bit vector does not contain enough
bits to hold it), a fatal "numeric overflow error" occurs.
.Sp
If the input string contains other characters than decimal digits (\f(CW\*(C`0\-9\*(C'\fR)
and an optional leading sign ("\f(CW\*(C`+\*(C'\fR" or "\f(CW\*(C`\-\*(C'\fR"), a fatal "input string
syntax error" occurs.
.Sp
Beware that large positive numbers which cause the most significant bit to
be set (e.g. "255" in a bit vector with 8 bits) will be printed as negative
numbers when converted back to decimal using the method "\fBto_Dec()\fR" (e.g.
"\-1", in our example), because numbers with the most significant bit set
are considered to be negative in two's complement binary representation.
.Sp
Note also that while it is possible to thusly enter negative numbers as
large positive numbers (e.g. "255" for "\-1" in a bit vector with 8 bits),
the contrary isn't, i.e., you cannot enter "\-255" for "+1", in our example.
A fatal "numeric overflow error" will occur if you try to do so.
.Sp
If possible program abortion is unwanted or intolerable, use
"\f(CW\*(C`eval\*(C'\fR", like this:
.Sp
.Vb 5
\&  eval { $vector\->from_Dec("1152921504606846976"); };
\&  if ($@)
\&  {
\&      # an error occurred
\&  }
.Ve
.Sp
There are four possible error messages:
.Sp
.Vb 1
\&  if ($@ =~ /item is not a string/)
\&
\&  if ($@ =~ /input string syntax error/)
\&
\&  if ($@ =~ /numeric overflow error/)
\&
\&  if ($@ =~ /unable to allocate memory/)
.Ve
.Sp
Note that the conversion from decimal to binary is costly in terms of
processing time, since a lot of multiplications have to be carried out
(in principle, each decimal digit must be multiplied with the binary
representation of the power of \f(CW10\fR corresponding to its position in
the decimal number, i.e., 1, 10, 100, 1000, 10000 and so on).
.Sp
This is not as time consuming as the opposite conversion, from binary
to decimal (where successive divisions have to be carried out, which
are even more expensive than multiplications), but still noticeable.
.Sp
Again (as in the case of "\f(CWto_Dec()\fR"), the implementation of this
method in this module uses the principle of "divide and rule" in order
to speed up the conversion, i.e., as many decimal digits as possible
are first accumulated (converted) in a machine word and only then
stored in the given bit vector.
.Sp
Even so, use this method only where absolutely necessary if speed is
an important consideration in your application.
.Sp
Beware that if you set the configuration for overloaded operators to
"input=decimal", this method will be called for every scalar operand
you use!
.IP \(bu 2
\&\f(CW\*(C`$string = $vector\->to_Enum();\*(C'\fR
.Sp
Converts the given bit vector or set into an enumeration of single
indices and ranges of indices (".newsrc" style), representing the
bits that are set ("\f(CW1\fR") in the bit vector.
.Sp
Example:
.Sp
.Vb 7
\&  $vector = Bit::Vector\->new(20);
\&  $vector\->Bit_On(2);
\&  $vector\->Bit_On(3);
\&  $vector\->Bit_On(11);
\&  $vector\->Interval_Fill(5,7);
\&  $vector\->Interval_Fill(13,19);
\&  print "\*(Aq", $vector\->to_Enum(), "\*(Aq\en";
.Ve
.Sp
which prints
.Sp
.Vb 1
\&  \*(Aq2,3,5\-7,11,13\-19\*(Aq
.Ve
.Sp
If the given bit vector is empty, the resulting string will
also be empty.
.Sp
Note, by the way, that the above example can also be written
a little handier, perhaps, as follows:
.Sp
.Vb 4
\&  Bit::Vector\->Configuration("out=enum");
\&  $vector = Bit::Vector\->new(20);
\&  $vector\->Index_List_Store(2,3,5,6,7,11,13,14,15,16,17,18,19);
\&  print "\*(Aq$vector\*(Aq\en";
.Ve
.IP \(bu 2
\&\f(CW\*(C`$vector\->from_Enum($string);\*(C'\fR
.Sp
This method first empties the given bit vector and then tries to
set the bits and ranges of bits specified in the given string.
.Sp
The string "\f(CW$string\fR" must only contain unsigned integers
or ranges of integers (two unsigned integers separated by a
dash "\-"), separated by commas (",").
.Sp
All other characters are disallowed (including white space!)
and will lead to a fatal "input string syntax error".
.Sp
In each range, the first integer (the lower limit of the range)
must always be less than or equal to the second integer (the
upper limit), or a fatal "minimum > maximum index" error occurs.
.Sp
All integers must lie in the permitted range for the given
bit vector, i.e., they must lie between "\f(CW0\fR" and
"\f(CW\*(C`$vector\->Size()\-1\*(C'\fR".
.Sp
If this condition is not met, a fatal "index out of range"
error occurs.
.Sp
If possible program abortion is unwanted or intolerable, use
"\f(CW\*(C`eval\*(C'\fR", like this:
.Sp
.Vb 5
\&  eval { $vector\->from_Enum("2,3,5\-7,11,13\-19"); };
\&  if ($@)
\&  {
\&      # an error occurred
\&  }
.Ve
.Sp
There are four possible error messages:
.Sp
.Vb 1
\&  if ($@ =~ /item is not a string/)
\&
\&  if ($@ =~ /input string syntax error/)
\&
\&  if ($@ =~ /index out of range/)
\&
\&  if ($@ =~ /minimum > maximum index/)
.Ve
.Sp
Note that the order of the indices and ranges is irrelevant,
i.e.,
.Sp
.Vb 1
\&  eval { $vector\->from_Enum("11,5\-7,3,13\-19,2"); };
.Ve
.Sp
results in the same vector as in the example above.
.Sp
Ranges and indices may also overlap.
.Sp
This is because each (single) index in the string is passed
to the method "\f(CWBit_On()\fR", internally, and each range to
the method "\f(CWInterval_Fill()\fR".
.Sp
This means that the resulting bit vector is just the union
of all the indices and ranges specified in the given string.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Bit_Off($index);\*(C'\fR
.Sp
Clears the bit with index "\f(CW$index\fR" in the given vector.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Bit_On($index);\*(C'\fR
.Sp
Sets the bit with index "\f(CW$index\fR" in the given vector.
.IP \(bu 2
\&\f(CW\*(C`$vector\->bit_flip($index)\*(C'\fR
.Sp
Flips (i.e., complements) the bit with index "\f(CW$index\fR"
in the given vector.
.Sp
Moreover, this method returns the \fBNEW\fR state of the
bit in question, i.e., it returns "\f(CW0\fR" if the bit is
cleared or "\f(CW1\fR" if the bit is set (\fBAFTER\fR flipping it).
.IP \(bu 2
\&\f(CW\*(C`if ($vector\->bit_test($index))\*(C'\fR
.Sp
\&\f(CW\*(C`if ($vector\->contains($index))\*(C'\fR
.Sp
Returns the current state of the bit with index "\f(CW$index\fR"
in the given vector, i.e., returns "\f(CW0\fR" if it is cleared
(in the "off" state) or "\f(CW1\fR" if it is set (in the "on" state).
.IP \(bu 2
\&\f(CW\*(C`$vector\->Bit_Copy($index,$bit);\*(C'\fR
.Sp
Sets the bit with index "\f(CW$index\fR" in the given vector either
to "\f(CW0\fR" or "\f(CW1\fR" depending on the boolean value "\f(CW$bit\fR".
.IP \(bu 2
\&\f(CW\*(C`$vector\->LSB($bit);\*(C'\fR
.Sp
Allows you to set the least significant bit in the given bit
vector to the value given by the boolean parameter "\f(CW$bit\fR".
.Sp
This is a (faster) shortcut for "\f(CW\*(C`$vector\->Bit_Copy(0,$bit);\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$vector\->MSB($bit);\*(C'\fR
.Sp
Allows you to set the most significant bit in the given bit
vector to the value given by the boolean parameter "\f(CW$bit\fR".
.Sp
This is a (faster) shortcut for
"\f(CW\*(C`$vector\->Bit_Copy($vector\->Size()\-1,$bit);\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$bit = $vector\->lsb();\*(C'\fR
.Sp
Returns the least significant bit of the given bit vector.
.Sp
This is a (faster) shortcut for "\f(CW\*(C`$bit = $vector\->bit_test(0);\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$bit = $vector\->msb();\*(C'\fR
.Sp
Returns the most significant bit of the given bit vector.
.Sp
This is a (faster) shortcut for
"\f(CW\*(C`$bit = $vector\->bit_test($vector\->Size()\-1);\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$carry_out = $vector\->rotate_left();\*(C'\fR
.Sp
.Vb 7
\&  carry             MSB           vector:           LSB
\&   out:
\&  +\-\-\-+            +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+
\&  |   |  <\-\-\-+\-\-\-  |   |   |   |    ...    |   |   |   |  <\-\-\-+
\&  +\-\-\-+      |     +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+      |
\&             |                                                |
\&             +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.Sp
The least significant bit (LSB) is the bit with index "\f(CW0\fR", the most
significant bit (MSB) is the bit with index "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$carry_out = $vector\->rotate_right();\*(C'\fR
.Sp
.Vb 7
\&          MSB           vector:           LSB            carry
\&                                                          out:
\&         +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+           +\-\-\-+
\&  +\-\-\->  |   |   |   |    ...    |   |   |   |  \-\-\-+\-\-\-> |   |
\&  |      +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+     |     +\-\-\-+
\&  |                                                |
\&  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.Sp
The least significant bit (LSB) is the bit with index "\f(CW0\fR", the most
significant bit (MSB) is the bit with index "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$carry_out = $vector\->shift_left($carry_in);\*(C'\fR
.Sp
.Vb 5
\&  carry         MSB           vector:           LSB         carry
\&   out:                                                      in:
\&  +\-\-\-+        +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+        +\-\-\-+
\&  |   |  <\-\-\-  |   |   |   |    ...    |   |   |   |  <\-\-\-  |   |
\&  +\-\-\-+        +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+        +\-\-\-+
.Ve
.Sp
The least significant bit (LSB) is the bit with index "\f(CW0\fR", the most
significant bit (MSB) is the bit with index "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$carry_out = $vector\->shift_right($carry_in);\*(C'\fR
.Sp
.Vb 5
\&  carry         MSB           vector:           LSB         carry
\&   in:                                                       out:
\&  +\-\-\-+        +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+        +\-\-\-+
\&  |   |  \-\-\->  |   |   |   |    ...    |   |   |   |  \-\-\->  |   |
\&  +\-\-\-+        +\-\-\-+\-\-\-+\-\-\-+\-\-\-     \-\-\-+\-\-\-+\-\-\-+\-\-\-+        +\-\-\-+
.Ve
.Sp
The least significant bit (LSB) is the bit with index "\f(CW0\fR", the most
significant bit (MSB) is the bit with index "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR".
.IP \(bu 2
\&\f(CW\*(C`$vector\->Move_Left($bits);\*(C'\fR
.Sp
Shifts the given bit vector left by "\f(CW$bits\fR" bits, i.e., inserts "\f(CW$bits\fR"
new bits at the lower end (least significant bit) of the bit vector, moving
all other bits up by "\f(CW$bits\fR" places, thereby losing the "\f(CW$bits\fR" most
significant bits.
.Sp
The inserted new bits are all cleared (set to the "off" state).
.Sp
This method does nothing if "\f(CW$bits\fR" is equal to zero.
.Sp
Beware that the whole bit vector is cleared \fBWITHOUT WARNING\fR if
"\f(CW$bits\fR" is greater than or equal to the size of the given bit vector!
.Sp
In fact this method is equivalent to
.Sp
.Vb 1
\&  for ( $i = 0; $i < $bits; $i++ ) { $vector\->shift_left(0); }
.Ve
.Sp
except that it is much more efficient (for "\f(CW$bits\fR" greater than or
equal to the number of bits in a machine word on your system) than
this straightforward approach.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Move_Right($bits);\*(C'\fR
.Sp
Shifts the given bit vector right by "\f(CW$bits\fR" bits, i.e., deletes the
"\f(CW$bits\fR" least significant bits of the bit vector, moving all other bits
down by "\f(CW$bits\fR" places, thereby creating "\f(CW$bits\fR" new bits at the upper
end (most significant bit) of the bit vector.
.Sp
These new bits are all cleared (set to the "off" state).
.Sp
This method does nothing if "\f(CW$bits\fR" is equal to zero.
.Sp
Beware that the whole bit vector is cleared \fBWITHOUT WARNING\fR if
"\f(CW$bits\fR" is greater than or equal to the size of the given bit vector!
.Sp
In fact this method is equivalent to
.Sp
.Vb 1
\&  for ( $i = 0; $i < $bits; $i++ ) { $vector\->shift_right(0); }
.Ve
.Sp
except that it is much more efficient (for "\f(CW$bits\fR" greater than or
equal to the number of bits in a machine word on your system) than
this straightforward approach.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Insert($offset,$bits);\*(C'\fR
.Sp
This method inserts "\f(CW$bits\fR" fresh new bits at position "\f(CW$offset\fR"
in the given bit vector.
.Sp
The "\f(CW$bits\fR" most significant bits are lost, and all bits starting
with bit number "\f(CW$offset\fR" up to and including bit number
"\f(CW\*(C`$vector\->Size()\-$bits\-1\*(C'\fR" are moved up by "\f(CW$bits\fR" places.
.Sp
The now vacant "\f(CW$bits\fR" bits starting at bit number "\f(CW$offset\fR"
(up to and including bit number "\f(CW\*(C`$offset+$bits\-1\*(C'\fR") are then set
to zero (cleared).
.Sp
Note that this method does \fBNOT\fR increase the size of the given bit
vector, i.e., the bit vector is \fBNOT\fR extended at its upper end to
"rescue" the "\f(CW$bits\fR" uppermost (most significant) bits \- instead,
these bits are lost forever.
.Sp
If you don't want this to happen, you have to increase the size of the
given bit vector \fBEXPLICITLY\fR and \fBBEFORE\fR you perform the "Insert"
operation, with a statement such as the following:
.Sp
.Vb 1
\&  $vector\->Resize($vector\->Size() + $bits);
.Ve
.Sp
Or use the method "\f(CWInterval_Substitute()\fR" instead of "\f(CWInsert()\fR",
which performs automatic growing and shrinking of its target bit vector.
.Sp
Note also that "\f(CW$offset\fR" must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.Sp
If the term "\f(CW\*(C`$offset + $bits\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR",
all the bits starting with bit number "\f(CW$offset\fR" up to bit number
"\f(CW\*(C`$vector\->Size()\-1\*(C'\fR" are simply cleared.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Delete($offset,$bits);\*(C'\fR
.Sp
This method deletes, i.e., removes the bits starting at position
"\f(CW$offset\fR" up to and including bit number "\f(CW\*(C`$offset+$bits\-1\*(C'\fR"
from the given bit vector.
.Sp
The remaining uppermost bits (starting at position "\f(CW\*(C`$offset+$bits\*(C'\fR"
up to and including bit number "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR") are moved
down by "\f(CW$bits\fR" places.
.Sp
The now vacant uppermost (most significant) "\f(CW$bits\fR" bits are then
set to zero (cleared).
.Sp
Note that this method does \fBNOT\fR decrease the size of the given bit
vector, i.e., the bit vector is \fBNOT\fR clipped at its upper end to
"get rid of" the vacant "\f(CW$bits\fR" uppermost bits.
.Sp
If you don't want this, i.e., if you want the bit vector to shrink
accordingly, you have to do so \fBEXPLICITLY\fR and \fBAFTER\fR the "Delete"
operation, with a couple of statements such as these:
.Sp
.Vb 3
\&  $size = $vector\->Size();
\&  if ($bits > $size) { $bits = $size; }
\&  $vector\->Resize($size \- $bits);
.Ve
.Sp
Or use the method "\f(CWInterval_Substitute()\fR" instead of "\f(CWDelete()\fR",
which performs automatic growing and shrinking of its target bit vector.
.Sp
Note also that "\f(CW$offset\fR" must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.Sp
If the term "\f(CW\*(C`$offset + $bits\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR",
all the bits starting with bit number "\f(CW$offset\fR" up to bit number
"\f(CW\*(C`$vector\->Size()\-1\*(C'\fR" are simply cleared.
.IP \(bu 2
\&\f(CW\*(C`$carry = $vector\->increment();\*(C'\fR
.Sp
This method increments the given bit vector.
.Sp
Note that this method regards bit vectors as being unsigned,
i.e., the largest possible positive number is directly
followed by the smallest possible (or greatest possible,
speaking in absolute terms) negative number:
.Sp
.Vb 2
\&  before:  2 ^ (b\-1) \- 1    (= "0111...1111")
\&  after:   2 ^ (b\-1)        (= "1000...0000")
.Ve
.Sp
where "\f(CW\*(C`b\*(C'\fR" is the number of bits of the given bit vector.
.Sp
The method returns "false" ("\f(CW0\fR") in all cases except when a
carry over occurs (in which case it returns "true", i.e., "\f(CW1\fR"),
which happens when the number "1111...1111" is incremented,
which gives "0000...0000" plus a carry over to the next higher
(binary) digit.
.Sp
This can be used for the terminating condition of a "while" loop,
for instance, in order to cycle through all possible values the
bit vector can assume.
.IP \(bu 2
\&\f(CW\*(C`$carry = $vector\->decrement();\*(C'\fR
.Sp
This method decrements the given bit vector.
.Sp
Note that this method regards bit vectors as being unsigned,
i.e., the smallest possible (or greatest possible, speaking
in absolute terms) negative number is directly followed by
the largest possible positive number:
.Sp
.Vb 2
\&  before:  2 ^ (b\-1)        (= "1000...0000")
\&  after:   2 ^ (b\-1) \- 1    (= "0111...1111")
.Ve
.Sp
where "\f(CW\*(C`b\*(C'\fR" is the number of bits of the given bit vector.
.Sp
The method returns "false" ("\f(CW0\fR") in all cases except when a
carry over occurs (in which case it returns "true", i.e., "\f(CW1\fR"),
which happens when the number "0000...0000" is decremented,
which gives "1111...1111" minus a carry over to the next higher
(binary) digit.
.Sp
This can be used for the terminating condition of a "while" loop,
for instance, in order to cycle through all possible values the
bit vector can assume.
.IP \(bu 2
\&\f(CW\*(C`$overflow = $vec2\->inc($vec1);\*(C'\fR
.Sp
This method copies the contents of bit vector "\f(CW$vec1\fR" to bit
vector "\f(CW$vec2\fR" and increments the copy (not the original).
.Sp
If by incrementing the number its sign becomes invalid, the return
value ("overflow" flag) will be true ("\f(CW1\fR"), or false ("\f(CW0\fR")
if not. (See the description of the method "\fBadd()\fR" below for
a more in-depth explanation of what "overflow" means).
.Sp
Note that in-place operation is also possible, i.e., "\f(CW$vec1\fR"
and "\f(CW$vec2\fR" may be identical.
.IP \(bu 2
\&\f(CW\*(C`$overflow = $vec2\->dec($vec1);\*(C'\fR
.Sp
This method copies the contents of bit vector "\f(CW$vec1\fR" to bit
vector "\f(CW$vec2\fR" and decrements the copy (not the original).
.Sp
If by decrementing the number its sign becomes invalid, the return
value ("overflow" flag) will be true ("\f(CW1\fR"), or false ("\f(CW0\fR")
if not. (See the description of the method "\fBsubtract()\fR" below
for a more in-depth explanation of what "overflow" means).
.Sp
Note that in-place operation is also possible, i.e., "\f(CW$vec1\fR"
and "\f(CW$vec2\fR" may be identical.
.IP \(bu 2
\&\f(CW\*(C`$carry = $vec3\->add($vec1,$vec2,$carry);\*(C'\fR
.Sp
\&\f(CW\*(C`($carry,$overflow) = $vec3\->add($vec1,$vec2,$carry);\*(C'\fR
.Sp
This method adds the two numbers contained in bit vector "\f(CW$vec1\fR"
and "\f(CW$vec2\fR" with carry "\f(CW$carry\fR" and stores the result in
bit vector "\f(CW$vec3\fR".
.Sp
I.e.,
            \f(CW$vec3\fR = \f(CW$vec1\fR + \f(CW$vec2\fR + \f(CW$carry\fR
.Sp
Note that the "\f(CW$carry\fR" parameter is a boolean value, i.e.,
only its least significant bit is taken into account. (Think of
it as though "\f(CW\*(C`$carry &= 1;\*(C'\fR" was always executed internally.)
.Sp
In scalar context, the method returns a boolean value which
indicates if a carry over (to the next higher bit position)
has occured. In list context, the method returns the carry
and the overflow flag (in this order).
.Sp
The overflow flag is true ("\f(CW1\fR") if the sign (i.e., the most
significant bit) of the result is wrong. This can happen when
adding two very large positive numbers or when adding two (by
their absolute value) very large negative numbers. See also
further below.
.Sp
The carry in\- and output is needed mainly for cascading, i.e.,
to add numbers that are fragmented into several pieces.
.Sp
Example:
.Sp
.Vb 1
\&  # initialize
\&
\&  for ( $i = 0; $i < $n; $i++ )
\&  {
\&      $a[$i] = Bit::Vector\->new($bits);
\&      $b[$i] = Bit::Vector\->new($bits);
\&      $c[$i] = Bit::Vector\->new($bits);
\&  }
\&
\&  # fill @a and @b
\&
\&  # $a[  0 ] is low order part,
\&  # $a[$n\-1] is high order part,
\&  # and same for @b
\&
\&  # add
\&
\&  $carry = 0;
\&  for ( $i = 0; $i < $n; $i++ )
\&  {
\&      $carry = $c[$i]\->add($a[$i],$b[$i],$carry);
\&  }
.Ve
.Sp
Note that it makes no difference to this method whether the numbers
in "\f(CW$vec1\fR" and "\f(CW$vec2\fR" are unsigned or signed (i.e., in two's
complement binary representation).
.Sp
Note however that the return value (carry flag) is not meaningful
when the numbers are \fBSIGNED\fR.
.Sp
Moreover, when the numbers are signed, a special type of error can
occur which is commonly called an "overflow error".
.Sp
An overflow error occurs when the sign of the result (its most
significant bit) is flipped (i.e., falsified) by a carry over
from the next-lower bit position ("MSB\-1").
.Sp
In fact matters are a bit more complicated than that: the overflow
flag is set to "true" whenever there is a carry over from bit
position MSB\-1 to the most significant bit (MSB) but no carry
over from the MSB to the output carry flag, or vice-versa, i.e.,
when there is no carry over from bit position MSB\-1 to the most
significant bit (MSB) but a carry over to the output carry flag.
.Sp
Thus the overflow flag is the result of an exclusive-or operation
between incoming and outgoing carry over at the most significant
bit position.
.IP \(bu 2
\&\f(CW\*(C`$carry = $vec3\->subtract($vec1,$vec2,$carry);\*(C'\fR
.Sp
\&\f(CW\*(C`($carry,$overflow) = $vec3\->subtract($vec1,$vec2,$carry);\*(C'\fR
.Sp
This method subtracts the two numbers contained in bit vector
"\f(CW$vec1\fR" and "\f(CW$vec2\fR" with carry "\f(CW$carry\fR" and stores the
result in bit vector "\f(CW$vec3\fR".
.Sp
I.e.,
            \f(CW$vec3\fR = \f(CW$vec1\fR \- \f(CW$vec2\fR \- \f(CW$carry\fR
.Sp
Note that the "\f(CW$carry\fR" parameter is a boolean value, i.e.,
only its least significant bit is taken into account. (Think of
it as though "\f(CW\*(C`$carry &= 1;\*(C'\fR" was always executed internally.)
.Sp
In scalar context, the method returns a boolean value which
indicates if a carry over (to the next higher bit position)
has occured. In list context, the method returns the carry
and the overflow flag (in this order).
.Sp
The overflow flag is true ("\f(CW1\fR") if the sign (i.e., the most
significant bit) of the result is wrong. This can happen when
subtracting a very large negative number from a very large
positive number or vice-versa. See also further below.
.Sp
The carry in\- and output is needed mainly for cascading, i.e.,
to subtract numbers that are fragmented into several pieces.
.Sp
Example:
.Sp
.Vb 1
\&  # initialize
\&
\&  for ( $i = 0; $i < $n; $i++ )
\&  {
\&      $a[$i] = Bit::Vector\->new($bits);
\&      $b[$i] = Bit::Vector\->new($bits);
\&      $c[$i] = Bit::Vector\->new($bits);
\&  }
\&
\&  # fill @a and @b
\&
\&  # $a[  0 ] is low order part,
\&  # $a[$n\-1] is high order part,
\&  # and same for @b
\&
\&  # subtract
\&
\&  $carry = 0;
\&  for ( $i = 0; $i < $n; $i++ )
\&  {
\&      $carry = $c[$i]\->subtract($a[$i],$b[$i],$carry);
\&  }
.Ve
.Sp
Note that it makes no difference to this method whether the numbers
in "\f(CW$vec1\fR" and "\f(CW$vec2\fR" are unsigned or signed (i.e., in two's
complement binary representation).
.Sp
Note however that the return value (carry flag) is not meaningful
when the numbers are \fBSIGNED\fR.
.Sp
Moreover, when the numbers are signed, a special type of error can
occur which is commonly called an "overflow error".
.Sp
An overflow error occurs when the sign of the result (its most
significant bit) is flipped (i.e., falsified) by a carry over
from the next-lower bit position ("MSB\-1").
.Sp
In fact matters are a bit more complicated than that: the overflow
flag is set to "true" whenever there is a carry over from bit
position MSB\-1 to the most significant bit (MSB) but no carry
over from the MSB to the output carry flag, or vice-versa, i.e.,
when there is no carry over from bit position MSB\-1 to the most
significant bit (MSB) but a carry over to the output carry flag.
.Sp
Thus the overflow flag is the result of an exclusive-or operation
between incoming and outgoing carry over at the most significant
bit position.
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Neg($vec1);\*(C'\fR
.Sp
\&\f(CW\*(C`$vec2\->Negate($vec1);\*(C'\fR
.Sp
This method calculates the two's complement of the number in bit
vector "\f(CW$vec1\fR" and stores the result in bit vector "\f(CW$vec2\fR".
.Sp
Calculating the two's complement of a given number in binary representation
consists of inverting all bits and incrementing the result by one.
.Sp
This is the same as changing the sign of the given number from "\f(CW\*(C`+\*(C'\fR" to
"\f(CW\*(C`\-\*(C'\fR" or vice-versa. In other words, applying this method twice on a given
number yields the original number again.
.Sp
Note that in-place processing is also possible, i.e., "\f(CW$vec1\fR" and
"\f(CW$vec2\fR" may be identical.
.Sp
Most importantly, beware that this method produces a counter-intuitive
result if the number contained in bit vector "\f(CW$vec1\fR" is \f(CW\*(C`2 ^ (n\-1)\*(C'\fR
(i.e., "1000...0000"), where "\f(CW\*(C`n\*(C'\fR" is the number of bits the given bit
vector contains: The negated value of this number is the number itself!
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Abs($vec1);\*(C'\fR
.Sp
\&\f(CW\*(C`$vec2\->Absolute($vec1);\*(C'\fR
.Sp
Depending on the sign (i.e., the most significant bit) of the number in
bit vector "\f(CW$vec1\fR", the contents of bit vector "\f(CW$vec1\fR" are copied
to bit vector "\f(CW$vec2\fR" either with the method "\f(CWCopy()\fR" (if the number
in bit vector "\f(CW$vec1\fR" is positive), or with "\f(CWNegate()\fR" (if the number
in bit vector "\f(CW$vec1\fR" is negative).
.Sp
In other words, this method calculates the absolute value of the number
in bit vector "\f(CW$vec1\fR" and stores the result in bit vector "\f(CW$vec2\fR".
.Sp
Note that in-place processing is also possible, i.e., "\f(CW$vec1\fR" and
"\f(CW$vec2\fR" may be identical.
.Sp
Most importantly, beware that this method produces a counter-intuitive
result if the number contained in bit vector "\f(CW$vec1\fR" is \f(CW\*(C`2 ^ (n\-1)\*(C'\fR
(i.e., "1000...0000"), where "\f(CW\*(C`n\*(C'\fR" is the number of bits the given bit
vector contains: The absolute value of this number is the number itself,
even though this number is still negative by definition (the most
significant bit is still set)!
.IP \(bu 2
\&\f(CW\*(C`$sign = $vector\->Sign();\*(C'\fR
.Sp
This method returns "\f(CW0\fR" if all bits in the given bit vector are cleared,
i.e., if the given bit vector contains the number "\f(CW0\fR", or if the given
bit vector has a length of zero (contains no bits at all).
.Sp
If not all bits are cleared, this method returns "\f(CW\-1\fR" if the most
significant bit is set (i.e., if the bit vector contains a negative
number), or "\f(CW1\fR" otherwise (i.e., if the bit vector contains a
positive number).
.IP \(bu 2
\&\f(CW\*(C`$vec3\->Multiply($vec1,$vec2);\*(C'\fR
.Sp
This method multiplies the two numbers contained in bit vector "\f(CW$vec1\fR"
and "\f(CW$vec2\fR" and stores the result in bit vector "\f(CW$vec3\fR".
.Sp
Note that this method regards its arguments as \fBSIGNED\fR.
.Sp
If you want to make sure that a large number can never be treated as being
negative by mistake, make your bit vectors at least one bit longer than the
largest number you wish to represent, right from the start, or proceed as
follows:
.Sp
.Vb 8
\&    $msb1 = $vec1\->msb();
\&    $msb2 = $vec2\->msb();
\&    $vec1\->Resize($vec1\->Size()+1);
\&    $vec2\->Resize($vec2\->Size()+1);
\&    $vec3\->Resize($vec3\->Size()+1);
\&    $vec1\->MSB($msb1);
\&    $vec2\->MSB($msb2);
\&    $vec3\->Multiply($vec1,$vec2);
.Ve
.Sp
Note also that all three bit vector arguments must in principle obey the
rule of matching sizes, but that the bit vector "\f(CW$vec3\fR" may be larger
than the two factors "\f(CW$vec1\fR" and "\f(CW$vec2\fR".
.Sp
In fact multiplying two binary numbers with "\f(CW\*(C`n\*(C'\fR" bits may yield a result
which is at most "\f(CW\*(C`2n\*(C'\fR" bits long.
.Sp
Therefore, it is usually a good idea to let bit vector "\f(CW$vec3\fR" have
twice the size of bit vector "\f(CW$vec1\fR" and "\f(CW$vec2\fR", unless you are
absolutely sure that the result will fit into a bit vector of the same
size as the two factors.
.Sp
If you are wrong, a fatal "numeric overflow error" will occur.
.Sp
Finally, note that in-place processing is possible, i.e., "\f(CW$vec3\fR"
may be identical with "\f(CW$vec1\fR" or "\f(CW$vec2\fR", or both.
.IP \(bu 2
\&\f(CW\*(C`$quot\->Divide($vec1,$vec2,$rest);\*(C'\fR
.Sp
This method divides the two numbers contained in bit vector "\f(CW$vec1\fR"
and "\f(CW$vec2\fR" and stores the quotient in bit vector "\f(CW$quot\fR" and
the remainder in bit vector "\f(CW$rest\fR".
.Sp
I.e.,
            \f(CW$quot\fR = \f(CW$vec1\fR / \f(CW$vec2\fR;  #  div
            \f(CW$rest\fR = \f(CW$vec1\fR % \f(CW$vec2\fR;  #  mod
.Sp
Therefore, "\f(CW$quot\fR" and "\f(CW$rest\fR" must be two \fBDISTINCT\fR bit vectors,
or a fatal "result vector(s) must be distinct" error will occur.
.Sp
Note also that a fatal "division by zero error" will occur if "\f(CW$vec2\fR"
is equal to zero.
.Sp
Note further that this method regards its arguments as \fBSIGNED\fR.
.Sp
If you want to make sure that a large number can never be treated as being
negative by mistake, make your bit vectors at least one bit longer than the
largest number you wish to represent, right from the start, or proceed as
follows:
.Sp
.Vb 9
\&    $msb1 = $vec1\->msb();
\&    $msb2 = $vec2\->msb();
\&    $vec1\->Resize($vec1\->Size()+1);
\&    $vec2\->Resize($vec2\->Size()+1);
\&    $quot\->Resize($quot\->Size()+1);
\&    $rest\->Resize($rest\->Size()+1);
\&    $vec1\->MSB($msb1);
\&    $vec2\->MSB($msb2);
\&    $quot\->Divide($vec1,$vec2,$rest);
.Ve
.Sp
Finally, note that in-place processing is possible, i.e., "\f(CW$quot\fR"
may be identical with "\f(CW$vec1\fR" or "\f(CW$vec2\fR" or both, and "\f(CW$rest\fR"
may also be identical with "\f(CW$vec1\fR" or "\f(CW$vec2\fR" or both, as long
as "\f(CW$quot\fR" and "\f(CW$rest\fR" are distinct. (!)
.IP \(bu 2
\&\f(CW\*(C`$vecgcd\->GCD($veca,$vecb);\*(C'\fR
.Sp
This method calculates the "Greatest Common Divisor" of the two numbers
contained in bit vector "\f(CW$veca\fR" and "\f(CW$vecb\fR" and stores the result
in bit vector "\f(CW$vecgcd\fR".
.Sp
The method uses Euklid's algorithm internally:
.Sp
.Vb 3
\&    int GCD(int a, int b)
\&    {
\&        int t;
\&
\&        while (b != 0)
\&        {
\&            t = a % b; /* = remainder of (a div b) */
\&            a = b;
\&            b = t;
\&        }
\&        return(a);
\&    }
.Ve
.Sp
Note that \f(CW\*(C`GCD(z,0) == GCD(0,z) == z\*(C'\fR.
.IP \(bu 2
\&\f(CW\*(C`$vecgcd\->GCD($vecx,$vecy,$veca,$vecb);\*(C'\fR
.Sp
This variant of the "GCD" method calculates the "Greatest Common Divisor"
of the two numbers contained in bit vector "\f(CW$veca\fR" and "\f(CW$vecb\fR" and
stores the result in bit vector "\f(CW$vecgcd\fR".
.Sp
Moreover, it determines the two factors which are necessary in order to
represent the greatest common divisor as a linear combination of its two
arguments, i.e., the two factors \f(CW"x"\fR and \f(CW"y"\fR so that
\&\f(CW\*(C`GCD(a,b) == x * a + y * b\*(C'\fR, and stores them in bit vector "\f(CW$vecx\fR"
and "\f(CW$vecy\fR", respectively.
.Sp
For example:
.Sp
.Vb 2
\&  a = 2322
\&  b =  654
\&
\&  GCD( 2322, 654 ) == 6
\&
\&  x =  20
\&  y = \-71
\&
\&  20 * 2322 \- 71 * 654 == 6
.Ve
.Sp
Please see http://www.cut\-the\-knot.org/blue/extension.shtml
for an explanation of how this extension of Euklid's algorithm works.
.IP \(bu 2
\&\f(CW\*(C`$vec3\->Power($vec1,$vec2);\*(C'\fR
.Sp
This method calculates the exponentiation of base "\f(CW$vec1\fR" elevated to
the "\f(CW$vec2\fR" power, i.e., "\f(CW\*(C`$vec1 ** $vec2\*(C'\fR", and stores the result
in bit vector "\f(CW$vec3\fR".
.Sp
The method uses an efficient divide-and-conquer algorithm:
.Sp
Suppose the exponent is (decimal) 13, for example. The binary
representation of this exponent is "1101".
.Sp
This means we want to calculate
.Sp
.Vb 3
\&  $vec1 * $vec1 * $vec1 * $vec1 * $vec1 * $vec1 * $vec1 * $vec1 *
\&  $vec1 * $vec1 * $vec1 * $vec1 *
\&  $vec1
.Ve
.Sp
That is, "\f(CW$vec1\fR" multiplied with itself 13 times. The grouping
into lines above is no coincidence. The first line comprises 8
factors, the second contains 4, and the last line just one. This
just happens to be the binary representation of 13. \f(CW\*(C`;\-)\*(C'\fR
.Sp
We then calculate a series of squares (of squares of squares...) of
the base, i.e.,
.Sp
.Vb 5
\&  $power[0] = $vec1;
\&  $power[1] = $vec1 * $vec1;
\&  $power[2] = $power[1] * $power[1];
\&  $power[3] = $power[2] * $power[2];
\&  etc.
.Ve
.Sp
To calculate the power of our example, we simply initialize our result
with 1 and consecutively multiply it with the items of the series of
powers we just calculated, if the corresponding bit of the binary
representation of the exponent is set:
.Sp
.Vb 6
\&  $result = 1;
\&  $result *= $power[0] if ($vec2 & 1);
\&  $result *= $power[1] if ($vec2 & 2);
\&  $result *= $power[2] if ($vec2 & 4);
\&  $result *= $power[3] if ($vec2 & 8);
\&  etc.
.Ve
.Sp
The bit vector "\f(CW$vec3\fR" must be of the same size as the base
"\f(CW$vec1\fR" or greater. "\f(CW$vec3\fR" and "\f(CW$vec1\fR" may be the same
vector (i.e., in-place calculation as in "\f(CW\*(C`$vec1 **= $vec2;\*(C'\fR" is
possible), but "\f(CW$vec3\fR" and "\f(CW$vec2\fR" must be distinct. Finally,
the exponent "\f(CW$vec2\fR" must be positive. A fatal error occurs if
any of these conditions is not met.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Block_Store($buffer);\*(C'\fR
.Sp
This method allows you to load the contents of a given bit vector in
one go.
.Sp
This is useful when you store the contents of a bit vector in a file,
for instance (using method "\f(CWBlock_Read()\fR"), and when you want to
restore the previously saved bit vector.
.Sp
For this, "\f(CW$buffer\fR" \fBMUST\fR be a string (\fBNO\fR automatic conversion
from numeric to string is provided here as would normally in Perl!)
containing the bit vector in "low order byte first" order.
.Sp
If the given string is shorter than what is needed to completely fill
the given bit vector, the remaining (most significant) bytes of the
bit vector are filled with zeros, i.e., the previous contents of the
bit vector are always erased completely.
.Sp
If the given string is longer than what is needed to completely fill
the given bit vector, the superfluous bytes are simply ignored.
.Sp
See "sysread" in perlfunc for how to read in the contents of "\f(CW$buffer\fR"
from a file prior to passing it to this method.
.IP \(bu 2
\&\f(CW\*(C`$buffer = $vector\->Block_Read();\*(C'\fR
.Sp
This method allows you to export the contents of a given bit vector in
one block.
.Sp
This is useful when you want to save the contents of a bit vector for
later, for instance in a file.
.Sp
The advantage of this method is that it allows you to do so in the
compactest possible format, in binary.
.Sp
The method returns a Perl string which contains an exact copy of the
contents of the given bit vector in "low order byte first" order.
.Sp
See "syswrite" in perlfunc for how to write the data from this string
to a file.
.IP \(bu 2
\&\f(CW\*(C`$size = $vector\->Word_Size();\*(C'\fR
.Sp
Each bit vector is internally organized as an array of machine words.
.Sp
The methods whose names begin with "Word_" allow you to access this
internal array of machine words.
.Sp
Note that because the size of a machine word may vary from system to
system, these methods are inherently \fBMACHINE-DEPENDENT\fR!
.Sp
Therefore, \fBDO NOT USE\fR these methods unless you are absolutely certain
that portability of your code is not an issue!
.Sp
You have been warned!
.Sp
To be machine-independent, use the methods whose names begin with "\f(CW\*(C`Chunk_\*(C'\fR"
instead, with chunk sizes no greater than 32 bits.
.Sp
The method "\f(CWWord_Size()\fR" returns the number of machine words that the
internal array of words of the given bit vector contains.
.Sp
This is similar in function to the term "\f(CWscalar(@array)\fR" for a Perl array.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Word_Store($offset,$word);\*(C'\fR
.Sp
This method allows you to store a given value "\f(CW$word\fR" at a given
position "\f(CW$offset\fR" in the internal array of words of the given
bit vector.
.Sp
Note that "\f(CW$offset\fR" must lie in the permitted range between "\f(CW0\fR"
and "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.Sp
This method is similar in function to the expression
"\f(CW\*(C`$array[$offset] = $word;\*(C'\fR" for a Perl array.
.IP \(bu 2
\&\f(CW\*(C`$word = $vector\->Word_Read($offset);\*(C'\fR
.Sp
This method allows you to access the value of a given machine word
at position "\f(CW$offset\fR" in the internal array of words of the given
bit vector.
.Sp
Note that "\f(CW$offset\fR" must lie in the permitted range between "\f(CW0\fR"
and "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.Sp
This method is similar in function to the expression
"\f(CW\*(C`$word = $array[$offset];\*(C'\fR" for a Perl array.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Word_List_Store(@words);\*(C'\fR
.Sp
This method allows you to store a list of values "\f(CW@words\fR" in the
internal array of machine words of the given bit vector.
.Sp
Thereby the \fBLEFTMOST\fR value in the list ("\f(CW$words[0]\fR") is stored
in the \fBLEAST\fR significant word of the internal array of words (the
one with offset "\f(CW0\fR"), the next value from the list ("\f(CW$words[1]\fR")
is stored in the word with offset "\f(CW1\fR", and so on, as intuitively
expected.
.Sp
If the list "\f(CW@words\fR" contains fewer elements than the internal
array of words of the given bit vector contains machine words,
the remaining (most significant) words are filled with zeros.
.Sp
If the list "\f(CW@words\fR" contains more elements than the internal
array of words of the given bit vector contains machine words,
the superfluous values are simply ignored.
.Sp
This method is comparable in function to the expression
"\f(CW\*(C`@array = @words;\*(C'\fR" for a Perl array.
.IP \(bu 2
\&\f(CW\*(C`@words = $vector\->Word_List_Read();\*(C'\fR
.Sp
This method allows you to retrieve the internal array of machine
words of the given bit vector all at once.
.Sp
Thereby the \fBLEFTMOST\fR value in the returned list ("\f(CW$words[0]\fR")
is the \fBLEAST\fR significant word from the given bit vector, and the
\&\fBRIGHTMOST\fR value in the returned list ("\f(CW$words[$#words]\fR") is
the \fBMOST\fR significant word of the given bit vector.
.Sp
This method is similar in function to the expression
"\f(CW\*(C`@words = @array;\*(C'\fR" for a Perl array.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Word_Insert($offset,$count);\*(C'\fR
.Sp
This method inserts "\f(CW$count\fR" empty new machine words at position
"\f(CW$offset\fR" in the internal array of words of the given bit vector.
.Sp
The "\f(CW$count\fR" most significant words are lost, and all words starting
with word number "\f(CW$offset\fR" up to and including word number
"\f(CW\*(C`$vector\->Word_Size()\-$count\-1\*(C'\fR" are moved up by "\f(CW$count\fR" places.
.Sp
The now vacant "\f(CW$count\fR" words starting at word number "\f(CW$offset\fR"
(up to and including word number "\f(CW\*(C`$offset+$count\-1\*(C'\fR") are then set
to zero (cleared).
.Sp
Note that this method does \fBNOT\fR increase the size of the given bit
vector, i.e., the bit vector is \fBNOT\fR extended at its upper end to
"rescue" the "\f(CW$count\fR" uppermost (most significant) words \- instead,
these words are lost forever.
.Sp
If you don't want this to happen, you have to increase the size of the
given bit vector \fBEXPLICITLY\fR and \fBBEFORE\fR you perform the "Insert"
operation, with a statement such as the following:
.Sp
.Vb 1
\&  $vector\->Resize($vector\->Size() + $count * Bit::Vector\->Word_Bits());
.Ve
.Sp
Note also that "\f(CW$offset\fR" must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR", or a fatal "offset out
of range" error will occur.
.Sp
If the term "\f(CW\*(C`$offset + $count\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR",
all the words starting with word number "\f(CW$offset\fR" up to word number
"\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR" are simply cleared.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Word_Delete($offset,$count);\*(C'\fR
.Sp
This method deletes, i.e., removes the words starting at position
"\f(CW$offset\fR" up to and including word number "\f(CW\*(C`$offset+$count\-1\*(C'\fR"
from the internal array of machine words of the given bit vector.
.Sp
The remaining uppermost words (starting at position "\f(CW\*(C`$offset+$count\*(C'\fR"
up to and including word number "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR") are
moved down by "\f(CW$count\fR" places.
.Sp
The now vacant uppermost (most significant) "\f(CW$count\fR" words are then
set to zero (cleared).
.Sp
Note that this method does \fBNOT\fR decrease the size of the given bit
vector, i.e., the bit vector is \fBNOT\fR clipped at its upper end to
"get rid of" the vacant "\f(CW$count\fR" uppermost words.
.Sp
If you don't want this, i.e., if you want the bit vector to shrink
accordingly, you have to do so \fBEXPLICITLY\fR and \fBAFTER\fR the "Delete"
operation, with a couple of statements such as these:
.Sp
.Vb 4
\&  $bits = $vector\->Size();
\&  $count *= Bit::Vector\->Word_Bits();
\&  if ($count > $bits) { $count = $bits; }
\&  $vector\->Resize($bits \- $count);
.Ve
.Sp
Note also that "\f(CW$offset\fR" must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR", or a fatal "offset out
of range" error will occur.
.Sp
If the term "\f(CW\*(C`$offset + $count\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR",
all the words starting with word number "\f(CW$offset\fR" up to word number
"\f(CW\*(C`$vector\->Word_Size()\-1\*(C'\fR" are simply cleared.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Chunk_Store($chunksize,$offset,$chunk);\*(C'\fR
.Sp
This method allows you to set more than one bit at a time with
different values.
.Sp
You can access chunks (i.e., ranges of contiguous bits) between
one and at most "\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR" bits wide.
.Sp
In order to be portable, though, you should never use chunk sizes
larger than 32 bits.
.Sp
If the given "\f(CW$chunksize\fR" does not lie between "\f(CW1\fR" and
"\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR", a fatal "chunk size out of range"
error will occur.
.Sp
The method copies the "\f(CW$chunksize\fR" least significant bits
from the value "\f(CW$chunk\fR" to the given bit vector, starting at
bit position "\f(CW$offset\fR" and proceeding upwards until bit number
"\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR".
.Sp
(I.e., bit number "\f(CW0\fR" of "\f(CW$chunk\fR" becomes bit number "\f(CW$offset\fR"
in the given bit vector, and bit number "\f(CW\*(C`$chunksize\-1\*(C'\fR" becomes
bit number "\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR".)
.Sp
If the term "\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR",
the corresponding superfluous (most significant) bits from "\f(CW$chunk\fR"
are simply ignored.
.Sp
Note that "\f(CW$offset\fR" itself must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.Sp
This method (as well as the other "\f(CW\*(C`Chunk_\*(C'\fR" methods) is useful, for
example, when you are reading in data in chunks of, say, 8 bits, which
you need to access later, say, using 16 bits at a time (like audio CD
wave files, for instance).
.IP \(bu 2
\&\f(CW\*(C`$chunk = $vector\->Chunk_Read($chunksize,$offset);\*(C'\fR
.Sp
This method allows you to read the values of more than one bit at
a time.
.Sp
You can read chunks (i.e., ranges of contiguous bits) between
one and at most "\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR" bits wide.
.Sp
In order to be portable, though, you should never use chunk sizes
larger than 32 bits.
.Sp
If the given "\f(CW$chunksize\fR" does not lie between "\f(CW1\fR" and
"\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR", a fatal "chunk size out of range"
error will occur.
.Sp
The method returns the "\f(CW$chunksize\fR" bits from the given bit vector
starting at bit position "\f(CW$offset\fR" and proceeding upwards until
bit number "\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR".
.Sp
(I.e., bit number "\f(CW$offset\fR" of the given bit vector becomes bit number
"\f(CW0\fR" of the returned value, and bit number "\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR"
becomes bit number "\f(CW\*(C`$chunksize\-1\*(C'\fR".)
.Sp
If the term "\f(CW\*(C`$offset+$chunksize\-1\*(C'\fR" exceeds "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR",
the non-existent bits are simply not returned.
.Sp
Note that "\f(CW$offset\fR" itself must lie in the permitted range between
"\f(CW0\fR" and "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "offset out of range"
error will occur.
.IP \(bu 2
\&\f(CW\*(C`$vector\->Chunk_List_Store($chunksize,@chunks);\*(C'\fR
.Sp
This method allows you to fill the given bit vector with a list of
data packets ("chunks") of any size ("\f(CW$chunksize\fR") you like
(within certain limits).
.Sp
In fact the given "\f(CW$chunksize\fR" must lie in the range between "\f(CW1\fR"
and "\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR", or a fatal "chunk size out of
range" error will occur.
.Sp
In order to be portable, though, you should never use chunk sizes
larger than 32 bits.
.Sp
The given bit vector is thereby filled in ascending order: The first
chunk from the list (i.e., "\f(CW$chunks[0]\fR") fills the "\f(CW$chunksize\fR"
least significant bits, the next chunk from the list ("\f(CW$chunks[1]\fR")
fills the bits number "\f(CW$chunksize\fR" to number "\f(CW\*(C`2*$chunksize\-1\*(C'\fR",
the third chunk ("\f(CW$chunks[2]\fR") fills the bits number "\f(CW\*(C`2*$chunksize\*(C'\fR",
to number "\f(CW\*(C`3*$chunksize\-1\*(C'\fR", and so on.
.Sp
If there a less chunks in the list than are needed to fill the entire
bit vector, the remaining (most significant) bits are cleared, i.e.,
the previous contents of the given bit vector are always erased completely.
.Sp
If there are more chunks in the list than are needed to fill the entire
bit vector, and/or if a chunk extends beyond "\f(CW\*(C`$vector\->Size()\-1\*(C'\fR"
(which happens whenever "\f(CW\*(C`$vector\->Size()\*(C'\fR" is not a multiple of
"\f(CW$chunksize\fR"), the superfluous chunks and/or bits are simply ignored.
.Sp
The method is useful, for example (and among many other applications),
for the conversion of packet sizes in a data stream.
.Sp
This method can also be used to store an octal string in a given
bit vector:
.Sp
.Vb 1
\&  $vector\->Chunk_List_Store(3, split(//, reverse $string));
.Ve
.Sp
Note however that unlike the conversion methods "\f(CWfrom_Hex()\fR",
"\f(CWfrom_Bin()\fR", "\f(CWfrom_Dec()\fR" and "\f(CWfrom_Enum()\fR",
this statement does not include any syntax checking, i.e.,
it may fail silently, without warning.
.Sp
To perform syntax checking, add the following statements:
.Sp
.Vb 8
\&  if ($string =~ /^[0\-7]+$/)
\&  {
\&      # okay, go ahead with conversion as shown above
\&  }
\&  else
\&  {
\&      # error, string contains other than octal characters
\&  }
.Ve
.Sp
Another application is to store a repetitive pattern in a given
bit vector:
.Sp
.Vb 6
\&  $pattern = 0xDEADBEEF;
\&  $length = 32;            # = length of $pattern in bits
\&  $size = $vector\->Size();
\&  $factor = int($size / $length);
\&  if ($size % $length) { $factor++; }
\&  $vector\->Chunk_List_Store($length, ($pattern) x $factor);
.Ve
.IP \(bu 2
\&\f(CW\*(C`@chunks = $vector\->Chunk_List_Read($chunksize);\*(C'\fR
.Sp
This method allows you to access the contents of the given bit vector in
form of a list of data packets ("chunks") of a size ("\f(CW$chunksize\fR")
of your choosing (within certain limits).
.Sp
In fact the given "\f(CW$chunksize\fR" must lie in the range between "\f(CW1\fR"
and "\f(CW\*(C`Bit::Vector\->Long_Bits()\*(C'\fR", or a fatal "chunk size out of
range" error will occur.
.Sp
In order to be portable, though, you should never use chunk sizes
larger than 32 bits.
.Sp
The given bit vector is thereby read in ascending order: The
"\f(CW$chunksize\fR" least significant bits (bits number "\f(CW0\fR" to
"\f(CW\*(C`$chunksize\-1\*(C'\fR") become the first chunk in the returned list
(i.e., "\f(CW$chunks[0]\fR"). The bits number "\f(CW$chunksize\fR" to
"\f(CW\*(C`2*$chunksize\-1\*(C'\fR" become the next chunk in the list
("\f(CW$chunks[1]\fR"), and so on.
.Sp
If "\f(CW\*(C`$vector\->Size()\*(C'\fR" is not a multiple of "\f(CW$chunksize\fR",
the last chunk in the list will contain fewer bits than "\f(CW$chunksize\fR".
.Sp
\&\fBBEWARE\fR that for large bit vectors and/or small values of "\f(CW$chunksize\fR",
the number of returned list elements can be extremely large! \fBBE CAREFUL!\fR
.Sp
You could blow up your application with lack of memory (each list element
is a full-grown Perl scalar, internally, with an associated memory overhead
for its administration!) or at least cause a noticeable, more or less
long-lasting "freeze" of your application!
.Sp
Possible applications:
.Sp
The method is especially useful in the conversion of packet sizes in
a data stream.
.Sp
This method can also be used to convert a given bit vector to a string
of octal numbers:
.Sp
.Vb 1
\&  $string = reverse join(\*(Aq\*(Aq, $vector\->Chunk_List_Read(3));
.Ve
.IP \(bu 2
\&\f(CW\*(C`$vector\->Index_List_Remove(@indices);\*(C'\fR
.Sp
This method allows you to specify a list of indices of bits which
should be turned off in the given bit vector.
.Sp
In fact this method is a shortcut for
.Sp
.Vb 4
\&    foreach $index (@indices)
\&    {
\&        $vector\->Bit_Off($index);
\&    }
.Ve
.Sp
In contrast to all other import methods in this module, this method
does \fBNOT\fR clear the given bit vector before processing its list
of arguments.
.Sp
Instead, this method allows you to accumulate the results of various
consecutive calls.
.Sp
(The same holds for the method "\f(CWIndex_List_Store()\fR". As a
consequence, you can "wipe out" what you did using the method
"\f(CWIndex_List_Remove()\fR" by passing the identical argument list
to the method "\f(CWIndex_List_Store()\fR".)
.IP \(bu 2
\&\f(CW\*(C`$vector\->Index_List_Store(@indices);\*(C'\fR
.Sp
This method allows you to specify a list of indices of bits which
should be turned on in the given bit vector.
.Sp
In fact this method is a shortcut for
.Sp
.Vb 4
\&    foreach $index (@indices)
\&    {
\&        $vector\->Bit_On($index);
\&    }
.Ve
.Sp
In contrast to all other import methods in this module, this method
does \fBNOT\fR clear the given bit vector before processing its list
of arguments.
.Sp
Instead, this method allows you to accumulate the results of various
consecutive calls.
.Sp
(The same holds for the method "\f(CWIndex_List_Remove()\fR". As a
consequence, you can "wipe out" what you did using the method
"\f(CWIndex_List_Store()\fR" by passing the identical argument list
to the method "\f(CWIndex_List_Remove()\fR".)
.IP \(bu 2
\&\f(CW\*(C`@indices = $vector\->Index_List_Read();\*(C'\fR
.Sp
This method returns a list of Perl scalars.
.Sp
The list contains one scalar for each set bit in the given
bit vector.
.Sp
\&\fBBEWARE\fR that for large bit vectors, this can result in a literally
overwhelming number of list elements! \fBBE CAREFUL!\fR You could run
out of memory or slow down your application considerably!
.Sp
Each scalar contains the number of the index corresponding to
the bit in question.
.Sp
These indices are always returned in ascending order.
.Sp
If the given bit vector is empty (contains only cleared bits)
or if it has a length of zero (if it contains no bits at all),
the method returns an empty list.
.Sp
This method can be useful, for instance, to obtain a list of
prime numbers:
.Sp
.Vb 4
\&    $limit = 1000; # or whatever
\&    $vector = Bit::Vector\->new($limit+1);
\&    $vector\->Primes();
\&    @primes = $vector\->Index_List_Read();
.Ve
.IP \(bu 2
\&\f(CW\*(C`$vec3\->Or($vec1,$vec2);\*(C'\fR
.Sp
\&\f(CW\*(C`$set3\->Union($set1,$set2);\*(C'\fR
.Sp
This method calculates the union of "\f(CW$set1\fR" and "\f(CW$set2\fR" and stores
the result in "\f(CW$set3\fR".
.Sp
This is usually written as "\f(CW\*(C`$set3 = $set1 u $set2\*(C'\fR" in set theory
(where "u" is the "cup" operator).
.Sp
(On systems where the "cup" character is unavailable this operator
is often denoted by a plus sign "+".)
.Sp
In-place calculation is also possible, i.e., "\f(CW$set3\fR" may be identical
with "\f(CW$set1\fR" or "\f(CW$set2\fR" or both.
.IP \(bu 2
\&\f(CW\*(C`$vec3\->And($vec1,$vec2);\*(C'\fR
.Sp
\&\f(CW\*(C`$set3\->Intersection($set1,$set2);\*(C'\fR
.Sp
This method calculates the intersection of "\f(CW$set1\fR" and "\f(CW$set2\fR" and
stores the result in "\f(CW$set3\fR".
.Sp
This is usually written as "\f(CW\*(C`$set3 = $set1 n $set2\*(C'\fR" in set theory
(where "n" is the "cap" operator).
.Sp
(On systems where the "cap" character is unavailable this operator
is often denoted by an asterisk "*".)
.Sp
In-place calculation is also possible, i.e., "\f(CW$set3\fR" may be identical
with "\f(CW$set1\fR" or "\f(CW$set2\fR" or both.
.IP \(bu 2
\&\f(CW\*(C`$vec3\->AndNot($vec1,$vec2);\*(C'\fR
.Sp
\&\f(CW\*(C`$set3\->Difference($set1,$set2);\*(C'\fR
.Sp
This method calculates the difference of "\f(CW$set1\fR" less "\f(CW$set2\fR" and
stores the result in "\f(CW$set3\fR".
.Sp
This is usually written as "\f(CW\*(C`$set3 = $set1 \e $set2\*(C'\fR" in set theory
(where "\e" is the "less" operator).
.Sp
In-place calculation is also possible, i.e., "\f(CW$set3\fR" may be identical
with "\f(CW$set1\fR" or "\f(CW$set2\fR" or both.
.IP \(bu 2
\&\f(CW\*(C`$vec3\->Xor($vec1,$vec2);\*(C'\fR
.Sp
\&\f(CW\*(C`$set3\->ExclusiveOr($set1,$set2);\*(C'\fR
.Sp
This method calculates the symmetric difference of "\f(CW$set1\fR" and "\f(CW$set2\fR"
and stores the result in "\f(CW$set3\fR".
.Sp
This can be written as "\f(CW\*(C`$set3 = ($set1 u $set2) \e ($set1 n $set2)\*(C'\fR" in set
theory (the union of the two sets less their intersection).
.Sp
When sets are implemented as bit vectors then the above formula is
equivalent to the exclusive-or between corresponding bits of the two
bit vectors (hence the name of this method).
.Sp
Note that this method is also much more efficient than evaluating the
above formula explicitly since it uses a built-in machine language
instruction internally.
.Sp
In-place calculation is also possible, i.e., "\f(CW$set3\fR" may be identical
with "\f(CW$set1\fR" or "\f(CW$set2\fR" or both.
.IP \(bu 2
\&\f(CW\*(C`$vec2\->Not($vec1);\*(C'\fR
.Sp
\&\f(CW\*(C`$set2\->Complement($set1);\*(C'\fR
.Sp
This method calculates the complement of "\f(CW$set1\fR" and stores the result
in "\f(CW$set2\fR".
.Sp
In "big integer" arithmetic, this is equivalent to calculating the one's
complement of the number stored in the bit vector "\f(CW$set1\fR" in binary
representation.
.Sp
In-place calculation is also possible, i.e., "\f(CW$set2\fR" may be identical
with "\f(CW$set1\fR".
.IP \(bu 2
\&\f(CW\*(C`if ($set1\->subset($set2))\*(C'\fR
.Sp
Returns "true" ("\f(CW1\fR") if "\f(CW$set1\fR" is a subset of "\f(CW$set2\fR"
(i.e., completely contained in "\f(CW$set2\fR") and "false" ("\f(CW0\fR")
otherwise.
.Sp
This means that any bit which is set ("\f(CW1\fR") in "\f(CW$set1\fR" must
also be set in "\f(CW$set2\fR", but "\f(CW$set2\fR" may contain set bits
which are not set in "\f(CW$set1\fR", in order for the condition
of subset relationship to be true between these two sets.
.Sp
Note that by definition, if two sets are identical, they are
also subsets (and also supersets) of each other.
.IP \(bu 2
\&\f(CW\*(C`$norm = $set\->Norm();\*(C'\fR
.Sp
Returns the norm (number of bits which are set) of the given vector.
.Sp
This is equivalent to the number of elements contained in the given
set.
.Sp
Uses a byte lookup table for calculating the number of set bits
per byte, and thus needs a time for evaluation (and a number of
loops) linearly proportional to the length of the given bit vector
(in bytes).
.Sp
This should be the fastest algorithm on average.
.IP \(bu 2
\&\f(CW\*(C`$norm = $set\->Norm2();\*(C'\fR
.Sp
Returns the norm (number of bits which are set) of the given vector.
.Sp
This is equivalent to the number of elements contained in the given
set.
.Sp
This does the same as the method "\f(CWNorm()\fR" above, only with a
different algorithm:
.Sp
This method counts the number of set and cleared bits at the same
time and will stop when either of them has been exhausted, thus
needing at most half as many loops per machine word as the total
number of bits in a machine word \- in fact it will need a number
of loops equal to the minimum of the number of set bits and the
number of cleared bits.
.Sp
This might be a faster algorithm than of the method "\f(CWNorm()\fR"
above on some systems, depending on the system's architecture
and the compiler and optimisation used, for bit vectors with
sparse set bits and for bit vectors with sparse cleared bits
(i.e., predominantly set bits).
.IP \(bu 2
\&\f(CW\*(C`$norm = $set\->Norm3();\*(C'\fR
.Sp
Returns the norm (number of bits which are set) of the given vector.
.Sp
This is equivalent to the number of elements contained in the given
set.
.Sp
This does the same as the two methods "\f(CWNorm()\fR" and "\f(CWNorm2()\fR"
above, however with a different algorithm.
.Sp
In fact this is the implementation of the method "\f(CWNorm()\fR" used
in previous versions of this module.
.Sp
The method needs a number of loops per machine word equal to the
number of set bits in that machine word.
.Sp
Only for bit vectors with sparse set bits will this method be
fast; it will depend on a system's architecture and compiler
whether the method will be faster than any of the two methods
above in such cases.
.Sp
On average however, this is probably the slowest method of the
three.
.IP \(bu 2
\&\f(CW\*(C`$min = $set\->Min();\*(C'\fR
.Sp
Returns the minimum of the given set, i.e., the minimum of all
indices of all set bits in the given bit vector "\f(CW$set\fR".
.Sp
If the set is empty (no set bits), plus infinity (represented
by the constant "MAX_LONG" on your system) is returned.
.Sp
(This constant is usually 2\ ^\ (n\-1)\ \-\ 1, where "\f(CW\*(C`n\*(C'\fR" is the
number of bits of an unsigned long on your machine.)
.IP \(bu 2
\&\f(CW\*(C`$max = $set\->Max();\*(C'\fR
.Sp
Returns the maximum of the given set, i.e., the maximum of all
indices of all set bits in the given bit vector "\f(CW$set\fR".
.Sp
If the set is empty (no set bits), minus infinity (represented
by the constant "MIN_LONG" on your system) is returned.
.Sp
(This constant is usually \-(2\ ^\ (n\-1)\ \-\ 1) or \-(2\ ^\ (n\-1)),
where "\f(CW\*(C`n\*(C'\fR" is the number of bits of an unsigned long on your machine.)
.IP \(bu 2
\&\f(CW\*(C`$m3\->Multiplication($r3,$c3,$m1,$r1,$c1,$m2,$r2,$c2);\*(C'\fR
.Sp
This method multiplies two boolean matrices (stored as bit vectors)
"\f(CW$m1\fR" and "\f(CW$m2\fR" and stores the result in matrix "\f(CW$m3\fR".
.Sp
The method uses the binary "xor" operation ("\f(CW\*(C`^\*(C'\fR") as the boolean
addition operator ("\f(CW\*(C`+\*(C'\fR").
.Sp
An exception is raised if the product of the number of rows and
columns of any of the three matrices differs from the actual size
of their underlying bit vector.
.Sp
An exception is also raised if the numbers of rows and columns
of the three matrices do not harmonize in the required manner:
.Sp
.Vb 3
\&  rows3 == rows1
\&  cols3 == cols2
\&  cols1 == rows2
.Ve
.Sp
This method is used by the module "Math::MatrixBool".
.Sp
See \fBMath::MatrixBool\fR\|(3) for details.
.IP \(bu 2
\&\f(CW\*(C`$m3\->Product($r3,$c3,$m1,$r1,$c1,$m2,$r2,$c2);\*(C'\fR
.Sp
This method multiplies two boolean matrices (stored as bit vectors)
"\f(CW$m1\fR" and "\f(CW$m2\fR" and stores the result in matrix "\f(CW$m3\fR".
.Sp
This special method uses the binary "or" operation ("\f(CW\*(C`|\*(C'\fR") as the
boolean addition operator ("\f(CW\*(C`+\*(C'\fR").
.Sp
An exception is raised if the product of the number of rows and
columns of any of the three matrices differs from the actual size
of their underlying bit vector.
.Sp
An exception is also raised if the numbers of rows and columns
of the three matrices do not harmonize in the required manner:
.Sp
.Vb 3
\&  rows3 == rows1
\&  cols3 == cols2
\&  cols1 == rows2
.Ve
.Sp
This method is used by the module "Math::MatrixBool".
.Sp
See \fBMath::MatrixBool\fR\|(3) for details.
.IP \(bu 2
\&\f(CW\*(C`$matrix\->Closure($rows,$cols);\*(C'\fR
.Sp
This method calculates the reflexive transitive closure of the
given boolean matrix (stored as a bit vector) using Kleene's
algoritm.
.Sp
(See \fBMath::Kleene\fR\|(3) for a brief introduction into the
theory behind Kleene's algorithm.)
.Sp
The reflexive transitive closure answers the question whether
a path exists between any two vertices of a graph whose edges
are given as a matrix:
.Sp
If a (directed) edge exists going from vertex "i" to vertex "j",
then the element in the matrix with coordinates (i,j) is set to
"\f(CW1\fR" (otherwise it remains set to "\f(CW0\fR").
.Sp
If the edges are undirected, the resulting matrix is symmetric,
i.e., elements (i,j) and (j,i) always contain the same value.
.Sp
The matrix representing the edges of the graph only answers the
question whether an \fBEDGE\fR exists between any two vertices of
the graph or not, whereas the reflexive transitive closure
answers the question whether a \fBPATH\fR (a series of adjacent
edges) exists between any two vertices of the graph!
.Sp
Note that the contents of the given matrix are modified by
this method, so make a copy of the initial matrix in time
if you are going to need it again later.
.Sp
An exception is raised if the given matrix is not quadratic,
i.e., if the number of rows and columns of the given matrix
is not identical.
.Sp
An exception is also raised if the product of the number of
rows and columns of the given matrix differs from the actual
size of its underlying bit vector.
.Sp
This method is used by the module "Math::MatrixBool".
.Sp
See \fBMath::MatrixBool\fR\|(3) for details.
.IP \(bu 2
\&\f(CW\*(C`$matrix2\->Transpose($rows2,$cols2,$matrix1,$rows1,$cols1);\*(C'\fR
.Sp
This method calculates the transpose of a boolean matrix "\f(CW$matrix1\fR"
(stored as a bit vector) and stores the result in matrix "\f(CW$matrix2\fR".
.Sp
The transpose of a boolean matrix, representing the edges of a graph,
can be used for finding the strongly connected components of that graph.
.Sp
An exception is raised if the product of the number of rows and
columns of any of the two matrices differs from the actual size
of its underlying bit vector.
.Sp
An exception is also raised if the following conditions are not
met:
.Sp
.Vb 2
\&  rows2 == cols1
\&  cols2 == rows1
.Ve
.Sp
Note that in-place processing ("\f(CW$matrix1\fR" and "\f(CW$matrix2\fR" are
identical) is only possible if the matrix is quadratic. Otherwise,
a fatal "matrix is not quadratic" error will occur.
.Sp
This method is used by the module "Math::MatrixBool".
.Sp
See \fBMath::MatrixBool\fR\|(3) for details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBBit::Vector::Overload\fR\|(3),
\&\fBBit::Vector::String\fR\|(3),
\&\fBStorable\fR\|(3).
.PP
\&\fBSet::IntRange\fR\|(3),
\&\fBMath::MatrixBool\fR\|(3),
\&\fBMath::MatrixReal\fR\|(3),
\&\fBDFA::Kleene\fR\|(3),
\&\fBMath::Kleene\fR\|(3),
\&\fBGraph::Kruskal\fR\|(3).
.SH VERSION
.IX Header "VERSION"
This man page documents "Bit::Vector" version 7.4.
.SH AUTHOR
.IX Header "AUTHOR"
.Vb 3
\&  Steffen Beyer
\&  mailto:STBEY@cpan.org
\&  http://www.engelschall.com/u/sb/download/
.Ve
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 1995 \- 2013 by Steffen Beyer. All rights reserved.
.SH LICENSE
.IX Header "LICENSE"
This package is free software; you can redistribute it and/or
modify it under the same terms as Perl itself, i.e., under the
terms of the "Artistic License" or the "GNU General Public License".
.PP
The C library at the core of this Perl module can additionally
be redistributed and/or modified under the terms of the "GNU
Library General Public License".
.PP
Please refer to the files "Artistic.txt", "GNU_GPL.txt" and
"GNU_LGPL.txt" in this distribution for details!
.SH DISCLAIMER
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.PP
See the "GNU General Public License" for more details.
