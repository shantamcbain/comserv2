.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Exception 3pm"
.TH DBIx::Class::Exception 3pm 2022-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Exception \- Exception objects for DBIx::Class
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Exception objects of this class are used internally by
the default error handling of "throw_exception" in DBIx::Class::Schema
and derivatives.
.PP
These objects stringify to the contained error message, and use
overload fallback to give natural boolean/numeric values.
.SH METHODS
.IX Header "METHODS"
.SS throw
.IX Subsection "throw"
.ie n .IP "Arguments: $exception_scalar, $stacktrace" 4
.el .IP "Arguments: \f(CW$exception_scalar\fR, \f(CW$stacktrace\fR" 4
.IX Item "Arguments: $exception_scalar, $stacktrace"
.PP
This is meant for internal use by DBIx::Class's \f(CW\*(C`throw_exception\*(C'\fR
code, and shouldn't be used directly elsewhere.
.PP
Expects a scalar exception message. The optional boolean \f(CW$stacktrace\fR
causes it to output a full trace similar to confess.
.PP
.Vb 2
\&  DBIx::Class::Exception\->throw(\*(AqFoo\*(Aq);
\&  try { ... } catch { DBIx::Class::Exception\->throw(shift) }
.Ve
.SS rethrow
.IX Subsection "rethrow"
This method provides some syntactic sugar in order to
re-throw exceptions.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
