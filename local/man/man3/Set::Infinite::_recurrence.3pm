.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Set::Infinite::_recurrence 3pm"
.TH Set::Infinite::_recurrence 3pm 2025-03-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Set::Infinite::_recurrence \- Extends Set::Infinite with recurrence functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    $recurrence = $base_set\->_recurrence ( \e&next, \e&previous );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is an internal class used by the DateTime::Set module.
The API is subject to change.
.PP
It provides all functionality provided by Set::Infinite, plus the ability
to define recurrences with arbitrary objects, such as dates.
.SH METHODS
.IX Header "METHODS"
.IP \(bu 4
_recurrence ( \e&next, \e&previous )
.Sp
Creates a recurrence set. The set is defined inside a 'base set'.
.Sp
.Vb 1
\&   $recurrence = $base_set\->_recurrence ( \e&next, \e&previous );
.Ve
.Sp
The recurrence functions take one argument, and return the 'next' or 
the 'previous' occurrence.
.Sp
Example: defines the set of all 'integer numbers':
.Sp
.Vb 1
\&    use strict;
\&
\&    use Set::Infinite::_recurrence;
\&    use POSIX qw(floor);
\&
\&    # define the recurrence span
\&    my $forever = Set::Infinite::_recurrence\->new( 
\&        Set::Infinite::_recurrence::NEG_INFINITY, 
\&        Set::Infinite::_recurrence::INFINITY
\&    );
\&
\&    my $recurrence = $forever\->_recurrence(
\&        sub {   # next
\&                floor( $_[0] + 1 ) 
\&            },   
\&        sub {   # previous
\&                my $tmp = floor( $_[0] ); 
\&                $tmp < $_[0] ? $tmp : $_[0] \- 1
\&            },   
\&    );
\&
\&    print "sample recurrence ",
\&          $recurrence\->intersection( \-5, 5 ), "\en";
\&    # sample recurrence \-5,\-4,\-3,\-2,\-1,0,1,2,3,4,5
\&
\&    {
\&        my $x = 234.567;
\&        print "next occurrence after $x = ",
\&              $recurrence\->{param}[0]\->( $x ), "\en";  # 235
\&        print "previous occurrence before $x = ",
\&              $recurrence\->{param}[2]\->( $x ), "\en";  # 234
\&    }
\&
\&    {
\&        my $x = 234;
\&        print "next occurrence after $x = ",
\&              $recurrence\->{param}[0]\->( $x ), "\en";  # 235
\&        print "previous occurrence before $x = ",
\&              $recurrence\->{param}[2]\->( $x ), "\en";  # 233
\&    }
.Ve
.IP \(bu 4
is_forever
.Sp
Returns true if the set is a single span, 
ranging from \-Infinity to Infinity.
.IP \(bu 4
_is_recurrence
.Sp
Returns true if the set is an unbounded recurrence, 
ranging from \-Infinity to Infinity.
.SH CONSTANTS
.IX Header "CONSTANTS"
.IP \(bu 4
INFINITY
.Sp
The \f(CW\*(C`Infinity\*(C'\fR value.
.IP \(bu 4
NEG_INFINITY
.Sp
The \f(CW\*(C`\-Infinity\*(C'\fR value.
.SH SUPPORT
.IX Header "SUPPORT"
Support is offered through the \f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
Please report bugs using rt.cpan.org
.SH AUTHOR
.IX Header "AUTHOR"
Flavio Soibelmann Glock <fglock@gmail.com>
.PP
The recurrence generation algorithm is based on an idea from Dave Rolsky.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2003 Flavio Soibelmann Glock. All rights reserved.
This program is free software; you can distribute it and/or
modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the LICENSE file
included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Set::Infinite
.PP
DateTime::Set
.PP
For details on the Perl DateTime Suite project please see
<http://datetime.perl.org>.
