.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Script::Help::sandbox_class 3pm"
.TH DBIx::Class::Migration::Script::Help::sandbox_class 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Script::Help::sandbox_class
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    dbic\-migration install \-\-schema_class MyApp::Schema \-\-sandbox_class MySQLSandbox
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.IP Aliases 4
.IX Item "Aliases"
T, sb
.IP Value 4
.IX Item "Value"
String (default: SqliteSandbox)
.PP
If you don't have a target database for your migrations (as you might not for
your development setup, or during initial prototyping) we automatically create
a local database sandbox in your "target_dir" in DBIx::Class::Migration::Script.
.PP
By default this sandbox is a file based DBD::Sqlite database, which is an
easy option since changes are good this is already installed on your development
computer (and if not it is trivial to install).
.PP
You can change this to either 'PostgresqlSandbox' or 'MySQLSandbox', which will
create a sandbox using either DBIx::Class::Migration::MySQLSandbox or 
DBIx::Class::Migration::PostgresqlSandbox (which in term require the separate
installation of either Test::mysqld or Test::Postgresql58).
.PP
Like some of the other option flags you can specify with an \f(CW%ENV\fR setting:
.PP
.Vb 1
\&    export DBIC_MIGRATION_SANDBOX_CLASS=MySQLSandbox
.Ve
.PP
The default sqlite sandbox is documented at DBIx::Class::Migration::SQLiteSandbox
although this single file database is pretty straightforward to use.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Script,
DBIx::Class::Migration::Features, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
