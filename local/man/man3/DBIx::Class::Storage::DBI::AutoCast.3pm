.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::AutoCast 3pm"
.TH DBIx::Class::Storage::DBI::AutoCast 3pm 2018-04-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::AutoCast \- Storage component for RDBMS requiring explicit placeholder typing
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  $schema\->storage\->auto_cast(1);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
In some combinations of RDBMS and DBD drivers (e.g. FreeTDS and Sybase)
statements with values bound to columns or conditions that are not strings will
throw implicit type conversion errors.
.PP
As long as a column data_type is
defined and resolves to a base RDBMS native type via
_native_data_type as
defined in your Storage driver, the placeholder for this column will be
converted to:
.PP
.Vb 1
\&  CAST(? as $mapped_type)
.Ve
.PP
This option can also be enabled in
connect_info as:
.PP
.Vb 1
\&  on_connect_call => [\*(Aqset_auto_cast\*(Aq]
.Ve
.SS connect_call_set_auto_cast
.IX Subsection "connect_call_set_auto_cast"
Executes:
.PP
.Vb 1
\&  $schema\->storage\->auto_cast(1);
.Ve
.PP
on connection.
.PP
Used as:
.PP
.Vb 1
\&    on_connect_call => [\*(Aqset_auto_cast\*(Aq]
.Ve
.PP
in connect_info.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
