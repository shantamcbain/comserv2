.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::FromNestedArray 3pm"
.TH Tree::Simple::Visitor::FromNestedArray 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::FromNestedArray \- A Visitor for creating Tree::Simple objects from nested array trees.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::FromNestedArray;
\&
\&  my $visitor = Tree::Simple::Visitor::FromNestedArray\->new();
\&
\&  # given this nested array tree
\&  my $array_tree = [
\&                    \*(AqRoot\*(Aq, [
\&                        \*(AqChild1\*(Aq, [
\&                                \*(AqGrandChild1\*(Aq,
\&                                \*(AqGrandChild2\*(Aq
\&                                ],
\&                        \*(AqChild2\*(Aq
\&                        ]
\&                    ];
\&  # set the array tree we
\&  # are going to convert
\&  $visitor\->setArrayTree($array_tree);
\&
\&  $tree\->accept($visitor);
\&
\&  # this then creates the equivalent Tree::Simple object:
\&  # Tree::Simple\->new("Root")
\&  #     \->addChildren(
\&  #         Tree::Simple\->new("Child1")
\&  #             \->addChildren(
\&  #                 Tree::Simple\->new("GrandChild1"),
\&  #                 Tree::Simple\->new("GrandChild2")
\&  #             ),
\&  #         Tree::Simple\->new("Child2"),
\&  #     );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Given a tree constructed from nested arrays, this Visitor will create the equivalent Tree::Simple hierarchy.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR, \f(CW\*(C`includTrunk\*(C'\fR and \f(CW\*(C`setArrayTree\*(C'\fR methods to customize its behavior.
.IP "\fBincludTrunk ($boolean)\fR" 4
.IX Item "includTrunk ($boolean)"
Setting the \f(CW$boolean\fR value to true (\f(CW1\fR) will cause the node value of the \f(CW$tree\fR object passed into \f(CW\*(C`visit\*(C'\fR to be set with the root value found in the \f(CW$array_tree\fR. Setting it to false (\f(CW0\fR), or not setting it, will result in the first value in the \f(CW$array_tree\fR creating a new node level.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as its \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are created, the \f(CW$filter_function\fR is passed the node value extracted from the array prior to it being inserted into the tree being built. The \f(CW$filter_function\fR is expected to return the value desired for inclusion into the tree.
.IP "\fBsetArrayTree ($array_tree)\fR" 4
.IX Item "setArrayTree ($array_tree)"
This method is used to set the \f(CW$array_tree\fR that our Tree::Simple hierarchy will be constructed from. It must be in the following form:
.Sp
.Vb 9
\&  [
\&    \*(AqRoot\*(Aq, [
\&        \*(AqChild1\*(Aq, [
\&              \*(AqGrandChild1\*(Aq,
\&              \*(AqGrandChild2\*(Aq
\&              ],
\&        \*(AqChild2\*(Aq
\&      ]
\&  ]
.Ve
.Sp
Basically each element in the array is considered a node, unless it is an array reference, in which case it is interpreted as containing the children of the node created from the previous element in the array.
.Sp
The tree is validated prior being accepted, if it fails validation an exception will be thrown. The rules are as follows;
.RS 4
.IP "The array tree must not be empty." 4
.IX Item "The array tree must not be empty."
It makes not sense to create a tree out of nothing, so it is assumed that this is a sign of something wrong.
.IP "All nodes of the array tree must not be array references." 4
.IX Item "All nodes of the array tree must not be array references."
The root node is validated against this in this function, but all subsequent nodes are checked as the tree is built. Any nodes found to be array references are rejected and an exception is thrown. If you desire your node values to be array references, you can use the node filtering mechanism to achieve this as the node is filtered \fIafter\fR it is validated.
.IP "The array tree must be a single rooted tree." 4
.IX Item "The array tree must be a single rooted tree."
If there is a second element in the array tree, it is assumed to be the children of the root, and therefore must be in the form of an array reference.
.RE
.RS 4
.RE
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by the Tree::Simple \f(CW\*(C`accept\*(C'\fR method. It can also be used on its
own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a
Tree::Simple object), and will throw and exception otherwise.
.SH BUGS
.IX Header "BUGS"
None that I am aware of. Of course, if you find a bug, let me know, and I will be sure to fix it.
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the
\&\fBTree::Simple\fR module, you should refer to that module for more information.
.SH AUTHOR
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
