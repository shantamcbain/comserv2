.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "B::Utils::OP 3pm"
.TH B::Utils::OP 3pm 2015-07-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
B::Utils::OP \- op related utility functions for perl
.SH VERSION
.IX Header "VERSION"
version 0.27
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&  use B::Utils::OP qw(parent_op return_op);
\&  sub foo {
\&    my $pop = parent_op(0);
\&    my $rop = return_op(0);
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.Vb 5
\&  sub foo {
\&    dothis(1);
\&    find_things();
\&    return;
\&  }
.Ve
.PP
has the following optree:
.PP
.Vb 10
\& d  <1> leavesub[1 ref] K/REFC,1 \->(end)
\& \-     <@> lineseq KP \->d
\& 1        <;> nextstate(main \-371 bah.pl:8) v/2 \->2
\& 5        <1> entersub[t2] vKS/TARG,3 \->6
\& \-           <1> ex\-list K \->5
\& 2              <0> pushmark s \->3
\& 3              <$> const[IV 1] sM \->4
\& \-              <1> ex\-rv2cv sK/3 \->\-
\& 4                 <#> gv[*dothis] s \->5
\& 6        <;> nextstate(main \-371 bah.pl:9) v/2 \->7
\&
\& 9        <1> entersub[t4] vKS/TARG,3 \->a
\& \-           <1> ex\-list K \->9
\& 7              <0> pushmark s \->8
\& \-              <1> ex\-rv2cv sK/3 \->\-
\& 8                 <#> gv[*find_things] s/EARLYCV \->9
\&
\& a        <;> nextstate(main \-371 bah.pl:10) v/2 \->b
\& c        <@> return K \->d
\& b           <0> pushmark s \->c
.Ve
.PP
The \f(CW\*(C`find_things\*(C'\fR in \f(CW\*(C`foo\*(C'\fR is called in the \f(CW\*(C`entersub\*(C'\fR in #9.  If
you call \f(CW\*(C`parent_op\*(C'\fR function with level 0, you get the \f(CW\*(C`nextstate\*(C'\fR
op that is before the entersub, which is #6.  And \f(CW\*(C`return_op\*(C'\fR gives
you the next op that the caller is returning to, in this case, the
\&\f(CW\*(C`nextstate\*(C'\fR in #a.
.SS "EXPORTED PERL FUNCTIONS"
.IX Subsection "EXPORTED PERL FUNCTIONS"
.IP parent_op($lv) 4
.IX Item "parent_op($lv)"
In runtime, returns the B::OP object whose next is the \f(CW\*(C`entersub\*(C'\fR of the current context up level \f(CW$lv\fR
.IP return_op($lv) 4
.IX Item "return_op($lv)"
In runtime, returns the B::OP object that the current context is returning to at level \f(CW$lv\fR
.SS "B::CV METHODS"
.IX Subsection "B::CV METHODS"
.ie n .IP "$cv\->NEW_with_start($root, $start)" 4
.el .IP "\f(CW$cv\fR\->NEW_with_start($root, \f(CW$start\fR)" 4
.IX Item "$cv->NEW_with_start($root, $start)"
Clone the \f(CW$cv\fR but with different \f(CW$root\fR and \f(CW$start\fR
.SH AUTHORS
.IX Header "AUTHORS"
Chia-liang Kao <clkao@clkao.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2008 by Chia-liang Kao
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
