.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Traits::Pluggable 3pm"
.TH MooseX::Traits::Pluggable 3pm 2014-01-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::Traits::Pluggable \- trait loading and resolution for Moose
.SH DESCRIPTION
.IX Header "DESCRIPTION"
See MooseX::Traits for usage information.
.PP
Use \f(CW\*(C`new_with_traits\*(C'\fR to construct an object with a list of traits and
\&\f(CW\*(C`apply_traits\*(C'\fR to apply traits to an instance.
.PP
Adds support for class precedence search for traits and some extra attributes,
described below.
.SH "TRAIT SEARCH"
.IX Header "TRAIT SEARCH"
If the value of "_trait_namespace" in MooseX::Traits starts with a \f(CW\*(C`+\*(C'\fR the
namespace will be considered relative to the \f(CW\*(C`class_precedence_list\*(C'\fR (ie.
\&\f(CW@ISA\fR) of the original class.
.PP
Example:
.PP
.Vb 2
\&  package Class1
\&  use Moose;
\&
\&  package Class1::Trait::Foo;
\&  use Moose::Role;
\&  has \*(Aqbar\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqStr\*(Aq,
\&      required => 1,
\&  );
\&
\&  package Class2;
\&  use parent \*(AqClass1\*(Aq;
\&  with \*(AqMooseX::Traits\*(Aq;
\&  has \*(Aq+_trait_namespace\*(Aq => (default => \*(Aq+Trait\*(Aq);
\&  has \*(Aq+_traits_behave_like_roles\*(Aq => (default => 1);
\&
\&  package Class2::Trait::Bar;
\&  use Moose::Role;
\&  has \*(Aqbaz\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqStr\*(Aq,
\&      required => 1,
\&  );
\&
\&  package main;
\&  my $instance = Class2\->new_with_traits(
\&      traits => [\*(AqFoo\*(Aq, \*(AqBar\*(Aq],
\&      bar => \*(Aqbaz\*(Aq,
\&      baz => \*(Aqquux\*(Aq,
\&  );
\&
\&  $instance\->does(\*(AqClass1::Trait::Foo\*(Aq); # true
\&  $instance\->does(\*(AqClass2::Trait::Bar\*(Aq); # true
.Ve
.SH "NAMESPACE ARRAYS"
.IX Header "NAMESPACE ARRAYS"
You can search multiple namespaces for traits, for example:
.PP
.Vb 3
\&  has \*(Aq+_trait_namespace\*(Aq => (
\&      default => sub { [qw/+Trait +Role ExtraNS::Trait/] }
\&  );
.Ve
.PP
Will search in the \f(CW\*(C`class_precedence_list\*(C'\fR for \f(CW\*(C`::Trait::TheTrait\*(C'\fR
and \f(CW\*(C`::Role::TheTrait\*(C'\fR and then for \f(CW\*(C`ExtraNS::Trait::TheTrait\*(C'\fR.
.SH "CORRECT ROLE BEHAVIOR"
.IX Header "CORRECT ROLE BEHAVIOR"
By default, a method from a role will override a class method, this however is
not the behavior one expects when applying a Moose role using the normal
methods.
.PP
If you want the behavior to be consistent with Moose roles,
then use this configuration attribute in your class:
.PP
.Vb 1
\&  has \*(Aq+_traits_behave_like_roles\*(Aq => (default => 1);
.Ve
.PP
This may or may not become the default in the future, for now you have to ask
for it for backward compatibility reasons.
.SH "EXTRA ATTRIBUTES"
.IX Header "EXTRA ATTRIBUTES"
.SS _original_class_name
.IX Subsection "_original_class_name"
When traits are applied to your class or instance, you get an anonymous class
back whose name will be not the same as your original class. So \f(CW\*(C`ref $self\*(C'\fR
will not be \f(CW\*(C`Class\*(C'\fR, but \f(CW\*(C`$self\->_original_class_name\*(C'\fR will be.
.SS _traits
.IX Subsection "_traits"
List of the (unresolved) traits applied to the instance.
.SS _resolved_traits
.IX Subsection "_resolved_traits"
List of traits applied to the instance resolved to full package names.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Traits, MooseX::Object::Pluggable, CatalystX::Component::Traits
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-moosex\-traits\-pluggable at
rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX\-Traits\-Pluggable>.  I
will be notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.SH AUTHOR
.IX Header "AUTHOR"
Rafael Kitover \f(CW\*(C`<rkitover@cpan.org>\*(C'\fR
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
Tomas Doran, \f(CW\*(C`<bobtfish@bobtfish.net>\*(C'\fR
Fitz Elliott, \f(CW\*(C`<fitz.elliott@gmail.com>\*(C'\fR
Andreas Marienborg, \f(CW\*(C`<andreas.marienborg@gmail.com>\*(C'\fR
Alexander Hartmaier, \f(CW\*(C`<abraxxa@cpan.org>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2014 by the aforementioned "AUTHOR" and "CONTRIBUTORS".
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
