.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooX::Attribute::ENV 3pm"
.TH MooX::Attribute::ENV 3pm 2021-10-03 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooX::Attribute::ENV \- Allow Moo attributes to get their values from %ENV
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 10
\&  package MyMod;
\&  use Moo;
\&  use MooX::Attribute::ENV;
\&  # look for $ENV{attr_val} and $ENV{ATTR_VAL}
\&  has attr => (
\&    is => \*(Aqro\*(Aq,
\&    env_key => \*(Aqattr_val\*(Aq,
\&  );
\&  # look for $ENV{attr_val} and $ENV{next_val}, in that order
\&  has some => (
\&    is => \*(Aqro\*(Aq,
\&    env_key => [ \*(Aqattr_val\*(Aq, \*(Aqnext_val\*(Aq ],
\&  );
\&  # looks for $ENV{otherattr} and $ENV{OTHERATTR}, then any default
\&  has otherattr => (
\&    is => \*(Aqro\*(Aq,
\&    env => 1,
\&    default => 7,
\&  );
\&  # looks for $ENV{xxx_prefixattr} and $ENV{XXX_PREFIXATTR}
\&  has prefixattr => (
\&    is => \*(Aqro\*(Aq,
\&    env_prefix => \*(Aqxxx\*(Aq,
\&  );
\&  # looks for $ENV{MyMod_packageattr} and $ENV{MYMOD_PACKAGEATTR}
\&  has packageattr => (
\&    is => \*(Aqro\*(Aq,
\&    env_package_prefix => 1,
\&  );
\&
\&  $ perl \-MMyMod \-E \*(Aqsay MyMod\->new(attr => 2)\->attr\*(Aq
\&  # 2
\&  $ ATTR_VAL=3 perl \-MMyMod \-E \*(Aqsay MyMod\->new\->attr\*(Aq
\&  # 3
\&  $ OTHERATTR=4 perl \-MMyMod \-E \*(Aqsay MyMod\->new\->otherattr\*(Aq
\&  # 4
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a Moo extension. It allows other attributes for "has" in Moo. If
any of these are given, then "BUILDARGS" in Moo is wrapped so that values
for object attributes can, if not supplied in the normal construction
process, come from the environment.
.PP
The environment will be searched for either the given case, or upper case,
version of the names discussed below.
.PP
When a prefix is mentioned, it will be prepended to the mentioned name,
with a \f(CW\*(C`_\*(C'\fR in between.
.SH "ADDITIONAL ATTRIBUTES"
.IX Header "ADDITIONAL ATTRIBUTES"
.SS env
.IX Subsection "env"
Boolean. If true, the name is the attribute, no prefix.
.SS env_key
.IX Subsection "env_key"
String. If true, the name is the given value, no prefix.
.PP
or
.PP
ArrayRef. A list of names that will be checked in given order.
.SS env_prefix
.IX Subsection "env_prefix"
String. The prefix is the given value.
.SS env_package_prefix
.IX Subsection "env_package_prefix"
Boolean. If true, use as the prefix the current package-name, with \f(CW\*(C`::\*(C'\fR
replaced with \f(CW\*(C`_\*(C'\fR.
.SH AUTHOR
.IX Header "AUTHOR"
Ed J, porting John Napiorkowski's excellent MooseX::Attribute::ENV.
.SH LICENCE
.IX Header "LICENCE"
The same terms as Perl itself.
