.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::MSSQL 3pm"
.TH DBIx::Class::Storage::DBI::MSSQL 3pm 2022-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::MSSQL \- Base Class for Microsoft SQL Server support
in DBIx::Class
.SH SYNOPSIS
.IX Header "SYNOPSIS"
This is the base class for Microsoft SQL Server support, used by
DBIx::Class::Storage::DBI::ODBC::Microsoft_SQL_Server and
DBIx::Class::Storage::DBI::Sybase::Microsoft_SQL_Server.
.SH "IMPLEMENTATION NOTES"
.IX Header "IMPLEMENTATION NOTES"
.SS "IDENTITY information"
.IX Subsection "IDENTITY information"
Microsoft SQL Server supports three methods of retrieving the IDENTITY
value for inserted row: IDENT_CURRENT, @@IDENTITY, and \fBSCOPE_IDENTITY()\fR.
SCOPE_IDENTITY is used here because it is the safest.  However, it must
be called is the same execute statement, not just the same connection.
.PP
So, this implementation appends a SELECT \fBSCOPE_IDENTITY()\fR statement
onto each INSERT to accommodate that requirement.
.PP
\&\f(CW\*(C`SELECT @@IDENTITY\*(C'\fR can also be used by issuing:
.PP
.Vb 1
\&  $self\->_identity_method(\*(Aq@@identity\*(Aq);
.Ve
.PP
it will only be used if \fBSCOPE_IDENTITY()\fR fails.
.PP
This is more dangerous, as inserting into a table with an on insert trigger that
inserts into another table with an identity will give erroneous results on
recent versions of SQL Server.
.SS "identity insert"
.IX Subsection "identity insert"
Be aware that we have tried to make things as simple as possible for our users.
For MSSQL that means that when a user tries to create a row, while supplying an
explicit value for an autoincrementing column, we will try to issue the
appropriate database call to make this possible, namely \f(CW\*(C`SET IDENTITY_INSERT
$table_name ON\*(C'\fR. Unfortunately this operation in MSSQL requires the
\&\f(CW\*(C`db_ddladmin\*(C'\fR privilege, which is normally not included in the standard
write-permissions.
.SS "Ordered Subselects"
.IX Subsection "Ordered Subselects"
If you attempted the following query (among many others) in Microsoft SQL
Server
.PP
.Vb 5
\& $rs\->search ({}, {
\&  prefetch => \*(Aqrelation\*(Aq,
\&  rows => 2,
\&  offset => 3,
\& });
.Ve
.PP
You may be surprised to receive an exception. The reason for this is a quirk
in the MSSQL engine itself, and sadly doesn't have a sensible workaround due
to the way DBIC is built. DBIC can do truly wonderful things with the aid of
subselects, and does so automatically when necessary. The list of situations
when a subselect is necessary is long and still changes often, so it can not
be exhaustively enumerated here. The general rule of thumb is a joined
has_many relationship with limit/group
applied to the left part of the join.
.PP
In its "pursuit of standards" Microsft SQL Server goes to great lengths to
forbid the use of ordered subselects. This breaks a very useful group of
searches like "Give me things number 4 to 6 (ordered by name), and prefetch
all their relations, no matter how many". While there is a hack which fools
the syntax checker, the optimizer may \fBstill elect to break the subselect\fR.
Testing has determined that while such breakage does occur (the test suite
contains an explicit test which demonstrates the problem), it is relative
rare. The benefits of ordered subselects are on the other hand too great to be
outright disabled for MSSQL.
.PP
Thus compromise between usability and perfection is the MSSQL-specific
resultset attribute \f(CW\*(C`unsafe_subselect_ok\*(C'\fR.
It is deliberately not possible to set this on the Storage level, as the user
should inspect (and preferably regression-test) the return of every such
ResultSet individually. The example above would work if written like:
.PP
.Vb 6
\& $rs\->search ({}, {
\&  unsafe_subselect_ok => 1,
\&  prefetch => \*(Aqrelation\*(Aq,
\&  rows => 2,
\&  offset => 3,
\& });
.Ve
.PP
If it is possible to rewrite the \fBsearch()\fR in a way that will avoid the need
for this flag \- you are urged to do so. If DBIC internals insist that an
ordered subselect is necessary for an operation, and you believe there is a
different/better way to get the same result \- please file a bugreport.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
