.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Plugin::Authorization::ACL::Engine 3pm"
.TH Catalyst::Plugin::Authorization::ACL::Engine 3pm 2014-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Plugin::Authorization::ACL::Engine \- The backend that computes ACL
checks for Catalyst::Plugin::Authorization::ACL.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&        # internal
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .IP "new $app" 4
.el .IP "new \f(CW$app\fR" 4
.IX Item "new $app"
Create a new rule engine for \f(CW$app\fR
.ie n .IP "add_allow $cond" 4
.el .IP "add_allow \f(CW$cond\fR" 4
.IX Item "add_allow $cond"
.PD 0
.ie n .IP "add_deny $cond" 4
.el .IP "add_deny \f(CW$cond\fR" 4
.IX Item "add_deny $cond"
.PD
fudge \f(CW$cond\fR, make cond into a rule, and \f(CW\*(C`add_rule\*(C'\fR
.ie n .IP "add_rule $path, $rule" 4
.el .IP "add_rule \f(CW$path\fR, \f(CW$rule\fR" 4
.IX Item "add_rule $path, $rule"
Add rule to all actions under \f(CW$path\fR
.ie n .IP "append_rule_to_action $action, $index, $rule, $cxt" 4
.el .IP "append_rule_to_action \f(CW$action\fR, \f(CW$index\fR, \f(CW$rule\fR, \f(CW$cxt\fR" 4
.IX Item "append_rule_to_action $action, $index, $rule, $cxt"
Append \f(CW$rule\fR to \f(CW$action\fR in slot \f(CW$index\fR, and store context info \f(CW$cxt\fR
for error reporting.
.ie n .IP "check_action_rules $action" 4
.el .IP "check_action_rules \f(CW$action\fR" 4
.IX Item "check_action_rules $action"
Evaluate the rules for an action
.ie n .IP "fudge_condition $thingy" 4
.el .IP "fudge_condition \f(CW$thingy\fR" 4
.IX Item "fudge_condition $thingy"
Converts a \f(CW$thingy\fR into a subref, for DWIM goodness. See the main ACL docs.
.ie n .IP "get_action_data $action" 4
.el .IP "get_action_data \f(CW$action\fR" 4
.IX Item "get_action_data $action"
.PD 0
.ie n .IP "get_cxt_for_rule $rule" 4
.el .IP "get_cxt_for_rule \f(CW$rule\fR" 4
.IX Item "get_cxt_for_rule $rule"
.IP get_rules 4
.IX Item "get_rules"
.PD
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is the engine which executes the access control checks for
Catalyst::Plugin::Authorization::ACL. Please use that module directly.
.SH TODO
.IX Header "TODO"
.Vb 1
\&    * external uris \-> private paths
.Ve
