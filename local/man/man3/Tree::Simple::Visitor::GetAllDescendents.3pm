.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::GetAllDescendents 3pm"
.TH Tree::Simple::Visitor::GetAllDescendents 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::GetAllDescendents \- A Visitor for fetching all the descendents of a Tree::Simple object
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::GetAllDescendents;
\&
\&  # create an instance of our visitor
\&  my $visitor = Tree::Simple::Visitor::GetAllDescendents\->new();
\&
\&  # pass the visitor to a Tree::Simple object
\&  $tree\->accept($visitor);
\&
\&  # you can also get the descendents
\&  # back as an array of node values
\&  my @descendents = $visitor\->getDescendents();
\&
\&  # for more complex node objects, you can specify
\&  # a node filter which will be used to extract the
\&  # information desired from each node
\&  $visitor\->setNodeFilter(sub {
\&                my ($t) = @_;
\&                return $t\->getNodeValue()\->description();
\&                });
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Given a Tree::Simple instance this Visitor will return all the descendents recursively on down the hierarchy.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR method to customize its behavior.
.IP "\fBsetTraversalMethod ($visitor)\fR" 4
.IX Item "setTraversalMethod ($visitor)"
By default we will use Tree::Simple's built in depth-first (pre-order) traverse method. If however, you desire the descendents to be returned in a different ordering, this can be accomplished using a different traversal method, you can supply a \f(CW$visitor\fR object implementing that traversal type to this method (See  \fBTree::Simple::Visitor::BreadthFirstTraversal\fR, \fBTree::Simple::Visitor::PreOrderTraversal\fR and \fBTree::Simple::Visitor::PostOrderTraversal\fR).
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as its \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are collected. This can be used to customize output, or to gather specific information from a more complex tree node. The filter function should accept a single argument, which is the current Tree::Simple object.
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by Tree::Simple's \f(CW\*(C`accept\*(C'\fR method. It can also be used on its own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple object), and will throw and exception otherwise.
.IP \fBgetAllDescendents\fR 4
.IX Item "getAllDescendents"
This method will give back and array of descendents in depth-first order (pre-order) or in the order specified by the \f(CW\*(C`setTraversalMethod\*(C'\fR. If called in scalar context it will give an array reference, in list context it will return a regular array. This method is the same as calling \f(CW\*(C`getResults\*(C'\fR.
.SH Repository
.IX Header "Repository"
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory>
.SH SUPPORT
.IX Header "SUPPORT"
Bugs should be reported via the CPAN bug tracker at
.PP
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory/issues>
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the \fBTree::Simple\fR module, you should refer to that module for more information.
.SH AUTHOR
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
