.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::RunScript::Trait::Dump 3pm"
.TH DBIx::Class::Migration::RunScript::Trait::Dump 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::RunScript::Trait::Dump \- Dump fixtures
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use DBIx::Class::Migration::RunScript;
\&
\&    builder {
\&      \*(AqSchemaLoader\*(Aq,
\&      \*(AqDump\*(Aq,
\&      sub {
\&        shift\->dump(\*(Aqcountries\*(Aq);
\&      };
\&    };
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a Moo::Role that adds a \f(CW\*(C`dump\*(C'\fR method to your run script.  This
will let you dump fixtures from your runscripts, based on previously defined
fixture configurations.
.PP
This might be useful to you if you are building fixtures if they don't already
exist (see DBIx::Class::Migration::RunScript::Trait::Populate) and then want
to dump them as part of building up your database.  For example:
.PP
.Vb 1
\&    use DBIx::Class::Migration::RunScript;
\&
\&    migrate {
\&      my $self = shift;
\&      if($self\->set_has_fixtures(\*(Aqall_tables\*(Aq)) {
\&        $self\->populate(\*(Aqall_tables\*(Aq);
\&      } else {
\&        $self\->schema
\&          \->resultset(\*(AqCountry\*(Aq)
\&          \->populate([
\&            [\*(Aqcode\*(Aq],
\&            [\*(Aqbel\*(Aq],
\&            [\*(Aqdeu\*(Aq],
\&            [\*(Aqfra\*(Aq],
\&          ]);
\&
\&        $self\->dump(\*(Aqall_tables\*(Aq);
\&      }
\&    };
.Ve
.PP
In the above example if the fixture set exists and has previously been dumped
we will populate the database with it.  Else, we will create some data manually
and then dump it so that next time it is available.
.PP
This trait requires a \f(CW\*(C`schema\*(C'\fR previously defined, such as provided by
DBIx::Class::Migration::RunScript::Trait::SchemaLoader.
.PP
This trait is one of the defaults for the exported method \f(CW\*(C`migrate\*(C'\fR in
DBIx::Class::Migration::RunScript.
.SH methods
.IX Header "methods"
This class defines the follow methods.
.SS dump
.IX Subsection "dump"
Requires \f(CW$arg\fR || \f(CW@args\fR
.PP
Given a fixture set (or list of sets), use DBIx::Class::Fixtures to dump
them from the current database.
.PP
When naming sets, you skip the '.json' extension.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::RunScript
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
