.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::FormValidator::Constraints::Dates 3pm"
.TH Data::FormValidator::Constraints::Dates 3pm 2017-08-28 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Data::FormValidator::Constraints::Dates \- Validate Dates and Times
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Data::FormValidator::Constraints::Dates qw(date_and_time);
\&
\&    # In a DFV profile...
\&    constraint_methods => {
\&        # \*(Aqpp\*(Aq denotes AM|PM for 12 hour representation
\&        my_time_field => date_and_time(\*(AqMM/DD/YYYY hh:mm:ss pp\*(Aq),
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SS date_and_time
.IX Subsection "date_and_time"
\&\fBNote:\fR This is a new module is a new addition to Data::FormValidator and is
should be considered "Beta".
.PP
This constraint creates a regular expression based on the format string
passed in to validate your date against. It understands the following symbols:
.PP
.Vb 7
\&    Y   year  (numeric)
\&    M   month (numeric)
\&    D   day   (numeric)
\&    h   hour
\&    m   minute
\&    s   second
\&    p   AM|PM
.Ve
.PP
Other parts of the string become part of the regular expression, so you can
do perlish things like this to create more complex expressions:
.PP
.Vb 1
\&    \*(AqMM?/DD?/YYYY|YYYY\-MM?\-DD?\*(Aq
.Ve
.PP
Internally Date::Calc is used to test the functions.
.SH "BACKWARDS COMPATIBILITY"
.IX Header "BACKWARDS COMPATIBILITY"
This older, more awkward interface is supported:
.PP
.Vb 8
\&    # In a Data::FormValidator Profile:
\&    validator_packages => [qw(Data::FormValidator::Constraints::Dates)],
\&    constraints => {
\&        date_and_time_field       => {
\&            constraint_method => \*(Aqdate_and_time\*(Aq,
\&            params=>[\e\*(AqMM/DD/YYYY hh:mm:ss pp\*(Aq], # \*(Aqpp\*(Aq denotes AM|PM for 12 hour representation
\&        },
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP o 4
.IX Item "o"
Data::FormValidator
.IP o 4
.IX Item "o"
Data::FormValidator::Constraints::DateTime  \- This alternative features
returning dates as DateTime objects and validating against the date formats
required for the MySQL and PostgreSQL databases.
.SH AUTHOR
.IX Header "AUTHOR"
Mark Stosberg, <mark@summersault.com>
.PP
Featuring clever code by Jan Krynicky.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003\-2005 by Mark Stosberg
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
