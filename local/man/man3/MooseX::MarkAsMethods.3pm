.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::MarkAsMethods 3pm"
.TH MooseX::MarkAsMethods 3pm 2012-05-31 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::MarkAsMethods \- Mark overload code symbols as methods
.SH VERSION
.IX Header "VERSION"
This document describes version 0.15 of MooseX::MarkAsMethods \- released May 30, 2012 as part of MooseX-MarkAsMethods.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package Foo;
\&    use Moose;
\&
\&    # mark overloads as methods and wipe other non\-methods
\&    use MooseX::MarkAsMethods autoclean => 1;
\&
\&    # define overloads, etc as normal
\&    use overload \*(Aq""\*(Aq => sub { shift\->stringify };
\&
\&    package Baz;
\&    use Moose::Role;
\&    use MooseX::MarkAsMethods autoclean => 1;
\&
\&    # overloads defined in a role will "just work" when the role is
\&    # composed into a class; they MUST use the anon\-sub style invocation
\&    use overload \*(Aq""\*(Aq => sub { shift\->stringify };
\&
\&    # additional methods generated outside Class::MOP/Moose can be marked, too
\&    use constant foo => \*(Aqbar\*(Aq;
\&    _\|_PACKAGE_\|_\->meta\->mark_as_method(\*(Aqfoo\*(Aq);
\&
\&    package Bar;
\&    use Moose;
\&
\&    # order is important!
\&    use namespace::autoclean;
\&    use MooseX::MarkAsMethods;
\&
\&    # ...
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
MooseX::MarkAsMethods allows one to easily mark certain functions as Moose
methods.  This will allow other packages such as namespace::autoclean to
operate without blowing away your overloads.  After using
MooseX::MarkAsMethods your overloads will be recognized by Class::MOP as
being methods, and class extension as well as composition from roles with
overloads will "just work".
.PP
By default we check for overloads, and mark those functions as methods.
.PP
If \f(CW\*(C`autoclean =&gt; 1\*(C'\fR is passed to import on using this module, we will invoke
namespace::autoclean to clear out non-methods.
.SH "TRAITS APPLIED"
.IX Header "TRAITS APPLIED"
Using this package causes a trait to be applied to your metaclass (for both
roles and classes), that provides a \fBmark_as_method()\fR method.  You can use this
to mark newly generated methods at runtime (e.g. during class composition)
that some other package has created for you.
.PP
\&\fBmark_as_method()\fR is invoked with one or more names to mark as a method.  We die
on any error (e.g. name not in symbol table, already a method, etc).  e.g.
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->meta\->mark_as_method(\*(Aqnewly_generated\*(Aq);
.Ve
.PP
e.g. say you have some sugar from another package that creates accessors of
some sort; you could mark them as methods via a method modifier:
.PP
.Vb 2
\&    # called as _\|_PACKAGE_\|_\->foo_generator(\*(Aqname\*(Aq, ...)
\&    after \*(Aqfoo_generator\*(Aq => sub {
\&
\&        shift\->meta\->mark_as_method(shift);
\&    };
.Ve
.SH "IMPLICATIONS FOR ROLES"
.IX Header "IMPLICATIONS FOR ROLES"
Using MooseX::MarkAsMethods in a role will cause Moose to track and treat your
overloads like any other method defined in the role, and things will "just
work".  That's it.
.PP
Except...  note that due to the way overloads, roles, and Moose work, you'll
need to use the coderef or anonymous subroutine approach to overload
declaration, or things will not work as you expect.  Remember, we're talking
about _methods_ here, so we need to make it easy for overload to find
the right method.  The easiest (and supported) way to do this is to create an
anonymous sub to wrap the overload method.
.PP
That is, this will work:
.PP
.Vb 2
\&    # note method resolution, things will "just work"
\&    use overload \*(Aq""\*(Aq => sub { shift\->stringify };
.Ve
.PP
\&...and this will not:
.PP
.Vb 1
\&    use overload \*(Aq""\*(Aq => \*(Aqstringify\*(Aq;
.Ve
.PP
\&...and will result in an error message like:
.PP
.Vb 2
\&    # wah\-wah
\&    Can\*(Aqt resolve method "???" overloading """" in package "overload"
.Ve
.SH CAVEATS
.IX Header "CAVEATS"
.SS Roles
.IX Subsection "Roles"
See the "IMPLICATIONS FOR ROLES" section, above.
.SS meta\->\fBmark_as_method()\fP
.IX Subsection "meta->mark_as_method()"
\&\fBYou almost certainly don't need or want to do this.\fR  CMOP/Moose are fairly
good about determining what is and what isn't a method, but not perfect.
Before using this method, you should pause and think about why you need to.
.SS namespace::autoclean
.IX Subsection "namespace::autoclean"
As currently implemented, we run our "method maker" at the end of the calling
package's compile scope (B::Hooks::EndOfScope).  As namespace::autoclean
does the same thing, it's important that if namespace::autoclean is used that
it be used BEFORE MooseX::MarkAsMethods, so that its end_of_scope block is
run after ours.
.PP
e.g.
.PP
.Vb 3
\&    # yes!
\&    use namespace::autoclean;
\&    use MooseX::MarkAsMethods;
\&
\&    # no \-\- overloads will be removed
\&    use MooseX::MarkAsMethods;
\&    use namespace::autoclean;
.Ve
.PP
The easiest way to invoke this module and clean out non-methods without having
to worry about ordering is:
.PP
.Vb 1
\&    use MooseX::MarkAsMethods autoclean => 1;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see those modules/websites for more information related to this module.
.IP \(bu 4
, , , ,
.IX Xref "overload B::Hooks::EndOfScope namespace::autoclean Class::MOP"
.IP \(bu 4
\&.
.IX Xref "Moose"
.IP \(bu 4
 does allow for overload application from
.IX Xref "MooseX::Role::WithOverloading"
.IP \(bu 4
roles, but it does this by copying the overload symbols from the (not
.IP \(bu 4
\&'ed role) the symbols handing overloads during class
.IX Xref "namespace::autoclean"
.IP \(bu 4
composition; we work by marking the overloads as methods and letting
.IP \(bu 4
CMOP/Moose handle them.
.SH SOURCE
.IX Header "SOURCE"
The development version is on github at <http://github.com/RsrchBoy/moosex\-markasmethods>
and may be cloned from <git://github.com/RsrchBoy/moosex\-markasmethods.git>
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
https://github.com/RsrchBoy/moosex\-markasmethods/issues
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH AUTHOR
.IX Header "AUTHOR"
Chris Weyl <cweyl@alumni.drew.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2011 by Chris Weyl.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The GNU Lesser General Public License, Version 2.1, February 1999
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 296:" 4
.IX Item "Around line 296:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 300:" 4
.IX Item "Around line 300:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 304:" 4
.IX Item "Around line 304:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 312:" 4
.IX Item "Around line 312:"
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.Sp
Nested L<> are illegal.  Pretending inner one is X<...> so can continue looking for other errors.
.IP "Around line 320:" 4
.IX Item "Around line 320:"
alternative text 'CMOP/Moose handle them.' contains non-escaped | or /
