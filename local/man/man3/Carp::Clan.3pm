.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Carp::Clan 3pm"
.TH Carp::Clan 3pm 2019-09-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Carp::Clan \- Report errors from perspective of caller of a "clan" of modules
.SH VERSION
.IX Header "VERSION"
version 6.08
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& carp    \- warn of errors (from perspective of caller)
\&
\& cluck   \- warn of errors with stack backtrace
\&
\& croak   \- die of errors (from perspective of caller)
\&
\& confess \- die of errors with stack backtrace
\&
\&    use Carp::Clan qw(^MyClan::);
\&    croak "We\*(Aqre outta here!";
\&
\&    use Carp::Clan;
\&    confess "This is how we got here!";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is based on "\f(CW\*(C`Carp.pm\*(C'\fR" from Perl 5.005_03. It has been
modified to skip all package names matching the pattern given in
the "use" statement inside the "\f(CWqw()\fR" term (or argument list).
.PP
Suppose you have a family of modules or classes named "Pack::A",
"Pack::B" and so on, and each of them uses "\f(CW\*(C`Carp::Clan qw(^Pack::);\*(C'\fR"
(or at least the one in which the error or warning gets raised).
.PP
Thus when for example your script "tool.pl" calls module "Pack::A",
and module "Pack::A" calls module "Pack::B", an exception raised in
module "Pack::B" will appear to have originated in "tool.pl" where
"Pack::A" was called, and not in "Pack::A" where "Pack::B" was called,
as the unmodified "\f(CW\*(C`Carp.pm\*(C'\fR" would try to make you believe \f(CW\*(C`:\-)\*(C'\fR.
.PP
This works similarly if "Pack::B" calls "Pack::C" where the
exception is raised, et cetera.
.PP
In other words, this blames all errors in the "\f(CW\*(C`Pack::*\*(C'\fR" modules
on the user of these modules, i.e., on you. \f(CW\*(C`;\-)\*(C'\fR
.PP
The skipping of a clan (or family) of packages according to a pattern
describing its members is necessary in cases where these modules are
not classes derived from each other (and thus when examining \f(CW@ISA\fR
\&\- as in the original "\f(CW\*(C`Carp.pm\*(C'\fR" module \- doesn't help).
.PP
The purpose and advantage of this is that a "clan" of modules can work
together (and call each other) and throw exceptions at various depths
down the calling hierarchy and still appear as a monolithic block (as
though they were a single module) from the perspective of the caller.
.PP
In case you just want to ward off all error messages from the module
in which you "\f(CW\*(C`use Carp::Clan\*(C'\fR", i.e., if you want to make all error
messages or warnings to appear to originate from where your module
was called (this is what you usually used to "\f(CW\*(C`use Carp;\*(C'\fR" for \f(CW\*(C`;\-)\*(C'\fR),
instead of in your module itself (which is what you can do with a
"die" or "warn" anyway), you do not need to provide a pattern,
the module will automatically provide the correct one for you.
.PP
I.e., just "\f(CW\*(C`use Carp::Clan;\*(C'\fR" without any arguments and call "carp"
or "croak" as appropriate, and they will automatically defend your
module against all blames!
.PP
In other words, a pattern is only necessary if you want to make
several modules (more than one) work together and appear as though
they were only one.
.SS "Forcing a Stack Trace"
.IX Subsection "Forcing a Stack Trace"
As a debugging aid, you can force "\f(CW\*(C`Carp::Clan\*(C'\fR" to treat a "croak" as
a "confess" and a "carp" as a "cluck". In other words, force a detailed
stack trace to be given. This can be very helpful when trying to
understand why, or from where, a warning or error is being generated.
.PP
This feature is enabled either by "importing" the non-existent symbol
\&'verbose', or by setting the global variable "\f(CW$Carp::Clan::Verbose\fR"
to a true value.
.PP
You would typically enable it by saying
.PP
.Vb 1
\&    use Carp::Clan qw(verbose);
.Ve
.PP
Note that you can both specify a "family pattern" and the string "verbose"
inside the "\f(CWqw()\fR" term (or argument list) of the "use" statement, but
consider that a pattern of packages to skip is pointless when "verbose"
causes a full stack trace anyway.
.SH BUGS
.IX Header "BUGS"
The "\f(CW\*(C`Carp::Clan\*(C'\fR" routines don't handle exception objects currently.
If called with a first argument that is a reference, they simply
call "\f(CWdie()\fR" or "\f(CWwarn()\fR", as appropriate.
.PP
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Carp-Clan>
(or bug\-Carp\-Clan@rt.cpan.org <mailto:bug-Carp-Clan@rt.cpan.org>).
.SH AUTHOR
.IX Header "AUTHOR"
Steffen Beyer <STBEY@cpan.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Karen Etheridge <ether@cpan.org>
.IP \(bu 4
Joshua ben Jore <jjore@cpan.org>
.IP \(bu 4
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2001 by Steffen Beyer, Joshua ben Jore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
