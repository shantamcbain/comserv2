.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::TraitFor::Model::DBIC::Schema::SchemaProxy 3pm"
.TH Catalyst::TraitFor::Model::DBIC::Schema::SchemaProxy 3pm 2023-07-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::TraitFor::Model::DBIC::Schema::SchemaProxy \- Proxy Schema Methods and
Options from Model
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Allows you to call your DBIx::Class::Schema methods directly on the Model
instance, and passes config options to your DBIx::Class::Schema and
DBIx::Class::ResultSet attributes at \f(CW\*(C`BUILD\*(C'\fR time.
.PP
Methods and attributes local to your \f(CW\*(C`Model\*(C'\fR take precedence over
DBIx::Class::Schema or DBIx::Class::ResultSet methods and attributes.
.SH "CREATING SCHEMA CONFIG ATTRIBUTES"
.IX Header "CREATING SCHEMA CONFIG ATTRIBUTES"
To create attributes in your \f(CW\*(C`Schema.pm\*(C'\fR, use either Moose or
Class::Accessor::Grouped, which is inherited from by all DBIx::Class
classes automatically. E.g.:
.PP
.Vb 5
\&    _\|_PACKAGE_\|_\->mk_group_accessors(simple => qw/
\&        config_key1
\&        config_key2
\&        ...
\&    /);
.Ve
.PP
Or with Moose:
.PP
.Vb 2
\&    use Moose;
\&    has config_key1 => (is => \*(Aqrw\*(Aq, default => \*(Aqdefault_value\*(Aq);
.Ve
.PP
This code can be added after the md5sum on DBIx::Class::Schema::Loader
generated schemas.
.PP
At app startup, any non-local options will be passed to these accessors, and can
be accessed as usual via \f(CW\*(C`$schema\->config_key1\*(C'\fR.
.PP
These config values go into your \f(CW\*(C`Model::DB\*(C'\fR block, along with normal config
values.
.SH "CREATING RESULTSET CONFIG ATTRIBUTES"
.IX Header "CREATING RESULTSET CONFIG ATTRIBUTES"
You can create classdata on DBIx::Class::ResultSet classes to hold values
from Catalyst config.
.PP
The code for this looks something like this:
.PP
.Vb 1
\&    package MySchema::ResultSet::Foo;
\&
\&    use base \*(AqDBIx::Class::ResultSet\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->mk_group_accessors(inherited => qw/
\&        rs_config_key1
\&        rs_config_key2
\&        ...
\&    /);
\&    _\|_PACKAGE_\|_\->rs_config_key1(\*(Aqdefault_value\*(Aq);
.Ve
.PP
Or, if you prefer Moose:
.PP
.Vb 1
\&    package MySchema::ResultSet::Foo;
\&
\&    use Moose;
\&    use MooseX::NonMoose;
\&    use MooseX::ClassAttribute;
\&    extends \*(AqDBIx::Class::ResultSet\*(Aq;
\&
\&    sub BUILDARGS { $_[2] } # important
\&
\&    class_has rs_config_key1 => (is => \*(Aqrw\*(Aq, default => \*(Aqdefault_value\*(Aq);
\&
\&    ...
\&
\&    _\|_PACKAGE_\|_\->meta\->make_immutable;
\&
\&    1;
.Ve
.PP
In your catalyst config, use the generated Model name as the config key, e.g.:
.PP
.Vb 3
\&    <Model::DB::Users>
\&        strict_passwords 1
\&    </Model::DB::Users>
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Model::DBIC::Schema, DBIx::Class::Schema
.SH AUTHOR
.IX Header "AUTHOR"
See "AUTHOR" in Catalyst::Model::DBIC::Schema and
"CONTRIBUTORS" in Catalyst::Model::DBIC::Schema.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
See "COPYRIGHT" in Catalyst::Model::DBIC::Schema.
.SH LICENSE
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it
under the same terms as Perl itself.
