.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Path::FindDev 3pm"
.TH Path::FindDev 3pm 2017-03-10 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Path::FindDev \- Find a development path somewhere in an upper hierarchy.
.SH VERSION
.IX Header "VERSION"
version v0.5.3
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This package is mostly a glue layer around \f(CW\*(C`Path::IsDev\*(C'\fR
with a few directory walking tricks.
.PP
.Vb 1
\&    use Path::FindDev qw( find_dev );
\&
\&    if ( my $root = find_dev(\*(Aq/some/path/to/something/somewhere\*(Aq)) {
\&        print "development root = $root";
\&    } else {
\&        print "No development root :(";
\&    }
.Ve
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS find_dev
.IX Subsection "find_dev"
.Vb 1
\&    my $result = find_dev(\*(Aq/some/path\*(Aq);
.Ve
.PP
If a \f(CW\*(C`dev\*(C'\fR directory is found at, or above, \f(CW\*(C`/some/path\*(C'\fR, it will be returned
as a \f(CW\*(C`Path::Tiny\*(C'\fR
.PP
If you pass configurations to import:
.PP
.Vb 1
\&    use Path::FindDev find_dev => { set => $someset };
.Ve
.PP
Then the exported \f(CW\*(C`find_dev\*(C'\fR will pass that set name to \f(CW\*(C`Path::IsDev\*(C'\fR.
.PP
Though you should only do this if
.IP \(bu 4
the default set is inadequate for your usage
.IP \(bu 4
you don't want the set to be overridden by \f(CW%ENV\fR
.PP
Additionally, you can call find_dev directly:
.PP
.Vb 1
\&    require Path::FindDev;
\&
\&    my $result = Path::FindDev::find_dev(\*(Aq/some/path\*(Aq);
.Ve
.PP
Which by design inhibits your capacity to specify an alternative set in code.
.SH "EXAMPLE USE-CASES"
.IX Header "EXAMPLE USE-CASES"
Have you ever found yourself doing
.PP
.Vb 2
\&    use FindBin;
\&    use lib "$FindBin::Bin/../../../tlib"
.Ve
.PP
In a test?
.PP
Have you found yourself paranoid of file-system semantics and tried
.PP
.Vb 3
\&    use FindBin;
\&    use Path::Tiny qw(path)
\&    use lib path($FindBin::Bin)\->parent\->parent\->parent\->child(\*(Aqtlib\*(Aq)\->stringify;
.Ve
.PP
Have you ever done either of the above in a test, only to
find you've needed to move the test to a deeper hierarchy,
and thus, need to re-write all your path resolution?
.PP
Have you ever had this problem for multiple files?
.PP
No more!
.PP
.Vb 3
\&    use FindBin;
\&    use Path::FindDev qw(find_dev);
\&    use lib find_dev($FindBin::Bin)\->child(\*(Aqt\*(Aq,\*(Aqtlib\*(Aq)\->stringify;
.Ve
.PP
^ Should work, regardless of which test you put it in, and regardless
of what \f(CW$CWD\fR happens to be when you call it.
.SH AUTHOR
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2017 by Kent Fredric <kentfredric@gmail.com>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
