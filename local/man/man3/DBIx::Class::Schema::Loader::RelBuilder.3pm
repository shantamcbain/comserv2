.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Schema::Loader::RelBuilder 3pm"
.TH DBIx::Class::Schema::Loader::RelBuilder 3pm 2024-01-06 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Schema::Loader::RelBuilder \- Builds relationships for DBIx::Class::Schema::Loader
.SH SYNOPSIS
.IX Header "SYNOPSIS"
See DBIx::Class::Schema::Loader and DBIx::Class::Schema::Loader::Base.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class builds relationships for DBIx::Class::Schema::Loader.  This
is module is not (yet) for external use.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Arguments: \f(CW$loader\fR object
.SS generate_code
.IX Subsection "generate_code"
Arguments:
.PP
.Vb 5
\&    [
\&        [ local_moniker1 (scalar), fk_info1 (arrayref), uniq_info1 (arrayref) ]
\&        [ local_moniker2 (scalar), fk_info2 (arrayref), uniq_info2 (arrayref) ]
\&        ...
\&    ]
.Ve
.PP
This generates the code for the relationships of each table.
.PP
\&\f(CW\*(C`local_moniker\*(C'\fR is the moniker name of the table which had the REFERENCES
statements.  The fk_info arrayref's contents should take the form:
.PP
.Vb 10
\&    [
\&        {
\&            local_table    => \*(Aqsome_table\*(Aq,
\&            local_moniker  => \*(AqSomeTable\*(Aq,
\&            local_columns  => [ \*(Aqcol2\*(Aq, \*(Aqcol3\*(Aq ],
\&            remote_table   => \*(Aqanother_table_moniker\*(Aq,
\&            remote_moniker => \*(AqAnotherTableMoniker\*(Aq,
\&            remote_columns => [ \*(Aqcol5\*(Aq, \*(Aqcol7\*(Aq ],
\&        },
\&        {
\&            local_table    => \*(Aqsome_other_table\*(Aq,
\&            local_moniker  => \*(AqSomeOtherTable\*(Aq,
\&            local_columns  => [ \*(Aqcol1\*(Aq, \*(Aqcol4\*(Aq ],
\&            remote_table   => \*(Aqyet_another_table_moniker\*(Aq,
\&            remote_moniker => \*(AqYetAnotherTableMoniker\*(Aq,
\&            remote_columns => [ \*(Aqcol1\*(Aq, \*(Aqcol2\*(Aq ],
\&        },
\&        # ...
\&    ],
.Ve
.PP
The uniq_info arrayref's contents should take the form:
.PP
.Vb 8
\&    [
\&        [
\&            uniq_constraint_name         => [ \*(Aqcol1\*(Aq, \*(Aqcol2\*(Aq ],
\&        ],
\&        [
\&            another_uniq_constraint_name => [ \*(Aqcol1\*(Aq, \*(Aqcol2\*(Aq ],
\&        ],
\&    ],
.Ve
.PP
This method will return the generated relationships as a hashref keyed on the
class names.  The values are arrayrefs of hashes containing method name and
arguments, like so:
.PP
.Vb 12
\&    {
\&        \*(AqSome::Source::Class\*(Aq => [
\&            { method => \*(Aqbelongs_to\*(Aq, arguments => [
\&              \*(Aqcol1\*(Aq, \*(AqAnother::Source::Class\*(Aq ] },
\&            { method => \*(Aqhas_many\*(Aq, arguments => [
\&              \*(Aqanothers\*(Aq, \*(AqYet::Another::Source::Class\*(Aq, \*(Aqcol15\*(Aq ] },
\&        ],
\&        \*(AqAnother::Source::Class\*(Aq => [
\&            # ...
\&        ],
\&        # ...
\&    }
.Ve
.SH AUTHORS
.IX Header "AUTHORS"
See "AUTHORS" in DBIx::Class::Schema::Loader.
.SH LICENSE
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
