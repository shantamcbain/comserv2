.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Plack::App::WrapCGI 3pm"
.TH Plack::App::WrapCGI 3pm 2024-01-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Plack::App::WrapCGI \- Compiles a CGI script as PSGI application
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Plack::App::WrapCGI;
\&
\&  my $app = Plack::App::WrapCGI\->new(script => "/path/to/script.pl")\->to_app;
\&
\&  # if you want to execute as a real CGI script
\&  my $app = Plack::App::WrapCGI\->new(script => "/path/to/script.rb", execute => 1)\->to_app;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Plack::App::WrapCGI compiles a CGI script into a PSGI application
using CGI::Compile and CGI::Emulate::PSGI, and runs it with any
PSGI server as a PSGI application.
.PP
See also Plack::App::CGIBin if you have a directory that contains a
lot of CGI scripts and serve them like Apache's mod_cgi.
.SH METHODS
.IX Header "METHODS"
.IP new 4
.IX Item "new"
.Vb 1
\&  my $app = Plack::App::WrapCGI\->new(%args);
.Ve
.Sp
Creates a new PSGI application using the given script. \fR\f(CI%args\fR\fI\fR has two
parameters:
.RS 4
.IP script 8
.IX Item "script"
The path to a CGI-style program. This is a required parameter.
.IP execute 8
.IX Item "execute"
An optional parameter. When set to a true value, this app will run the script
with a CGI-style \f(CW\*(C`fork\*(C'\fR/\f(CW\*(C`exec\*(C'\fR model. Note that you may run programs written
in other languages with this approach.
.RE
.RS 4
.RE
.SH AUTHOR
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Plack::App::CGIBin
