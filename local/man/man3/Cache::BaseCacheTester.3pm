.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Cache::BaseCacheTester 3pm"
.TH Cache::BaseCacheTester 3pm 2015-01-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Cache::BaseCacheTester \-\- abstract cache tester base class
.SH DESCRIPTION
.IX Header "DESCRIPTION"
BaseCacheTester provides functionality common to all instances of a
class that will test cache implementations.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
BaseCacheTester provides functionality common to all instances of a
class that will test cache implementations.
.PP
.Vb 1
\&  package Cache::MyCacheTester;
\&
\&  use vars qw( @ISA );
\&  use Cache::BaseCacheTester;
\&
\&  @ISA = qw( Cache::BaseCacheTester );
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .IP "\fBnew( \fR\fB$base_test_count\fR\fB )\fR" 4
.el .IP "\fBnew( \fR\f(CB$base_test_count\fR\fB )\fR" 4
.IX Item "new( $base_test_count )"
Construct a new BaseCacheTester and initialize the test count to
\&\fR\f(CI$base_test_count\fR\fI\fR.
.IP "\fBok( )\fR" 4
.IX Item "ok( )"
Print a message to stdout in the form "ok \f(CW$test_count\fR" and
increments the test count.
.ie n .IP "\fBnot_ok( \fR\fB$message\fR\fB )\fR" 4
.el .IP "\fBnot_ok( \fR\f(CB$message\fR\fB )\fR" 4
.IX Item "not_ok( $message )"
Print a message to stdout in the form "not ok \f(CW$test_count\fR # \fR\f(CI$message\fR\fI\fR "
and increments the test count.
.ie n .IP "\fBskip( \fR\fB$message\fR\fB )\fR" 4
.el .IP "\fBskip( \fR\f(CB$message\fR\fB )\fR" 4
.IX Item "skip( $message )"
Print a message to stdout in the form "ok \f(CW$test_count\fR # skipped \fR\f(CI$message\fR\fI\fR "
and increments the test count.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::CacheTester, Cache::SizeAwareCacheTester
.SH AUTHOR
.IX Header "AUTHOR"
Original author: DeWitt Clinton <dewitt@unto.net>
.PP
Last author:     \f(CW$Author:\fR dclinton $
.PP
Copyright (C) 2001\-2003 DeWitt Clinton
