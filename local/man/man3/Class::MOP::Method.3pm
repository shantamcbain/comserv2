.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Class::MOP::Method 3pm"
.TH Class::MOP::Method 3pm 2024-01-21 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Class::MOP::Method \- Method Meta Object
.SH VERSION
.IX Header "VERSION"
version 2.2207
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The Method Protocol is very small, since methods in Perl 5 are just
subroutines in a specific package. We provide a very basic
introspection interface.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "\fBClass::MOP::Method\->wrap($code, \fR\fB%options\fR\fB)\fR" 4
.el .IP "\fBClass::MOP::Method\->wrap($code, \fR\f(CB%options\fR\fB)\fR" 4
.IX Item "Class::MOP::Method->wrap($code, %options)"
This is the constructor. It accepts a method body in the form of
either a code reference or a Class::MOP::Method instance, followed
by a hash of options.
.Sp
The options are:
.RS 4
.IP \(bu 8
name
.Sp
The method name (without a package name). This is required if \f(CW$code\fR
is a coderef.
.IP \(bu 8
package_name
.Sp
The package name for the method. This is required if \f(CW$code\fR is a
coderef.
.IP \(bu 8
associated_metaclass
.Sp
An optional Class::MOP::Class object. This is the metaclass for the
method's class.
.RE
.RS 4
.RE
.ie n .IP \fR\fB$metamethod\fR\fB\->clone(%params)\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->clone(%params)\fR 4
.IX Item "$metamethod->clone(%params)"
This makes a shallow clone of the method object. In particular,
subroutine reference itself is shared between all clones of a given
method.
.Sp
When a method is cloned, the original method object will be available
by calling \f(CW\*(C`original_method\*(C'\fR on the clone.
.ie n .IP \fR\fB$metamethod\fR\fB\->body\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->body\fR 4
.IX Item "$metamethod->body"
This returns a reference to the method's subroutine.
.ie n .IP \fR\fB$metamethod\fR\fB\->name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->name\fR 4
.IX Item "$metamethod->name"
This returns the method's name.
.ie n .IP \fR\fB$metamethod\fR\fB\->package_name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->package_name\fR 4
.IX Item "$metamethod->package_name"
This returns the method's package name.
.ie n .IP \fR\fB$metamethod\fR\fB\->fully_qualified_name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->fully_qualified_name\fR 4
.IX Item "$metamethod->fully_qualified_name"
This returns the method's fully qualified name (package name and
method name).
.ie n .IP \fR\fB$metamethod\fR\fB\->associated_metaclass\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->associated_metaclass\fR 4
.IX Item "$metamethod->associated_metaclass"
This returns the Class::MOP::Class object for the method, if one
exists.
.ie n .IP \fR\fB$metamethod\fR\fB\->original_method\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->original_method\fR 4
.IX Item "$metamethod->original_method"
If this method object was created as a clone of some other method
object, this returns the object that was cloned.
.ie n .IP \fR\fB$metamethod\fR\fB\->original_name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->original_name\fR 4
.IX Item "$metamethod->original_name"
This returns the method's original name, wherever it was first
defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the name from the \fIfirst\fR method in the chain of clones.
.ie n .IP \fR\fB$metamethod\fR\fB\->original_package_name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->original_package_name\fR 4
.IX Item "$metamethod->original_package_name"
This returns the method's original package name, wherever it was first
defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the package name from the \fIfirst\fR method in the chain of
clones.
.ie n .IP \fR\fB$metamethod\fR\fB\->original_fully_qualified_name\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->original_fully_qualified_name\fR 4
.IX Item "$metamethod->original_fully_qualified_name"
This returns the method's original fully qualified name, wherever it
was first defined.
.Sp
If this method is a clone of a clone (of a clone, etc.), this method
returns the fully qualified name from the \fIfirst\fR method in the chain
of clones.
.ie n .IP \fR\fB$metamethod\fR\fB\->is_stub\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->is_stub\fR 4
.IX Item "$metamethod->is_stub"
Returns true if the method is just a stub:
.Sp
.Vb 1
\&  sub foo;
.Ve
.ie n .IP \fR\fB$metamethod\fR\fB\->attach_to_class($metaclass)\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->attach_to_class($metaclass)\fR 4
.IX Item "$metamethod->attach_to_class($metaclass)"
Given a Class::MOP::Class object, this method sets the associated
metaclass for the method. This will overwrite any existing associated
metaclass.
.ie n .IP \fR\fB$metamethod\fR\fB\->detach_from_class\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->detach_from_class\fR 4
.IX Item "$metamethod->detach_from_class"
Removes any associated metaclass object for the method.
.ie n .IP \fR\fB$metamethod\fR\fB\->execute(...)\fR 4
.el .IP \fR\f(CB$metamethod\fR\fB\->execute(...)\fR 4
.IX Item "$metamethod->execute(...)"
This executes the method. Any arguments provided will be passed on to
the method itself.
.IP \fBClass::MOP::Method\->meta\fR 4
.IX Item "Class::MOP::Method->meta"
This will return a Class::MOP::Class instance for this class.
.Sp
It should also be noted that Class::MOP will actually bootstrap
this module by installing a number of attribute meta-objects into its
metaclass.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Stevan Little <stevan@cpan.org>
.IP \(bu 4
Dave Rolsky <autarch@urth.org>
.IP \(bu 4
Jesse Luehrs <doy@cpan.org>
.IP \(bu 4
Shawn M Moore <sartak@cpan.org>
.IP \(bu 4
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.IP \(bu 4
Karen Etheridge <ether@cpan.org>
.IP \(bu 4
Florian Ragwitz <rafl@debian.org>
.IP \(bu 4
Hans Dieter Pearcey <hdp@cpan.org>
.IP \(bu 4
Chris Prather <chris@prather.org>
.IP \(bu 4
Matt S Trout <mstrout@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Infinity Interactive, Inc.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
