.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Format 3pm"
.TH Format 3pm 2015-03-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Template::Plugin::Number::Format \- Plugin/filter interface to Number::Format
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    [% USE Number.Format %]
\&    [% num | format_number %]
.Ve
.SH ABSTRACT
.IX Header "ABSTRACT"
Template::Plugin::Number::Format makes the number-munging grooviness
of Number::Format available to your templates.  It is used like a
plugin, but installs filters into the current context.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
All filters created by Template::Plugin::Number::Format can be
configured by constructor options and options that can be passed to
individual filters.  See "METHODS" in Number::Format for all the details.
.SS "Constructor Parameters"
.IX Subsection "Constructor Parameters"
The USE line accepts the following parameters, all optional, which
define the default behavior for filters within the current Context:
.IP THOUSANDS_SEP 4
.IX Item "THOUSANDS_SEP"
character inserted between groups of 3 digits
.IP DECIMAL_POINT 4
.IX Item "DECIMAL_POINT"
character separating integer and fractional parts
.IP MON_THOUSANDS_SEP 4
.IX Item "MON_THOUSANDS_SEP"
like THOUSANDS_SEP, but used for format_price
.IP MON_DECIMAL_POINT 4
.IX Item "MON_DECIMAL_POINT"
like DECIMAL_POINT, but used for format_price
.IP INT_CURR_SYMBOL 4
.IX Item "INT_CURR_SYMBOL"
character(s) denoting currency (see \fBformat_price()\fR)
.IP DECIMAL_DIGITS 4
.IX Item "DECIMAL_DIGITS"
number of digits to the right of dec point (def 2)
.IP DECIMAL_FILL 4
.IX Item "DECIMAL_FILL"
boolean; whether to add zeroes to fill out decimal
.IP NEG_FORMAT 4
.IX Item "NEG_FORMAT"
format to display negative numbers (def \-x)
.IP KILO_SUFFIX 4
.IX Item "KILO_SUFFIX"
suffix to add when format_bytes formats kilobytes
.IP MEGA_SUFFIX 4
.IX Item "MEGA_SUFFIX"
suffix to add when format_bytes formats megabytes
.IP GIGA_SUFFIX 4
.IX Item "GIGA_SUFFIX"
suffix to add when format_bytes formats gigabytes
.SH "Using Template::Plugin::Number::Format"
.IX Header "Using Template::Plugin::Number::Format"
When you invoke:
.PP
.Vb 1
\&    [% USE Number.Format(option = value) %]
.Ve
.PP
the following filters are installed into the current Context:
.IP \fBround($precision)\fR 4
.IX Item "round($precision)"
Rounds the number to the specified precision.  If "$precision" is
omitted, the value of the "DECIMAL_DIGITS" parameter is used
(default value 2).
.ie n .IP "\fBformat_number($precision, \fR\fB$trailing_zeros\fR\fB)\fR" 4
.el .IP "\fBformat_number($precision, \fR\f(CB$trailing_zeros\fR\fB)\fR" 4
.IX Item "format_number($precision, $trailing_zeros)"
Formats a number by adding "THOUSANDS_SEP" between each set of 3
digits to the left of the decimal point, substituting "DECIMAL_POINT"
for the decimal point, and rounding to the specified precision using
"\fBround()\fR".  Note that "$precision" is a maximum precision specifier;
trailing zeroes will only appear in the output if "$trailing_zeroes"
is provided, or the parameter "DECIMAL_FILL" is set, with a value that
is true (not zero, undef, or the empty string).  If "$precision" is
omitted, the value of the "DECIMAL_DIGITS" parameter (default value
of 2) is used.
.IP \fBformat_negative($picture)\fR 4
.IX Item "format_negative($picture)"
Formats a negative number.  Picture should be a string that contains
the letter "x" where the number should be inserted.  For example, for
standard negative numbers you might use "\-x", while for
accounting purposes you might use "(x)".  If the specified number
begins with a \- character, that will be removed before formatting, but
formatting will occur whether or not the number is negative.
.IP \fBformat_picture($picture)\fR 4
.IX Item "format_picture($picture)"
Returns a string based on "$picture" with the "#" characters replaced
by digits from "$number".  If the length of the integer part of
\&\f(CW$number\fR is too large to fit, the "#" characters are replaced with
asterisks ("*") instead.
.IP \fBformat_price($precision)\fR 4
.IX Item "format_price($precision)"
Returns a string containing "$number" formatted similarly to
"\fBformat_number()\fR", except that the decimal portion may have trailing
zeroes added to make it be exactly "$precision" characters long, and
the currency string will be prefixed.
.Sp
If the "INT_CURR_SYMBOL" attribute of the object is the empty string,
no currency will be added.
.Sp
If "$precision" is not provided, the default of 2 will be used.
.IP \fBformat_bytes($precision)\fR 4
.IX Item "format_bytes($precision)"
Returns a string containing "$number" formatted similarly to
"\fBformat_number()\fR", except that if the number is over 1024, it will be
divided by 1024 and the value of KILO_SUFFIX appended to the end; or
if it is over 1048576 (1024*1024), it will be divided by 1048576 and
MEGA_SUFFIX appended to the end.  Negative values will result in an
error.
.Sp
If "$precision" is not provided, the default of 2 will be used.
.IP \fBunformat_number\fR 4
.IX Item "unformat_number"
Converts a string as returned by "\fBformat_number()\fR", "\fBformat_price()\fR",
or "\fBformat_picture()\fR", and returns the corresponding value as a
numeric scalar.  Returns "undef" if the number does not contain any
digits.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Number::Format
.SH AUTHOR
.IX Header "AUTHOR"
darren chamberlain <darren@cpan.org>
