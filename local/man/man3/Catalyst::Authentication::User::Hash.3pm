.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::User::Hash 3pm"
.TH Catalyst::Authentication::User::Hash 3pm 2024-10-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Authentication::User::Hash \- An easy authentication user
object based on hashes.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Catalyst::Authentication::User::Hash;
\&    
\&    Catalyst::Authentication::User::Hash\->new(
\&        password => "s3cr3t",
\&    );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This implementation of authentication user handles is supposed to go hand in
hand with Catalyst::Authentication::Store::Minimal.
.SH METHODS
.IX Header "METHODS"
.ie n .SS "new( @pairs )"
.el .SS "new( \f(CW@pairs\fP )"
.IX Subsection "new( @pairs )"
Create a new object with the key-value-pairs listed in the arg list.
.SS "supports( )"
.IX Subsection "supports( )"
Checks for existence of keys that correspond with features.
.SS "for_session( )"
.IX Subsection "for_session( )"
Just returns \f(CW$self\fR, expecting it to be serializable.
.SS "from_session( )"
.IX Subsection "from_session( )"
Just passes returns the unserialized object, hoping it's intact.
.SS "AUTOLOAD( )"
.IX Subsection "AUTOLOAD( )"
Accessor for the key whose name is the method.
.SS "store( )"
.IX Subsection "store( )"
Accessors that override superclass's dying virtual methods.
.SS "id( )"
.IX Subsection "id( )"
.SS "can( )"
.IX Subsection "can( )"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Hash::AsObject
