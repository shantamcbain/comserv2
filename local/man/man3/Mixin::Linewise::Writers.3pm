.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mixin::Linewise::Writers 3pm"
.TH Mixin::Linewise::Writers 3pm 2023-01-01 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mixin::Linewise::Writers \- get linewise writers for strings and filenames
.SH VERSION
.IX Header "VERSION"
version 0.111
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  package Your::Pkg;
\&  use Mixin::Linewise::Writers \-writers;
\&
\&  sub write_handle {
\&    my ($self, $data, $handle) = @_;
\&
\&    $handle\->print("datum: $_\en") for @$data;
\&  }
.Ve
.PP
Then:
.PP
.Vb 1
\&  use Your::Pkg;
\&
\&  Your::Pkg\->write_file($data, $filename);
\&
\&  Your::Pkg\->write_string($data, $string);
\&
\&  Your::Pkg\->write_handle($data, $fh);
.Ve
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This module should work on any version of perl still receiving updates from
the Perl 5 Porters.  This means it should work on any version of perl released
in the last two to three years.  (That is, if the most recently released
version is v5.40, then this module should work on both v5.40 and v5.38.)
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to lower
the minimum required perl.
.SH EXPORTS
.IX Header "EXPORTS"
\&\f(CW\*(C`write_file\*(C'\fR and \f(CW\*(C`write_string\*(C'\fR are exported by default.  Either can be
requested individually, or renamed.  They are generated by
Sub::Exporter, so consult its documentation for more
information.
.PP
Both can be generated with the option "method" which requests that a method
other than "write_handle" is called with the created IO::Handle.
.PP
If given a "binmode" option, any \f(CW\*(C`write_file\*(C'\fR type functions will use
that as an IO layer, otherwise, the default is \f(CWencoding(UTF\-8)\fR.
.PP
.Vb 2
\&  use Mixin::Linewise::Writers \-writers => { binmode => "raw" };
\&  use Mixin::Linewise::Writers \-writers => { binmode => "encoding(iso\-8859\-1)" };
.Ve
.SS write_file
.IX Subsection "write_file"
.Vb 2
\&  Your::Pkg\->write_file($data, $filename);
\&  Your::Pkg\->write_file($data, $options, $filename);
.Ve
.PP
This method will try to open a new file with the given name.  It will then call
\&\f(CW\*(C`write_handle\*(C'\fR with that handle.
.PP
An optional hash reference may be passed before \f(CW$filename\fR with options.
The only valid option currently is \f(CW\*(C`binmode\*(C'\fR, which overrides any
default set from \f(CW\*(C`use\*(C'\fR or the built-in \f(CWencoding(UTF\-8)\fR.
.PP
Any arguments after \f(CW$filename\fR are passed along after to \f(CW\*(C`write_handle\*(C'\fR.
.SS write_string
.IX Subsection "write_string"
.Vb 2
\&  my $string = Your::Pkg\->write_string($data);
\&  my $string = Your::Pkg\->write_string(\e%option, $data);
.Ve
.PP
\&\f(CW\*(C`write_string\*(C'\fR will create a new handle on the given string, then call
\&\f(CW\*(C`write_handle\*(C'\fR to write to that handle, and return the resulting string.
Because handles on strings must be octet-oriented, the string \fBwill contain
octets\fR.  It will be opened in the default binmode established by importing.
(See "EXPORTS", above, and the options, below.)
.PP
Any arguments after \f(CW$data\fR are passed along after to \f(CW\*(C`write_handle\*(C'\fR.
.PP
Like \f(CW\*(C`write_file\*(C'\fR, this method can take a leading hashref with one valid
argument: \f(CW\*(C`binmode\*(C'\fR.
.SH AUTHOR
.IX Header "AUTHOR"
Ricardo SIGNES <cpan@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Ricardo SIGNES.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
