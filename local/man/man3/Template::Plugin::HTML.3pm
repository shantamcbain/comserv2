.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Plugin::HTML 3pm"
.TH Template::Plugin::HTML 3pm 2024-06-21 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Template::Plugin::HTML \- Plugin to create HTML elements
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE HTML %]
\&
\&    [% HTML.escape("if (a < b && c > d) ..." %]
\&
\&    [% HTML.element(table => { border => 1, cellpadding => 2 }) %]
\&
\&    [% HTML.attributes(border => 1, cellpadding => 2) %]
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`HTML\*(C'\fR plugin is a very basic plugin, implementing a few useful
methods for generating HTML.
.SH METHODS
.IX Header "METHODS"
.SS escape(text)
.IX Subsection "escape(text)"
Returns the source text with any HTML reserved characters such as
\&\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`>\*(C'\fR, etc., correctly escaped to their entity equivalents.
.SS attributes(hash)
.IX Subsection "attributes(hash)"
Returns the elements of the hash array passed by reference correctly
formatted (e.g. values quoted and correctly escaped) as attributes for
an HTML element.
.SS add_attribute(attributes)
.IX Subsection "add_attribute(attributes)"
This provides a way to incrementally add attributes to the object.
The values passed in are stored in the object.  Calling
element with just a tag or attributes without an parameters
will used the saved attributes.
.PP
.Vb 4
\&    USE tag = HTML;
\&    tag.add_attributes( { class => \*(Aqnavbar\*(Aq } );
\&    tag.add_attributes( { id => \*(Aqfoo\*(Aq } );
\&    tag.add_attributes( { class => \*(Aqactive\*(Aq } );
\&
\&    tag.element( \*(Aqli\*(Aq ); # <li class="navbar active" id="foo">
.Ve
.PP
This method has two aliases: \fBadd_attribute()\fR and \fBadd()\fR.
.SS replace_attribute(attributes)
.IX Subsection "replace_attribute(attributes)"
This will replace an attribute value instead of add to existing.
.PP
.Vb 4
\&    USE tag = HTML;
\&    tag.add_attributes( { class => \*(Aqnavbar\*(Aq } );
\&    tag.add_attributes( { id => \*(Aqfoo\*(Aq } );
\&    tag.replace_attributes( { class => \*(Aqactive\*(Aq } );
\&
\&    tag.element( \*(Aqli\*(Aq ); # <li class="active" id="foo">
.Ve
.PP
This method has two aliases: \fBreplace_attribute()\fR and \fBreplace()\fR.
.SS clear_attributes
.IX Subsection "clear_attributes"
Clears any saved attributes
.SS "element(type, attributes)"
.IX Subsection "element(type, attributes)"
Generates an HTML element of the specified type and with the attributes
provided as an optional hash array reference as the second argument or
as named arguments.
.PP
.Vb 3
\&    [% HTML.element(table => { border => 1, cellpadding => 2 }) %]
\&    [% HTML.element(\*(Aqtable\*(Aq, border=1, cellpadding=2) %]
\&    [% HTML.element(table => attribs) %]
.Ve
.SH DEBUGGING
.IX Header "DEBUGGING"
The HTML plugin accepts a \f(CW\*(C`sorted\*(C'\fR option as a constructor argument
which, when set to any true value, causes the attributes generated by
the \f(CWattributes()\fR method (either directly or via \f(CWelement()\fR) to be
returned in sorted order.  Order of attributes isn't important in
HTML, but this is provided mainly for the purposes of debugging where
it is useful to have attributes generated in a deterministic order
rather than whatever order the hash happened to feel like returning
the keys in.
.PP
.Vb 2
\&    [% USE HTML(sorted=1) %]
\&    [% HTML.element( foo => { charlie => 1, bravo => 2, alpha => 3 } ) %]
.Ve
.PP
generates:
.PP
.Vb 1
\&    <foo alpha="3" bravo="2" charlie="1">
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template::Plugin
