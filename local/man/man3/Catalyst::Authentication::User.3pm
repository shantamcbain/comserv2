.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::User 3pm"
.TH Catalyst::Authentication::User 3pm 2024-10-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Authentication::User \- Base class for user objects.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyStore::User;
\&    use base qw/Catalyst::Authentication::User/;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is the base class for authentication user objects.
.PP
THIS IS NOT A COMPLETE CLASS! it is intended to provide base functionality only.
.PP
It provides the base methods listed below, and any additional methods
are proxied onto the user object fetched from the underlieing store.
.SH "NOTES TO STORE IMPLEMENTORS"
.IX Header "NOTES TO STORE IMPLEMENTORS"
Please read the comments in the source code of this class to work out
which methods you should override.
.SH METHODS
.IX Header "METHODS"
.SS "id( )"
.IX Subsection "id( )"
A unique ID by which a user can be retrieved from the store.
.SS "store( )"
.IX Subsection "store( )"
Should return a class name that can be used to refetch the user using it's
ID.
.SS "supports( )"
.IX Subsection "supports( )"
An introspection method used to determine what features a user object has, to support credential and authorization plugins.
.ie n .SS "get( $field )"
.el .SS "get( \f(CW$field\fP )"
.IX Subsection "get( $field )"
Returns the value for the \f(CW$field\fR provided.
.SS "get_object( )"
.IX Subsection "get_object( )"
Returns the underlying object storing the user data.  The return value of this
method will vary depending
on the storage module used.
.SS "obj( )"
.IX Subsection "obj( )"
Shorthand for get_object( )
.SS AUTOLOAD
.IX Subsection "AUTOLOAD"
Delegates any unknown methods onto the user object returned by \->obj
