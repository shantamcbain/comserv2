.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::Sender::Role::CommonSending 3pm"
.TH Email::Sender::Role::CommonSending 3pm 2024-01-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Email::Sender::Role::CommonSending \- the common sending tasks most Email::Sender classes will need
.SH VERSION
.IX Header "VERSION"
version 2.601
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Email::Sender::Role::CommonSending provides a number of features that should
ease writing new classes that perform the Email::Sender role.  Instead of
writing a \f(CW\*(C`send\*(C'\fR method, implementors will need to write a smaller
\&\f(CW\*(C`send_email\*(C'\fR method, which will be passed an Email::Abstract object and
envelope containing \f(CW\*(C`from\*(C'\fR and \f(CW\*(C`to\*(C'\fR entries.  The \f(CW\*(C`to\*(C'\fR entry will be
guaranteed to be an array reference.
.PP
A \f(CW\*(C`success\*(C'\fR method will also be provided as a shortcut for calling:
.PP
.Vb 1
\&  Email::Sender::Success\->new(...);
.Ve
.PP
A few other minor details are handled by CommonSending; for more information,
consult the source.
.PP
The methods documented here may be overridden to alter the behavior of the
CommonSending role.
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This library should run on perls released even a long time ago.  It should
work on any version of perl released in the last five years.
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to
lower the minimum required perl.
.SH METHODS
.IX Header "METHODS"
.SS prepare_email
.IX Subsection "prepare_email"
This method is passed a scalar and is expected to return an Email::Abstract
object.  You probably shouldn't override it in most cases.
.SS prepare_envelope
.IX Subsection "prepare_envelope"
This method is passed a hashref and returns a new hashref that should be used
as the envelope passed to the \f(CW\*(C`send_email\*(C'\fR method.  This method is responsible
for ensuring that the \fIto\fR entry is an array.
.SS success
.IX Subsection "success"
.Vb 2
\&  ...
\&  return $self\->success;
.Ve
.PP
This method returns a new Email::Sender::Success object.  Arguments passed to
this method are passed along to the Success's constructor.  This is provided as
a convenience for returning success from subclasses' \f(CW\*(C`send_email\*(C'\fR methods.
.SH AUTHOR
.IX Header "AUTHOR"
Ricardo Signes <cpan@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2024 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
