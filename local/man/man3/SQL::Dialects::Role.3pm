.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Dialects::Role 3pm"
.TH SQL::Dialects::Role 3pm 2020-10-21 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Dialects::Role \- The role of being a SQL::Dialect
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    package My::SQL::Dialect;
\&
\&    use SQL::Dialects::Role;
\&
\&    sub get_config {
\&        return <<CONFIG;
\&    [SECTION]
\&    item1
\&    item2
\&
\&    [ANOTHER SECTION]
\&    item1
\&    item2
\&    CONFIG
\&    }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This adds the role of being a SQL::Dialect to your class.
.SS Requirements
.IX Subsection "Requirements"
You must implement...
.PP
\fIget_config\fR
.IX Subsection "get_config"
.PP
.Vb 1
\&    my $config = $class\->get_config;
.Ve
.PP
Returns information about the dialect in an INI-like format.
.SS Implements
.IX Subsection "Implements"
The role implements...
.PP
\fIget_config_as_hash\fR
.IX Subsection "get_config_as_hash"
.PP
.Vb 1
\&    my $config = $class\->get_config_as_hash;
.Ve
.PP
Returns the data represented in \fBget_config()\fR as a hash ref.
.PP
Items will be upper-cased, sections will be lower-cased.
.PP
The example in the SYNOPSIS would come back as...
.PP
.Vb 10
\&    {
\&        section => {
\&            ITEM1       => 1,
\&            ITEM2       => 2,
\&        },
\&        another_section => {
\&            ITEM1       => 1,
\&            ITEM2       => 2,
\&        }
\&   }
.Ve
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
.Vb 1
\& This module is
\&
\& copyright (c), 2009 by Michael G. Schwern
\& copyright (c), 2009\-2020 by Jens Rehsack.
\&
\& All rights reserved.
.Ve
.PP
The module may be freely distributed under the same terms as
Perl itself using either the "GPL License" or the "Artistic
License" as specified in the Perl README file.
.PP
Jeff can be reached at: jzuckerATcpan.org
Jens can be reached at: rehsackATcpan.org or via dbi\-devATperl.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
"\fBdialect()\fR" in SQL::Parser
