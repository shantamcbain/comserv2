.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Carp 3pm"
.TH DBIx::Class::Carp 3pm 2022-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Carp \- Provides advanced Carp::Clan\-like warning functions for DBIx::Class internals
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Documentation is lacking on purpose \- this an experiment not yet fit for
mass consumption. If you use this do not count on any kind of stability,
in fact don't even count on this module's continuing existence (it has
been noindexed for a reason).
.PP
In addition to the classic interface:
.PP
.Vb 1
\&  use DBIx::Class::Carp \*(Aq^DBIx::Class\*(Aq
.Ve
.PP
this module also supports a class-data based way to specify the exclusion
regex. A message is only carped from a callsite that matches neither the
closed over string, nor the value of "_skip_namespace_frames" as declared
on any callframe already skipped due to the same mechanism. This is to ensure
that intermediate callsites can declare their own additional skip-namespaces.
.SH "CLASS ATTRIBUTES"
.IX Header "CLASS ATTRIBUTES"
.SS _skip_namespace_frames
.IX Subsection "_skip_namespace_frames"
A classdata attribute holding the stringified regex matching callsites that
should be skipped by the carp methods below. An empty string \f(CW\*(C`q{}\*(C'\fR is treated
like no setting/\f(CW\*(C`undef\*(C'\fR (the distinction is necessary due to semantics of the
class data accessors provided by Class::Accessor::Grouped)
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
This module export the following 3 functions. Only warning related \f(CW\*(C`carp*\*(C'\fR
is being handled here, for \f(CW\*(C`croak\*(C'\fR\-ing you must use
"throw_exception" in DBIx::Class::Schema or DBIx::Class::Exception.
.SS carp
.IX Subsection "carp"
Carps message with the file/line of the first callsite not matching
"_skip_namespace_frames" nor the closed-over arguments to
\&\f(CW\*(C`use DBIx::Class::Carp\*(C'\fR.
.SS carp_unique
.IX Subsection "carp_unique"
Like "carp" but warns once for every distinct callsite (subject to the
same ruleset as "carp").
.SS carp_once
.IX Subsection "carp_once"
Like "carp" but warns only once for the life of the perl interpreter
(regardless of callsite).
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
