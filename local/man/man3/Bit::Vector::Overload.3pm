.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bit::Vector::Overload 3pm"
.TH Bit::Vector::Overload 3pm 2013-09-03 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Bit::Vector::Overload \- Overloaded operators add\-on for Bit::Vector
.SH USAGE
.IX Header "USAGE"
Note that you do not need to "\f(CW\*(C`use Bit::Vector;\*(C'\fR"
in addition to this module.
.PP
Simply "\f(CW\*(C`use Bit::Vector::Overload;\*(C'\fR" \fBINSTEAD\fR
of "\f(CW\*(C`use Bit::Vector;\*(C'\fR". You can still use all the
methods from the "Bit::Vector" module in addition
to the overloaded operators and methods provided
here after that.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&  Configuration
\&      $config = Bit::Vector\->Configuration();
\&      Bit::Vector\->Configuration($config);
\&      $oldconfig = Bit::Vector\->Configuration($newconfig);
\&
\&  String Conversion
\&      $string = "$vector";             #  depending on configuration
\&      print "\e$vector = \*(Aq$vector\*(Aq\en";
\&
\&  Emptyness
\&      if ($vector)  #  if not empty (non\-zero)
\&      if (! $vector)  #  if empty (zero)
\&      unless ($vector)  #  if empty (zero)
\&
\&  Complement (one\*(Aqs complement)
\&      $vector2 = ~$vector1;
\&      $vector = ~$vector;
\&
\&  Negation (two\*(Aqs complement)
\&      $vector2 = \-$vector1;
\&      $vector = \-$vector;
\&
\&  Norm
\&      $norm = abs($vector);  #  depending on configuration
\&
\&  Absolute
\&      $vector2 = abs($vector1);  #  depending on configuration
\&
\&  Concatenation
\&      $vector3 = $vector1 . $vector2;
\&      $vector1 .= $vector2;
\&      $vector1 = $vector2 . $vector1;
\&      $vector2 = $vector1 . $scalar;  #  depending on configuration
\&      $vector2 = $scalar . $vector1;
\&      $vector .= $scalar;
\&
\&  Duplication
\&      $vector2 = $vector1 x $factor;
\&      $vector x= $factor;
\&
\&  Shift Left
\&      $vector2 = $vector1 << $bits;
\&      $vector <<= $bits;
\&
\&  Shift Right
\&      $vector2 = $vector1 >> $bits;
\&      $vector >>= $bits;
\&
\&  Union
\&      $vector3 = $vector1 | $vector2;
\&      $vector1 |= $vector2;
\&      $vector2 = $vector1 | $scalar;
\&      $vector |= $scalar;
\&
\&      $vector3 = $vector1 + $vector2;  #  depending on configuration
\&      $vector1 += $vector2;
\&      $vector2 = $vector1 + $scalar;
\&      $vector += $scalar;
\&
\&  Intersection
\&      $vector3 = $vector1 & $vector2;
\&      $vector1 &= $vector2;
\&      $vector2 = $vector1 & $scalar;
\&      $vector &= $scalar;
\&
\&      $vector3 = $vector1 * $vector2;  #  depending on configuration
\&      $vector1 *= $vector2;
\&      $vector2 = $vector1 * $scalar;
\&      $vector *= $scalar;
\&
\&  ExclusiveOr
\&      $vector3 = $vector1 ^ $vector2;
\&      $vector1 ^= $vector2;
\&      $vector2 = $vector1 ^ $scalar;
\&      $vector ^= $scalar;
\&
\&  Set Difference
\&      $vector3 = $vector1 \- $vector2;  #  depending on configuration
\&      $vector1 \-= $vector2;
\&      $vector1 = $vector2 \- $vector1;
\&      $vector2 = $vector1 \- $scalar;
\&      $vector2 = $scalar \- $vector1;
\&      $vector \-= $scalar;
\&
\&  Addition
\&      $vector3 = $vector1 + $vector2;  #  depending on configuration
\&      $vector1 += $vector2;
\&      $vector2 = $vector1 + $scalar;
\&      $vector += $scalar;
\&
\&  Subtraction
\&      $vector3 = $vector1 \- $vector2;  #  depending on configuration
\&      $vector1 \-= $vector2;
\&      $vector1 = $vector2 \- $vector1;
\&      $vector2 = $vector1 \- $scalar;
\&      $vector2 = $scalar \- $vector1;
\&      $vector \-= $scalar;
\&
\&  Multiplication
\&      $vector3 = $vector1 * $vector2;  #  depending on configuration
\&      $vector1 *= $vector2;
\&      $vector2 = $vector1 * $scalar;
\&      $vector *= $scalar;
\&
\&  Division
\&      $vector3 = $vector1 / $vector2;
\&      $vector1 /= $vector2;
\&      $vector1 = $vector2 / $vector1;
\&      $vector2 = $vector1 / $scalar;
\&      $vector2 = $scalar / $vector1;
\&      $vector /= $scalar;
\&
\&  Modulo
\&      $vector3 = $vector1 % $vector2;
\&      $vector1 %= $vector2;
\&      $vector1 = $vector2 % $vector1;
\&      $vector2 = $vector1 % $scalar;
\&      $vector2 = $scalar % $vector1;
\&      $vector %= $scalar;
\&
\&  Exponentiation
\&      $vector3 = $vector1 ** $vector2;
\&      $vector1 **= $vector2;
\&      $vector2 = $vector1 ** $scalar;
\&      $vector2 = $scalar ** $vector1;
\&      $vector **= $scalar;
\&
\&  Increment
\&      ++$vector;
\&      $vector++;
\&
\&  Decrement
\&      \-\-$vector;
\&      $vector\-\-;
\&
\&  Lexical Comparison (unsigned)
\&      $cmp = $vector1 cmp $vector2;
\&      if ($vector1 lt $vector2)
\&      if ($vector1 le $vector2)
\&      if ($vector1 gt $vector2)
\&      if ($vector1 ge $vector2)
\&
\&      $cmp = $vector cmp $scalar;
\&      if ($vector lt $scalar)
\&      if ($vector le $scalar)
\&      if ($vector gt $scalar)
\&      if ($vector ge $scalar)
\&
\&  Comparison (signed)
\&      $cmp = $vector1 <=> $vector2;
\&      if ($vector1 < $vector2)  #  depending on configuration
\&      if ($vector1 <= $vector2)
\&      if ($vector1 > $vector2)
\&      if ($vector1 >= $vector2)
\&
\&      $cmp = $vector <=> $scalar;
\&      if ($vector < $scalar)  #  depending on configuration
\&      if ($vector <= $scalar)
\&      if ($vector > $scalar)
\&      if ($vector >= $scalar)
\&
\&  Equality
\&      if ($vector1 eq $vector2)
\&      if ($vector1 ne $vector2)
\&      if ($vector eq $scalar)
\&      if ($vector ne $scalar)
\&
\&      if ($vector1 == $vector2)
\&      if ($vector1 != $vector2)
\&      if ($vector == $scalar)
\&      if ($vector != $scalar)
\&
\&  Subset Relationship
\&      if ($vector1 <= $vector2)  #  depending on configuration
\&
\&  True Subset Relationship
\&      if ($vector1 < $vector2)  #  depending on configuration
\&
\&  Superset Relationship
\&      if ($vector1 >= $vector2)  #  depending on configuration
\&
\&  True Superset Relationship
\&      if ($vector1 > $vector2)  #  depending on configuration
.Ve
.SH "IMPORTANT NOTES"
.IX Header "IMPORTANT NOTES"
.IP \(bu 2
Boolean values
.Sp
Boolean values in this module are always a numeric zero ("\f(CW0\fR") for
"false" and a numeric one ("\f(CW1\fR") for "true".
.IP \(bu 2
Negative numbers
.Sp
Numeric factors (as needed for the "\f(CW\*(C`<<\*(C'\fR", "\f(CW\*(C`>>\*(C'\fR"
and "\f(CW\*(C`x\*(C'\fR" operators) and bit numbers are always regarded as being
\&\fBUNSIGNED\fR.
.Sp
As a consequence, whenever you pass a negative number for such a factor
or bit number, it will be treated as a (usually very large) positive
number due to its internal two's complement binary representation, usually
resulting in malfunctions or an "index out of range" error message and
program abortion.
.Sp
Note that this does not apply to "big integer" decimal numbers, which
are (usually) passed as strings, and which may of course be negative
(see also the section "Big integers" a little further below).
.IP \(bu 2
Overloaded operators configuration
.Sp
Note that the behaviour of certain overloaded operators can be changed
in various ways by means of the "\f(CWConfiguration()\fR" method (for more
details, see the description of this method further below).
.Sp
For instance, scalars (i.e., numbers and strings) provided as operands
to overloaded operators are automatically converted to bit vectors,
internally.
.Sp
These scalars are thereby automatically assumed to be indices or to be
in hexadecimal, binary, decimal or enumeration format, depending on the
configuration.
.Sp
Similarly, when converting bit vectors to strings using double quotes
(""), the output format will also depend on the previously chosen
configuration.
.Sp
Finally, some overloaded operators may have different semantics depending
on the proper configuration; for instance, the operator "+" can be the
"union" operator from set theory or the arithmetic "add" operator.
.Sp
In all cases (input, output and operator semantics), the defaults have
been chosen in such a way so that the behaviour of the module is backward
compatible with previous versions.
.IP \(bu 2
"Big integers"
.Sp
As long as "big integers" (for "big integer" arithmetic) are small enough
so that Perl doesn't need scientific notation (exponents) to be able to
represent them internally, you can provide these "big integer" constants
to the overloaded operators of this module (or to the method "\f(CWfrom_Dec()\fR")
in numeric form (i.e., either as a numeric constant or expression or as a
Perl variable containing a numeric value).
.Sp
Note that you will get an error message (resulting in program abortion)
if your "big integer" numbers exceed that limit.
.Sp
Because this limit is machine-dependent and not obvious to find out,
it is strongly recommended that you enclose \fBALL\fR your "big integer"
constants in your programs in (double or single) quotes.
.Sp
Examples:
.Sp
.Vb 1
\&    $vector /= 10;  #  ok because number is small
\&
\&    $vector /= \-10;  #  ok for same reason
\&
\&    $vector /= "10";  #  always correct
\&
\&    $vector += "1152921504606846976";  #  quotes probably required here
.Ve
.Sp
All examples assume
.Sp
.Vb 1
\&    Bit::Vector\->Configuration("input=decimal");
.Ve
.Sp
having been set beforehand.
.Sp
Note also that this module does not support scientific notation (exponents)
for "big integer" decimal numbers because you can always make the bit vector
large enough for the whole number to fit without loss of precision (as it
would occur if scientific notation were used).
.Sp
Finally, note that the only characters allowed in "big integer" constant
strings are the digits \f(CW0..9\fR and an optional leading sign ("\f(CW\*(C`+\*(C'\fR" or "\f(CW\*(C`\-\*(C'\fR").
.Sp
All other characters produce a syntax error.
.IP \(bu 2
Valid operands for overloaded operators
.Sp
All overloaded operators expect at least one bit vector operand,
in order for the operator to "know" that not the usual operation
is to be carried out, but rather the overloaded variant.
.Sp
This is especially true for all unary operators:
.Sp
.Vb 10
\&                    "$vector"
\&                    if ($vector)
\&                    if (!$vector)
\&                    ~$vector
\&                    \-$vector
\&                    abs($vector)
\&                    ++$vector
\&                    $vector++
\&                    \-\-$vector
\&                    $vector\-\-
.Ve
.Sp
For obvious reasons the left operand (the "lvalue") of all
assignment operators is also required to be a bit vector:
.Sp
.Vb 10
\&                        .=
\&                        x=
\&                        <<=
\&                        >>=
\&                        |=
\&                        &=
\&                        ^=
\&                        +=
\&                        \-=
\&                        *=
\&                        /=
\&                        %=
\&                       **=
.Ve
.Sp
In the case of three special operators, namely "\f(CW\*(C`<<\*(C'\fR",
"\f(CW\*(C`>>\*(C'\fR" and "\f(CW\*(C`x\*(C'\fR", as well as their related assignment
variants, "\f(CW\*(C`<<=\*(C'\fR", "\f(CW\*(C`>>=\*(C'\fR" and "\f(CW\*(C`x=\*(C'\fR", the
left operand is \fBALWAYS\fR a bit vector and the right operand is
\&\fBALWAYS\fR a number (which is the factor indicating how many times
the operator is to be applied).
.Sp
In all truly binary operators, i.e.,
.Sp
.Vb 10
\&                        .
\&                        |
\&                        &
\&                        ^
\&                        +
\&                        \-
\&                        *
\&                        /
\&                        %
\&                       **
\&                    <=>   cmp
\&                     ==    eq
\&                     !=    ne
\&                     <     lt
\&                     <=    le
\&                     >     gt
\&                     >=    ge
.Ve
.Sp
one of either operands may be replaced by a Perl scalar, i.e.,
a number or a string, either as a Perl constant, a Perl expression
or a Perl variable yielding a number or a string.
.Sp
The same applies to the right side operand (the "rvalue") of the
remaining assignment operators, i.e.,
.Sp
.Vb 10
\&                        .=
\&                        |=
\&                        &=
\&                        ^=
\&                        +=
\&                        \-=
\&                        *=
\&                        /=
\&                        %=
\&                       **=
.Ve
.Sp
Note that this Perl scalar should be of the correct type, i.e.,
numeric or string, for the chosen configuration, because otherwise
a warning message will occur if your program runs under the "\f(CW\*(C`\-w\*(C'\fR"
switch of Perl.
.Sp
The acceptable scalar types for each possible configuration are
the following:
.Sp
.Vb 6
\&    input = bit indices    (default)  :    numeric
\&    input = hexadecimal               :    string
\&    input = binary                    :    string
\&    input = decimal                   :    string     (in general)
\&    input = decimal                   :    numeric    (if small enough)
\&    input = enumeration               :    string
.Ve
.Sp
NOTE ALSO THAT THESE SCALAR OPERANDS ARE CONVERTED TO BIT VECTORS OF
THE SAME SIZE AS THE BIT VECTOR WHICH IS THE OTHER OPERAND.
.Sp
The only exception from this rule is the concatenation operator
("\f(CW\*(C`.\*(C'\fR") and its assignment variant ("\f(CW\*(C`.=\*(C'\fR"):
.Sp
If one of the two operands of the concatenation operator ("\f(CW\*(C`.\*(C'\fR") is
not a bit vector object but a Perl scalar, the contents of the remaining
bit vector operand are converted into a string (the format of which
depends on the configuration set with the "\f(CWConfiguration()\fR" method),
which is then concatenated in the proper order (i.e., as indicated by the
order of the two operands) with the Perl scalar (in other words, a string
is returned in such a case instead of a bit vector object!).
.Sp
If the right side operand (the "rvalue") of the assignment variant
("\f(CW\*(C`.=\*(C'\fR") of the concatenation operator is a Perl scalar, it is converted
internally to a bit vector of the same size as the left side operand provided
that the configuration states that scalars are to be regarded as indices,
decimal strings or enumerations.
.Sp
If the configuration states that scalars are to be regarded as hexadecimal
or boolean strings, however, these strings are converted to bit vectors of
a size matching the length of the input string, i.e., four times the length
for hexadecimal strings (because each hexadecimal digit is worth 4 bits) and
once the length for binary strings.
.Sp
If a decimal number ("big integer") is too large to be stored in a
bit vector of the given size, a "numeric overflow error" occurs.
.Sp
If a bit index is out of range for the given bit vector, an "index
out of range" error occurs.
.Sp
If a scalar operand cannot be converted successfully due to invalid
syntax, a fatal "input string syntax error" is issued.
.Sp
If the two operands of the operator "\f(CW\*(C`<<\*(C'\fR", "\f(CW\*(C`>>\*(C'\fR"
or "\f(CW\*(C`x\*(C'\fR" are reversed, a fatal "reversed operands error" occurs.
.Sp
If an operand is neither a bit vector nor a scalar, then a fatal
"illegal operand type error" occurs.
.IP \(bu 2
Bit order
.Sp
Note that bit vectors are stored least order bit and least order word first
internally.
.Sp
I.e., bit #0 of any given bit vector corresponds to bit #0 of word #0 in the
array of machine words representing the bit vector.
.Sp
(Where word #0 comes first in memory, i.e., it is stored at the least memory
address in the allocated block of memory holding the given bit vector.)
.Sp
Note however that machine words can be stored least order byte first or last,
depending on your system's implementation.
.Sp
Note further that whenever bit vectors are converted to and from (binary or
hexadecimal) strings, the \fBRIGHTMOST\fR bit is always the \fBLEAST SIGNIFICANT\fR
one, and the \fBLEFTMOST\fR bit is always the \fBMOST SIGNIFICANT\fR bit.
.Sp
This is because in our western culture, numbers are always represented in this
way (least significant to most significant digits go from right to left).
.Sp
Of course this requires an internal reversion of order, which the corresponding
conversion methods perform automatically (without any additional overhead, it's
just a matter of starting the internal loop at the bottom or the top end).
.IP \(bu 2
Matching sizes
.Sp
In general, for methods involving several bit vectors at the same time, all
bit vector arguments must have identical sizes (number of bits), or a fatal
"size mismatch" error will occur.
.Sp
Exceptions from this rule are the methods "\f(CWConcat()\fR", "\f(CWConcat_List()\fR",
"\f(CWCopy()\fR", "\f(CWInterval_Copy()\fR" and "\f(CWInterval_Substitute()\fR", where no
conditions at all are imposed on the size of their bit vector arguments.
.Sp
In method "\f(CWMultiply()\fR", all three bit vector arguments must in principle
obey the rule of matching sizes, but the bit vector in which the result of
the multiplication is to be stored may be larger than the two bit vector
arguments containing the factors for the multiplication.
.Sp
In method "\f(CWPower()\fR", the bit vector for the result must be the same
size or greater than the base of the exponentiation term. The exponent
can be any size.
.Sp
The same applies to the corresponding overloaded operators.
.IP \(bu 2
Index ranges
.Sp
All indices for any given bits must lie between "\f(CW0\fR" and
"\f(CW\*(C`$vector\->Size()\-1\*(C'\fR", or a fatal "index out of range"
error will occur.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.IP \(bu 2
\&\f(CW\*(C`$config = Bit::Vector\->Configuration();\*(C'\fR
.IP \(bu 2
\&\f(CW\*(C`Bit::Vector\->Configuration($config);\*(C'\fR
.IP \(bu 2
\&\f(CW\*(C`$oldconfig = Bit::Vector\->Configuration($newconfig);\*(C'\fR
.Sp
This method serves to alter the semantics (i.e., behaviour) of certain
overloaded operators (which are all implemented in Perl, by the way).
.Sp
It does not have any effect whatsoever on anything else. In particular,
it does not affect the methods implemented in C.
.Sp
The method accepts an (optional) string as input in which certain keywords
are expected, which influence some or almost all of the overloaded operators
in several possible ways.
.Sp
The method always returns a string (which you do not need to take care of,
i.e., to store, in case you aren't interested in keeping it) which is a
complete representation of the current configuration (i.e., \fBBEFORE\fR
any modifications are applied) and which can be fed back to this method
later in order to restore the previous configuration.
.Sp
There are three aspects of the way certain overloaded operators behave which
can be controlled with this method:
.Sp
.Vb 4
\&  +  the way scalar operands (replacing one of the two
\&     bit vector object operands) are automatically
\&     converted internally into a bit vector object of
\&     their own,
\&
\&  +  the operation certain overloaded operators perform,
\&     i.e., an operation with sets or an arithmetic
\&     operation,
\&
\&  +  the format to which bit vectors are converted
\&     automatically when they are enclosed in double
\&     quotes.
.Ve
.Sp
The input string may contain any number of assignments, each of which
controls one of these three aspects.
.Sp
Each assignment has the form "\f(CW\*(C`<which>=<value>\*(C'\fR".
.Sp
"\f(CW\*(C`<which>\*(C'\fR" and "\f(CW\*(C`<value>\*(C'\fR" thereby consist of letters
(\f(CW\*(C`[a\-zA\-Z]\*(C'\fR) and white space.
.Sp
Multiple assignments have to be separated by one or more comma (","),
semi-colon (";"), colon (":"), vertical bar ("|"), slash ("/"),
newline ("\en"), ampersand ("&"), plus ("+") or dash ("\-").
.Sp
Empty lines or statements (only white space) are allowed but will be
ignored.
.Sp
"\f(CW\*(C`<which>\*(C'\fR" has to contain one or more keywords from one of
three groups, each group representing one of the three aspects that
the "\f(CWConfiguration()\fR" method controls:
.Sp
.Vb 1
\&  +  "^scalar", "^input", "^in$"
\&
\&  +  "^operator", "^semantic", "^ops$"
\&
\&  +  "^string", "^output", "^out$"
.Ve
.Sp
The character "^" thereby denotes the beginning of a word, and "$"
denotes the end. Case is ignored (!).
.Sp
Using these keywords, you can build any phrase you like to select one
of the three aspects (see also examples given below).
.Sp
The only condition is that no other keyword from any of the other two
groups may match \- otherwise a syntax error will occur (i.e., ambiguities
are forbidden). A syntax error also occurs if none of the keywords
matches.
.Sp
This same principle applies to "\f(CW\*(C`<value>\*(C'\fR":
.Sp
Depending on which aspect you specified for "\f(CW\*(C`<which>\*(C'\fR",
there are different groups of keywords that determine the value
the selected aspect will be set to:
.Sp
.Vb 1
\&  +  "<which>" = "^scalar", "^input", "^in$":
\&
\&       "<value>" =
\&
\&       *  "^bit$", "^index", "^indice"
\&       *  "^hex"
\&       *  "^bin"
\&       *  "^dec"
\&       *  "^enum"
\&
\&  +  "<which>" = "^operator", "^semantic", "^ops$":
\&
\&       "<value>" =
\&
\&       *  "^set$"
\&       *  "^arithmetic"
\&
\&  +  "<which>" = "^string", "^output", "^out$":
\&
\&       "<value>" =
\&
\&       *  "^hex"
\&       *  "^bin"
\&       *  "^dec"
\&       *  "^enum"
.Ve
.Sp
Examples:
.Sp
.Vb 1
\&  "Any scalar input I provide should be considered to be = a bit index"
\&
\&  "I want to have operator semantics suitable for = arithmetics"
\&
\&  "Any bit vector in double quotes is to be output as = an enumeration"
.Ve
.Sp
\&\fBSCALAR INPUT:\fR
.Sp
In the case of scalar input, "\f(CW\*(C`^bit$\*(C'\fR", "\f(CW\*(C`^index\*(C'\fR", or "\f(CW\*(C`^indice\*(C'\fR"
all cause scalar input to be considered to represent a bit index, i.e.,
"\f(CW\*(C`$vector ^= 5;\*(C'\fR" will flip bit #5 in the given bit vector (this is
essentially the same as "\f(CW\*(C`$vector\->bit_flip(5);\*(C'\fR").
.Sp
Note that "bit indices" is the default setting for "scalar input".
.Sp
The keyword "\f(CW\*(C`^hex\*(C'\fR" will cause scalar input to be considered as being in
hexadecimal, i.e., "\f(CW\*(C`$vector ^= 5;\*(C'\fR" will flip bit #0 and bit #2 (because
hexadecimal "\f(CW5\fR" is binary "\f(CW0101\fR").
.Sp
(Note though that hexadecimal input should always be enclosed in quotes,
otherwise it will be interpreted as a decimal number by Perl! The example
relies on the fact that hexadecimal \f(CW\*(C`0\-9\*(C'\fR and decimal \f(CW\*(C`0\-9\*(C'\fR are the same.)
.Sp
The keyword "\f(CW\*(C`^bin\*(C'\fR" will cause scalar input to be considered as being in
binary format. All characters except "\f(CW0\fR" and "\f(CW1\fR" are forbidden in
this case (i.e., produce a syntax error).
.Sp
"\f(CW\*(C`$vector ^= \*(Aq0101\*(Aq;\*(C'\fR", for instance, will flip bit #0 and bit #2.
.Sp
The keyword "\f(CW\*(C`^dec\*(C'\fR" causes scalar input to be considered as integers
in decimal format, i.e., "\f(CW\*(C`$vector ^= 5;\*(C'\fR" will flip bit #0 and bit #2
(because decimal "\f(CW5\fR" is binary "\f(CW0101\fR").
.Sp
(Note though that all decimal input should be enclosed in quotes, because
for large numbers, Perl will use scientific notation internally for
representing them, which produces a syntax error because scientific
notation is neither supported by this module nor needed.)
.Sp
Finally, the keyword "\f(CW\*(C`^enum\*(C'\fR" causes scalar input to be considered
as being a list ("enumeration") of indices and ranges of (contiguous)
indices, i.e., "\f(CW\*(C`$vector |= \*(Aq2,3,5,7\-13,17\-23\*(Aq;\*(C'\fR" will cause bits #2,
#3, #5, #7 through #13 and #17 through #23 to be set.
.Sp
\&\fBOPERATOR SEMANTICS:\fR
.Sp
Several overloaded operators can have two distinct functions depending
on this setting.
.Sp
The affected operators are: "\f(CW\*(C`+\*(C'\fR", "\f(CW\*(C`\-\*(C'\fR", "\f(CW\*(C`*\*(C'\fR", "\f(CW\*(C`<\*(C'\fR", "\f(CW\*(C`<=\*(C'\fR",
"\f(CW\*(C`>\*(C'\fR" and "\f(CW\*(C`>=\*(C'\fR".
.Sp
With the default setting, "set operations", these operators perform:
.Sp
.Vb 7
\&  +       set union                           ( set1  u   set2 )
\&  \-       set difference                      ( set1  \e   set2 )
\&  *       set intersection                    ( set1  n   set2 )
\&  <       true subset relationship            ( set1  <   set2 )
\&  <=      subset relationship                 ( set1  <=  set2 )
\&  >       true superset relationship          ( set1  >   set2 )
\&  >=      superset relationship               ( set1  >=  set2 )
.Ve
.Sp
With the alternative setting, "arithmetic operations", these operators
perform:
.Sp
.Vb 7
\&  +       addition                            ( num1  +   num2 )
\&  \-       subtraction                         ( num1  \-   num2 )
\&  *       multiplication                      ( num1  *   num2 )
\&  <       "less than" comparison              ( num1  <   num2 )
\&  <=      "less than or equal" comparison     ( num1  <=  num2 )
\&  >       "greater than" comparison           ( num1  >   num2 )
\&  >=      "greater than or equal" comparison  ( num1  >=  num2 )
.Ve
.Sp
Note that these latter comparison operators ("\f(CW\*(C`<\*(C'\fR", "\f(CW\*(C`<=\*(C'\fR",
"\f(CW\*(C`>\*(C'\fR" and "\f(CW\*(C`>=\*(C'\fR") regard their operands as being \fBSIGNED\fR.
.Sp
To perform comparisons with \fBUNSIGNED\fR operands, use the operators
"\f(CW\*(C`lt\*(C'\fR", "\f(CW\*(C`le\*(C'\fR", "\f(CW\*(C`gt\*(C'\fR" and "\f(CW\*(C`ge\*(C'\fR" instead (in contrast to the
operators above, these operators are \fBNOT\fR affected by the
"operator semantics" setting).
.Sp
\&\fBSTRING OUTPUT:\fR
.Sp
There are four methods which convert the contents of a given bit vector
into a string: "\f(CWto_Hex()\fR", "\f(CWto_Bin()\fR", "\f(CWto_Dec()\fR" and "\f(CWto_Enum()\fR"
(not counting "\f(CWBlock_Read()\fR", since this method does not return a
human-readable string).
.Sp
(For conversion to octal, see the description of the method
"\f(CWChunk_List_Read()\fR".)
.Sp
Therefore, there are four possible formats into which a bit vector can
be converted when it is enclosed in double quotes, for example:
.Sp
.Vb 2
\&  print "\e$vector = \*(Aq$vector\*(Aq\en";
\&  $string = "$vector";
.Ve
.Sp
Hence you can set "string output" to four different values: To "hex"
for hexadecimal format (which is the default), to "bin" for binary
format, to "dec" for conversion to decimal numbers and to "enum"
for conversion to enumerations (".newsrc" style sets).
.Sp
\&\fBBEWARE\fR that the conversion to decimal numbers is inherently slow;
it can easily take up several seconds for a single large bit vector!
.Sp
Therefore you should store the decimal strings returned to you
rather than converting a given bit vector again.
.Sp
\&\fBEXAMPLES:\fR
.Sp
The default setting as returned by the method "\f(CWConfiguration()\fR"
is:
.Sp
.Vb 3
\&        Scalar Input       = Bit Index
\&        Operator Semantics = Set Operators
\&        String Output      = Hexadecimal
.Ve
.Sp
Performing a statement such as:
.Sp
.Vb 2
\&  Bit::Vector\->Configuration("in=bin,ops=arithmetic,out=bin");
\&  print Bit::Vector\->Configuration(), "\en";
.Ve
.Sp
yields the following output:
.Sp
.Vb 3
\&        Scalar Input       = Binary
\&        Operator Semantics = Arithmetic Operators
\&        String Output      = Binary
.Ve
.Sp
Note that you can always feed this output back into the "\f(CWConfiguration()\fR"
method to restore that setting later.
.Sp
This also means that you can enter the same given setting with almost any
degree of verbosity you like (as long as the required keywords appear and
no ambiguities arise).
.Sp
Note further that any aspect you do not specify is not changed, i.e.,
the statement
.Sp
.Vb 1
\&  Bit::Vector\->Configuration("operators = arithmetic");
.Ve
.Sp
leaves all other aspects unchanged.
.IP \(bu 2
\&\f(CW"$vector"\fR
.Sp
Remember that variables enclosed in double quotes are always
interpolated in Perl.
.Sp
Whenever a Perl variable containing the reference of a "Bit::Vector"
object is enclosed in double quotes (either alone or together with
other text and/or variables), the contents of the corresponding
bit vector are converted into a printable string.
.Sp
Since there are several conversion methods available in this module
(see the description of the methods "\f(CWto_Hex()\fR", "\f(CWto_Bin()\fR",
"\f(CWto_Dec()\fR" and "\f(CWto_Enum()\fR"), it is of course desirable to
be able to choose which of these methods should be applied in this
case.
.Sp
This can actually be done by changing the configuration of this
module using the method "\f(CWConfigure()\fR" (see the previous chapter,
immediately above).
.Sp
The default is conversion to hexadecimal.
.IP \(bu 2
\&\f(CW\*(C`if ($vector)\*(C'\fR
.Sp
It is possible to use a Perl variable containing the reference of a
"Bit::Vector" object as a boolean expression.
.Sp
The condition above is true if the corresponding bit vector contains
at least one set bit, and it is false if \fBALL\fR bits of the corresponding
bit vector are cleared.
.IP \(bu 2
\&\f(CW\*(C`if (!$vector)\*(C'\fR
.Sp
Since it is possible to use a Perl variable containing the reference of a
"Bit::Vector" object as a boolean expression, you can of course also negate
this boolean expression.
.Sp
The condition above is true if \fBALL\fR bits of the corresponding bit vector
are cleared, and it is false if the corresponding bit vector contains at
least one set bit.
.Sp
Note that this is \fBNOT\fR the same as using the method "\f(CWis_full()\fR",
which returns true if \fBALL\fR bits of the corresponding bit vector are
\&\fBSET\fR.
.IP \(bu 2
\&\f(CW\*(C`~$vector\*(C'\fR
.Sp
This term returns a new bit vector object which is the one's complement
of the given bit vector.
.Sp
This is equivalent to inverting all bits.
.IP \(bu 2
\&\f(CW\*(C`\-$vector\*(C'\fR (unary minus)
.Sp
This term returns a new bit vector object which is the two's complement
of the given bit vector.
.Sp
This is equivalent to inverting all bits and incrementing the result by one.
.Sp
(This is the same as changing the sign of a number in two's complement
binary representation.)
.IP \(bu 2
\&\f(CWabs($vector)\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
the number of set bits in the given bit vector (this is the same
as calculating the number of elements which are contained in the
given set) \- which is the default behaviour, or it returns a new
bit vector object which contains the absolute value of the number
stored in the given bit vector.
.IP \(bu 2
\&\f(CW\*(C`$vector1 . $vector2\*(C'\fR
.Sp
This term usually returns a new bit vector object which is the
result of the concatenation of the two bit vector operands.
.Sp
The left operand becomes the most significant, and the right operand
becomes the least significant part of the new bit vector object.
.Sp
If one of the two operands is not a bit vector object but a Perl scalar,
however, the contents of the remaining bit vector operand are converted
into a string (the format of which depends on the configuration set with
the "\f(CWConfiguration()\fR" method), which is then concatenated in the proper
order (i.e., as indicated by the order of the two operands) with the Perl
scalar.
.Sp
In other words, a string is returned in such a case instead of a
bit vector object!
.IP \(bu 2
\&\f(CW\*(C`$vector x $factor\*(C'\fR
.Sp
This term returns a new bit vector object which is the concatenation
of as many copies of the given bit vector operand (the left operand)
as the factor (the right operand) specifies.
.Sp
If the factor is zero, a bit vector object with a length of zero bits
is returned.
.Sp
If the factor is one, just a new copy of the given bit vector is
returned.
.Sp
Note that a fatal "reversed operands error" occurs if the two operands
are swapped.
.IP \(bu 2
\&\f(CW\*(C`$vector << $bits\*(C'\fR
.Sp
This term returns a new bit vector object which is a copy of the given
bit vector (the left operand), which is then shifted left (towards the
most significant bit) by as many places as the right operand, "\f(CW$bits\fR",
specifies.
.Sp
This means that the "\f(CW$bits\fR" most significant bits are lost, all other
bits move up by "\f(CW$bits\fR" positions, and the "\f(CW$bits\fR" least significant
bits that have been left unoccupied by this shift are all set to zero.
.Sp
If "\f(CW$bits\fR" is greater than the number of bits of the given bit vector,
this term returns an empty bit vector (i.e., with all bits cleared) of
the same size as the given bit vector.
.Sp
Note that a fatal "reversed operands error" occurs if the two operands
are swapped.
.IP \(bu 2
\&\f(CW\*(C`$vector >> $bits\*(C'\fR
.Sp
This term returns a new bit vector object which is a copy of the given
bit vector (the left operand), which is then shifted right (towards the
least significant bit) by as many places as the right operand, "\f(CW$bits\fR",
specifies.
.Sp
This means that the "\f(CW$bits\fR" least significant bits are lost, all other
bits move down by "\f(CW$bits\fR" positions, and the "\f(CW$bits\fR" most significant
bits that have been left unoccupied by this shift are all set to zero.
.Sp
If "\f(CW$bits\fR" is greater than the number of bits of the given bit vector,
this term returns an empty bit vector (i.e., with all bits cleared) of
the same size as the given bit vector.
.Sp
Note that a fatal "reversed operands error" occurs if the two operands
are swapped.
.IP \(bu 2
\&\f(CW\*(C`$vector1 | $vector2\*(C'\fR
.Sp
This term returns a new bit vector object which is the result of
a bitwise OR operation between the two bit vector operands.
.Sp
This is the same as calculating the union of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 & $vector2\*(C'\fR
.Sp
This term returns a new bit vector object which is the result of
a bitwise AND operation between the two bit vector operands.
.Sp
This is the same as calculating the intersection of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 ^ $vector2\*(C'\fR
.Sp
This term returns a new bit vector object which is the result of
a bitwise XOR (exclusive-or) operation between the two bit vector
operands.
.Sp
This is the same as calculating the symmetric difference of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 + $vector2\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
a new bit vector object which is the result of a bitwise OR operation
between the two bit vector operands (this is the same as calculating
the union of two sets) \- which is the default behaviour, or it returns
a new bit vector object which contains the sum of the two numbers
stored in the two bit vector operands.
.IP \(bu 2
\&\f(CW\*(C`$vector1 \- $vector2\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
a new bit vector object which is the set difference of the two sets
represented in the two bit vector operands \- which is the default
behaviour, or it returns a new bit vector object which contains
the difference of the two numbers stored in the two bit vector
operands.
.IP \(bu 2
\&\f(CW\*(C`$vector1 * $vector2\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
a new bit vector object which is the result of a bitwise AND operation
between the two bit vector operands (this is the same as calculating
the intersection of two sets) \- which is the default behaviour, or it
returns a new bit vector object which contains the product of the two
numbers stored in the two bit vector operands.
.IP \(bu 2
\&\f(CW\*(C`$vector1 / $vector2\*(C'\fR
.Sp
This term returns a new bit vector object containing the result of the
division of the two numbers stored in the two bit vector operands.
.IP \(bu 2
\&\f(CW\*(C`$vector1 % $vector2\*(C'\fR
.Sp
This term returns a new bit vector object containing the remainder of
the division of the two numbers stored in the two bit vector operands.
.IP \(bu 2
\&\f(CW\*(C`$vector1 ** $vector2\*(C'\fR
.Sp
This term returns a new bit vector object containing the result of the
exponentiation of the left bit vector elevated to the right bit vector's
power.
.IP \(bu 2
\&\f(CW\*(C`$vector1 .= $vector2;\*(C'\fR
.Sp
This statement "appends" the right bit vector operand (the "rvalue")
to the left one (the "lvalue").
.Sp
The former contents of the left operand become the most significant
part of the resulting bit vector, and the right operand becomes the
least significant part.
.Sp
Since bit vectors are stored in "least order bit first" order, this
actually requires the left operand to be shifted "up" by the length
of the right operand, which is then copied to the now freed least
significant part of the left operand.
.Sp
If the right operand is a Perl scalar, it is first converted to a
bit vector of the same size as the left operand, provided that the
configuration states that scalars are to be regarded as indices,
decimal strings or enumerations.
.Sp
If the configuration states that scalars are to be regarded as hexadecimal
or boolean strings, however, these strings are converted to bit vectors of
a size matching the length of the input string, i.e., four times the length
for hexadecimal strings (because each hexadecimal digit is worth 4 bits) and
once the length for binary strings.
.IP \(bu 2
\&\f(CW\*(C`$vector x= $factor;\*(C'\fR
.Sp
This statement replaces the given bit vector by a concatenation of as many
copies of the original contents of the given bit vector as the factor (the
right operand) specifies.
.Sp
If the factor is zero, the given bit vector is resized to a length of zero
bits.
.Sp
If the factor is one, the given bit vector is not changed at all.
.IP \(bu 2
\&\f(CW\*(C`$vector <<= $bits;\*(C'\fR
.Sp
This statement moves the contents of the given bit vector left by "\f(CW$bits\fR"
positions (towards the most significant bit).
.Sp
This means that the "\f(CW$bits\fR" most significant bits are lost, all other
bits move up by "\f(CW$bits\fR" positions, and the "\f(CW$bits\fR" least significant
bits that have been left unoccupied by this shift are all set to zero.
.Sp
If "\f(CW$bits\fR" is greater than the number of bits of the given bit vector,
the given bit vector is erased completely (i.e., all bits are cleared).
.IP \(bu 2
\&\f(CW\*(C`$vector >>= $bits;\*(C'\fR
.Sp
This statement moves the contents of the given bit vector right by "\f(CW$bits\fR"
positions (towards the least significant bit).
.Sp
This means that the "\f(CW$bits\fR" least significant bits are lost, all other
bits move down by "\f(CW$bits\fR" positions, and the "\f(CW$bits\fR" most significant
bits that have been left unoccupied by this shift are all set to zero.
.Sp
If "\f(CW$bits\fR" is greater than the number of bits of the given bit vector,
the given bit vector is erased completely (i.e., all bits are cleared).
.IP \(bu 2
\&\f(CW\*(C`$vector1 |= $vector2;\*(C'\fR
.Sp
This statement performs a bitwise OR operation between the two
bit vector operands and stores the result in the left operand.
.Sp
This is the same as calculating the union of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 &= $vector2;\*(C'\fR
.Sp
This statement performs a bitwise AND operation between the two
bit vector operands and stores the result in the left operand.
.Sp
This is the same as calculating the intersection of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 ^= $vector2;\*(C'\fR
.Sp
This statement performs a bitwise XOR (exclusive-or) operation
between the two bit vector operands and stores the result in the
left operand.
.Sp
This is the same as calculating the symmetric difference of two sets.
.IP \(bu 2
\&\f(CW\*(C`$vector1 += $vector2;\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this statement either performs
a bitwise OR operation between the two bit vector operands (this is
the same as calculating the union of two sets) \- which is the default
behaviour, or it calculates the sum of the two numbers stored in the
two bit vector operands.
.Sp
The result of this operation is stored in the left operand.
.IP \(bu 2
\&\f(CW\*(C`$vector1 \-= $vector2;\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this statement either calculates
the set difference of the two sets represented in the two bit vector
operands \- which is the default behaviour, or it calculates the
difference of the two numbers stored in the two bit vector operands.
.Sp
The result of this operation is stored in the left operand.
.IP \(bu 2
\&\f(CW\*(C`$vector1 *= $vector2;\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this statement either performs
a bitwise AND operation between the two bit vector operands (this is
the same as calculating the intersection of two sets) \- which is the
default behaviour, or it calculates the product of the two numbers
stored in the two bit vector operands.
.Sp
The result of this operation is stored in the left operand.
.IP \(bu 2
\&\f(CW\*(C`$vector1 /= $vector2;\*(C'\fR
.Sp
This statement puts the result of the division of the two numbers
stored in the two bit vector operands into the left operand.
.IP \(bu 2
\&\f(CW\*(C`$vector1 %= $vector2;\*(C'\fR
.Sp
This statement puts the remainder of the division of the two numbers
stored in the two bit vector operands into the left operand.
.IP \(bu 2
\&\f(CW\*(C`$vector1 **= $vector2;\*(C'\fR
.Sp
This statement puts the result of the exponentiation of the left
operand elevated to the right operand's power into the left operand.
.IP \(bu 2
\&\f(CW\*(C`++$vector\*(C'\fR, \f(CW\*(C`$vector++\*(C'\fR
.Sp
This operator performs pre\- and post-incrementation of the
given bit vector.
.Sp
The value returned by this term is a reference of the given
bit vector object (after or before the incrementation,
respectively).
.IP \(bu 2
\&\f(CW\*(C`\-\-$vector\*(C'\fR, \f(CW\*(C`$vector\-\-\*(C'\fR
.Sp
This operator performs pre\- and post-decrementation of the
given bit vector.
.Sp
The value returned by this term is a reference of the given
bit vector object (after or before the decrementation,
respectively).
.IP \(bu 2
\&\f(CW\*(C`($vector1 cmp $vector2)\*(C'\fR
.Sp
This term returns "\f(CW\-1\fR" if "\f(CW$vector1\fR" is less than "\f(CW$vector2\fR",
"\f(CW0\fR" if "\f(CW$vector1\fR" and "\f(CW$vector2\fR" are the same, and "\f(CW1\fR"
if "\f(CW$vector1\fR" is greater than "\f(CW$vector2\fR".
.Sp
This comparison assumes \fBUNSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 eq $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if the contents of the two bit vector
operands are the same and false ("\f(CW0\fR") otherwise.
.IP \(bu 2
\&\f(CW\*(C`($vector1 ne $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if the two bit vector operands differ
and false ("\f(CW0\fR") otherwise.
.IP \(bu 2
\&\f(CW\*(C`($vector1 lt $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is less than "\f(CW$vector2\fR",
and false ("\f(CW0\fR") otherwise.
.Sp
This comparison assumes \fBUNSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 le $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is less than or equal to
"\f(CW$vector2\fR", and false ("\f(CW0\fR") otherwise.
.Sp
This comparison assumes \fBUNSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 gt $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is greater than "\f(CW$vector2\fR",
and false ("\f(CW0\fR") otherwise.
.Sp
This comparison assumes \fBUNSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 ge $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is greater than or equal to
"\f(CW$vector2\fR", and false ("\f(CW0\fR") otherwise.
.Sp
This comparison assumes \fBUNSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 <=> $vector2)\*(C'\fR
.Sp
This term returns "\f(CW\-1\fR" if "\f(CW$vector1\fR" is less than "\f(CW$vector2\fR",
"\f(CW0\fR" if "\f(CW$vector1\fR" and "\f(CW$vector2\fR" are the same, and "\f(CW1\fR"
if "\f(CW$vector1\fR" is greater than "\f(CW$vector2\fR".
.Sp
This comparison assumes \fBSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 == $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if the contents of the two bit vector
operands are the same and false ("\f(CW0\fR") otherwise.
.IP \(bu 2
\&\f(CW\*(C`($vector1 != $vector2)\*(C'\fR
.Sp
This term returns true ("\f(CW1\fR") if the two bit vector operands differ
and false ("\f(CW0\fR") otherwise.
.IP \(bu 2
\&\f(CW\*(C`($vector1 < $vector2)\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
true ("\f(CW1\fR") if "\f(CW$vector1\fR" is a true subset of "\f(CW$vector2\fR"
(and false ("\f(CW0\fR") otherwise) \- which is the default behaviour,
or it returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is less than
"\f(CW$vector2\fR" (and false ("\f(CW0\fR") otherwise).
.Sp
The latter comparison assumes \fBSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 <= $vector2)\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
true ("\f(CW1\fR") if "\f(CW$vector1\fR" is a subset of "\f(CW$vector2\fR" (and
false ("\f(CW0\fR") otherwise) \- which is the default behaviour, or it
returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is less than or equal to
"\f(CW$vector2\fR" (and false ("\f(CW0\fR") otherwise).
.Sp
The latter comparison assumes \fBSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 > $vector2)\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
true ("\f(CW1\fR") if "\f(CW$vector1\fR" is a true superset of "\f(CW$vector2\fR"
(and false ("\f(CW0\fR") otherwise) \- which is the default behaviour,
or it returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is greater than
"\f(CW$vector2\fR" (and false ("\f(CW0\fR") otherwise).
.Sp
The latter comparison assumes \fBSIGNED\fR bit vectors.
.IP \(bu 2
\&\f(CW\*(C`($vector1 >= $vector2)\*(C'\fR
.Sp
Depending on the configuration (see the description of the method
"\f(CWConfiguration()\fR" for more details), this term either returns
true ("\f(CW1\fR") if "\f(CW$vector1\fR" is a superset of "\f(CW$vector2\fR" (and
false ("\f(CW0\fR") otherwise) \- which is the default behaviour, or it
returns true ("\f(CW1\fR") if "\f(CW$vector1\fR" is greater than or equal to
"\f(CW$vector2\fR" (and false ("\f(CW0\fR") otherwise).
.Sp
The latter comparison assumes \fBSIGNED\fR bit vectors.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBBit::Vector\fR\|(3), \fBBit::Vector::String\fR\|(3).
.SH VERSION
.IX Header "VERSION"
This man page documents "Bit::Vector::Overload" version 7.4.
.SH AUTHOR
.IX Header "AUTHOR"
.Vb 3
\&  Steffen Beyer
\&  mailto:STBEY@cpan.org
\&  http://www.engelschall.com/u/sb/download/
.Ve
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2000 \- 2013 by Steffen Beyer. All rights reserved.
.SH LICENSE
.IX Header "LICENSE"
This package is free software; you can redistribute it and/or
modify it under the same terms as Perl itself, i.e., under the
terms of the "Artistic License" or the "GNU General Public License".
.PP
The C library at the core of this Perl module can additionally
be redistributed and/or modified under the terms of the "GNU
Library General Public License".
.PP
Please refer to the files "Artistic.txt", "GNU_GPL.txt" and
"GNU_LGPL.txt" in this distribution for details!
.SH DISCLAIMER
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.PP
See the "GNU General Public License" for more details.
