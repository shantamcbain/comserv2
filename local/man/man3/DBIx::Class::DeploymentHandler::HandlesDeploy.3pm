.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::DeploymentHandler::HandlesDeploy 3pm"
.TH DBIx::Class::DeploymentHandler::HandlesDeploy 3pm 2024-07-17 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::DeploymentHandler::HandlesDeploy \- Interface for deploy methods
.SH "KNOWN IMPLEMENTATIONS"
.IX Header "KNOWN IMPLEMENTATIONS"
.IP \(bu 4
DBIx::Class::DeploymentHandler::DeployMethod::SQL::Translator
.IP \(bu 4
DBIx::Class::DeploymentHandler::DeployMethod::SQL::Translator::Deprecated
.SH METHODS
.IX Header "METHODS"
.SS initialize
.IX Subsection "initialize"
.Vb 4
\& $dh\->initialize({
\&   version      => 1,
\&   storage_type => \*(AqSQLite\*(Aq
\& });
.Ve
.PP
Run scripts before deploying to the database
.SS prepare_deploy
.IX Subsection "prepare_deploy"
.Vb 1
\& $dh\->prepare_deploy
.Ve
.PP
Generate the needed data files to install the schema to the database.
.SS deploy
.IX Subsection "deploy"
.Vb 1
\& $dh\->deploy({ version => 1 })
.Ve
.PP
Deploy the schema to the database.
.SS prepare_resultsource_install
.IX Subsection "prepare_resultsource_install"
.Vb 3
\& $dh\->prepare_resultsource_install({
\&   result_source => $resultset\->result_source,
\& })
.Ve
.PP
Takes a DBIx::Class::ResultSource and generates a single migration file to
create the resultsource's table.
.SS install_resultsource
.IX Subsection "install_resultsource"
.Vb 4
\& $dh\->install_resultsource({
\&   result_source => $resultset\->result_source,
\&   version       => 1,
\& })
.Ve
.PP
Takes a DBIx::Class::ResultSource and runs a single migration file to
deploy the resultsource's table.
.SS prepare_upgrade
.IX Subsection "prepare_upgrade"
.Vb 5
\& $dh\->prepare_upgrade({
\&   from_version => 1,
\&   to_version   => 2,
\&   version_set  => [1, 2]
\& });
.Ve
.PP
Takes two versions and a version set.  This basically is supposed to generate
the needed \f(CW\*(C`SQL\*(C'\fR to migrate up from the first version to the second version.
The version set uniquely identifies the migration.
.SS prepare_downgrade
.IX Subsection "prepare_downgrade"
.Vb 5
\& $dh\->prepare_downgrade({
\&   from_version => 2,
\&   to_version   => 1,
\&   version_set  => [1, 2]
\& });
.Ve
.PP
Takes two versions and a version set.  This basically is supposed to generate
the needed \f(CW\*(C`SQL\*(C'\fR to migrate down from the first version to the second version.
The version set uniquely identifies the migration and should match its
respective upgrade version set.
.SS upgrade_single_step
.IX Subsection "upgrade_single_step"
.Vb 3
\& my ($ddl, $sql) = @{
\&   $dh\->upgrade_single_step({ version_set => $version_set })
\& ||[]}
.Ve
.PP
Call a single upgrade migration.  Takes a version set as an argument.
Optionally return \f(CW\*(C`[ $ddl, $upgrade_sql ]\*(C'\fR where \f(CW$ddl\fR is the DDL for
that version of the schema and \f(CW$upgrade_sql\fR is the SQL that was run to
upgrade the database.
.SS downgrade_single_step
.IX Subsection "downgrade_single_step"
.Vb 1
\& $dh\->downgrade_single_step($version_set);
.Ve
.PP
Call a single downgrade migration.  Takes a version set as an argument.
Optionally return \f(CW\*(C`[ $ddl, $upgrade_sql ]\*(C'\fR where \f(CW$ddl\fR is the DDL for
that version of the schema and \f(CW$upgrade_sql\fR is the SQL that was run to
upgrade the database.
.SS txn_do
.IX Subsection "txn_do"
.Vb 1
\& $dh\->txn_do(sub { ... })
.Ve
.PP
Wrap the passed coderef in a transaction (if transactions are enabled.)
.SH AUTHOR
.IX Header "AUTHOR"
Arthur Axel "fREW" Schmidt <frioux+cpan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2024 by Arthur Axel "fREW" Schmidt.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
