.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Script::Help 3pm"
.TH DBIx::Class::Migration::Script::Help 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Script::Help \- Summary of the commands
.SH USAGE
.IX Header "USAGE"
.Vb 1
\&  dbic\-migration [options] Command
.Ve
.SH COMMANDS
.IX Header "COMMANDS"
The following is a summary of available commands
.SS "Informational Commands"
.IX Subsection "Informational Commands"
.Vb 4
\&  help                : Summary of commandline Help.
\&  help [word]         : Detailed help for [command] or [option].
\&  version             : The version of DBIx::Class::Migration you are using.
\&  status              : Current database and schema version
.Ve
.SS "Preparing and using Migrations"
.IX Subsection "Preparing and using Migrations"
.Vb 6
\&  prepare             : Makes deployment files for your schema_class
\&  install             : Install a version to the database.
\&  upgrade             : Upgrade the database.
\&  downgrade           : Downgrade the database.
\&  install_if_needed   : Install the database if its not installed
\&  install_version_storage : populate the DBIC:DH metadata tables
.Ve
.SS "Commands for working with Fixtures:"
.IX Subsection "Commands for working with Fixtures:"
.Vb 3
\&  dump_named_sets     : Created fixture sets for the named sets
\&  dump_all_sets       : Dump all available fxture sets
\&  populate            : Deploy the current database from fixtures
.Ve
.SS "Utility Commands"
.IX Subsection "Utility Commands"
.Vb 4
\&  drop_tables         : drops all tables in the target database.  CAREFUL!
\&  delete_table_rows   : truncate all the tables (no data, keep structure).
\&  make_schema         : Reverse engineer your database into DBIx::Class
\&  diagram             : Create an image schematic of your schema
.Ve
.SS "Command options"
.IX Subsection "Command options"
.Vb 10
\&  include/s (I,lib/s) : Adds the listed paths to @INC.
\&  schema_class (S)    : The DBIx::Class::Schema subclass you are migrating
\&  target_dir (D)      : Where to put (or find) your migration files
\&  sandbox_dir         : Specific an alternative path for your database sandbox
\&  username (U)
\&  password (P)
\&  dsn                 : connection info to the database you are migrating
\&  force_overwrite (O) : Allow overwriting of existing migration files
\&  to_version (V)      : Use the given migration version
\&  database/s          : The type of database we are preparing migrations for.
\&  fixture_set/s       : Control the fixture sets used for dumping or populating
\&  sandbox_class (T)   : Make any of SqliteSandbox, MySQLSandbox, PostgresqlSandbox
\&  dbic_fixture_class  : Name an alternative subclass of DBIx::Class::Fixtures
\&  dbic_connect_attrs  : Pass custom args to DBIx::Class::Schema\->connect
\&  dbi_connect_attrs   : Pass custom args to DBI via DBIx::Class::Schema\->connect
\&  extra_schemaloader_args  : Pass custom args to DBIx::Class::Migration::SchemaLoader
\&  dbic_fixtures_extra_args : Pass custom args to DBIx::Class::Fixtures
.Ve
.SH EXAMPLE
.IX Header "EXAMPLE"
.Vb 4
\&    dbic\-migration status \e
\&      \-\-libs="lib" \e
\&      \-\-schema_class=\*(AqMyApp::Schema\*(Aq \e
\&      \-\-dsn=\*(AqDBI:SQLite:myapp.db\*(Aq
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Script,
DBIx::Class::Migration::Features, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
