.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Digest::SHA3_224 3pm"
.TH Crypt::Digest::SHA3_224 3pm 2025-02-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::Digest::SHA3_224 \- Hash function SHA3\-224 [size: 224 bits]
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&   ### Functional interface:
\&   use Crypt::Digest::SHA3_224 qw( sha3_224 sha3_224_hex sha3_224_b64 sha3_224_b64u
\&                                sha3_224_file sha3_224_file_hex sha3_224_file_b64 sha3_224_file_b64u );
\&
\&   # calculate digest from string/buffer
\&   $sha3_224_raw  = sha3_224(\*(Aqdata string\*(Aq);
\&   $sha3_224_hex  = sha3_224_hex(\*(Aqdata string\*(Aq);
\&   $sha3_224_b64  = sha3_224_b64(\*(Aqdata string\*(Aq);
\&   $sha3_224_b64u = sha3_224_b64u(\*(Aqdata string\*(Aq);
\&   # calculate digest from file
\&   $sha3_224_raw  = sha3_224_file(\*(Aqfilename.dat\*(Aq);
\&   $sha3_224_hex  = sha3_224_file_hex(\*(Aqfilename.dat\*(Aq);
\&   $sha3_224_b64  = sha3_224_file_b64(\*(Aqfilename.dat\*(Aq);
\&   $sha3_224_b64u = sha3_224_file_b64u(\*(Aqfilename.dat\*(Aq);
\&   # calculate digest from filehandle
\&   $sha3_224_raw  = sha3_224_file(*FILEHANDLE);
\&   $sha3_224_hex  = sha3_224_file_hex(*FILEHANDLE);
\&   $sha3_224_b64  = sha3_224_file_b64(*FILEHANDLE);
\&   $sha3_224_b64u = sha3_224_file_b64u(*FILEHANDLE);
\&
\&   ### OO interface:
\&   use Crypt::Digest::SHA3_224;
\&
\&   $d = Crypt::Digest::SHA3_224\->new;
\&   $d\->add(\*(Aqany data\*(Aq);
\&   $d\->addfile(\*(Aqfilename.dat\*(Aq);
\&   $d\->addfile(*FILEHANDLE);
\&   $result_raw  = $d\->digest;     # raw bytes
\&   $result_hex  = $d\->hexdigest;  # hexadecimal form
\&   $result_b64  = $d\->b64digest;  # Base64 form
\&   $result_b64u = $d\->b64udigest; # Base64 URL Safe form
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Provides an interface to the SHA3_224 digest algorithm.
.SH EXPORT
.IX Header "EXPORT"
Nothing is exported by default.
.PP
You can export selected functions:
.PP
.Vb 2
\&  use Crypt::Digest::SHA3_224 qw(sha3_224 sha3_224_hex sha3_224_b64 sha3_224_b64u
\&                                      sha3_224_file sha3_224_file_hex sha3_224_file_b64 sha3_224_file_b64u);
.Ve
.PP
Or all of them at once:
.PP
.Vb 1
\&  use Crypt::Digest::SHA3_224 \*(Aq:all\*(Aq;
.Ve
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS sha3_224
.IX Subsection "sha3_224"
Logically joins all arguments into a single string, and returns its SHA3_224 digest encoded as a binary string.
.PP
.Vb 3
\& $sha3_224_raw = sha3_224(\*(Aqdata string\*(Aq);
\& #or
\& $sha3_224_raw = sha3_224(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS sha3_224_hex
.IX Subsection "sha3_224_hex"
Logically joins all arguments into a single string, and returns its SHA3_224 digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $sha3_224_hex = sha3_224_hex(\*(Aqdata string\*(Aq);
\& #or
\& $sha3_224_hex = sha3_224_hex(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS sha3_224_b64
.IX Subsection "sha3_224_b64"
Logically joins all arguments into a single string, and returns its SHA3_224 digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $sha3_224_b64 = sha3_224_b64(\*(Aqdata string\*(Aq);
\& #or
\& $sha3_224_b64 = sha3_224_b64(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS sha3_224_b64u
.IX Subsection "sha3_224_b64u"
Logically joins all arguments into a single string, and returns its SHA3_224 digest encoded as a Base64 URL Safe string (see RFC 4648 section 5).
.PP
.Vb 3
\& $sha3_224_b64url = sha3_224_b64u(\*(Aqdata string\*(Aq);
\& #or
\& $sha3_224_b64url = sha3_224_b64u(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS sha3_224_file
.IX Subsection "sha3_224_file"
Reads file (defined by filename or filehandle) content, and returns its SHA3_224 digest encoded as a binary string.
.PP
.Vb 3
\& $sha3_224_raw = sha3_224_file(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha3_224_raw = sha3_224_file(*FILEHANDLE);
.Ve
.SS sha3_224_file_hex
.IX Subsection "sha3_224_file_hex"
Reads file (defined by filename or filehandle) content, and returns its SHA3_224 digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $sha3_224_hex = sha3_224_file_hex(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha3_224_hex = sha3_224_file_hex(*FILEHANDLE);
.Ve
.PP
\&\fBBEWARE:\fR You have to make sure that the filehandle is in binary mode before you pass it as argument to the \fBaddfile()\fR method.
.SS sha3_224_file_b64
.IX Subsection "sha3_224_file_b64"
Reads file (defined by filename or filehandle) content, and returns its SHA3_224 digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $sha3_224_b64 = sha3_224_file_b64(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha3_224_b64 = sha3_224_file_b64(*FILEHANDLE);
.Ve
.SS sha3_224_file_b64u
.IX Subsection "sha3_224_file_b64u"
Reads file (defined by filename or filehandle) content, and returns its SHA3_224 digest encoded as a Base64 URL Safe string (see RFC 4648 section 5).
.PP
.Vb 3
\& $sha3_224_b64url = sha3_224_file_b64u(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha3_224_b64url = sha3_224_file_b64u(*FILEHANDLE);
.Ve
.SH METHODS
.IX Header "METHODS"
The OO interface provides the same set of functions as Crypt::Digest.
.SS new
.IX Subsection "new"
.Vb 1
\& $d = Crypt::Digest::SHA3_224\->new();
.Ve
.SS clone
.IX Subsection "clone"
.Vb 1
\& $d\->clone();
.Ve
.SS reset
.IX Subsection "reset"
.Vb 1
\& $d\->reset();
.Ve
.SS add
.IX Subsection "add"
.Vb 3
\& $d\->add(\*(Aqany data\*(Aq);
\& #or
\& $d\->add(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS addfile
.IX Subsection "addfile"
.Vb 3
\& $d\->addfile(\*(Aqfilename.dat\*(Aq);
\& #or
\& $d\->addfile(*FILEHANDLE);
.Ve
.SS add_bits
.IX Subsection "add_bits"
.Vb 3
\& $d\->add_bits($bit_string);   # e.g. $d\->add_bits("111100001010");
\& #or
\& $d\->add_bits($data, $nbits); # e.g. $d\->add_bits("\exF0\exA0", 16);
.Ve
.SS hashsize
.IX Subsection "hashsize"
.Vb 5
\& $d\->hashsize;
\& #or
\& Crypt::Digest::SHA3_224\->hashsize();
\& #or
\& Crypt::Digest::SHA3_224::hashsize();
.Ve
.SS digest
.IX Subsection "digest"
.Vb 1
\& $result_raw = $d\->digest();
.Ve
.SS hexdigest
.IX Subsection "hexdigest"
.Vb 1
\& $result_hex = $d\->hexdigest();
.Ve
.SS b64digest
.IX Subsection "b64digest"
.Vb 1
\& $result_b64 = $d\->b64digest();
.Ve
.SS b64udigest
.IX Subsection "b64udigest"
.Vb 1
\& $result_b64url = $d\->b64udigest();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
CryptX, Crypt::Digest
.IP \(bu 4
<https://en.wikipedia.org/wiki/SHA\-3>
