.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::Oracle::WhereJoins 3pm"
.TH DBIx::Class::Storage::DBI::Oracle::WhereJoins 3pm 2018-04-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::Oracle::WhereJoins \- Oracle joins in WHERE syntax
support (instead of ANSI).
.SH PURPOSE
.IX Header "PURPOSE"
This module is used with Oracle < 9.0 due to lack of support for standard
ANSI join syntax.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
DBIx::Class should automagically detect Oracle and use this module with no
work from you.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class implements Oracle's WhereJoin support.  Instead of:
.PP
.Vb 1
\&    SELECT x FROM y JOIN z ON y.id = z.id
.Ve
.PP
It will write:
.PP
.Vb 1
\&    SELECT x FROM y, z WHERE y.id = z.id
.Ve
.PP
It should properly support left joins, and right joins.  Full outer joins are
not possible due to the fact that Oracle requires the entire query be written
to union the results of a left and right join, and by the time this module is
called to create the where query and table definition part of the SQL query,
it's already too late.
.SH METHODS
.IX Header "METHODS"
See DBIx::Class::SQLMaker::OracleJoins for implementation details.
.SH BUGS
.IX Header "BUGS"
Does not support full outer joins.
Probably lots more.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP DBIx::Class::SQLMaker 4
.IX Item "DBIx::Class::SQLMaker"
.PD 0
.IP DBIx::Class::SQLMaker::OracleJoins 4
.IX Item "DBIx::Class::SQLMaker::OracleJoins"
.IP DBIx::Class::Storage::DBI::Oracle::Generic 4
.IX Item "DBIx::Class::Storage::DBI::Oracle::Generic"
.IP DBIx::Class 4
.IX Item "DBIx::Class"
.PD
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
