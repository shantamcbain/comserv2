.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Filter::Names 3pm"
.TH SQL::Translator::Filter::Names 3pm 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Filter::Names \- Tweak the names of schema objects.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  #! /usr/bin/perl \-w
\&  use SQL::Translator;
\&
\&  # Lowercase all table names and upper case the first letter of all field
\&  # names. (MySql style!)
\&  #
\&  my $sqlt = SQL::Translator\->new(
\&      filename => \e@ARGV,
\&      from     => \*(AqMySQL\*(Aq,
\&      to       => \*(AqMySQL\*(Aq,
\&      filters => [
\&        Names => {
\&            \*(Aqtables\*(Aq => \*(Aqlc\*(Aq,
\&            \*(Aqfields\*(Aq => \*(Aqucfirst\*(Aq,
\&        },
\&      ],
\&  ) || die "SQLFairy error : ".SQL::Translator\->error;
\&  print($sqlt\->translate) || die "SQLFairy error : ".$sqlt\->error;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Tweak the names of schema objects by providing functions to filter the names
from the given into the desired forms.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CWperl(1)\fR, SQL::Translator
.IP "Name Groups" 4
.IX Item "Name Groups"
Define a bunch of useful groups to run the name filters over. e.g. all, fkeys,
pkeys etc.
.IP "More Functions" 4
.IX Item "More Functions"
e.g. camelcase, titlecase, single word etc.
Also a way to pass in a regexp.
.Sp
May also want a way to pass in arguments for the func e.g. prefix.
.IP "Multiple Filters on the same name (filter order)?" 4
.IX Item "Multiple Filters on the same name (filter order)?"
Do we actually need this, you could just run lots of filters. Would make adding
func args to the interface easier.
.Sp
.Vb 7
\&    filters => [
\&        [ \*(AqNames\*(Aq, { all => \*(Aqlc\*(Aq } ],
\&        [ \*(AqNames\*(Aq, {
\&            tables => \*(Aqlc\*(Aq,
\&            fields => \*(Aqucfirst\*(Aq,
\&        } ],
\&    ],
.Ve
.Sp
Mind you if you could give the filter a list this wouldn't be a problem!
.Sp
.Vb 6
\&    filters => [
\&        [ \*(AqNames\*(Aq,
\&            all    => \*(Aqlc\*(Aq
\&            fields => \*(Aqucfirst\*(Aq,
\&        ],
\&    ],
.Ve
.Sp
Which is nice. Might have to change the calling conventions for filters.
Would also provide an order to run the filters in rather than having to hard
code it into the filter it's self.
