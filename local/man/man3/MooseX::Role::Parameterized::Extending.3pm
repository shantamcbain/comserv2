.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Role::Parameterized::Extending 3pm"
.TH MooseX::Role::Parameterized::Extending 3pm 2019-07-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooseX::Role::Parameterized::Extending \- extending MooseX::Role::Parameterized roles
.SH VERSION
.IX Header "VERSION"
version 1.11
.SH DESCRIPTION
.IX Header "DESCRIPTION"
There are heaps of useful modules in the \f(CW\*(C`MooseX\*(C'\fR namespace that you can use
to make your roles more powerful. However, they do not always work out of the
box with MooseX::Role::Parameterized, but it's fairly straight-forward to
achieve the functionality you desire.
.PP
MooseX::Role::Parameterized was designed to be as extensible as the rest of
Moose, and as such it is possible to apply custom traits to both the
parameterizable role or the ordinary roles they generate. In this example, we
will look at applying the fake trait \f(CW\*(C`MooseX::MagicRole\*(C'\fR to a parameterizable
role.
.PP
First we need to define a new metaclass for our parameterizable role.
.PP
.Vb 4
\&    package MyApp::Meta::Role::Parameterizable;
\&    use Moose;
\&    extends \*(AqMooseX::Role::Parameterized::Meta::Role::Parameterizable\*(Aq;
\&    with \*(AqMooseX::MagicRole\*(Aq;
.Ve
.PP
This is a class (observe that it uses Moose, not Moose::Role) which
extends the class which governs parameterizable roles.
MooseX::Role::Parameterized::Meta::Role::Parameterizable is the metaclass
that packages using MooseX::Role::Parameterized receive by default.
.PP
Note that the class we are extending,
MooseX::Role::Parameterized::Meta::Role::Parameteriz\fR\f(BIable\fR\fB\fR,
is entirely distinct from the similarly-named class which governs the
ordinary roles that parameterized roles generate. An instance of
MooseX::Role::Parameterized::Meta::Role::Parameteriz\fB\fR\f(BIed\fR\fB\fR
represents a role with its parameters already bound.
.PP
Now we can take advantage of our new subclass by specifying that we want to use
\&\f(CW\*(C`MyApp::Meta::Role::Parameterizable\*(C'\fR as our metaclass when importing
MooseX::Role::Parameterized:
.PP
.Vb 2
\&    package MyApp::Role;
\&    use MooseX::Role::Parameterized \-metaclass => \*(AqMyApp::Meta::Role::Parameterizable\*(Aq;
\&
\&    role {
\&        ...
\&    }
.Ve
.PP
And there you go! \f(CW\*(C`MyApp::Role\*(C'\fR now has the \f(CW\*(C`MooseX::MagicRole\*(C'\fR trait applied.
.SH NAME
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=MooseX-Role-Parameterized>
(or bug\-MooseX\-Role\-Parameterized@rt.cpan.org <mailto:bug-MooseX-Role-Parameterized@rt.cpan.org>).
.PP
There is also a mailing list available for users of this distribution, at
<http://lists.perl.org/list/moose.html>.
.PP
There is also an irc channel available for users of this distribution, at
\&\f(CW\*(C`#moose\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR <irc://irc.perl.org/#moose>.
.SH AUTHOR
.IX Header "AUTHOR"
Shawn M Moore <code@sartak.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by Shawn M Moore.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
