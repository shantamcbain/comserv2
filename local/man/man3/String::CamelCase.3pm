.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::CamelCase 3pm"
.TH String::CamelCase 3pm 2018-03-24 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
String::CamelCase \- camelcase, de\-camelcase
.SH VERSION
.IX Header "VERSION"
Version 0.03
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\& use String::CamelCase qw(camelize decamelize wordsplit);
\& print camelize("some_keyword");  # ==> SomeKeyword
\& print decamelize("SomeKeyword"); # ==> some_keyword
\& print wordsplit("some_keyword"); # ==> (some, keyword)
\& print wordsplit("SomeKeyword");  # ==> (Some, Keyword)
.Ve
.SH EXPORT
.IX Header "EXPORT"
This module can export two functions, \f(CW\*(C`camelize\*(C'\fR and \f(CW\*(C`decamelize\*(C'\fR.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS camelize($under_score)
.IX Subsection "camelize($under_score)"
convert from under_score text to CamelCase one.
.SS decamelize($CamelCase)
.IX Subsection "decamelize($CamelCase)"
convert from CamelCase text to under_score one.
.SS wordsplit($str)
.IX Subsection "wordsplit($str)"
.SH AUTHOR
.IX Header "AUTHOR"
YAMASHINA Hio, \f(CW\*(C`<hio at cpan.org>\*(C'\fR
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-string\-camelcase at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=String\-CamelCase>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH SUPPORT
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc String::CamelCase
.Ve
.PP
You can also look for information at:
.IP \(bu 4
AnnoCPAN: Annotated CPAN documentation
.Sp
<http://annocpan.org/dist/String\-CamelCase>
.IP \(bu 4
CPAN Ratings
.Sp
<http://cpanratings.perl.org/d/String\-CamelCase>
.IP \(bu 4
RT: CPAN's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=String\-CamelCase>
.IP \(bu 4
Search CPAN
.Sp
<http://search.cpan.org/dist/String\-CamelCase>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CamelCase(en.wikipedia.org) <http://en.wikipedia.org/wiki/CamelCase>
.PP
CamelCase(ja.wikipedia.org) <http://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2006 YAMASHINA Hio, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
