.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Number::Tolerant::Union 3pm"
.TH Number::Tolerant::Union 3pm 2022-12-31 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Number::Tolerant::Union \- unions of tolerance ranges
.SH VERSION
.IX Header "VERSION"
version 1.710
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& use Number::Tolerant;
\&
\& my $range1 = tolerance(10 => to => 12);
\& my $range2 = tolerance(14 => to => 16);
\&
\& my $union = $range1 | $range2;
\&
\& if ($11 == $union) { ... } # this will happen
\& if ($12 == $union) { ... } # so will this
\&
\& if ($13 == $union) { ... } # nothing will happen here
\&
\& if ($14 == $union) { ... } # this will happen
\& if ($15 == $union) { ... } # so will this
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Number::Tolerant::Union is used by Number::Tolerant to represent the union
of multiple tolerances.  A subset of the same operators that function on a
tolerance will function on a union of tolerances, as listed below.
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This library should run on perls released even a long time ago.  It should work
on any version of perl released in the last five years.
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to lower
the minimum required perl.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
.Vb 1
\&  my $union = Number::Tolerant::Union\->new(@list_of_tolerances);
.Ve
.PP
There is a \f(CW\*(C`new\*(C'\fR method on the Number::Tolerant::Union class, but unions are
meant to be created with the \f(CW\*(C`|\*(C'\fR operator on a Number::Tolerant tolerance.
.PP
The arguments to \f(CW\*(C`new\*(C'\fR are a list of numbers or tolerances to be unioned.
.PP
Intersecting ranges are not converted into a single range, but this may change
in the future.  (For example, the union of "5 to 10" and "7 to 12" is not "5 to
12.")
.SS options
.IX Subsection "options"
This method will return a list of all the acceptable options for the union.
.SS Overloading
.IX Subsection "Overloading"
Tolerance unions overload a few operations, mostly comparisons.
.IP numification 4
.IX Item "numification"
Unions numify to undef.  If there's a better idea, I'd love to hear it.
.IP stringification 4
.IX Item "stringification"
A tolerance stringifies to a short description of itself.  This is a set of the
union's options, parentheses-enclosed and joined by the word "or"
.IP equality 4
.IX Item "equality"
A number is equal to a union if it is equal to any of its options.
.IP comparison 4
.IX Item "comparison"
A number is greater than a union if it is greater than all its options.
.Sp
A number is less than a union if it is less than all its options.
.IP "union intersection" 4
.IX Item "union intersection"
An intersection (\f(CW\*(C`&\*(C'\fR) with a union is commutted across all options.  In other
words:
.Sp
.Vb 1
\& (a | b | c) & d  ==yields==> ((a & d) | (b & d) | (c & d))
.Ve
.Sp
Options that have no intersection with the new element are dropped.  The
intersection of a constant number and a union yields that number, if the number
was in the union's ranges and otherwise yields nothing.
.SH TODO
.IX Header "TODO"
Who knows.  Collapsing overlapping options, probably.
.SH AUTHOR
.IX Header "AUTHOR"
Ricardo Signes <cpan@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
