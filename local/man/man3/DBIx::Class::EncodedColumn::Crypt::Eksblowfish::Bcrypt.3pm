.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt 3pm"
.TH DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt 3pm 2019-09-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt \- Eksblowfish bcrypt backend
.SH SYNOPSYS
.IX Header "SYNOPSYS"
.Vb 10
\&  #Eksblowfish bcrypt / cost of 8/ no key_nul / generate check method
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqpassword\*(Aq => {
\&      data_type => \*(AqCHAR\*(Aq,
\&      size      => 59,
\&      encode_column => 1,
\&      encode_class  => \*(AqCrypt::Eksblowfish::Bcrypt\*(Aq,
\&      encode_args   => { key_nul => 0, cost => 8 },
\&      encode_check_method => \*(Aqcheck_password\*(Aq,
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SH "ACCEPTED ARGUMENTS"
.IX Header "ACCEPTED ARGUMENTS"
.SS "key_nul => [01]"
.IX Subsection "key_nul => [01]"
Defaults to true.
.PP
From the Crypt::Eksblowfish::Bcrypt docs
.PP
.Vb 4
\&    Boolean: whether to append a NUL to the password before using it as a key.
\&    The algorithm as originally devised does not do this, but it was later
\&    modified to do it. The version that does append NUL is to be preferred;
\&    not doing so is supported only for backward compatibility.
.Ve
.SS "cost => \ed\ed?"
.IX Subsection "cost => dd?"
A single or  double digit non-negative integer representing the cost of the
hash function. Defaults to 8.
.SH METHODS
.IX Header "METHODS"
.ie n .SS "make_encode_sub $column_name, \e%encode_args"
.el .SS "make_encode_sub \f(CW$column_name\fP, \e%encode_args"
.IX Subsection "make_encode_sub $column_name, %encode_args"
Returns a coderef that accepts a plaintext value and returns an encoded value
.ie n .SS "make_check_sub $column_name, \e%encode_args"
.el .SS "make_check_sub \f(CW$column_name\fP, \e%encode_args"
.IX Subsection "make_check_sub $column_name, %encode_args"
Returns a coderef that when given the row object and a plaintext value will
return a boolean if the plaintext matches the encoded value. This is typically
used for password authentication.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::EncodedColumn::Digest, DBIx::Class::EncodedColumn,
Crypt::Eksblowfish::Bcrypt
.SH AUTHOR
.IX Header "AUTHOR"
Guillermo Roditi (groditi) <groditi@cpan.org>
.PP
Based on the Vienna WoC  ToDo manager code by Matt S trout (mst)
.SH LICENSE
.IX Header "LICENSE"
This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
