.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Plugin::Session::State 3pm"
.TH Catalyst::Plugin::Session::State 3pm 2022-06-03 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Plugin::Session::State \- Base class for session state
preservation plugins.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package Catalyst::Plugin::Session::State::MyBackend;
\&    use base qw/Catalyst::Plugin::Session::State/;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class doesn't actually provide any functionality, but when the
\&\f(CW\*(C`Catalyst::Plugin::Session\*(C'\fR module sets up it will check to see that
\&\f(CW\*(C`YourApp\->isa("Catalyst::Plugin::Session::State")\*(C'\fR.
.PP
When you write a session state plugin you should subclass this module this
reason only.
.SH "WRITING STATE PLUGINS"
.IX Header "WRITING STATE PLUGINS"
To write a session state plugin you usually need to extend two methods:
.IP prepare_(action|cookies|whatever) 4
.IX Item "prepare_(action|cookies|whatever)"
Set \f(CW\*(C`sessionid\*(C'\fR (accessor) at \fBprepare\fR time using data in the request.
.Sp
Note that this must happen \fBbefore\fR other \f(CW\*(C`prepare_action\*(C'\fR instances, in
order to get along with Catalyst::Plugin::Session. Overriding
\&\f(CW\*(C`prepare_cookies\*(C'\fR is probably the stablest approach.
.IP finalize 4
.IX Item "finalize"
Modify the response at to include the session ID if \f(CW\*(C`sessionid\*(C'\fR is defined,
using whatever scheme you use. For example, set a cookie.
