.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::Store::Null 3pm"
.TH Catalyst::Authentication::Store::Null 3pm 2024-10-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Authentication::Store::Null \- Null authentication store
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    use Catalyst qw(
\&        Authentication
\&    );
\&
\&    _\|_PACKAGE_\|_\->config( \*(AqPlugin::Authentication\*(Aq => {
\&        default_realm => \*(Aqremote\*(Aq,
\&        realms => {
\&            remote => {
\&                credential => {
\&                    class => \*(AqTypeKey\*(Aq,
\&                    key_url => \*(Aqhttp://example.com/regkeys.txt\*(Aq,
\&                },
\&                store => {
\&                    class => \*(AqNull\*(Aq,
\&                }
\&            }
\&        }
\&    });
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The Null store is a transparent store where any supplied user data is
accepted. This is mainly useful for remotely authenticating credentials
(e.g. TypeKey, OpenID) which may not be tied to any local storage. It also
helps facilitate integration with the Session plugin.
.SH METHODS
.IX Header "METHODS"
.SS "new( )"
.IX Subsection "new( )"
Creates a new instance of the store.
.SS "for_session( )"
.IX Subsection "for_session( )"
Returns the user object passed to the method.
.SS "from_session( )"
.IX Subsection "from_session( )"
Returns the user object passed to the method.
.SS "find_user( )"
.IX Subsection "find_user( )"
Since this store isn't tied to any real set of users, this method just returns
the user info bless as a Catalyst::Authentication::User::Hash
object.
.SS "user_supports( )"
.IX Subsection "user_supports( )"
Delegates to Catalyst::Authentication::User::Hash.
