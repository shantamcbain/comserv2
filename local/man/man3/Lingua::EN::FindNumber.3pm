.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Lingua::EN::FindNumber 3pm"
.TH Lingua::EN::FindNumber 3pm 2015-10-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Lingua::EN::FindNumber \- Locate (written) numbers in English text
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use Lingua::EN::FindNumber;
\&  my $text = "Fourscore and seven years ago, our four fathers...";
\&
\&  numify($text); # "87 years ago, our 4 fathers..."
\&
\&  @numbers = extract_numbers($text); # "Fourscore and seven", "four"
\&
\&  while ($text =~ /$number_re/g) { # Build your own iterator
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a regular expression for finding numbers in English
text. It also provides functions for extracting and manipulating such
numbers.
.SH "EXPORTED METHODS"
.IX Header "EXPORTED METHODS"
.ie n .SS "extract_numbers / numify / $number_re"
.el .SS "extract_numbers / numify / \f(CW$number_re\fP"
.IX Subsection "extract_numbers / numify / $number_re"
.Vb 1
\&  numify($text); # "87 years ago, our 4 fathers..."
\&
\&  @numbers = extract_numbers($text); # "Fourscore and seven", "four"
\&
\&  while ($text =~ /$number_re/g) { # Build your own iterator
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module was written for the Natural Languages chapter of the second
edition of Advanced Perl Programming.
.PP
This module works rather well in conjunction with
Lingua::EN::Words2Nums, which is a very cool module anyway.
(And Simon stole some of this module's code from it. Thanks, Joey!)
It may also be involved with Lingua::EN::NamedEntity in the future,
so check that one out too.
.SH REPOSITORY
.IX Header "REPOSITORY"
<https://github.com/neilb/Lingua\-EN\-FindNumber>
.SH AUTHOR
.IX Header "AUTHOR"
This module was originally written by Simon Cozens.
It was then maintained from 2004 to 2005 by Tony Bowden.
Since 2014 it has been maintained by Neil Bowers.
.SH "BUGS and QUERIES"
.IX Header "BUGS and QUERIES"
Please direct all correspondence regarding this module to:
  bug\-Lingua\-EN\-Number@rt.cpan.org
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003\-2005 by Simon Cozens
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
