.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::CreateDirectoryTree 3pm"
.TH Tree::Simple::Visitor::CreateDirectoryTree 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::CreateDirectoryTree \- A Visitor for create a set of directories and files from a Tree::Simple object
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::CreateDirectoryTree;
\&
\&  # create a Tree::Simple object which
\&  # represents a directory hierarchy
\&  my $tree = Tree::Simple\->new("www/")
\&                    \->addChildren(
\&                        Tree::Simple\->new("conf/")
\&                            \->addChildren(
\&                                Tree::Simple\->new("startup.pl"),
\&                                Tree::Simple\->new("httpd.conf")
\&                            ),
\&                        Tree::Simple\->new("cgi\-bin/"),
\&                        Tree::Simple\->new("ht_docs/"),
\&                        Tree::Simple\->new("logs/")
\&                            \->addChildren(
\&                                Tree::Simple\->new("error.log"),
\&                                Tree::Simple\->new("access.log")
\&                            ),
\&                    );
\&
\&  # create an instance of our visitor
\&  my $visitor = Tree::Simple::Visitor::CreateDirectoryTree\->new();
\&
\&  # pass the visitor to a Tree::Simple object
\&  $tree\->accept($visitor);
\&
\&  # the www/ directory now mirrors the structure of the tree
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This visitor can be used to create a set of directories and files from a Tree::Simple object hierarchy.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR, \f(CW\*(C`setFileHandler\*(C'\fR and \f(CW\*(C`setDirectoryHandler\*(C'\fR methods to customize its behavior.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as its \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are used to create the directory tree, it can be basically used as a node pre-processor. An example usage of this might be to enforce the \f(CW8.3\fR naming rules of DOS, or the 32 character limit of older macintoshes.
.IP "\fBsetFileHandler ($file_handler)\fR" 4
.IX Item "setFileHandler ($file_handler)"
This method accepts a CODE reference as its \f(CW$file_handler\fR argument and throws an exception
if it is not a CODE reference. This method can be used to create custom file creation behavior.
The default behavior is to just create the file and nothing else, but by using this method it
is possible to implement some other custom behavior, such as creating a file based on a template.
The function is passed the full path of the file to be created (as built by File::Spec).
.IP "\fBsetDirectoryHandler ($dir_handler)\fR" 4
.IX Item "setDirectoryHandler ($dir_handler)"
This method accepts a CODE reference as its \f(CW$dir_handler\fR argument and throws an exception
if it is not a CODE reference. This method can be used to create custom directory creation behavior.
The default behavior is to just create the directory and nothing else, but by using this method it
is possible to implement some other custom behavior, such as creating a directory on a remote
server. The function is passed the full path of the directory to be created (as built by
File::Spec).
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by the Tree::Simple \f(CW\*(C`accept\*(C'\fR method. It can also be used on its own,
it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple object),
and will throw and exception otherwise.
.Sp
The tree is processed as follows:
.RS 4
.IP "Any node which is not a leaf is considered a directory." 4
.IX Item "Any node which is not a leaf is considered a directory."
Obviously since files themselves are leaf nodes, this makes sense that non-leaves will be directories.
.ie n .IP "Any node (including leaf nodes) which ends in either the character ""/"" or ""\e"" is considered a directory." 4
.el .IP "Any node (including leaf nodes) which ends in either the character \f(CW/\fR or \f(CW\e\fR is considered a directory." 4
.IX Item "Any node (including leaf nodes) which ends in either the character / or is considered a directory."
I think it is a pretty standard convention to have directory names ending in a separator. The
separator itself is stripped off before the directory name is passed to File::Spec where the
platform specific directory path is created. This means that it does not matter which one you use,
it will be completely cross platform (at least as cross-platform as File::Spec is).
.IP "All other nodes are considered to be files." 4
.IX Item "All other nodes are considered to be files."
.RE
.RS 4
.RE
.SH Repository
.IX Header "Repository"
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory>
.SH SUPPORT
.IX Header "SUPPORT"
Bugs should be reported via the CPAN bug tracker at
.PP
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory/issues>
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the \fBTree::Simple\fR module, you should refer to that module for more information.
.SH AUTHOR
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
