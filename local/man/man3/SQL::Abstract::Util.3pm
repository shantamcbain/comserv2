.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Abstract::Util 3pm"
.TH SQL::Abstract::Util 3pm 2019-10-17 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Abstract::Util \- Small collection of utilities for SQL::Abstract::Classic
.SH "EXPORTABLE FUNCTIONS"
.IX Header "EXPORTABLE FUNCTIONS"
.SS is_plain_value
.IX Subsection "is_plain_value"
Determines if the supplied argument is a plain value as understood by this
module:
.IP \(bu 4
The value is \f(CW\*(C`undef\*(C'\fR
.IP \(bu 4
The value is a non-reference
.IP \(bu 4
The value is an object with stringification overloading
.IP \(bu 4
The value is of the form \f(CW\*(C`{ \-value => $anything }\*(C'\fR
.PP
On failure returns \f(CW\*(C`undef\*(C'\fR, on success returns a \fBscalar\fR reference
to the original supplied argument.
.IP \(bu 4
Note
.Sp
The stringification overloading detection is rather advanced: it takes
into consideration not only the presence of a \f(CW""\fR overload, but if that
fails also checks for enabled
autogenerated versions of \f(CW""\fR, based
on either \f(CW\*(C`0+\*(C'\fR or \f(CW\*(C`bool\*(C'\fR.
.Sp
Unfortunately testing in the field indicates that this
detection \fBmay tickle a latent bug in perl versions before 5.018\fR,
but only when very large numbers of stringifying objects are involved.
At the time of writing ( Sep 2014 ) there is no clear explanation of
the direct cause, nor is there a manageably small test case that reliably
reproduces the problem.
.Sp
If you encounter any of the following exceptions in \fBrandom places within
your application stack\fR \- this module may be to blame:
.Sp
.Vb 3
\&  Operation "ne": no method found,
\&    left argument in overloaded package <something>,
\&    right argument in overloaded package <something>
.Ve
.Sp
or perhaps even
.Sp
.Vb 1
\&  Stub found while resolving method "???" overloading """" in package <something>
.Ve
.Sp
If you fall victim to the above \- please attempt to reduce the problem
to something that could be sent to the SQL::Abstract::Classic developers
(either publicly or privately). As a workaround in the meantime you can
set \f(CW$ENV{SQLA_ISVALUE_IGNORE_AUTOGENERATED_STRINGIFICATION}\fR to a true
value, which will most likely eliminate your problem (at the expense of
not being able to properly detect exotic forms of stringification).
.Sp
This notice and environment variable will be removed in a future version,
as soon as the underlying problem is found and a reliable workaround is
devised.
.SS is_literal_value
.IX Subsection "is_literal_value"
Determines if the supplied argument is a literal value as understood by this
module:
.IP \(bu 4
\&\f(CW\*(C`\e$sql_string\*(C'\fR
.IP \(bu 4
\&\f(CW\*(C`\e[ $sql_string, @bind_values ]\*(C'\fR
.PP
On failure returns \f(CW\*(C`undef\*(C'\fR, on success returns an \fBarray\fR reference
containing the unpacked version of the supplied literal SQL and bind values.
