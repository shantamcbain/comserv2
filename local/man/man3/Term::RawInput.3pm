.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Term::RawInput 3pm"
.TH Term::RawInput 3pm 2023-05-28 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Term::RawInput \- A simple drop\-in replacement for <STDIN> in scripts
              with the additional ability to capture and return
              the non\-standard keys like 'End', 'Escape' [ESC], 'Insert', etc.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&   use Term::RawInput;
\&
\&   my $prompt=\*(AqPROMPT : \*(Aq;
\&   my ($input,$key)=(\*(Aq\*(Aq,\*(Aq\*(Aq);
\&   ($input,$key)=rawInput($prompt,0);
\&
\&   print "\enRawInput=$input" if $input;
\&   print "\enKey=$key\en" if $key;
\&
\&   print "Captured F1\en" if $key eq \*(AqF1\*(Aq;
\&   print "Captured ESCAPE\en" if $key eq \*(AqESC\*(Aq;
\&   print "Captured DELETE\en" if $key eq \*(AqDELETE\*(Aq;
\&   print "Captured PAGEDOWN\en" if $key eq \*(AqPAGEDOWN\*(Aq;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
I needed a ridiculously simple function that behaved exactly like \f(CW$input\fR=<STDIN> in scripts, that captured user input and and populated a variable with a resulting string. BUT \- I also wanted to use other KEYS like DELETE and the RIGHT ARROW key and have them captured and returned. So I really wanted this:
.PP
my \f(CW$prompt\fR='PROMPT : ';
($input,$key)=rawInput($prompt,0);
.PP
\&... where I could test the variable '$key' for the key that was used to terminate the input. That way I could use the arrow keys to scroll a menu for instance.
.PP
I looked through the CPAN, and could not find something this simple and straight-forward. So I wrote it. Enjoy.
.PP
The second argument to \fBrawInput()\fR is optional, and when set to 1 or any positive value, returns all keys instantly, instead of waiting for ENTER. This has turned out to be extremely useful for creating command environment "forms" without the need for curses. See Term::Menus and/or Net::FullAuto for more details.
.PP
NOTE: When the second argument is 0 or not used, BACKSPACE and TAB are not captured \- but used to backspace and tab. DELETE is captured. Also, no Control combinations are captured \- just the non-standard keys INSERT, DELETE, ENTER, ESC, HOME, PAGEDOWN, PAGEUP, END, the ARROW KEYS, and F1\-F12 (but *NOT* F1\-F12 with Windows Version of Perl \- especially Strawberry Perl [ This is a limitation of the Term::ReadKey Module. ]; but, works with Cygwin Perl!). All captured keys listed will terminate user input and return the results \- just like you would expect using ENTER with <STDIN>.
.SH AUTHOR
.IX Header "AUTHOR"
Brian M. Kelly <Brian.Kelly@fullautosoftware.net>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 2011\-2023
by Brian M. Kelly.
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Affero General Public License.
(http://www.gnu.org/licenses/agpl.html).
