.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::SqliteSandbox 3pm"
.TH DBIx::Class::Migration::SqliteSandbox 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::SqliteSandbox \- Autocreate a Sqlite sandbox
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use DBIx::Class::Migration;
\&
\&    my $migration = DBIx::Class::Migration\->new(
\&      schema_class=>\*(AqLocal::Schema\*(Aq,
\&      db_sandbox_class=>\*(AqDBIx::Class::Migration::SqliteSandbox\*(Aq),
\&
\&    $migration\->prepare;
\&    $migration\->install;
.Ve
.PP
Please note \f(CW\*(C`db_sandbox_class\*(C'\fR is a lazy built attribute, and it will default
to DBIx::Class::Migration::SqliteSandbox.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
In order to help you jumpstart your database design and deployment, by default
we will automatically create a sqlite based file database in your \f(CW\*(C`target\-dir\*(C'\fR.
.PP
This is the default supported option as documented in DBIx::Class::Migration
and in DBIx::Class::Migration::Tutorial.  DBD::SQLite is useful for your
initial development and for when you are trying to build quick prototypes but
for production and more serious work I recommend you target a different 
database.  You can use MySQL::Sandbox to make it easy to create local MySQL
sandboxes for development, including replication clusters.  For a more simple
(and limited) approach you can also use DBIx::Class::Migration::MySQLSandbox
or DBIx::Class::Migration::PgSandbox.
.PP
Nothing else is required to install in order to use this default option.
.PP
Since Sqlite is a simple, single file database that doesn't run persistently
we don't create any helper scripts.  If you want to access the database directly
you can do so with the \f(CW\*(C`sqlite3\*(C'\fR commandline tool which you should get when
you get DBD::Sqlite.  To access the sandbox database:
.PP
.Vb 1
\&    sqlite3 [target_dir]/[schema_class].db
.Ve
.PP
For example, if your \f(CW\*(C`schema_class\*(C'\fR is \f(CW\*(C`MyApp::Schema\*(C'\fR and your sandbox is in
the default \f(CW\*(C`share\*(C'\fR:
.PP
.Vb 1
\&    sqlite3  MyApp\-Web/share/myapp\-schema.db
.Ve
.PP
You can also follow the tutorial DBIx::Class::Migration::Tutorial since the
bulk of the tutorial uses the sqlite sandbox.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBD::Sqlite.
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
