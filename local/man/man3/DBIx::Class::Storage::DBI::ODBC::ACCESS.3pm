.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::DBI::ODBC::ACCESS 3pm"
.TH DBIx::Class::Storage::DBI::ODBC::ACCESS 3pm 2018-04-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::DBI::ODBC::ACCESS \- Support specific to MS Access over ODBC
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class implements support specific to Microsoft Access over ODBC.
.PP
It is a subclass of DBIx::Class::Storage::DBI::ODBC and
DBIx::Class::Storage::DBI::ACCESS, see those classes for more
information.
.PP
It is loaded automatically by DBIx::Class::Storage::DBI::ODBC when it
detects a MS Access back-end.
.PP
This driver implements workarounds for \f(CW\*(C`IMAGE\*(C'\fR and \f(CW\*(C`MEMO\*(C'\fR columns, and
DBIx::Class::InflateColumn::DateTime support for \f(CW\*(C`DATETIME\*(C'\fR columns.
.SH "EXAMPLE DSN"
.IX Header "EXAMPLE DSN"
.Vb 1
\&  dbi:ODBC:driver={Microsoft Access Driver (*.mdb, *.accdb)};dbq=C:\eUsers\erkitover\eDocuments\eaccess_sample.accdb
.Ve
.SH "TEXT/IMAGE/MEMO COLUMNS"
.IX Header "TEXT/IMAGE/MEMO COLUMNS"
Avoid using \f(CW\*(C`TEXT\*(C'\fR columns as they will be truncated to 255 bytes. Some other
drivers (like ADO) will automatically
convert \f(CW\*(C`TEXT\*(C'\fR columns to \f(CW\*(C`MEMO\*(C'\fR, but the ODBC driver does not.
.PP
\&\f(CW\*(C`IMAGE\*(C'\fR columns work correctly, but the statements for inserting or updating an
\&\f(CW\*(C`IMAGE\*(C'\fR column will not be cached, due to a bug in the
Access ODBC driver.
.PP
\&\f(CW\*(C`MEMO\*(C'\fR columns work correctly as well, but you must take care to set
LongReadLen to \f(CW\*(C`$max_memo_size * 2 + 1\*(C'\fR. This is done for
you automatically if you pass LongReadLen in your
connect_info; but if you set this
attribute directly on the \f(CW$dbh\fR, keep this limitation in mind.
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
