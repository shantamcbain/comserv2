.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::EncodedColumn 3pm"
.TH DBIx::Class::EncodedColumn 3pm 2019-09-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::EncodedColumn \- Automatically encode columns
.SH SYNOPSIS
.IX Header "SYNOPSIS"
In your DBIx::Class Result class
(sometimes erroneously referred to as the 'table' class):
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->load_components(qw/EncodedColumn ... Core/);
\&
\&  #Digest encoder with hex format and SHA\-1 algorithm
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqpassword\*(Aq => {
\&      data_type     => \*(AqCHAR\*(Aq,
\&      size          => 40,
\&      encode_column => 1,
\&      encode_class  => \*(AqDigest\*(Aq,
\&      encode_args   => {algorithm => \*(AqSHA\-1\*(Aq, format => \*(Aqhex\*(Aq},
\&  }
\&
\&  #SHA\-1 / hex encoding / generate check method
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqpassword\*(Aq => {
\&      data_type   => \*(AqCHAR\*(Aq,
\&      size        => 40 + 10,
\&      encode_column => 1,
\&      encode_class  => \*(AqDigest\*(Aq,
\&      encode_args   => {algorithm => \*(AqSHA\-1\*(Aq, format => \*(Aqhex\*(Aq, salt_length => 10},
\&      encode_check_method => \*(Aqcheck_password\*(Aq,
\&  }
\&
\&  #MD5 /  base64 encoding / generate check method
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqpassword\*(Aq => {
\&      data_type => \*(AqCHAR\*(Aq,
\&      size      => 22,
\&      encode_column => 1,
\&      encode_class  => \*(AqDigest\*(Aq,
\&      encode_args   => {algorithm => \*(AqMD5\*(Aq, format => \*(Aqbase64\*(Aq},
\&      encode_check_method => \*(Aqcheck_password\*(Aq,
\&  }
\&
\&  #Eksblowfish bcrypt / cost of 8/ no key_nul / generate check method
\&  _\|_PACKAGE_\|_\->add_columns(
\&    \*(Aqpassword\*(Aq => {
\&      data_type => \*(AqCHAR\*(Aq,
\&      size      => 59,
\&      encode_column => 1,
\&      encode_class  => \*(AqCrypt::Eksblowfish::Bcrypt\*(Aq,
\&      encode_args   => { key_nul => 0, cost => 8 },
\&      encode_check_method => \*(Aqcheck_password\*(Aq,
\&  }
.Ve
.PP
In your application code:
.PP
.Vb 3
\&   #updating the value.
\&   $row\->password(\*(Aqplaintext\*(Aq);
\&   my $digest = $row\->password;
\&
\&   #checking against an existing value with a check_method
\&   $row\->check_password(\*(Aqold_password\*(Aq); #true
\&   $row\->password(\*(Aqnew_password\*(Aq);
\&   $row\->check_password(\*(Aqnew_password\*(Aq); #returns true
\&   $row\->check_password(\*(Aqold_password\*(Aq); #returns false
.Ve
.PP
\&\fBNote:\fR The component needs to be loaded \fIbefore\fR Core and other components
such as Timestamp. Core should always be last.
.PP
.Vb 2
\&   E.g:
\&   _\|_PACKAGE_\|_\->load_components(qw/EncodedColumn TimeStamp Core/);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This DBIx::Class component can be used to automatically encode a column's
contents whenever the value of that column is set.
.PP
This module is similar to the existing DBIx::Class::DigestColumns, but there
is some key differences:
.ie n .IP """DigestColumns"" performs the encode operation on ""insert"" and ""update"", and ""EncodedColumn"" performs the operation when the value is set, or on ""new""." 4
.el .IP "\f(CWDigestColumns\fR performs the encode operation on \f(CWinsert\fR and \f(CWupdate\fR, and \f(CWEncodedColumn\fR performs the operation when the value is set, or on \f(CWnew\fR." 4
.IX Item "DigestColumns performs the encode operation on insert and update, and EncodedColumn performs the operation when the value is set, or on new."
.PD 0
.ie n .IP """DigestColumns"" supports only algorithms of the Digest family. ""EncodedColumn"" employs a set of thin wrappers around different cipher modules to provide support for any cipher you wish to use and wrappers are very simple to write (typically less than 30 lines)." 4
.el .IP "\f(CWDigestColumns\fR supports only algorithms of the Digest family. \f(CWEncodedColumn\fR employs a set of thin wrappers around different cipher modules to provide support for any cipher you wish to use and wrappers are very simple to write (typically less than 30 lines)." 4
.IX Item "DigestColumns supports only algorithms of the Digest family. EncodedColumn employs a set of thin wrappers around different cipher modules to provide support for any cipher you wish to use and wrappers are very simple to write (typically less than 30 lines)."
.ie n .IP """EncodedColumn"" supports having more than one encoded column per table and each column can use a different cipher." 4
.el .IP "\f(CWEncodedColumn\fR supports having more than one encoded column per table and each column can use a different cipher." 4
.IX Item "EncodedColumn supports having more than one encoded column per table and each column can use a different cipher."
.ie n .IP """Encode"" adds only one item to the namespace of the object utilizing it (""_column_encoders"")." 4
.el .IP "\f(CWEncode\fR adds only one item to the namespace of the object utilizing it (\f(CW_column_encoders\fR)." 4
.IX Item "Encode adds only one item to the namespace of the object utilizing it (_column_encoders)."
.PD
.PP
There is, unfortunately, some features that \f(CW\*(C`EncodedColumn\*(C'\fR doesn't support.
\&\f(CW\*(C`DigestColumns\*(C'\fR supports changing certain options at runtime, as well as
the option to not automatically encode values on set. The author of this module
found these options to be non-essential and omitted them by design.
.SH "Options added to add_column"
.IX Header "Options added to add_column"
.SS "encode_column => 1"
.IX Subsection "encode_column => 1"
Enable automatic encoding of column values. If this option is not set to true
any other options will become no-ops.
.ie n .SS "encode_check_method => $method_name"
.el .SS "encode_check_method => \f(CW$method_name\fP"
.IX Subsection "encode_check_method => $method_name"
By using the encode_check_method attribute when you declare a column you
can create a check method for that column. The check method accepts a plain
text string, and returns a boolean that indicates whether the digest of the
provided value matches the current value.
.SS encode_class
.IX Subsection "encode_class"
The class to use for encoding. Available classes are:
.ie n .IP """Crypt::Eksblowfish::Bcrypt"" \- uses DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt and requires Crypt::Eksblowfish::Bcrypt to be installed" 4
.el .IP "\f(CWCrypt::Eksblowfish::Bcrypt\fR \- uses DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt and requires Crypt::Eksblowfish::Bcrypt to be installed" 4
.IX Item "Crypt::Eksblowfish::Bcrypt - uses DBIx::Class::EncodedColumn::Crypt::Eksblowfish::Bcrypt and requires Crypt::Eksblowfish::Bcrypt to be installed"
.PD 0
.ie n .IP """Digest"" \- uses DBIx::Class::EncodedColumn::Digest requires Digest to be installed as well as the algorithm required (Digest::SHA, Digest::Whirlpool, etc)" 4
.el .IP "\f(CWDigest\fR \- uses DBIx::Class::EncodedColumn::Digest requires Digest to be installed as well as the algorithm required (Digest::SHA, Digest::Whirlpool, etc)" 4
.IX Item "Digest - uses DBIx::Class::EncodedColumn::Digest requires Digest to be installed as well as the algorithm required (Digest::SHA, Digest::Whirlpool, etc)"
.ie n .IP """Crypt::OpenPGP"" \- DBIx::Class::EncodedColumn::Crypt::OpenPGP and requires Crypt::OpenPGP to be installed" 4
.el .IP "\f(CWCrypt::OpenPGP\fR \- DBIx::Class::EncodedColumn::Crypt::OpenPGP and requires Crypt::OpenPGP to be installed" 4
.IX Item "Crypt::OpenPGP - DBIx::Class::EncodedColumn::Crypt::OpenPGP and requires Crypt::OpenPGP to be installed"
.PD
.PP
Please see the relevant class's documentation for information about the
specific arguments accepted by each and make sure you include the encoding
algorithm (e.g. Crypt::OpenPGP) in your application's requirements.
.SH "EXTENDED METHODS"
.IX Header "EXTENDED METHODS"
The following DBIx::Class::ResultSource method is extended:
.IP "\fBregister_column\fR \- Handle the options described above." 4
.IX Item "register_column - Handle the options described above."
.PP
The following DBIx::Class::Row methods are extended by this module:
.IP "\fBnew\fR \- Encode the columns on \fBnew()\fR so that copy and create DWIM." 4
.IX Item "new - Encode the columns on new() so that copy and create DWIM."
.PD 0
.IP "\fBset_column\fR \- Encode values whenever column is set." 4
.IX Item "set_column - Encode values whenever column is set."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::DigestColumns, DBIx::Class, Digest
.SH AUTHOR
.IX Header "AUTHOR"
Guillermo Roditi (groditi) <groditi@cpan.org>
.PP
Inspired by the original module written by Tom Kirkpatrick (tkp) <tkp@cpan.org>
featuring contributions from Guillermo Roditi (groditi) <groditi@cpan.org>
and Marc Mims <marc@questright.com>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
jshirley \- J. Shirley <cpan@coldhardcode.com>
.PP
kentnl \- Kent Fredric <kentnl@cpan.org>
.PP
mst \- Matt S Trout <mst@shadowcat.co.uk>
.PP
wreis \- Wallace reis <wreis@cpan.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) the DBIx::Class::EncodedColumn "AUTHOR" and "CONTRIBUTORS" as
listed above.
.SH LICENSE
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
