.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::ChangeNotify::Watcher 3pm"
.TH File::ChangeNotify::Watcher 3pm 2019-01-09 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
File::ChangeNotify::Watcher \- Role consumed by all watchers
.SH VERSION
.IX Header "VERSION"
version 0.31
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 7
\&    my $watcher =
\&        File::ChangeNotify\->instantiate_watcher
\&            ( directories => [ \*(Aq/my/path\*(Aq, \*(Aq/my/other\*(Aq ],
\&              filter      => qr/\e.(?:pm|conf|yml)$/,
\&              exclude     => [\*(Aqt\*(Aq, \*(Aqroot\*(Aq, qr(/(?!\e.)[^/]+$),
\&                              sub { \-e && ! \-r }],
\&            );
\&
\&    if ( my @events = $watcher\->new_events ) { ... }
\&
\&    # blocking
\&    while ( my @events = $watcher\->wait_for_events ) { ... }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A \f(CW\*(C`File::ChangeNotify::Watcher\*(C'\fR monitors a directory for changes made to any
file. You can provide a regular expression to filter out files you are not
interested in. It handles the addition of new subdirectories by adding them to
the watch list.
.PP
Note that the actual granularity of what each watcher class reports may
vary. Implementations that hook into some sort of kernel event interface
(Inotify, for example) have much better knowledge of exactly what changes are
happening than one implemented purely in userspace code (like the Default
class).
.PP
By default, events are returned in the form of File::ChangeNotify::Event
objects, but this can be overridden by providing an "event_class" attribute to
the constructor.
.PP
You can block while waiting for events or do a non-blocking call asking for
any new events since the last call (or since the watcher was
instantiated). Different watchers will implement blocking in different ways,
and the Default watcher just does a sleep loop.
.SH METHODS
.IX Header "METHODS"
.SS File::ChangeNotify::Watcher::Subclass\->new(...)
.IX Subsection "File::ChangeNotify::Watcher::Subclass->new(...)"
This method creates a new watcher. It accepts the following arguments:
.IP \(bu 4
directories => \f(CW$path\fR
.IP \(bu 4
directories => \e@paths
.Sp
This argument is required. It can be either one or many paths which
should be watched for changes.
.IP \(bu 4
filter => qr/.../
.Sp
This is an optional regular expression that will be used to check if a
file is of interest. This filter is only applied to files.
.Sp
By default, all files are included.
.IP \(bu 4
exclude => [...]
.Sp
An optional arrayref of paths to exclude. This arrayref can contain plain
strings, regular expressions, or subroutine references. If you provide a
string it should contain the complete path to be excluded.
.Sp
If you provide a sub, it should return a true value for paths to be excluded
e.g. \f(CW\*(C`exclude => [ sub { \-e && ! \-r } ],\*(C'\fR. The path will be passed as the
first argument to the subroutine as well as in a localized \f(CW$_\fR.
.Sp
The paths can be either directories or specific files. If the exclusion
matches a directory, all of its files and subdirectories are ignored.
.IP \(bu 4
modify_includes_file_attributes
.Sp
This can either be a boolean or an arrayref.
.Sp
If it is an arrayref then it should contain paths for which you want
information about changes to the file's attributes. This arrayref can contain
plain strings, regular expressions, or subroutine references. If you provide a
string it should contain the complete path to be excluded.
.Sp
When this matches a file, then modify events for that file will include
information about the file's before and after permissions and ownership when
these change.
.Sp
See the File::ChangeNotify::Event documentation for details on what this
looks like.
.IP \(bu 4
modify_includes_content
.Sp
This can either be a boolean or an arrayref.
.Sp
If it is an arrayref then it should contain paths for which you want to see
past and current content for a file when it is modified. This arrayref can
contain plain strings, regular expressions, or subroutine references. If you
provide a string it should contain the complete path to be excluded.
.Sp
When this matches a file, then modify events for that file will include
information about the file's before and after content when it changes.
.Sp
See the File::ChangeNotify::Event documentation for details on what this
looks like.
.IP \(bu 4
follow_symlinks => \f(CW$bool\fR
.Sp
By default, symlinks are ignored. Set this to true to follow them.
.Sp
If this symlinks are being followed, symlinks to files and directories
will be followed. Directories will be watched, and changes for
directories and files reported.
.IP \(bu 4
sleep_interval => \f(CW$number\fR
.Sp
For watchers which call \f(CW\*(C`sleep\*(C'\fR to implement the \f(CW\*(C`$watcher\->wait_for_events\*(C'\fR method, this argument controls how long
it sleeps for. The value is a number in seconds.
.Sp
The default is 2 seconds.
.IP \(bu 4
event_class => \f(CW$class\fR
.Sp
This can be used to change the class used to report events. By
default, this is File::ChangeNotify::Event.
.ie n .SS $watcher\->wait_for_events
.el .SS \f(CW$watcher\fP\->wait_for_events
.IX Subsection "$watcher->wait_for_events"
This method causes the watcher to block until it sees interesting
events, and then return them as a list.
.PP
Some watcher subclasses may implement blocking as a sleep loop, while
others may actually block.
.ie n .SS $watcher\->new_events
.el .SS \f(CW$watcher\fP\->new_events
.IX Subsection "$watcher->new_events"
This method returns a list of any interesting events seen since the
last time the watcher checked.
.ie n .SS $watcher\->sees_all_events
.el .SS \f(CW$watcher\fP\->sees_all_events
.IX Subsection "$watcher->sees_all_events"
If this is true, the watcher will report on all events.
.PP
Some watchers, like the Default subclass, are not smart enough to
track things like a file being created and then immediately deleted,
and can only detect changes between snapshots of the file system.
.PP
Other watchers, like the Inotify subclass, see all events that happen
and report on them.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted at <http://rt.cpan.org/Public/Dist/Display.html?Name=File\-ChangeNotify> or via email to bug\-file\-changenotify@rt.cpan.org <mailto:bug-file-changenotify@rt.cpan.org>.
.PP
I am also usually active on IRC as 'autarch' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for File-ChangeNotify can be found at <https://github.com/houseabsolute/File\-ChangeNotify>.
.SH AUTHOR
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2009 \- 2019 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fILICENSE\fR file included with this distribution.
