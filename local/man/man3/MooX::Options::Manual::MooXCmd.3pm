.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooX::Options::Manual::MooXCmd 3pm"
.TH MooX::Options::Manual::MooXCmd 3pm 2017-08-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
MooX::Options::Manual::MooXCmd \- Manage your tools with MooX::Cmd
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  package MyTool;
\&
\&  use strict; use warnings all => "FATAL";
\&
\&  use Class::Load qw(load_class);
\&  use DBIx::LogAny;
\&
\&  use Moo;
\&  use MooX::Cmd => with_config_from_file; # enable MooX::Cmd driven _build_config_prefixes
\&  use MooX::Options => with_config_from_file; # enable \-\-config\-files and \-\-config\-prefix
\&
\&  with "MooX::Log::Any";
\&
\&  option option log_adapter => (is => "ro", required => 1, trigger => 1, json => 1 );
\&  option connection => (is => "ro", required => 1, json => 1);
\&
\&  sub _trigger_log_adapter { my ( $self, $opts ) = @_; load_class("Log::Any::Adapter")\->set( @{$opts} ); }
\&
\&  sub execute {
\&      my $self = shift;
\&      my $conn = $self\->connection;
\&      $conn\->[3] ||= {};
\&      $conn\->[3]\->{dbix_la_logger} = $self\->log;
\&      my $dbh = DBIx::LogAny\->connect( @{$conn} );
\&      ...
\&  }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
MooX::Cmd gives you an easy way to organize your tools into many subcommands.
.PP
We can take 'git' as a example.
.PP
.Vb 2
\&  git checkout [params]
\&  git commit [params]
.Ve
.PP
MooX::ConfigFromFile gives one a more easy way to configure recurring or complex parameters.
\&\f(CW\*(C`MooX::ConfigFromFile\*(C'\fR finds and loads several configuration files based on your setup. Please
read MooX::ConfigFromFile::Role carefully to learn which files from which location are
loaded and how this can tuned.
.PP
MooX::Options plays natively with these tools and they do with \f(CW\*(C`MooX::Options\*(C'\fR.
.PP
.Vb 2
\&  $ cat bin/mytool
\&  #!/opt/myprj/bin/perl
\&
\&  use strict; use warnings all => "FATAL";
\&
\&  use MyTool;
\&
\&  MyTool\->new_with_cmd\->execute
.Ve
.PP
\&\f(CW\*(C`MooX::Options\*(C'\fR improves the help message to display automatically the subcommands.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooX::Options
.PP
MooX::Cmd
.PP
MooX::ConfigFromFile
.PP
MooX::Log::Any
.SH AUTHOR
.IX Header "AUTHOR"
celogeek <me@celogeek.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by celogeek <me@celogeek.com>.
.PP
This software is copyright (c) 2017 by Jens Rehsack.
.PP
This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.
