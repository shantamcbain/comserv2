.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CatalystX::Component::Traits 3pm"
.TH CatalystX::Component::Traits 3pm 2014-01-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
CatalystX::Component::Traits \- Automatic Trait Loading and Resolution for Catalyst Components
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    package Catalyst::Model::SomeModel;
\&    with \*(AqCatalystX::Component::Traits\*(Aq;
\&
\&    package MyApp::Model::MyModel;
\&    use parent \*(AqCatalyst::Model::SomeModel\*(Aq;
\&
\&    package MyApp;
\&
\&    _\|_PACKAGE_\|_\->config(\*(AqModel::MyModel\*(Aq => {
\&        traits => [\*(AqSearchedForTrait\*(Aq, \*(Aq+Fully::Qualified::Trait\*(Aq]
\&    });
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Adds a "COMPONENT" in Catalyst::Component method to your Catalyst component
base class that reads the optional \f(CW\*(C`traits\*(C'\fR parameter from app and component
config and instantiates the component subclass with those traits using
"new_with_traits" in MooseX::Traits from MooseX::Traits::Pluggable.
.SH "TRAIT SEARCH"
.IX Header "TRAIT SEARCH"
Trait names qualified with a \f(CW\*(C`+\*(C'\fR are taken to be full package names.
.PP
Unqualified names are searched for, using the algorithm described below.
.SS EXAMPLE
.IX Subsection "EXAMPLE"
Suppose your inheritance hierarchy is:
.PP
.Vb 5
\&    MyApp::Model::MyModel
\&    Catalyst::Model::CatModel
\&    Catalyst::Model
\&    Catalyst::Component
\&    Moose::Object
.Ve
.PP
The configuration is:
.PP
.Vb 1
\&    traits => [\*(AqFoo\*(Aq]
.Ve
.PP
The package search order for \f(CW\*(C`Foo\*(C'\fR will be:
.PP
.Vb 2
\&    MyApp::TraitFor::Model::CatModel::Foo
\&    Catalyst::TraitFor::Model::CatModel::Foo
.Ve
.SS "A MORE PATHOLOGICAL EXAMPLE"
.IX Subsection "A MORE PATHOLOGICAL EXAMPLE"
For:
.PP
.Vb 6
\&    My::App::Controller::AController
\&    CatalystX::Something::ControllerBase::SomeController
\&    Catalyst::Controller
\&    Catalyst::Model
\&    Catalyst::Component
\&    Moose::Object
.Ve
.PP
With:
.PP
.Vb 1
\&    traits => [\*(AqFoo\*(Aq]
.Ve
.PP
Search order for \f(CW\*(C`Foo\*(C'\fR will be:
.PP
.Vb 2
\&    My::App::TraitFor::Controller::SomeController::Foo
\&    CatalystX::Something::TraitFor::Controller::SomeController::Foo
.Ve
.PP
The \f(CW\*(C`Base\*(C'\fR after (M|V|C) is automatically removed.
.SH "TRAIT MERGING"
.IX Header "TRAIT MERGING"
Traits from component class config and app config are automatically merged if
you set the \f(CW\*(C`_trait_merge\*(C'\fR attribute default, e.g.:
.PP
.Vb 1
\&    has \*(Aq+_trait_merge\*(Aq => (default => 1);
.Ve
.PP
You can remove component class config traits by prefixing their names with a
\&\f(CW\*(C`\-\*(C'\fR in the app config traits.
.PP
For example:
.PP
.Vb 3
\&    package Catalyst::Model::Foo;
\&    has \*(Aq+_trait_merge\*(Aq => (default => 1);
\&    _\|_PACKAGE_\|_\->config\->{traits} = [qw/Foo Bar/];
\&
\&    package MyApp;
\&    _\|_PACKAGE_\|_\->config\->{\*(AqModel::Foo\*(Aq}{traits} = [qw/\-Foo Baz/];
.Ve
.PP
Will load the traits:
.PP
.Vb 1
\&    Bar Baz
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Rafael Kitover, \f(CW\*(C`<rkitover@cpan.org>\*(C'\fR
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
Tomas Doran, \f(CW\*(C`<bobtfish@bobtfish.net>\*(C'\fR
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-catalystx\-component\-traits
at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=CatalystX\-Component\-Traits>.  I
will be notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.SH ACKNOWLEDGEMENTS
.IX Header "ACKNOWLEDGEMENTS"
Matt S. Trout and Tomas Doran helped me with the current design.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2014, Rafael Kitover
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
