.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Types 3pm"
.TH SQL::Translator::Types 3pm 2024-10-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Types \- Type checking functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    package Foo;
\&    use Moo;
\&    use SQL::Translator::Types qw(schema_obj enum);
\&
\&    has foo => ( is => \*(Aqrw\*(Aq, isa => schema_obj(\*(AqTrigger\*(Aq) );
\&    has bar => ( is => \*(Aqrw\*(Aq, isa => enum([qw(baz quux quuz)], {
\&        msg => "Invalid value for bar: \*(Aq%s\*(Aq", icase => 1,
\&    });
.Ve
.SH DESCRIPTIONS
.IX Header "DESCRIPTIONS"
This module exports functions that return coderefs suitable for Moo
\&\f(CW\*(C`isa\*(C'\fR type checks.
Errors are reported using "throw" in SQL::Translator::Utils.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS schema_obj($type)
.IX Subsection "schema_obj($type)"
Returns a coderef that checks that its arguments is an object of the
class \f(CW\*(C`SQL::Translator::Schema::\fR\f(CI$type\fR\f(CW\*(C'\fR.
.SS "enum(\e@strings, [$msg | \e%parameters])"
.IX Subsection "enum(@strings, [$msg | %parameters])"
Returns a coderef that checks that the argument is one of the provided
\&\f(CW@strings\fR.
.PP
\fIParameters\fR
.IX Subsection "Parameters"
.IP msg 4
.IX Item "msg"
sprintf string for the error message.
If no other parameters are needed, this can be provided on its own,
instead of the \f(CW%parameters\fR hashref.
The invalid value is passed as the only argument.
Defaults to \f(CW\*(C`Invalid value: \*(Aq%s\*(Aq\*(C'\fR.
.IP icase 4
.IX Item "icase"
If true, folds the values to lower case before checking for equality.
.IP allow_undef 4
.IX Item "allow_undef"
If true, allow \f(CW\*(C`undef\*(C'\fR in addition to the specified strings.
.IP allow_false 4
.IX Item "allow_false"
If true, allow any false value in addition to the specified strings.
