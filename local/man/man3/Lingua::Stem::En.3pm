.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Lingua::Stem::En 3pm"
.TH Lingua::Stem::En 3pm 2025-03-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Lingua::Stem::En \- Porter's stemming algorithm for 'generic' English
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&    use Lingua::Stem::En;
\&    my $stems   = Lingua::Stem::En::stem({ \-words => $word_list_reference,
\&                                        \-locale => \*(Aqen\*(Aq,
\&                                    \-exceptions => $exceptions_hash,
\&                                     });
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This routine applies the Porter Stemming Algorithm to its parameters,
returning the stemmed words.
.PP
It is derived from the C program "stemmer.c"
as found in freewais and elsewhere, which contains these notes:
.PP
.Vb 4
\&   Purpose:    Implementation of the Porter stemming algorithm documented 
\&               in: Porter, M.F., "An Algorithm For Suffix Stripping," 
\&               Program 14 (3), July 1980, pp. 130\-137.
\&   Provenance: Written by B. Frakes and C. Cox, 1986.
.Ve
.PP
I have re-interpreted areas that use Frakes and Cox's "WordSize"
function. My version may misbehave on short words starting with "y",
but I can't think of any examples.
.PP
The step numbers correspond to Frakes and Cox, and are probably in
Porter's article (which I've not seen).
Porter's algorithm still has rough spots (e.g current/currency, \-ings words),
which I've not attempted to cure, although I have added
support for the British \-ise suffix.
.SH CHANGES
.IX Header "CHANGES"
.Vb 3
\& 1999.06.15 \- Changed to \*(Aq.pm\*(Aq module, moved into Lingua::Stem namespace,
\&              optionalized the export of the \*(Aqstem\*(Aq routine
\&              into the caller\*(Aqs namespace, added named parameters
\&
\& 1999.06.24 \- Switch core implementation of the Porter stemmer to
\&              the one written by Jim Richardson <jimr@maths.usyd.edu.au>
\&
\& 2000.08.25 \- 2.11 Added stemming cache
\&
\& 2000.09.14 \- 2.12 Fixed *major* :( implementation error of Porter\*(Aqs algorithm
\&              Error was entirely my fault \- I completely forgot to include
\&              rule sets 2,3, and 4 starting with Lingua::Stem 0.30. 
\&              \-\- Jerilyn Franz
\&
\& 2003.09.28 \- 2.13 Corrected documentation error pointed out by Simon Cozens.
\&
\& 2005.11.20 \- 2.14 Changed rule declarations to conform to Perl style convention
\&              for \*(Aqprivate\*(Aq subroutines. Changed Exporter invokation to more
\&              portable \*(Aqrequire\*(Aq vice \*(Aquse\*(Aq.
\&
\& 2006.02.14 \- 2.15 Added ability to pass word list by \*(Aqhandle\*(Aq for in\-place stemming.
\&
\& 2009.07.27 \- 2.16 Documentation Fix
\&
\& 2020.06.20 \- 2.30 Version renumber for module consistency.
\&
\& 2020.09.26 \- 2.31 Fix for Latin1/UTF8 issue in documentation
.Ve
.SH METHODS
.IX Header "METHODS"
.IP "stem({ \-words => \e@words, \-locale => 'en', \-exceptions => \e%exceptions });" 4
.IX Item "stem({ -words => @words, -locale => 'en', -exceptions => %exceptions });"
Stems a list of passed words using the rules of US English. Returns
an anonymous array reference to the stemmed words.
.Sp
Example:
.Sp
.Vb 5
\&  my @words         = ( \*(Aqwordy\*(Aq, \*(Aqanother\*(Aq );
\&  my $stemmed_words = Lingua::Stem::En::stem({ \-words => \e@words,
\&                                              \-locale => \*(Aqen\*(Aq,
\&                                          \-exceptions => \e%exceptions,
\&                          });
.Ve
.Sp
If the first element of \f(CW@words\fR is a list reference, then the stemming is performed 'in place'
on that list (modifying the passed list directly instead of copying it to a new array).
.Sp
This is only useful if you do not need to keep the original list. If you \fBdo\fR need to keep
the original list, use the normal semantic of having 'stem' return a new list instead \- that
is faster than making your own copy \fBand\fR using the 'in place' semantics since the primary
difference between 'in place' and 'by value' stemming is the creation of a copy of the original
list.  If you \fBdon't\fR need the original list, then the 'in place' stemming is about 60% faster.
.Sp
Example of 'in place' stemming:
.Sp
.Vb 5
\&  my $words         = [ \*(Aqwordy\*(Aq, \*(Aqanother\*(Aq ];
\&  my $stemmed_words = Lingua::Stem::En::stem({ \-words => [$words],
\&                          \-locale => \*(Aqen\*(Aq,
\&                      \-exceptions => \e%exceptions,
\&                      });
.Ve
.Sp
The 'in place' mode returns a reference to the original list with the words stemmed.
.IP "stem_caching({ \-level => 0|1|2 });" 4
.IX Item "stem_caching({ -level => 0|1|2 });"
Sets the level of stem caching.
.Sp
\&'0' means 'no caching'. This is the default level.
.Sp
\&'1' means 'cache per run'. This caches stemming results during a single
    call to 'stem'.
.Sp
\&'2' means 'cache indefinitely'. This caches stemming results until
    either the process exits or the 'clear_stem_cache' method is called.
.IP clear_stem_cache; 4
.IX Item "clear_stem_cache;"
Clears the cache of stemmed words
.SH NOTES
.IX Header "NOTES"
This code is almost entirely derived from the Porter 2.1 module
written by Jim Richardson.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& Lingua::Stem
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
.Vb 2
\&  Jim Richardson, University of Sydney
\&  jimr@maths.usyd.edu.au or http://www.maths.usyd.edu.au:8000/jimr.html
\&
\&  Integration in Lingua::Stem by 
\&  Jerilyn Franz, FreeRun Technologies,
\&  <cpan@jerilyn.info>
.Ve
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Jim Richardson, University of Sydney
Jerilyn Franz, FreeRun Technologies
.PP
This code is freely available under the same terms as Perl.
.SH BUGS
.IX Header "BUGS"
.SH TODO
.IX Header "TODO"
