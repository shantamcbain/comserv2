.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "YAML 3pm"
.TH YAML 3pm 2023-12-27 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
YAML \- YAML Ain't Markup Language™
.SH VERSION
.IX Header "VERSION"
This document describes YAML version \fB1.31\fR.
.SH "IMPORTANT \- PLEASE READ THIS FIRST"
.IX Header "IMPORTANT - PLEASE READ THIS FIRST"
If you need to use YAML with Perl, it is likely that you will have a look at
this module (\f(CW\*(C`YAML.pm\*(C'\fR) first. There are several YAMLmodules <https://metacpan.org/search?q=yaml> in Perl and they all support the
simple \f(CWLoad()\fR and \f(CWDump()\fR API. Since this one has the obvious name
"YAML", it may seem obvious to pick this one.
.PP
As the author of this module, I humbly ask you to choose another. YAML.pm was
the very first YAML implementation in the world, released in 2001. It was
originally made as a prototype, over 2 years before the YAML 1.0 spec was
published. Although it may work for your needs, it has numerous bugs and is
barely maintained.
.PP
Please consider using these first:
.IP \(bu 4
YAML::PP \- Pure Perl, Full Featured, Well Maintained
.IP \(bu 4
YAML::PP::LibYAML \- A \f(CW\*(C`libyaml\*(C'\fR Perl binding like YAML::XS but with the YAML::PP API.
.PP
The rest of this documentation is left unchanged...
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use YAML;
\&
\&    # Load a YAML stream of 3 YAML documents into Perl data structures.
\&    my ($hashref, $arrayref, $string) = Load(<<\*(Aq...\*(Aq);
\&    \-\-\-
\&    name: ingy       # A Mapping
\&    age: old
\&    weight: heavy
\&    # I should comment that I also like pink, but don\*(Aqt tell anybody.
\&    favorite colors:
\&      \- red
\&      \- green
\&      \- blue
\&    \-\-\-
\&    \- Clark Evans    # A Sequence
\&    \- Oren Ben\-Kiki
\&    \- Ingy döt Net
\&    \-\-\- >            # A Block Scalar
\&    You probably think YAML stands for "Yet Another Markup Language". It
\&    ain\*(Aqt! YAML is really a data serialization language. But if you want
\&    to think of it as a markup, that\*(Aqs OK with me. A lot of people try
\&    to use XML as a serialization format.
\&
\&    "YAML" is catchy and fun to say. Try it. "YAML, YAML, YAML!!!"
\&    ...
\&
\&    # Dump the Perl data structures back into YAML.
\&    print Dump($string, $arrayref, $hashref);
\&
\&    # YAML::Dump is used the same way you\*(Aqd use Data::Dumper::Dumper
\&    use Data::Dumper;
\&    print Dumper($string, $arrayref, $hashref);
\&
\&    Since version 1.25 YAML.pm supports trailing comments.
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The YAML.pm module implements a YAML Loader and Dumper based on the YAML 1.0
specification. <http://www.yaml.org/spec/>
.PP
YAML is a generic data serialization language that is optimized for human
readability. It can be used to express the data structures of most modern
programming languages. (Including Perl!!!)
.PP
For information on the YAML syntax, please refer to the YAML specification.
.SH "WHY YAML IS COOL"
.IX Header "WHY YAML IS COOL"
.IP "YAML is readable for people." 4
.IX Item "YAML is readable for people."
It makes clear sense out of complex data structures. You should find that YAML
is an exceptional data dumping tool. Structure is shown through indentation,
YAML supports recursive data, and hash keys are sorted by default. In
addition, YAML supports several styles of scalar formatting for different
types of data.
.IP "YAML is editable." 4
.IX Item "YAML is editable."
YAML was designed from the ground up to be an excellent syntax for
configuration files. Almost all programs need configuration files, so why
invent a new syntax for each one? And why subject users to the complexities of
XML or native Perl code?
.IP "YAML is multilingual." 4
.IX Item "YAML is multilingual."
Yes, YAML supports Unicode. But I'm actually referring to programming
languages. YAML was designed to meet the serialization needs of Perl, Python,
Ruby, Tcl, PHP, Javascript and Java. It was also designed to be interoperable
between those languages. That means YAML serializations produced by Perl can
be processed by Python.
.IP "YAML is taint safe." 4
.IX Item "YAML is taint safe."
Using modules like Data::Dumper for serialization is fine as long as you can
be sure that nobody can tamper with your data files or transmissions. That's
because you need to use Perl's \f(CWeval()\fR built-in to deserialize the data.
Somebody could add a snippet of Perl to erase your files.
.Sp
YAML's parser does not need to eval anything.
.IP "YAML is full featured." 4
.IX Item "YAML is full featured."
YAML can accurately serialize all of the common Perl data structures and
deserialize them again without losing data relationships. Although it is not
100% perfect (no serializer is or can be perfect), it fares as well as the
popular current modules: Data::Dumper, Storable, XML::Dumper and Data::Denter.
.Sp
YAML.pm also has the ability to handle code (subroutine) references and
typeglobs. (Still experimental) These features are not found in Perl's other
serialization modules.
.IP "YAML is extensible." 4
.IX Item "YAML is extensible."
The YAML language has been designed to be flexible enough to solve it's own
problems. The markup itself has 3 basic construct which resemble Perl's hash,
array and scalar. By default, these map to their Perl equivalents. But each
YAML node also supports a tagging mechanism (type system) which can cause that
node to be interpreted in a completely different manner. That's how YAML can
support object serialization and oddball structures like Perl's typeglob.
.SH "YAML IMPLEMENTATIONS IN PERL"
.IX Header "YAML IMPLEMENTATIONS IN PERL"
This module, YAML.pm, is really just the interface module for YAML modules
written in Perl. The basic interface for YAML consists of two functions:
\&\f(CW\*(C`Dump\*(C'\fR and \f(CW\*(C`Load\*(C'\fR. The real work is done by the modules YAML::Dumper and
YAML::Loader.
.PP
Different YAML module distributions can be created by subclassing YAML.pm and
YAML::Loader and YAML::Dumper. For example, YAML-Simple consists of
YAML::Simple YAML::Dumper::Simple and YAML::Loader::Simple.
.PP
Why would there be more than one implementation of YAML? Well, despite
YAML's offering of being a simple data format, YAML is actually very deep
and complex. Implementing the entirety of the YAML specification is a
daunting task.
.PP
For this reason I am currently working on 3 different YAML implementations.
.IP YAML 4
.IX Item "YAML"
The main YAML distribution will keeping evolving to support the entire YAML
specification in pure Perl. This may not be the fastest or most stable module
though. Currently, YAML.pm has lots of known bugs. It is mostly a great tool
for dumping Perl data structures to a readable form.
.IP YAML::Tiny 4
.IX Item "YAML::Tiny"
The point of YAML::Tiny is to strip YAML down to the 90% that people use most
and offer that in a small, fast, stable, pure Perl form. YAML::Tiny will
simply die when it is asked to do something it can't.
.IP YAML::Syck 4
.IX Item "YAML::Syck"
\&\f(CW\*(C`libsyck\*(C'\fR is the C based YAML processing library used by the Ruby programming
language (and also Python, PHP and Pugs). YAML::Syck is the Perl binding to
\&\f(CW\*(C`libsyck\*(C'\fR. It should be very fast, but may have problems of its own. It will
also require C compilation.
.Sp
NOTE: Audrey Tang has actually completed this module and it works great and is
      10 times faster than YAML.pm.
.PP
In the future, there will likely be even more YAML modules. Remember, people
other than Ingy are allowed to write YAML modules!
.SH "FUNCTIONAL USAGE"
.IX Header "FUNCTIONAL USAGE"
YAML is completely OO under the hood. Still it exports a few useful top level
functions so that it is dead simple to use. These functions just do the OO
stuff for you. If you want direct access to the OO API see the documentation
for YAML::Dumper and YAML::Loader.
.SS "Exported Functions"
.IX Subsection "Exported Functions"
The following functions are exported by YAML.pm by default. The reason they
are exported is so that YAML works much like Data::Dumper. If you don't want
functions to be imported, just use YAML with an empty import list:
.PP
.Vb 1
\&    use YAML ();
.Ve
.IP Dump(list\-of\-Perl\-data\-structures) 4
.IX Item "Dump(list-of-Perl-data-structures)"
Turn Perl data into YAML. This function works very much like
\&\fBData::Dumper::Dumper()\fR. It takes a list of Perl data structures and dumps them
into a serialized form. It returns a string containing the YAML stream. The
structures can be references or plain scalars.
.IP Load(string\-containing\-a\-YAML\-stream) 4
.IX Item "Load(string-containing-a-YAML-stream)"
Turn YAML into Perl data. This is the opposite of Dump. Just like Storable's
\&\fBthaw()\fR function or the \fBeval()\fR function in relation to Data::Dumper. It parses
a string containing a valid YAML stream into a list of Perl data structures.
.SS "Exportable Functions"
.IX Subsection "Exportable Functions"
These functions are not exported by default but you can request them in an
import list like this:
.PP
.Vb 1
\&    use YAML qw\*(Aqfreeze thaw Bless\*(Aq;
.Ve
.IP "\fBfreeze()\fR and \fBthaw()\fR" 4
.IX Item "freeze() and thaw()"
Aliases to \fBDump()\fR and \fBLoad()\fR for Storable fans. This will also allow YAML.pm
to be plugged directly into modules like POE.pm, that use the freeze/thaw API
for internal serialization.
.IP "DumpFile(filepath, list)" 4
.IX Item "DumpFile(filepath, list)"
Writes the YAML stream to a file instead of just returning a string.
.IP LoadFile(filepath) 4
.IX Item "LoadFile(filepath)"
Reads the YAML stream from a file instead of a string.
.IP "Bless(perl\-node, [yaml\-node | class\-name])" 4
.IX Item "Bless(perl-node, [yaml-node | class-name])"
Associate a normal Perl node, with a yaml node. A yaml node is an object tied
to the YAML::Node class. The second argument is either a yaml node that you've
already created or a class (package) name that supports a \f(CWyaml_dump()\fR
function. A \f(CWyaml_dump()\fR function should take a perl node and return a yaml
node. If no second argument is provided, Bless will create a yaml node. This
node is not returned, but can be retrieved with the \fBBlessed()\fR function.
.Sp
Here's an example of how to use Bless. Say you have a hash containing three
keys, but you only want to dump two of them. Furthermore the keys must be
dumped in a certain order. Here's how you do that:
.Sp
.Vb 5
\&    use YAML qw(Dump Bless);
\&    $hash = {apple => \*(Aqgood\*(Aq, banana => \*(Aqbad\*(Aq, cauliflower => \*(Aqugly\*(Aq};
\&    print Dump $hash;
\&    Bless($hash)\->keys([\*(Aqbanana\*(Aq, \*(Aqapple\*(Aq]);
\&    print Dump $hash;
.Ve
.Sp
produces:
.Sp
.Vb 7
\&    \-\-\-
\&    apple: good
\&    banana: bad
\&    cauliflower: ugly
\&    \-\-\-
\&    banana: bad
\&    apple: good
.Ve
.Sp
Bless returns the tied part of a yaml-node, so that you can call the
YAML::Node methods. This is the same thing that \fBYAML::Node::ynode()\fR returns.
So another way to do the above example is:
.Sp
.Vb 8
\&    use YAML qw(Dump Bless);
\&    use YAML::Node;
\&    $hash = {apple => \*(Aqgood\*(Aq, banana => \*(Aqbad\*(Aq, cauliflower => \*(Aqugly\*(Aq};
\&    print Dump $hash;
\&    Bless($hash);
\&    $ynode = ynode(Blessed($hash));
\&    $ynode\->keys([\*(Aqbanana\*(Aq, \*(Aqapple\*(Aq]);
\&    print Dump $hash;
.Ve
.Sp
Note that Blessing a Perl data structure does not change it anyway. The
extra information is stored separately and looked up by the Blessed node's
memory address.
.IP Blessed(perl\-node) 4
.IX Item "Blessed(perl-node)"
Returns the yaml node that a particular perl node is associated with (see
above). Returns undef if the node is not (YAML) Blessed.
.SH "GLOBAL OPTIONS"
.IX Header "GLOBAL OPTIONS"
YAML options are set using a group of global variables in the YAML namespace.
This is similar to how Data::Dumper works.
.PP
For example, to change the indentation width, do something like:
.PP
.Vb 1
\&    local $YAML::Indent = 3;
.Ve
.PP
The current options are:
.IP DumperClass 4
.IX Item "DumperClass"
You can override which module/class YAML uses for Dumping data.
.IP "LoadBlessed (since 1.25)" 4
.IX Item "LoadBlessed (since 1.25)"
Default is undef (false)
.Sp
The default was changed in version 1.30.
.Sp
When set to true, YAML nodes with special tags will be automatocally blessed
into objects:
.Sp
.Vb 2
\&    \- !perl/hash:Foo::Bar
\&        foo: 42
.Ve
.Sp
When loading untrusted YAML, you should disable this option by setting it to
\&\f(CW0\fR. This will also disable setting typeglobs when loading them.
.Sp
You can create any kind of object with YAML. The creation itself is not the
critical part. If the class has a \f(CW\*(C`DESTROY\*(C'\fR method, it will be called once
the object is deleted. An example with File::Temp removing files can be found
at <https://bugs.debian.org/cgi\-bin/bugreport.cgi?bug=862373>
.IP LoaderClass 4
.IX Item "LoaderClass"
You can override which module/class YAML uses for Loading data.
.IP Indent 4
.IX Item "Indent"
This is the number of space characters to use for each indentation level when
doing a \fBDump()\fR. The default is 2.
.Sp
By the way, YAML can use any number of characters for indentation at any
level. So if you are editing YAML by hand feel free to do it anyway that looks
pleasing to you; just be consistent for a given level.
.IP SortKeys 4
.IX Item "SortKeys"
Default is 1. (true)
.Sp
Tells YAML.pm whether or not to sort hash keys when storing a document.
.Sp
YAML::Node objects can have their own sort order, which is usually what you
want. To override the YAML::Node order and sort the keys anyway, set
SortKeys to 2.
.IP Stringify 4
.IX Item "Stringify"
Default is 0. (false)
.Sp
Objects with string overloading should honor the overloading and dump the
stringification of themselves, rather than the actual object's guts.
.IP Numify 4
.IX Item "Numify"
Default is 0. (false)
.Sp
Values that look like numbers (integers, floats) will be numified when loaded.
.IP UseHeader 4
.IX Item "UseHeader"
Default is 1. (true)
.Sp
This tells YAML.pm whether to use a separator string for a Dump operation.
This only applies to the first document in a stream. Subsequent documents must
have a YAML header by definition.
.IP UseVersion 4
.IX Item "UseVersion"
Default is 0. (false)
.Sp
Tells YAML.pm whether to include the YAML version on the separator/header.
.Sp
.Vb 1
\&    \-\-\- %YAML:1.0
.Ve
.IP AnchorPrefix 4
.IX Item "AnchorPrefix"
Default is ''.
.Sp
Anchor names are normally numeric. YAML.pm simply starts with '1' and
increases by one for each new anchor. This option allows you to specify a
string to be prepended to each anchor number.
.IP UseCode 4
.IX Item "UseCode"
Setting the UseCode option is a shortcut to set both the DumpCode and LoadCode
options at once. Setting UseCode to '1' tells YAML.pm to dump Perl code
references as Perl (using B::Deparse) and to load them back into memory using
\&\fBeval()\fR. The reason this has to be an option is that using \fBeval()\fR to parse
untrusted code is, well, untrustworthy.
.IP DumpCode 4
.IX Item "DumpCode"
Determines if and how YAML.pm should serialize Perl code references. By
default YAML.pm will dump code references as dummy placeholders (much like
Data::Dumper). If DumpCode is set to '1' or 'deparse', code references will be
dumped as actual Perl code.
.IP LoadCode 4
.IX Item "LoadCode"
LoadCode is the opposite of DumpCode. It tells YAML if and how to
deserialize code references. When set to '1' or 'deparse' it will use
\&\f(CWeval()\fR. Since this is potentially risky, only use this option if you know
where your YAML has been.
.Sp
LoadCode must be enabled also to use the feature of evaluating typeglobs
(because with the typeglob feature you would be able to set the variable
\&\f(CW$YAML::LoadCode\fR from a YAML file).
.IP Preserve 4
.IX Item "Preserve"
When set to true, this option tells the Loader to load hashes into YAML::Node
objects. These are tied hashes. This has the effect of remembering the key
order, thus it will be preserved when the hash is dumped again. See
YAML::Node for more information.
.IP UseBlock 4
.IX Item "UseBlock"
YAML.pm uses heuristics to guess which scalar style is best for a given node.
Sometimes you'll want all multiline scalars to use the 'block' style. If so,
set this option to 1.
.Sp
NOTE: YAML's block style is akin to Perl's here-document.
.IP "UseFold (Not supported anymore since v0.60)" 4
.IX Item "UseFold (Not supported anymore since v0.60)"
If you want to force YAML to use the 'folded' style for all multiline scalars,
then set \f(CW$UseFold\fR to 1.
.Sp
NOTE: YAML's folded style is akin to the way HTML folds text, except smarter.
.IP UseAliases 4
.IX Item "UseAliases"
YAML has an alias mechanism such that any given structure in memory gets
serialized once. Any other references to that structure are serialized only as
alias markers. This is how YAML can serialize duplicate and recursive
structures.
.Sp
Sometimes, when you KNOW that your data is nonrecursive in nature, you may
want to serialize such that every node is expressed in full. (ie as a copy
of the original). Setting \f(CW$YAML::UseAliases\fR to 0 will allow you to do
this. This also may result in faster processing because the lookup
overhead is by bypassed.
.Sp
THIS OPTION CAN BE DANGEROUS. \fBIf\fR your data is recursive, this option
\&\fBwill\fR cause \fBDump()\fR to run in an endless loop, chewing up your computers
memory. You have been warned.
.IP CompressSeries 4
.IX Item "CompressSeries"
Default is 1.
.Sp
Compresses the formatting of arrays of hashes:
.Sp
.Vb 4
\&    \-
\&      foo: bar
\&    \-
\&      bar: foo
.Ve
.Sp
becomes:
.Sp
.Vb 2
\&    \- foo: bar
\&    \- bar: foo
.Ve
.Sp
Since this output is usually more desirable, this option is turned on
by default.
.IP QuoteNumericStrings 4
.IX Item "QuoteNumericStrings"
Default is 0. (false)
.Sp
Adds detection mechanisms to encode strings that resemble numbers with
mandatory quoting.
.Sp
This ensures leading that things like leading/trailing zeros and other
formatting are preserved.
.SH "YAML TERMINOLOGY"
.IX Header "YAML TERMINOLOGY"
YAML is a full featured data serialization language, and thus has its own
terminology.
.PP
It is important to remember that although YAML is heavily influenced by Perl
and Python, it is a language in its own right, not merely just a
representation of Perl structures.
.PP
YAML has three constructs that are conspicuously similar to Perl's hash,
array, and scalar. They are called mapping, sequence, and string respectively.
By default, they do what you would expect. But each instance may have an
explicit or implicit tag (type) that makes it behave differently. In this
manner, YAML can be extended to represent Perl's Glob or Python's tuple, or
Ruby's Bigint.
.IP stream 4
.IX Item "stream"
.Vb 3
\&    A YAML stream is the full sequence of Unicode characters that a YAML
\&    parser would read or a YAML emitter would write. A stream may contain
\&    one or more YAML documents separated by YAML headers.
\&
\&    \-\-\-
\&    a: mapping
\&    foo: bar
\&    \-\-\-
\&    \- a
\&    \- sequence
.Ve
.IP document 4
.IX Item "document"
A YAML document is an independent data structure representation within a
stream. It is a top level node. Each document in a YAML stream must begin with
a YAML header line. Actually the header is optional on the first document.
.Sp
.Vb 6
\&    \-\-\-
\&    This: top level mapping
\&    is:
\&        \- a
\&        \- YAML
\&        \- document
.Ve
.IP header 4
.IX Item "header"
A YAML header is a line that begins a YAML document. It consists of three
dashes, possibly followed by more info. Another purpose of the header line is
that it serves as a place to put top level tag and anchor information.
.Sp
.Vb 3
\&    \-\-\- !recursive\-sequence &001
\&    \- * 001
\&    \- * 001
.Ve
.IP node 4
.IX Item "node"
A YAML node is the representation of a particular data structure. Nodes may
contain other nodes. (In Perl terms, nodes are like scalars. Strings,
arrayrefs and hashrefs. But this refers to the serialized format, not the in\-
memory structure.)
.IP tag 4
.IX Item "tag"
This is similar to a type. It indicates how a particular YAML node
serialization should be transferred into or out of memory. For instance a
Foo::Bar object would use the tag 'perl/Foo::Bar':
.Sp
.Vb 3
\&    \- !perl/Foo::Bar
\&        foo: 42
\&        bar: stool
.Ve
.IP collection 4
.IX Item "collection"
A collection is the generic term for a YAML data grouping. YAML has two types
of collections: mappings and sequences. (Similar to hashes and arrays)
.IP mapping 4
.IX Item "mapping"
A mapping is a YAML collection defined by unordered key/value pairs with
unique keys. By default YAML mappings are loaded into Perl hashes.
.Sp
.Vb 3
\&    a mapping:
\&        foo: bar
\&        two: times two is 4
.Ve
.IP sequence 4
.IX Item "sequence"
A sequence is a YAML collection defined by an ordered list of elements. By
default YAML sequences are loaded into Perl arrays.
.Sp
.Vb 4
\&    a sequence:
\&        \- one bourbon
\&        \- one scotch
\&        \- one beer
.Ve
.IP scalar 4
.IX Item "scalar"
A scalar is a YAML node that is a single value. By default YAML scalars are
loaded into Perl scalars.
.Sp
.Vb 1
\&    a scalar key: a scalar value
.Ve
.Sp
YAML has many styles for representing scalars. This is important because
varying data will have varying formatting requirements to retain the optimum
human readability.
.IP "plain scalar" 4
.IX Item "plain scalar"
A plain scalar is unquoted. All plain scalars are automatic candidates for
"implicit tagging". This means that their tag may be determined automatically
by examination. The typical uses for this are plain alpha strings, integers,
real numbers, dates, times and currency.
.Sp
.Vb 5
\&    \- a plain string
\&    \- \-42
\&    \- 3.1415
\&    \- 12:34
\&    \- 123 this is an error
.Ve
.IP "single quoted scalar" 4
.IX Item "single quoted scalar"
This is similar to Perl's use of single quotes. It means no escaping except
for single quotes which are escaped by using two adjacent single quotes.
.Sp
.Vb 1
\&    \- \*(AqWhen I say \*(Aq\*(Aq\en\*(Aq\*(Aq I mean "backslash en"\*(Aq
.Ve
.IP "double quoted scalar" 4
.IX Item "double quoted scalar"
This is similar to Perl's use of double quotes. Character escaping can be
used.
.Sp
.Vb 1
\&    \- "This scalar\enhas two lines, and a bell \-\->\ea"
.Ve
.IP "folded scalar" 4
.IX Item "folded scalar"
This is a multiline scalar which begins on the next line. It is indicated by a
single right angle bracket. It is unescaped like the single quoted scalar.
Line folding is also performed.
.Sp
.Vb 6
\&    \- >
\&     This is a multiline scalar which begins on
\&     the next line. It is indicated by a single
\&     carat. It is unescaped like the single
\&     quoted scalar. Line folding is also
\&     performed.
.Ve
.IP "block scalar" 4
.IX Item "block scalar"
This final multiline form is akin to Perl's here-document except that (as in
all YAML data) scope is indicated by indentation. Therefore, no ending marker
is required. The data is verbatim. No line folding.
.Sp
.Vb 5
\&    \- |
\&        QTY  DESC          PRICE  TOTAL
\&        \-\-\-  \-\-\-\-          \-\-\-\-\-  \-\-\-\-\-
\&          1  Foo Fighters  $19.95 $19.95
\&          2  Bar Belles    $29.95 $59.90
.Ve
.IP parser 4
.IX Item "parser"
A YAML processor has four stages: parse, load, dump, emit.
.Sp
A parser parses a YAML stream. YAML.pm's \fBLoad()\fR function contains a parser.
.IP loader 4
.IX Item "loader"
The other half of the \fBLoad()\fR function is a loader. This takes the information
from the parser and loads it into a Perl data structure.
.IP dumper 4
.IX Item "dumper"
The \fBDump()\fR function consists of a dumper and an emitter. The dumper walks
through each Perl data structure and gives info to the emitter.
.IP emitter 4
.IX Item "emitter"
The emitter takes info from the dumper and turns it into a YAML stream.
.Sp
NOTE: In YAML.pm the parser\fIloader and the dumper\fRemitter code are currently
      very closely tied together. In the future they may be broken into
      separate stages.
.PP
For more information please refer to the immensely helpful YAML specification
available at <http://www.yaml.org/spec/>.
.SH "YSH \- THE YAML SHELL"
.IX Header "YSH - THE YAML SHELL"
The YAML::Shell distribution provides script called 'ysh', the YAML shell.
ysh provides a simple, interactive way to play with YAML. If you type in Perl
code, it displays the result in YAML. If you type in YAML it turns it into
Perl code.
.PP
To run ysh, (assuming you installed it along with YAML.pm) simply type:
.PP
.Vb 1
\&    ysh [options]
.Ve
.PP
Please read the \f(CW\*(C`ysh\*(C'\fR documentation for the full details. There are lots
of options.
.SH "BUGS & DEFICIENCIES"
.IX Header "BUGS & DEFICIENCIES"
If you find a bug in YAML, please try to recreate it in the YAML Shell with
logging turned on ('ysh \-L'). When you have successfully reproduced the bug,
please mail the LOG file to the author (ingy@cpan.org).
.PP
WARNING: This is still \fBALPHA\fR code. Well, most of this code has been around
for years...
.PP
BIGGER WARNING: YAML.pm has been slow in the making, but I am committed to
having top notch YAML tools in the Perl world. The YAML team is close to
finalizing the YAML 1.1 spec. This version of YAML.pm is based off of a very
old pre 1.0 spec. In actuality there isn't a ton of difference, and this
YAML.pm is still fairly useful. Things will get much better in the future.
.SH RESOURCES
.IX Header "RESOURCES"
<http://www.yaml.org> is the official YAML website.
.PP
<http://www.yaml.org/spec/> is the YAML 1.2 specification.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
YAML::PP \- This is almost certainly the YAML module you are looking for. It is full-featured and well maintained.
.IP \(bu 4
YAML::PP::LibYAML \- Same overall API as YAML::PP but uses the libyaml shared library for speed.
.SH AUTHOR
.IX Header "AUTHOR"
Ingy döt Net <ingy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2001\-2023. Ingy döt Net.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
