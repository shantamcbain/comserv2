.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IPC::Run3::ProfArrayBuffer 3pm"
.TH IPC::Run3::ProfArrayBuffer 3pm 2024-01-20 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
IPC::Run3::ProfArrayBuffer \- Store profile events in RAM in an array
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.SH METHODS
.IX Header "METHODS"
.ie n .IP """IPC::Run3::ProfArrayBuffer\->new()""" 4
.el .IP \f(CWIPC::Run3::ProfArrayBuffer\->new()\fR 4
.IX Item "IPC::Run3::ProfArrayBuffer->new()"
.PD 0
.ie n .IP """$buffer\->app_call(@events)""" 4
.el .IP \f(CW$buffer\->app_call(@events)\fR 4
.IX Item "$buffer->app_call(@events)"
.ie n .IP """$buffer\->app_exit(@events)""" 4
.el .IP \f(CW$buffer\->app_exit(@events)\fR 4
.IX Item "$buffer->app_exit(@events)"
.ie n .IP """$buffer\->run_exit(@events)""" 4
.el .IP \f(CW$buffer\->run_exit(@events)\fR 4
.IX Item "$buffer->run_exit(@events)"
.PD
The three above methods push the given events onto the stack of recorded
events.
.IP get_events 4
.IX Item "get_events"
Returns a list of all the events.  Each event is an ARRAY reference
like:
.Sp
.Vb 1
\&   [ "app_call", 1.1, ... ];
.Ve
.SH LIMITATIONS
.IX Header "LIMITATIONS"
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright 2003, R. Barrie Slaymaker, Jr., All Rights Reserved
.SH LICENSE
.IX Header "LICENSE"
You may use this module under the terms of the BSD, Artistic, or GPL licenses,
any version.
.SH AUTHOR
.IX Header "AUTHOR"
Barrie Slaymaker <barries@slaysys.com>
