.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Template::Parser 3pm"
.TH Template::Parser 3pm 2024-06-21 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Template::Parser \- LALR(1) parser for compiling template documents
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Template::Parser;
\&
\&    $parser   = Template::Parser\->new(\e%config);
\&    $template = $parser\->parse($text)
\&        || die $parser\->error(), "\en";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`Template::Parser\*(C'\fR module implements a \fBLALR\fR\|(1) parser and associated
methods for parsing template documents into Perl code.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS new(\e%params)
.IX Subsection "new(%params)"
The \f(CWnew()\fR constructor creates and returns a reference to a new
\&\f(CW\*(C`Template::Parser\*(C'\fR object.
.PP
A reference to a hash may be supplied as a parameter to provide configuration values.
See "CONFIGURATION OPTIONS" below for a summary of these options and
Template::Manual::Config for full details.
.PP
.Vb 4
\&    my $parser = Template::Parser\->new({
\&        START_TAG => quotemeta(\*(Aq<+\*(Aq),
\&        END_TAG   => quotemeta(\*(Aq+>\*(Aq),
\&    });
.Ve
.SS parse($text)
.IX Subsection "parse($text)"
The \f(CWparse()\fR method parses the text passed in the first parameter and
returns a reference to a hash array of data defining the compiled
representation of the template text, suitable for passing to the
Template::Document \fBnew()\fR constructor method. On
error, undef is returned.
.PP
.Vb 2
\&    $data = $parser\->parse($text)
\&        || die $parser\->error();
.Ve
.PP
The \f(CW$data\fR hash reference returned contains a \f(CW\*(C`BLOCK\*(C'\fR item containing the
compiled Perl code for the template, a \f(CW\*(C`DEFBLOCKS\*(C'\fR item containing a
reference to a hash array of sub-template \f(CW\*(C`BLOCK\*(C'\fRs defined within in the
template, and a \f(CW\*(C`METADATA\*(C'\fR item containing a reference to a hash array
of metadata values defined in \f(CW\*(C`META\*(C'\fR tags.
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
The \f(CW\*(C`Template::Parser\*(C'\fR module accepts the following configuration
options.  Please see Template::Manual::Config for further details
on each option.
.SS "START_TAG, END_TAG"
.IX Subsection "START_TAG, END_TAG"
The START_TAG and
END_TAG options are used to
specify character sequences or regular expressions that mark the start and end
of a template directive.
.PP
.Vb 4
\&    my $parser = Template::Parser\->new({
\&        START_TAG => quotemeta(\*(Aq<+\*(Aq),
\&        END_TAG   => quotemeta(\*(Aq+>\*(Aq),
\&    });
.Ve
.SS TAG_STYLE
.IX Subsection "TAG_STYLE"
The TAG_STYLE option can be used to set
both START_TAG and END_TAG according to pre-defined tag styles.
.PP
.Vb 3
\&    my $parser = Template::Parser\->new({
\&        TAG_STYLE => \*(Aqstar\*(Aq,     # [* ... *]
\&    });
.Ve
.SS "PRE_CHOMP, POST_CHOMP"
.IX Subsection "PRE_CHOMP, POST_CHOMP"
The PRE_CHOMP and
POST_CHOMP can be set to remove
any whitespace before or after a directive tag, respectively.
.PP
.Vb 4
\&    my $parser = Template::Parser\-E<gt>new({
\&        PRE_CHOMP  => 1,
\&        POST_CHOMP => 1,
\&    });
.Ve
.SS INTERPOLATE
.IX Subsection "INTERPOLATE"
The INTERPOLATE flag can be set
to allow variables to be embedded in plain text blocks.
.PP
.Vb 3
\&    my $parser = Template::Parser\->new({
\&        INTERPOLATE => 1,
\&    });
.Ve
.PP
Variables should be prefixed by a \f(CW\*(C`$\*(C'\fR to identify them, using curly braces
to explicitly scope the variable name where necessary.
.PP
.Vb 1
\&    Hello ${name},
\&
\&    The day today is ${day.today}.
.Ve
.SS ANYCASE
.IX Subsection "ANYCASE"
The ANYCASE option can be set
to allow directive keywords to be specified in any case.
.PP
.Vb 4
\&    # with ANYCASE set to 1
\&    [% INCLUDE foobar %]    # OK
\&    [% include foobar %]    # OK
\&    [% include = 10   %]    # ERROR, \*(Aqinclude\*(Aq is a reserved word
.Ve
.SS GRAMMAR
.IX Subsection "GRAMMAR"
The GRAMMAR configuration item can be used
to specify an alternate grammar for the parser. This allows a modified or
entirely new template language to be constructed and used by the Template
Toolkit.
.PP
.Vb 1
\&    use MyOrg::Template::Grammar;
\&
\&    my $parser = Template::Parser\->new({
\&        GRAMMAR = MyOrg::Template::Grammar\->new();
\&    });
.Ve
.PP
By default, an instance of the default Template::Grammar will be
created and used automatically if a \f(CW\*(C`GRAMMAR\*(C'\fR item isn't specified.
.SS DEBUG
.IX Subsection "DEBUG"
The DEBUG option can be used to enable
various debugging features of the \f(CW\*(C`Template::Parser\*(C'\fR module.
.PP
.Vb 1
\&    use Template::Constants qw( :debug );
\&
\&    my $template = Template\->new({
\&        DEBUG => DEBUG_PARSER | DEBUG_DIRS,
\&    });
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Andy Wardley <abw@wardley.org> <http://wardley.org/>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2022 Andy Wardley.  All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
The main parsing loop of the \f(CW\*(C`Template::Parser\*(C'\fR module was derived from a
standalone parser generated by version 0.16 of the \f(CW\*(C`Parse::Yapp\*(C'\fR module. The
following copyright notice appears in the \f(CW\*(C`Parse::Yapp\*(C'\fR documentation.
.PP
.Vb 3
\&    The Parse::Yapp module and its related modules and shell
\&    scripts are copyright (c) 1998 Francois Desarmenien,
\&    France. All rights reserved.
\&
\&    You may use and distribute them under the terms of either
\&    the GNU General Public License or the Artistic License, as
\&    specified in the Perl README file.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Grammar, Template::Directive
