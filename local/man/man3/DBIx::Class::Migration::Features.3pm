.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Migration::Features 3pm"
.TH DBIx::Class::Migration::Features 3pm 2020-06-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Migration::Features \- Features of DBIx::Class::Migration
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This document summarizes the features and developer value of
DBIx::Class::Migration and its associated ecosystem.
.SH "Standard Workflows"
.IX Header "Standard Workflows"
Standard workflows for creating database versions, updates and downgrades
between versions, management of seed data as well as testing and development
fixtures are offered.
.PP
You can start prototyping with an easy Sqlite database and move up to Mysql
or Postgresql with a single switch.
.SH "Database Installation"
.IX Header "Database Installation"
Given an application where its database has evolved over many versions, you
can install a database to any version in the history, as well as install
development and fixture data for that version.
.PP
.Vb 3
\&    dbic\-migration install
\&    dbic\-migration install \-\-to_version 5
\&    dbic\-migration populate \-\-fixture_set testing_data
.Ve
.SH "Upgrade / Downgrade Management"
.IX Header "Upgrade / Downgrade Management"
Offers a system to move a database from any one version to any other version.
Additionally lets you migrate data between versions and even offers the possibility
to migrate between different types of databases
.PP
.Vb 3
\&    dbic\-migration prepare
\&    dbic\-migration upgrade
\&    dbic\-migration downgrade
.Ve
.SH "Seed, Developer and Test Data"
.IX Header "Seed, Developer and Test Data"
Create and manage data in your database.  Create sets for testing, development
and to manage system or 'seed' data (data that a database needs to properly
function, such as a Country list).
.PP
.Vb 1
\&    dbic\-migration dump_named_sets \-fixture_set countries
.Ve
.PP
Data can be properly converted between database versions
.SH Testing
.IX Header "Testing"
Integrates with testing tools like Test::DBIx::Class to make testing your
database logic simple.
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&
\&    use Test::Most;
\&    use Test::DBIx::Class
\&      \-schema_class=>\*(AqMyApp::Schema\*(Aq,
\&      \-fixture_class => \*(Aq::Population\*(Aq,
\&      qw(Artist Country);
\&
\&    fixtures_ok [\*(Aqall_tables\*(Aq];
\&
\&    is Country\->count, 3, \*(AqCorrect Number of Countries\*(Aq;
\&    ok Artist\->first\->has_country, \*(AqArtist has a country\*(Aq;
\&
\&    done_testing;
.Ve
.SH "Easy Creation of Developer level Database sandboxes"
.IX Header "Easy Creation of Developer level Database sandboxes"
Automatically create a developer controlled, local database for rapid prototyping
and easy administration.  Supports Sqlite, MySQL and Postgresql sandboxes.
.SH "Framework Integration"
.IX Header "Framework Integration"
Plays nice with popular web application development frameworks like Catalyst.
.PP
.Vb 1
\&    package MyApp::Web::Model::Schema;
\&
\&    use Moose;
\&    extends \*(AqCatalyst::Model::DBIC::Schema\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->meta\->make_immutable;
\&    _\|_PACKAGE_\|_\->config(
\&      traits => [\*(AqFromMigration\*(Aq],
\&      schema_class => \*(AqMyApp::Schema\*(Aq,
\&      extra_migration_args => {
\&        db_sandbox_class => \*(AqDBIx::Class::Migration::MySQLSandbox\*(Aq},
\&      install_if_needed => {
\&        on_install => sub {
\&          my ($schema, $migration) = @_;
\&          $migration\->populate(\*(Aqall_tables\*(Aq)}},
\&    );
.Ve
.SH "Straightforward subclassing"
.IX Header "Straightforward subclassing"
Core code designed to be easily subclassed for local customizations.  However,
subclassing is often unneeded for some customizations since you have the ability
to control and configure many aspects of the code using init arguments.
.SH "Tutorial and Documentation"
.IX Header "Tutorial and Documentation"
Extensively documented and ships with an end to end tutorial that covers everything
from creating your first migration, through testing and integration with Catalyst
.PP
DBIx::Class::Migration::Tutorial
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Migration, DBIx::Class::Migration::Tutorial
.SH AUTHOR
.IX Header "AUTHOR"
See DBIx::Class::Migration for author information
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
See DBIx::Class::Migration for copyright and license information
