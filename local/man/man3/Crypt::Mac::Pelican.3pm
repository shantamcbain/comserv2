.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Mac::Pelican 3pm"
.TH Crypt::Mac::Pelican 3pm 2025-02-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::Mac::Pelican \- Message authentication code Pelican (AES based MAC)
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&   ### Functional interface:
\&   use Crypt::Mac::Pelican qw( pelican pelican_hex );
\&
\&   # calculate MAC from string/buffer
\&   $pelican_raw  = pelican($key, \*(Aqdata buffer\*(Aq);
\&   $pelican_hex  = pelican_hex($key, \*(Aqdata buffer\*(Aq);
\&   $pelican_b64  = pelican_b64($key, \*(Aqdata buffer\*(Aq);
\&   $pelican_b64u = pelican_b64u($key, \*(Aqdata buffer\*(Aq);
\&
\&   ### OO interface:
\&   use Crypt::Mac::Pelican;
\&
\&   $d = Crypt::Mac::Pelican\->new($key);
\&   $d\->add(\*(Aqany data\*(Aq);
\&   $d\->addfile(\*(Aqfilename.dat\*(Aq);
\&   $d\->addfile(*FILEHANDLE);
\&   $result_raw  = $d\->mac;     # raw bytes
\&   $result_hex  = $d\->hexmac;  # hexadecimal form
\&   $result_b64  = $d\->b64mac;  # Base64 form
\&   $result_b64u = $d\->b64umac; # Base64 URL Safe form
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Provides an interface to the Pelican message authentication code (MAC) algorithm.
.SH EXPORT
.IX Header "EXPORT"
Nothing is exported by default.
.PP
You can export selected functions:
.PP
.Vb 1
\&  use Crypt::Mac::Pelican qw(pelican pelican_hex );
.Ve
.PP
Or all of them at once:
.PP
.Vb 1
\&  use Crypt::Mac::Pelican \*(Aq:all\*(Aq;
.Ve
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS pelican
.IX Subsection "pelican"
Logically joins all arguments into a single string, and returns its Pelican message authentication code encoded as a binary string.
.PP
.Vb 3
\& $pelican_raw = pelican($key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pelican_raw = pelican($key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS pelican_hex
.IX Subsection "pelican_hex"
Logically joins all arguments into a single string, and returns its Pelican message authentication code encoded as a hexadecimal string.
.PP
.Vb 3
\& $pelican_hex = pelican_hex($key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pelican_hex = pelican_hex($key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS pelican_b64
.IX Subsection "pelican_b64"
Logically joins all arguments into a single string, and returns its Pelican message authentication code encoded as a Base64 string.
.PP
.Vb 3
\& $pelican_b64 = pelican_b64($key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pelican_b64 = pelican_b64($key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS pelican_b64u
.IX Subsection "pelican_b64u"
Logically joins all arguments into a single string, and returns its Pelican message authentication code encoded as a Base64 URL Safe string (see RFC 4648 section 5).
.PP
.Vb 3
\& $pelican_b64url = pelican_b64u($key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pelican_b64url = pelican_b64u($key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
.Vb 1
\& $d = Crypt::Mac::Pelican\->new($key);
.Ve
.SS clone
.IX Subsection "clone"
.Vb 1
\& $d\->clone();
.Ve
.SS reset
.IX Subsection "reset"
.Vb 1
\& $d\->reset();
.Ve
.SS add
.IX Subsection "add"
.Vb 3
\& $d\->add(\*(Aqany data\*(Aq);
\& #or
\& $d\->add(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS addfile
.IX Subsection "addfile"
.Vb 3
\& $d\->addfile(\*(Aqfilename.dat\*(Aq);
\& #or
\& $d\->addfile(*FILEHANDLE);
.Ve
.SS mac
.IX Subsection "mac"
.Vb 1
\& $result_raw = $d\->mac();
.Ve
.SS hexmac
.IX Subsection "hexmac"
.Vb 1
\& $result_hex = $d\->hexmac();
.Ve
.SS b64mac
.IX Subsection "b64mac"
.Vb 1
\& $result_b64 = $d\->b64mac();
.Ve
.SS b64umac
.IX Subsection "b64umac"
.Vb 1
\& $result_b64url = $d\->b64umac();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
CryptX
.IP \(bu 4
<http://eprint.iacr.org/2005/088.pdf>
