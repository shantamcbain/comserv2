.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::TraitFor::Model::DBIC::Schema::Replicated 3pm"
.TH Catalyst::TraitFor::Model::DBIC::Schema::Replicated 3pm 2023-07-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::TraitFor::Model::DBIC::Schema::Replicated \- Replicated storage support for
Catalyst::Model::DBIC::Schema
.SH SYNOPSiS
.IX Header "SYNOPSiS"
.Vb 10
\&    _\|_PACKAGE_\|_\->config({
\&        traits => [\*(AqReplicated\*(Aq]
\&        connect_info =>
\&            [\*(Aqdbi:mysql:master\*(Aq, \*(Aquser\*(Aq, \*(Aqpass\*(Aq],
\&        replicants => [
\&            [\*(Aqdbi:mysql:slave1\*(Aq, \*(Aquser\*(Aq, \*(Aqpass\*(Aq],
\&            [\*(Aqdbi:mysql:slave2\*(Aq, \*(Aquser\*(Aq, \*(Aqpass\*(Aq],
\&            [\*(Aqdbi:mysql:slave3\*(Aq, \*(Aquser\*(Aq, \*(Aqpass\*(Aq],
\&        ],
\&        balancer_args => {
\&          master_read_weight => 0.3
\&        }
\&    });
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Sets your storage_type to DBIx::Class::Storage::DBI::Replicated and connects
replicants provided in config. See that module for supported resultset
attributes.
.PP
The default "balancer_type" in DBIx::Class::Storage::DBI::Replicated is
\&\f(CW\*(C`::Random\*(C'\fR.
.PP
Sets the
"master_read_weight" in DBIx::Class::Storage::DBI::Replicated::Balancer::Random to
\&\f(CW1\fR by default, meaning that you have the same chance of reading from master as
you do from replicants. Set to \f(CW0\fR to turn off reads from master.
.SH "CONFIG PARAMETERS"
.IX Header "CONFIG PARAMETERS"
.SS replicants
.IX Subsection "replicants"
Array of connect_info settings for every replicant.
.PP
The following can be set via "connect_info" in Catalyst::Model::DBIC::Schema, or
as their own parameters. If set via separate parameters, they will override the
settings in \f(CW\*(C`connect_info\*(C'\fR.
.SS pool_type
.IX Subsection "pool_type"
See "pool_type" in DBIx::Class::Storage::DBI::Replicated.
.SS pool_args
.IX Subsection "pool_args"
See "pool_args" in DBIx::Class::Storage::DBI::Replicated.
.SS balancer_type
.IX Subsection "balancer_type"
See "balancer_type" in DBIx::Class::Storage::DBI::Replicated.
.SS balancer_args
.IX Subsection "balancer_args"
See "balancer_args" in DBIx::Class::Storage::DBI::Replicated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Model::DBIC::Schema, DBIx::Class,
DBIx::Class::Storage::DBI::Replicated,
Catalyst::TraitFor::Model::DBIC::Schema::Caching
.SH AUTHOR
.IX Header "AUTHOR"
See "AUTHOR" in Catalyst::Model::DBIC::Schema and
"CONTRIBUTORS" in Catalyst::Model::DBIC::Schema.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
See "COPYRIGHT" in Catalyst::Model::DBIC::Schema.
.SH LICENSE
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it
under the same terms as Perl itself.
