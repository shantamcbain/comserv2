.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Producer::DiaUml 3pm"
.TH SQL::Translator::Producer::DiaUml 3pm 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Producer::DiaUml \-
    Produces dia UML diagrams from schema.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 7
\&  use SQL::Translator;
\&  my $translator     = SQL::Translator\->new(
\&      from           => \*(AqMySQL\*(Aq,
\&      filename       => \*(Aqfoo_schema.sql\*(Aq,
\&      to             => \*(AqDiaUml\*(Aq,
\&  );
\&  print $translator\->translate;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Currently you will get one class (with the a table
stereotype) generated per table in the schema. The fields are added as
attributes of the classes and their datatypes set. It doesn't currently set any
of the relationships. It doesn't do any layout, all the classes are in one big
stack. However it is still useful as you can use the layout tools in Dia to
automatically arrange them horizontally or vertically.
.SS "Producer Args"
.IX Subsection "Producer Args"
.SH AUTHOR
.IX Header "AUTHOR"
Mark Addison <grommit@users.sourceforge.net>.
.SH TODO
.IX Header "TODO"
* Add the foreign keys from the schema as UML relations.
.PP
* Layout the classes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Translator.
