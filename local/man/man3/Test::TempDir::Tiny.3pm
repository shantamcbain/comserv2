.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::TempDir::Tiny 3pm"
.TH Test::TempDir::Tiny 3pm 2018-07-12 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::TempDir::Tiny \- Temporary directories that stick around when tests fail
.SH VERSION
.IX Header "VERSION"
version 0.018
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    # t/foo.t
\&    use Test::More;
\&    use Test::TempDir::Tiny;
\&
\&    # default tempdirs
\&    $dir = tempdir();          # ./tmp/t_foo_t/default_1/
\&    $dir = tempdir();          # ./tmp/t_foo_t/default_2/
\&
\&    # labeled tempdirs
\&    $dir = tempdir("label");   # ./tmp/t_foo_t/label_1/
\&    $dir = tempdir("label");   # ./tmp/t_foo_t/label_2/
\&
\&    # labels with spaces and non\-word characters
\&    $dir = tempdir("bar baz")  # ./tmp/t_foo_t/bar_baz_1/
\&    $dir = tempdir("!!!bang")  # ./tmp/t_foo_t/_bang_1/
\&
\&    # run code in a temporary directory
\&    in_tempdir "label becomes name" => sub {
\&        my $cwd = shift;
\&        # do stuff in a tempdir
\&    };
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module works with Test::More to create temporary directories that stick
around if tests fail.
.PP
It is loosely based on Test::TempDir, but with less complexity, greater
portability and zero non-core dependencies.  (Capture::Tiny is recommended
for testing.)
.PP
The "tempdir" and "in_tempdir" functions are exported by default.
.PP
If the current directory is writable, the root for directories will be
\&\fI./tmp\fR.  Otherwise, a File::Temp directory will be created wherever
temporary directories are stored for your system.
.PP
Every \fI*.t\fR file gets its own subdirectory under the root based on the test
filename, but with slashes and periods replaced with underscores.  For example,
\&\fIt/foo.t\fR would get a test-file-specific subdirectory \fI./tmp/t_foo_t/\fR.
Directories created by "tempdir" get put in that directory.  This makes it
very easy to find files later if tests fail.
.PP
The test-file-specific name is consistent from run-to-run.  If an old directory
already exists, it will be removed.
.PP
When the test file exits, if all tests passed, then the test-file-specific
directory is recursively removed.
.PP
If a test failed and the root directory is \fI./tmp\fR, the test-file-specific
directory sticks around for inspection.  (But if the root is a File::Temp
directory, it is always discarded).
.PP
If nothing is left in \fI./tmp\fR (i.e. no other test file failed), then \fI./tmp\fR
is cleaned up as well (unless it's a symlink).
.PP
This module attempts to avoid race conditions due to parallel testing.  In
extreme cases, the test-file-specific subdirectory might be created as a
regular File::Temp directory rather than in \fI./tmp\fR.  In such a case,
a warning will be issued.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS tempdir
.IX Subsection "tempdir"
.Vb 2
\&    $dir = tempdir();          # .../default_1/
\&    $dir = tempdir("label");   # .../label_1/
.Ve
.PP
Creates a directory underneath a test-file-specific temporary directory and
returns the absolute path to it in platform-native form (i.e. with backslashes
on Windows).
.PP
The function takes a single argument as a label for the directory or defaults
to "default". An incremental counter value will be appended to allow a label to
be used within a loop with distinct temporary directories:
.PP
.Vb 1
\&    # t/foo.t
\&
\&    for ( 1 .. 3 ) {
\&        tempdir("in loop");
\&    }
\&
\&    # creates:
\&    #   ./tmp/t_foo_t/in_loop_1
\&    #   ./tmp/t_foo_t/in_loop_2
\&    #   ./tmp/t_foo_t/in_loop_3
.Ve
.PP
If the label contains any characters besides alphanumerics, underscore
and dash, they will be collapsed and replaced with a single underscore.
.PP
.Vb 2
\&    $dir = tempdir("a space"); # .../a_space_1/
\&    $dir = tempdir("a!bang");  # .../a_bang_1/
.Ve
.PP
The test-file-specific directory and all directories within it will be cleaned
up with an END block if the current test file passes tests.
.SS in_tempdir
.IX Subsection "in_tempdir"
.Vb 4
\&    in_tempdir "label becomes name" => sub {
\&        my $cwd = shift;
\&        # this happens in tempdir
\&    };
.Ve
.PP
Given a label and a code reference, creates a temporary directory based on the
label (following the rules of "tempdir"), changes to that directory, runs the
code, then changes back to the original directory.
.PP
The temporary directory path is given as an argument to the code reference.
.PP
When the code finishes (even if it dies), \f(CW\*(C`in_tempdir\*(C'\fR will change back to the
original directory if it can, to the root if it can't, and will rethrow any
fatal errors.
.SH ENVIRONMENT
.IX Header "ENVIRONMENT"
.ie n .SS """PERL_TEST_TEMPDIR_TINY_NOCLEANUP"""
.el .SS \f(CWPERL_TEST_TEMPDIR_TINY_NOCLEANUP\fP
.IX Subsection "PERL_TEST_TEMPDIR_TINY_NOCLEANUP"
When this environment variable is true, directories will not be cleaned up,
even if tests pass.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
File::Temp
.IP \(bu 4
Path::Tiny
.SH SUPPORT
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/Test\-TempDir\-Tiny/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/Test\-TempDir\-Tiny>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/Test\-TempDir\-Tiny.git
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Christian Walde <walde.christian@googlemail.com>
.IP \(bu 4
Kent Fredric <kentfredric@gmail.com>
.IP \(bu 4
Shawn Laffan <shawnlaffan@gmail.com>
.IP \(bu 4
Sven Kirmess <sven.kirmess@kzone.ch>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
