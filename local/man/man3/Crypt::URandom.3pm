.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::URandom 3pm"
.TH Crypt::URandom 3pm 2025-03-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::URandom \- Provide non blocking randomness
.SH VERSION
.IX Header "VERSION"
This document describes Crypt::URandom version 0.54
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::URandom();
\&
\&    my $random_string_50_bytes_long = Crypt::URandom::urandom(50);
.Ve
.PP
OR
.PP
.Vb 1
\&    use Crypt::URandom qw( urandom );
\&
\&    my $random_string_50_bytes_long = urandom(50);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This Module is intended to provide
an interface to the strongest available source of non-blocking 
randomness on the current platform.  Platforms currently supported are
anything supporting \fBgetrandom\fR\|(2), /dev/urandom and versions of Windows greater
than or equal to Windows 2000.
.SH SUBROUTINES/METHODS
.IX Header "SUBROUTINES/METHODS"
.ie n .IP """urandom""" 4
.el .IP \f(CWurandom\fR 4
.IX Item "urandom"
This function accepts an integer and returns a string of the same size
filled with random data. It will throw an exception if the requested amount of
random data is not returned. The first call will initialize the native
cryptographic libraries (if necessary) and load all the required Perl libraries.
This call is a buffered read on non Win32 platforms that do not support \fBgetrandom\fR\|(2)
or equivalent.
.ie n .IP """urandom_ub""" 4
.el .IP \f(CWurandom_ub\fR 4
.IX Item "urandom_ub"
This function accepts an integer and returns a string of the same size
filled with random data.  It will throw an exception if the requested amount of
random data is not returned.  The first call will initialize the native
cryptographic libraries (if necessary) and load all the required Perl libraries.
This call is a unbuffered sysread on non Win32 platforms that do not support
\&\fBgetrandom\fR\|(2) or equivalent.
.ie n .IP """getrandom""" 4
.el .IP \f(CWgetrandom\fR 4
.IX Item "getrandom"
This function accepts an integer and returns a string of the same size
filled with random data on platforms that implement \fBgetrandom\fR\|(2).
It will throw an exception if the requested amount of random data is not returned.
This is NOT portable across all operating systems, but is made available if
high-speed generation of random numbers is required.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP """No secure alternative for random number generation for Win32 versions older than W2K""" 4
.el .IP "\f(CWNo secure alternative for random number generation for Win32 versions older than W2K\fR" 4
.IX Item "No secure alternative for random number generation for Win32 versions older than W2K"
The module cannot run on versions of Windows earlier than Windows 2000 as there is no
cryptographic functions provided by the operating system.
.ie n .IP """Could not import CryptAcquireContext""" 4
.el .IP "\f(CWCould not import CryptAcquireContext\fR" 4
.IX Item "Could not import CryptAcquireContext"
The module was unable to load the CryptAcquireContextA function from the 
advapi32 dynamic library.  The advapi32 library cannot probably be loaded.
.ie n .IP """CryptAcquireContext failed""" 4
.el .IP "\f(CWCryptAcquireContext failed\fR" 4
.IX Item "CryptAcquireContext failed"
The module was unable to call the CryptAcquireContextA function from the
advapi32 dynamic library.
.ie n .IP """Could not import CryptGenRandom""" 4
.el .IP "\f(CWCould not import CryptGenRandom\fR" 4
.IX Item "Could not import CryptGenRandom"
The module was unable to load the CryptGenRandom function from the 
advapi32 dynamic library.
.ie n .IP """Could not import SystemFunction036""" 4
.el .IP "\f(CWCould not import SystemFunction036\fR" 4
.IX Item "Could not import SystemFunction036"
The module was unable to load the SystemFunction036 function from the 
advapi32 dynamic library.
.ie n .IP """The length argument must be supplied and must be an integer""" 4
.el .IP "\f(CWThe length argument must be supplied and must be an integer\fR" 4
.IX Item "The length argument must be supplied and must be an integer"
The get method must be called with an integer argument to describe how many
random bytes are required.
.ie n .IP """CryptGenRandom failed""" 4
.el .IP "\f(CWCryptGenRandom failed\fR" 4
.IX Item "CryptGenRandom failed"
The Windows 2000 CryptGenRandom method call failed to generate the required
amount of randomness
.ie n .IP """RtlGenRand failed""" 4
.el .IP "\f(CWRtlGenRand failed\fR" 4
.IX Item "RtlGenRand failed"
The post Windows 2000 RtlGenRand method call failed to generate the required
amount of randomness
.ie n .IP """Only read n bytes from path""" 4
.el .IP "\f(CWOnly read n bytes from path\fR" 4
.IX Item "Only read n bytes from path"
The /dev/urandom device did not return the desired amount of random bytes
.ie n .IP """Failed to read from path""" 4
.el .IP "\f(CWFailed to read from path\fR" 4
.IX Item "Failed to read from path"
The /dev/urandom device returned an error when being read from
.ie n .IP """Failed to open path""" 4
.el .IP "\f(CWFailed to open path\fR" 4
.IX Item "Failed to open path"
The /dev/urandom device returned an error when being opened
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Crypt::URandom requires no configuration files or environment variables.
.PP
If the environment variable CRYPT_URANDOM_BUILD_DEBUG is specified when
running \f(CW\*(C`perl Makefile.PL\*(C'\fR or \f(CW\*(C`make test\*(C'\fR AND \fBgetrandom\fR\|(2) or it's
equivalents cannot be detected, extra debug will be shown to show the
failures to detect these functions.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
.RS 4
If the platform is Win32, the Win32::API module will be required.  Otherwise
no other modules other than those provided by perl will be required
.RE
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
To report a bug, or view the current list of bugs, please visit <https://github.com/david\-dick/crypt\-urandom/issues>
.SH AUTHOR
.IX Header "AUTHOR"
David Dick  \f(CW\*(C`<ddick@cpan.org>\*(C'\fR
.SH ACKNOWLEDGEMENTS
.IX Header "ACKNOWLEDGEMENTS"
The Win32::API code for interacting with Microsoft's CryptoAPI <https://en.wikipedia.org/wiki/Microsoft_CryptoAPI> was copied with extreme
gratitude from Crypt::Random::Source::Strong::Win32 by Max Kanat-Alexander <https://metacpan.org/author/MKANAT>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2025, David Dick \f(CW\*(C`<ddick@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.
.PP
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.
