.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Storage::TxnScopeGuard 3pm"
.TH DBIx::Class::Storage::TxnScopeGuard 3pm 2022-05-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBIx::Class::Storage::TxnScopeGuard \- Scope\-based transaction handling
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& sub foo {
\&   my ($self, $schema) = @_;
\&
\&   my $guard = $schema\->txn_scope_guard;
\&
\&   # Multiple database operations here
\&
\&   $guard\->commit;
\& }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
An object that behaves much like Scope::Guard, but hardcoded to do the
right thing with transactions in DBIx::Class.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
Creating an instance of this class will start a new transaction (by
implicitly calling "txn_begin" in DBIx::Class::Storage. Expects a
DBIx::Class::Storage object as its only argument.
.SS commit
.IX Subsection "commit"
Commit the transaction, and stop guarding the scope. If this method is not
called and this object goes out of scope (e.g. an exception is thrown) then
the transaction is rolled back, via "txn_rollback" in DBIx::Class::Storage
.SH "SEE ALSO"
.IX Header "SEE ALSO"
"txn_scope_guard" in DBIx::Class::Schema.
.PP
Scope::Guard by chocolateboy (inspiration for this module)
.SH "FURTHER QUESTIONS?"
.IX Header "FURTHER QUESTIONS?"
Check the list of additional DBIC resources.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This module is free software copyright
by the DBIx::Class (DBIC) authors. You can
redistribute it and/or modify it under the same terms as the
DBIx::Class library.
