.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Parser::DBI::PostgreSQL 3pm"
.TH SQL::Translator::Parser::DBI::PostgreSQL 3pm 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SQL::Translator::Parser::DBI::PostgreSQL \- parser for DBD::Pg
.SH SYNOPSIS
.IX Header "SYNOPSIS"
See SQL::Translator::Parser::DBI.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Uses DBI to query PostgreSQL system tables to determine schema structure.
.SH CONFIGURATION
.IX Header "CONFIGURATION"
You can specify the following for "parser_args" in SQL::Translator :
.SS deconstruct_enum_types
.IX Subsection "deconstruct_enum_types"
If set to a true value, the parser will look for column types which are user-defined Enums,
and generate a column definition like:
.PP
.Vb 7
\&  {
\&    data_type => \*(Aqenum\*(Aq,
\&    extra => {
\&      custom_type_name => \*(AqMyEnumType\*(Aq,
\&      list => [ \*(Aqenum_val_1\*(Aq, \*(Aqenum_val_2\*(Aq, ... ],
\&    }
\&  }
.Ve
.PP
This makes a proper round-trip with SQL::Translator::Producer::PostgreSQL (which re-creates the
custom enum type if \f(CW\*(C`producer_args\->{postgres_version} >= 8.003\*(C'\fR) and can be translated to
other engines.
.PP
If the option is false (the default) you would just get
.PP
.Vb 1
\&  { data_type => \*(AqMyEnumType\*(Aq }
.Ve
.PP
with no provided method to translate it to other SQL engines.
.SH AUTHOR
.IX Header "AUTHOR"
Scott Cain <cain@cshl.edu>, previous author:
Paul Harrington <harringp@deshaw.com>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Translator, DBD::Pg.
