.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Component::InstancePerContext 3pm"
.TH Catalyst::Component::InstancePerContext 3pm 2007-06-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Catalyst::Component::InstancePerContext \-
Return a new instance a component on each request
.SH SYNOPSYS
.IX Header "SYNOPSYS"
.Vb 3
\&    package MyComponent;
\&    use Moose;
\&    with \*(AqCatalyst::Component::InstancePerContext\*(Aq;
\&
\&    sub build_per_context_instance{
\&        my ($self, $c) = @_;
\&        # ... do your thing here
\&        return SomeModule\->new(%args);
\&    }
.Ve
.SH "REQUIRED METHODS"
.IX Header "REQUIRED METHODS"
Your consuming class \fBmust\fR implement the following method.
.SS build_per_context_instance
.IX Subsection "build_per_context_instance"
The value returned by this call is what you will recieve when you call
\&\f(CW$c\fR\->component('YourComponent').
.SH "PROVIDED METHODS"
.IX Header "PROVIDED METHODS"
This role will add the following method to your consuming class.
.SS ACCEPT_CONTEXT
.IX Subsection "ACCEPT_CONTEXT"
If the context is not blessed, it will simple pass through the value of
\&\f(CW\*(C`build_per_context_instance\*(C'\fR. If context is blessed it will look in the
\&\f(CW\*(C`stash\*(C'\fR for an instance of the requested component and return that or,
if the value is not found, the value returned by \f(CW\*(C`build_per_context_instance\*(C'\fR
will be stored and return.
.PP
The idea behind this behavior is that a component can be built on a
per-request basis, as the name of this module implies.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose, Moose::Role, Catalyst::Component
.SH AUTHOR
.IX Header "AUTHOR"
Guillermo Roditi (groditi) <groditi@cpan.org>
.SH LICENSE
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
