.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::Sort 3pm"
.TH Tree::Simple::Visitor::Sort 3pm 2021-02-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tree::Simple::Visitor::Sort \- A Visitor for sorting a Tree::Simple object hierarchy
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::Sort;
\&
\&  # create a visitor object
\&  my $visitor = Tree::Simple::Visitor::Sort\->new();
\&
\&  $tree\->accept($visitor);
\&  # the tree is now sorted ascii\-betically
\&
\&  # set the sort function to
\&  # use a numeric comparison
\&  $visitor\->setSortFunction($visitor\->NUMERIC);
\&
\&  $tree\->accept($visitor);
\&  # the tree is now sorted numerically
\&
\&  # set a custom sort function
\&  $visitor\->setSortFunction(sub {
\&        my ($left, $right) = @_;
\&        lc($left\->getNodeValue()\->{name}) cmp lc($right\->getNodeValue()\->{name});
\&  });
\&
\&  $tree\->accept($visitor);
\&  # the tree\*(Aqs node are now sorted appropriately
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This implements a recursive multi-level sort of a Tree::Simple hierarchy. I think this deserves some more explanation, and the best way to do that is visually.
.PP
Given the tree:
.PP
.Vb 10
\&    1
\&        1.3
\&        1.2
\&            1.2.2
\&            1.2.1
\&        1.1
\&    4
\&        4.1
\&    2
\&        2.1
\&    3
\&        3.3
\&        3.2
\&        3.1
.Ve
.PP
A normal sort would produce the following tree:
.PP
.Vb 10
\&    1
\&        1.1
\&        1.2
\&            1.2.1
\&            1.2.2
\&        1.3
\&    2
\&        2.1
\&    3
\&        3.1
\&        3.2
\&        3.3
\&    4
\&        4.1
.Ve
.PP
A sort using the built-in REVERSE sort function would produce the following tree:
.PP
.Vb 10
\&    4
\&        4.1
\&    3
\&        3.3
\&        3.2
\&        3.1
\&    2
\&        2.1
\&    1
\&        1.3
\&        1.2
\&            1.2.2
\&            1.2.1
\&        1.1
.Ve
.PP
As you can see, no node is moved up or down from it's current depth, but sorted with it's siblings. Flexible customized sorting is possible within this framework, however, this cannot be used for tree-balancing or anything as complex as that.
.SH METHODS
.IX Header "METHODS"
.IP \fBnew\fR 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR and \f(CW\*(C`setSortFunction\*(C'\fR methods to customize its behavior.
.IP "\fBincludeTrunk ($boolean)\fR" 4
.IX Item "includeTrunk ($boolean)"
Based upon the value of \f(CW$boolean\fR, this will tell the visitor to include the trunk of the tree in the sort as well.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a CODE reference as it's \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are sorted. This can be used to gather specific information from a more complex tree node. The filter function should accept a single argument, which is the current Tree::Simple object.
.IP "\fBsetSortFunction ($sort_function)\fR" 4
.IX Item "setSortFunction ($sort_function)"
This method accepts a CODE reference as it's \f(CW$sort_function\fR argument and throws an exception if it is not a code reference.  The \f(CW$sort_function\fR is used by perl's builtin \f(CW\*(C`sort\*(C'\fR routine to sort each level of the tree. The \f(CW$sort_function\fR is passed two Tree::Simple objects, and must return 1 (greater than), 0 (equal to) or \-1 (less than). The sort function will override and bypass any node filters which have been applied (see \f(CW\*(C`setNodeFilter\*(C'\fR method above), they cannot be used together.
.Sp
Several pre-built sort functions are provided. All of these functions assume that calling \f(CW\*(C`getNodeValue\*(C'\fR on the Tree::Simple object will return a suitable sortable value.
.RS 4
.IP REVERSE 4
.IX Item "REVERSE"
This is the reverse of the normal sort using \f(CW\*(C`cmp\*(C'\fR.
.IP NUMERIC 4
.IX Item "NUMERIC"
This uses the numeric comparison operator \f(CW\*(C`<=>\*(C'\fR to sort.
.IP REVERSE_NUMERIC 4
.IX Item "REVERSE_NUMERIC"
The reverse of the above.
.IP ALPHABETICAL 4
.IX Item "ALPHABETICAL"
This lowercases the node value before using \f(CW\*(C`cmp\*(C'\fR to sort. This results in a true alphabetical sorting.
.IP REVERSE_ALPHABETICAL 4
.IX Item "REVERSE_ALPHABETICAL"
The reverse of the above.
.RE
.RS 4
.Sp
If you need to implement one of these sorting routines, but need special handling of your Tree::Simple objects (such as would be done with a node filter), I suggest you read the source code and copy and modify your own sort routine. If it is requested enough I will provide this feature in future versions, but for now I am not sure there is a large need.
.RE
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by Tree::Simple's \f(CW\*(C`accept\*(C'\fR method. It can also be used on its own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple object), and will throw and exception otherwise.
.Sp
It should be noted that this is a \fIdestructive\fR action, since the sort happens \fIin place\fR and does not produce a copy of the tree.
.SH Repository
.IX Header "Repository"
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory>
.SH SUPPORT
.IX Header "SUPPORT"
Bugs should be reported via the CPAN bug tracker at
.PP
<https://github.com/ronsavage/Tree\-Simple\-VisitorFactory/issues>
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fBCODE COVERAGE\fR section in Tree::Simple::VisitorFactory for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the \fBTree::Simple\fR module, you should refer to that module for more information.
.SH ACKNOWLEDGEMENTS
.IX Header "ACKNOWLEDGEMENTS"
.IP "Thanks to Vitor Mori for the idea and much of the code for this Visitor." 4
.IX Item "Thanks to Vitor Mori for the idea and much of the code for this Visitor."
.SH AUTHORS
.IX Header "AUTHORS"
Vitor Mori, <vvvv767@hotmail.com>
.PP
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Vitor Mori & Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
