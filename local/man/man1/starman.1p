.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STARMAN 1p"
.TH STARMAN 1p 2023-09-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
starman \- Starman launcher
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  starman \-\-listen :5001 \-\-listen /tmp/starman.sock
\&  starman \-\-workers 32 \-\-port 8080
.Ve
.SH OPTIONS
.IX Header "OPTIONS"
.IP "\-l, \-\-listen" 4
.IX Item "-l, --listen"
.Vb 2
\&  \-\-listen HOST:PORT \-\-listen :PORT \-\-listen UNIX_SOCKET
\&  \-\-listen HOST:PORT:ssl
.Ve
.Sp
Specifies the TCP address, ports and UNIX domain sockets to bind to
wait for requests. You can repeat as many times as you want and mix
TCP and UNIX domain sockets.
.Sp
For TCP sockets you can append \f(CW\*(C`:ssl\*(C'\fR after the port to specify that
connections on that port should use SSL. Note that the SSL support is
experimental and hasn't been widely tested.
.Sp
Defaults to any IP address and port 5000.
.IP \-\-host 4
.IX Item "--host"
.Vb 1
\&  \-\-host 127.0.0.1
.Ve
.Sp
Specifies the address to bind.
.Sp
This option is for a compatibility with plackup and you're
recommended to use \f(CW\*(C`\-\-listen\*(C'\fR instead.
.IP \-\-port 4
.IX Item "--port"
.Vb 1
\&  \-\-port 8080
.Ve
.Sp
Specifies the port to bind.
.Sp
This option is for a compatibility with plackup and you're
recommended to use \f(CW\*(C`\-\-listen\*(C'\fR instead.
.IP "\-S, \-\-socket" 4
.IX Item "-S, --socket"
.Vb 1
\&  \-S /tmp/starman.sock
.Ve
.Sp
Specifies the path to UNIX domain socket to bind.
.Sp
This option is for a compatibility with plackup and you're
recommended to use \f(CW\*(C`\-\-listen\*(C'\fR instead.
.IP \-\-workers 4
.IX Item "--workers"
Specifies the number of worker pool. Defaults to 5.
.Sp
Starman by default sets up other spare server configuration based on this
workers value, making sure there are \fBalways only\fR \f(CW\*(C`N\*(C'\fR worker
processes running. So even if there're no idle workers, Starman won't
spawn off spare processes since that's mostly what you want to do by
fine tuning the memory usage etc. in the production environment.
.IP \-\-backlog 4
.IX Item "--backlog"
Specifies the number of backlog (listen queue size) of listener sockets. Defaults to 1024.
.Sp
On production systems, setting a very low value can allow failover on
frontend proxy (like nginx) to happen more quickly, if you have
multiple Starman clusters.
.Sp
If you're doing simple benchmarks and getting connection errors,
increasing this parameter can help avoid them. You should also
consider increasing \f(CW\*(C`net.core.somaxconn\*(C'\fR. Note that this is not
recommended for real production system if you have another cluster to
failover (see above).
.IP \-\-max\-requests 4
.IX Item "--max-requests"
Number of the requests to process per one worker process. Defaults to 1000.
.IP \-\-preload\-app 4
.IX Item "--preload-app"
This option lets Starman preload the specified PSGI application in the
master parent process before preforking children. This allows memory
savings with copy-on-write memory management. When not set (default),
forked children loads the application in the initialization hook.
.Sp
Enabling this option can cause bad things happen when resources like
sockets or database connections are opened at load time by the master
process and shared by multiple children.
.Sp
Since Starman 0.2000, this option defaults to false, and you should
explicitly set this option to preload the application in the master
process.
.Sp
Alternatively, you can use \-M command line option (plackup's common
option) to preload the \fImodules\fR rather than the <application>
itself.
.Sp
.Vb 1
\&  starman \-MCatalyst \-MDBIx::Class myapp.psgi
.Ve
.Sp
will load the modules in the master process for memory savings with
CoW, but the actual loading of \f(CW\*(C`myapp.psgi\*(C'\fR is done per children,
allowing resource managements such as database connection safer.
.Sp
If you enable this option, sending \f(CW\*(C`HUP\*(C'\fR signal to the master process
\&\fIwill not\fR pick up any code changes you make. See "SIGNALS" for
details.
.IP \-\-disable\-keepalive 4
.IX Item "--disable-keepalive"
Disable Keep-alive persistent connections. It is an useful workaround
if you run Starman behind a broken frontend proxy that tries to pool
connections more than a number of backend workers (i.e. Apache
mpm_prefork + mod_proxy).
.IP \-\-keepalive\-timeout 4
.IX Item "--keepalive-timeout"
The number of seconds Starman will wait for a subsequent request
before closing the connection if Keep-alive persistent connections
are enabled. Setting this to a high value may cause performance
problems in heavily loaded servers. The higher the timeout, the
more backend workers will be kept occupied waiting on connections
with idle clients.
.Sp
Defaults to 1.
.IP \-\-read\-timeout 4
.IX Item "--read-timeout"
The number of seconds Starman will wait for a request on a new connection
before closing it. Setting this to a high value may cause performance
problems in heavily loaded servers. The higher the timeout, the
more backend workers will be kept occupied waiting on connections
with idle clients. You may need this if your proxy / load balancer likes to
keep a pool of open connections while waiting for clients (eg. Amazon ELB).
.Sp
Defaults to 5.
.IP \-\-user 4
.IX Item "--user"
To listen on a low-numbered (<1024) port, it will be necessary to
start the server as root. Use the \f(CW\*(C`\-\-user\*(C'\fR option to specify a userid
or username that the server process should switch to after binding to
the port.
.Sp
Defaults to the current userid.
.IP \-\-group 4
.IX Item "--group"
Specify the group id or group name that the server should switch to after
binding to the port.  This option is usually used with \f(CW\*(C`\-\-user\*(C'\fR.
.Sp
Defaults to the current group id.
.IP \-\-pid 4
.IX Item "--pid"
Specify the pid file path. Use it with \f(CW\*(C`\-D|\-\-daemonize\*(C'\fR option,
described in \f(CW\*(C`plackup \-h\*(C'\fR.
.IP \-\-error\-log 4
.IX Item "--error-log"
Specify the pathname of a file where the error log should be written.
This enables you to still have access to the errors when using \f(CW\*(C`\-\-daemonize\*(C'\fR.
.IP \-\-ssl\-cert 4
.IX Item "--ssl-cert"
Specify the path to SSL certificate file.
.IP \-\-ssl\-key 4
.IX Item "--ssl-key"
Specify the path to SSL key file.
.IP \-\-enable\-ssl 4
.IX Item "--enable-ssl"
Enable SSL on \fIall\fR TCP sockets. This is an experimental feature.
.IP \-\-disable\-proctitle 4
.IX Item "--disable-proctitle"
Disable the behavior to set proctitle to "starman (master)" and
"starman (worker)" respectively on master and workers.
.PP
Starman passes through other options given to Plack::Runner, the
common backend that plackup uses, so the most options explained in
\&\f(CW\*(C`plackup \-h\*(C'\fR such as \f(CW\*(C`\-\-access\-log\*(C'\fR or \f(CW\*(C`\-\-daemonize\*(C'\fR works fine in
starman too.
.PP
Setting the environment variable \f(CW\*(C`STARMAN_DEBUG\*(C'\fR to 1 makes the
Starman server running in the debug mode.
.SH SIGNALS
.IX Header "SIGNALS"
.IP HUP 4
.IX Item "HUP"
Sending \f(CW\*(C`HUP\*(C'\fR signal to the master process will restart all the workers
gracefully (meaning the currently running requests will shut down once
the request is complete), and by default, the workers will pick up the
code changes you make by reloading the application.
.Sp
If you enable \f(CW\*(C`\-\-preload\-app\*(C'\fR option, however, the code will be only
loaded in the startup process and will not pick up the code changes
you made. If you want to preload the app \fIand\fR do graceful restarts
by reloading the code changes, you're recommended to use
Server::Starter, configured to send \f(CW\*(C`QUIT\*(C'\fR signal when superdaemon
received \f(CW\*(C`HUP\*(C'\fR, i.e:
.Sp
.Vb 2
\&    start_server \-\-interval 5 \-\-port 8080 \-\-signal\-on\-hup=QUIT \-\- \e
\&      starman \-\-preload\-app myapp.psgi
.Ve
.Sp
You will then send the HUP signal to \f(CW\*(C`start_server\*(C'\fR process to
gracefully reload the starman cluster (master and workers).
.Sp
With Server::Starter 0.12 or later, you should also be able to set
\&\f(CW\*(C`\-\-signal\-on\-term\*(C'\fR to QUIT so that you can safely shutdown Starman
first and then stop the \f(CW\*(C`start_server\*(C'\fR daemon process as well.
.IP "TTIN, TTOU" 4
.IX Item "TTIN, TTOU"
Sending \f(CW\*(C`TTIN\*(C'\fR signal to the master process will dynamically increase
the number of workers, and \f(CW\*(C`TTOU\*(C'\fR signal will decrease it.
.IP "INT, TERM" 4
.IX Item "INT, TERM"
Sending \f(CW\*(C`INT\*(C'\fR or \f(CW\*(C`TERM\*(C'\fR signal to the master process will kill all
the workers immediately and shut down the server.
.IP QUIT 4
.IX Item "QUIT"
Sending \f(CW\*(C`QUIT\*(C'\fR signal to the master process will gracefully shutdown
the workers (meaning the currently running requests will shut down
once the request is complete).
.SH "RELOADING THE APPLICATION"
.IX Header "RELOADING THE APPLICATION"
You're recommended to use signals (see above) to reload the
application, and are strongly discouraged to use \f(CW\*(C`\-r\*(C'\fR or \f(CW\*(C`\-R\*(C'\fR
(reloading flag) from plackup. These options will make a separate
directory watcher process, and makes your life difficult if you want to
combine with other process daemon tools such as Server::Starter.
.SH "DIFFERENCES WITH PLACKUP"
.IX Header "DIFFERENCES WITH PLACKUP"
\&\f(CW\*(C`starman\*(C'\fR executable is basically the equivalent of using \f(CW\*(C`plackup\*(C'\fR
with \f(CW\*(C`Starman\*(C'\fR server handler i.e. \f(CW\*(C`plackup \-s Starman\*(C'\fR, except that
\&\f(CW\*(C`starman\*(C'\fR delay loads the application with the Delayed loader by
default, which can be disabled with \f(CW\*(C`\-\-preload\-app\*(C'\fR.
.PP
\&\f(CW\*(C`starman\*(C'\fR command also automatically sets the environment (\f(CW\*(C`\-E\*(C'\fR) to
the value of \fIdeployment\fR.
.PP
You're recommended to use \f(CW\*(C`starman\*(C'\fR unless there's a reason to stick to
\&\f(CW\*(C`plackup\*(C'\fR for compatibility.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Starman
