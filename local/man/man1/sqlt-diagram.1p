.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SQLT-DIAGRAM 1p"
.TH SQLT-DIAGRAM 1p 2024-11-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
sqlt\-diagram \- Automatically create a diagram from a database schema
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  ./sqlt\-diagram \-d|\-f|\-\-from|\-\-db=db_parser [options] schema.sql
\&
\&  Options:
\&
\&    \-o|\-\-output        Output file name (default STDOUT)
\&    \-i|\-\-image         Output image type ("png" or "jpeg," default "png")
\&    \-t|\-\-title         Title to give schema
\&    \-c|\-\-cols          Number of columns
\&    \-n|\-\-no\-lines      Don\*(Aqt draw lines
\&    \-\-font\-size        Font size ("small," "medium," "large," or "huge,"
\&                       default "medium")
\&    \-\-gutter           Gutter size between tables
\&    \-\-color            Add colors
\&    \-\-show\-fk\-only     Only show fields that act as primary
\&                       or foreign keys
\&
\&    \-\-natural\-join     Perform natural joins
\&    \-\-natural\-join\-pk  Perform natural joins from primary keys only
\&    \-s|\-\-skip          Fields to skip in natural joins
\&    \-\-skip\-tables      Comma\-separated list of table names to exclude
\&    \-\-skip\-tables\-like Comma\-separated list of regexen to exclude tables
\&    \-\-debug            Print debugging information
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This script will create a picture of your schema.  Only the database
driver argument (for SQL::Translator) is required.  If no output file
name is given, then image will be printed to STDOUT, so you should
redirect the output into a file.
.PP
The default action is to assume the presence of foreign key
relationships defined via "REFERENCES" or "FOREIGN KEY" constraints on
the tables.  If you are parsing the schema of a file that does not
have these, you will find the natural join options helpful.  With
natural joins, like-named fields will be considered foreign keys.
This can prove too permissive, however, as you probably don't want a
field called "name" to be considered a foreign key, so you could
include it in the "skip" option, and all fields called "name" will be
excluded from natural joins.  A more efficient method, however, might
be to simply deduce the foreign keys from primary keys to other fields
named the same in other tables.  Use the "natural-join-pk" option
to achieve this.
.SH AUTHOR
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.
